
nucleo_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012540  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  08012720  08012720  00013720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801332c  0801332c  00015110  2**0
                  CONTENTS
  4 .ARM          00000008  0801332c  0801332c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013334  08013334  00015110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013334  08013334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801333c  0801333c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08013340  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ab38  20000110  08013450  00015110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000ac48  08013450  00015c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020daf  00000000  00000000  00015140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a0c  00000000  00000000  00035eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  0003a900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000148d  00000000  00000000  0003c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c608  00000000  00000000  0003d83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020cb6  00000000  00000000  00069e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110ee2  00000000  00000000  0008aafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0019b9dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ca8  00000000  00000000  0019ba54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001a36fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000110 	.word	0x20000110
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012708 	.word	0x08012708

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000114 	.word	0x20000114
 800021c:	08012708 	.word	0x08012708

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000684:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <MX_FREERTOS_Init+0x18>)
 8000686:	2100      	movs	r1, #0
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_FREERTOS_Init+0x1c>)
 800068a:	f005 f943 	bl	8005914 <osThreadNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a03      	ldr	r2, [pc, #12]	@ (80006a0 <MX_FREERTOS_Init+0x20>)
 8000692:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	080127b8 	.word	0x080127b8
 800069c:	080006a5 	.word	0x080006a5
 80006a0:	20000188 	.word	0x20000188

080006a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b090      	sub	sp, #64	@ 0x40
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	61f8      	str	r0, [r7, #28]
    /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
    // micro-ROS configuration

    rmw_uros_set_custom_transport(
 80006ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000798 <StartDefaultTask+0xf4>)
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	4b3a      	ldr	r3, [pc, #232]	@ (800079c <StartDefaultTask+0xf8>)
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4b3a      	ldr	r3, [pc, #232]	@ (80007a0 <StartDefaultTask+0xfc>)
 80006b6:	4a3b      	ldr	r2, [pc, #236]	@ (80007a4 <StartDefaultTask+0x100>)
 80006b8:	493b      	ldr	r1, [pc, #236]	@ (80007a8 <StartDefaultTask+0x104>)
 80006ba:	2001      	movs	r0, #1
 80006bc:	f008 f9c0 	bl	8008a40 <rmw_uros_set_custom_transport>
      cubemx_transport_open,
      cubemx_transport_close,
      cubemx_transport_write,
      cubemx_transport_read);

    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f008 f927 	bl	8008918 <rcutils_get_zero_initialized_allocator>
    freeRTOS_allocator.allocate = microros_allocate;
 80006ca:	4b38      	ldr	r3, [pc, #224]	@ (80007ac <StartDefaultTask+0x108>)
 80006cc:	623b      	str	r3, [r7, #32]
    freeRTOS_allocator.deallocate = microros_deallocate;
 80006ce:	4b38      	ldr	r3, [pc, #224]	@ (80007b0 <StartDefaultTask+0x10c>)
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
    freeRTOS_allocator.reallocate = microros_reallocate;
 80006d2:	4b38      	ldr	r3, [pc, #224]	@ (80007b4 <StartDefaultTask+0x110>)
 80006d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80006d6:	4b38      	ldr	r3, [pc, #224]	@ (80007b8 <StartDefaultTask+0x114>)
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	4618      	mov	r0, r3
 80006e0:	f008 f928 	bl	8008934 <rcutils_set_default_allocator>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d003      	beq.n	80006f8 <StartDefaultTask+0x54>
        printf("Error on default allocators (line %d)\n", __LINE__);
 80006f0:	21a5      	movs	r1, #165	@ 0xa5
 80006f2:	4832      	ldr	r0, [pc, #200]	@ (80007bc <StartDefaultTask+0x118>)
 80006f4:	f010 ff8e 	bl	8011614 <iprintf>
    }

    // micro-ROS app
    allocator = rcl_get_default_allocator();
 80006f8:	4c31      	ldr	r4, [pc, #196]	@ (80007c0 <StartDefaultTask+0x11c>)
 80006fa:	463b      	mov	r3, r7
 80006fc:	4618      	mov	r0, r3
 80006fe:	f008 f937 	bl	8008970 <rcutils_get_default_allocator>
 8000702:	4625      	mov	r5, r4
 8000704:	463c      	mov	r4, r7
 8000706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070a:	6823      	ldr	r3, [r4, #0]
 800070c:	602b      	str	r3, [r5, #0]

    // Initialize and modify options (Set DOMAIN ID to 73)
    init_options = rcl_get_zero_initialized_init_options();
 800070e:	f007 fe63 	bl	80083d8 <rcl_get_zero_initialized_init_options>
 8000712:	4603      	mov	r3, r0
 8000714:	4a2b      	ldr	r2, [pc, #172]	@ (80007c4 <StartDefaultTask+0x120>)
 8000716:	6013      	str	r3, [r2, #0]
    RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8000718:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <StartDefaultTask+0x11c>)
 800071a:	466c      	mov	r4, sp
 800071c:	f103 020c 	add.w	r2, r3, #12
 8000720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000724:	e884 0003 	stmia.w	r4, {r0, r1}
 8000728:	cb0e      	ldmia	r3, {r1, r2, r3}
 800072a:	4826      	ldr	r0, [pc, #152]	@ (80007c4 <StartDefaultTask+0x120>)
 800072c:	f007 fe56 	bl	80083dc <rcl_init_options_init>
    RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 10));
 8000730:	210a      	movs	r1, #10
 8000732:	4824      	ldr	r0, [pc, #144]	@ (80007c4 <StartDefaultTask+0x120>)
 8000734:	f007 ff4e 	bl	80085d4 <rcl_init_options_set_domain_id>

    //create init_options
    RCSOFTCHECK(rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator));
 8000738:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <StartDefaultTask+0x11c>)
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <StartDefaultTask+0x120>)
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	4821      	ldr	r0, [pc, #132]	@ (80007c8 <StartDefaultTask+0x124>)
 8000744:	f008 f83c 	bl	80087c0 <rclc_support_init_with_options>

    // create node
    rclc_node_init_default(&node, "eiei_node", "", &support);
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <StartDefaultTask+0x124>)
 800074a:	4a20      	ldr	r2, [pc, #128]	@ (80007cc <StartDefaultTask+0x128>)
 800074c:	4920      	ldr	r1, [pc, #128]	@ (80007d0 <StartDefaultTask+0x12c>)
 800074e:	4821      	ldr	r0, [pc, #132]	@ (80007d4 <StartDefaultTask+0x130>)
 8000750:	f008 f86a 	bl	8008828 <rclc_node_init_default>
    // create publisher
    rclc_publisher_init_default(
 8000754:	f009 fa2a 	bl	8009bac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000758:	4602      	mov	r2, r0
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <StartDefaultTask+0x134>)
 800075c:	491d      	ldr	r1, [pc, #116]	@ (80007d4 <StartDefaultTask+0x130>)
 800075e:	481f      	ldr	r0, [pc, #124]	@ (80007dc <StartDefaultTask+0x138>)
 8000760:	f008 f89e 	bl	80088a0 <rclc_publisher_init_default>
      &publisher,
      &node,
      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
      "cubemx_publisher");

    msg.data = 0;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <StartDefaultTask+0x13c>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]

	for(;;)
	{
    	rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 800076a:	2200      	movs	r2, #0
 800076c:	491c      	ldr	r1, [pc, #112]	@ (80007e0 <StartDefaultTask+0x13c>)
 800076e:	481b      	ldr	r0, [pc, #108]	@ (80007dc <StartDefaultTask+0x138>)
 8000770:	f008 f802 	bl	8008778 <rcl_publish>
 8000774:	6378      	str	r0, [r7, #52]	@ 0x34
		if (ret != RCL_RET_OK)
 8000776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000778:	2b00      	cmp	r3, #0
 800077a:	d003      	beq.n	8000784 <StartDefaultTask+0xe0>
		{
		printf("Error publishing (line %d)\n", __LINE__);
 800077c:	21c3      	movs	r1, #195	@ 0xc3
 800077e:	4819      	ldr	r0, [pc, #100]	@ (80007e4 <StartDefaultTask+0x140>)
 8000780:	f010 ff48 	bl	8011614 <iprintf>
		}
		msg.data++;
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <StartDefaultTask+0x13c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a15      	ldr	r2, [pc, #84]	@ (80007e0 <StartDefaultTask+0x13c>)
 800078c:	6013      	str	r3, [r2, #0]
		osDelay(10);
 800078e:	200a      	movs	r0, #10
 8000790:	f005 f952 	bl	8005a38 <osDelay>
	{
 8000794:	e7e9      	b.n	800076a <StartDefaultTask+0xc6>
 8000796:	bf00      	nop
 8000798:	08000d9d 	.word	0x08000d9d
 800079c:	08000d39 	.word	0x08000d39
 80007a0:	08000d19 	.word	0x08000d19
 80007a4:	08000ced 	.word	0x08000ced
 80007a8:	20004544 	.word	0x20004544
 80007ac:	0800100d 	.word	0x0800100d
 80007b0:	08001051 	.word	0x08001051
 80007b4:	08001089 	.word	0x08001089
 80007b8:	080010f5 	.word	0x080010f5
 80007bc:	0801272c 	.word	0x0801272c
 80007c0:	2000016c 	.word	0x2000016c
 80007c4:	2000012c 	.word	0x2000012c
 80007c8:	20000138 	.word	0x20000138
 80007cc:	08012754 	.word	0x08012754
 80007d0:	08012758 	.word	0x08012758
 80007d4:	20000180 	.word	0x20000180
 80007d8:	08012764 	.word	0x08012764
 80007dc:	20000130 	.word	0x20000130
 80007e0:	20000134 	.word	0x20000134
 80007e4:	08012778 	.word	0x08012778

080007e8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80007f4:	f006 f962 	bl	8006abc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80007f8:	4b5a      	ldr	r3, [pc, #360]	@ (8000964 <pvPortMallocMicroROS+0x17c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d101      	bne.n	8000804 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000800:	f000 f986 	bl	8000b10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000804:	4b58      	ldr	r3, [pc, #352]	@ (8000968 <pvPortMallocMicroROS+0x180>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4013      	ands	r3, r2
 800080c:	2b00      	cmp	r3, #0
 800080e:	f040 8090 	bne.w	8000932 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d01e      	beq.n	8000856 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000818:	2208      	movs	r2, #8
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	2b00      	cmp	r3, #0
 8000828:	d015      	beq.n	8000856 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f023 0307 	bic.w	r3, r3, #7
 8000830:	3308      	adds	r3, #8
 8000832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00b      	beq.n	8000856 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800083e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000842:	f383 8811 	msr	BASEPRI, r3
 8000846:	f3bf 8f6f 	isb	sy
 800084a:	f3bf 8f4f 	dsb	sy
 800084e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	e7fd      	b.n	8000852 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d06a      	beq.n	8000932 <pvPortMallocMicroROS+0x14a>
 800085c:	4b43      	ldr	r3, [pc, #268]	@ (800096c <pvPortMallocMicroROS+0x184>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	d865      	bhi.n	8000932 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000866:	4b42      	ldr	r3, [pc, #264]	@ (8000970 <pvPortMallocMicroROS+0x188>)
 8000868:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800086a:	4b41      	ldr	r3, [pc, #260]	@ (8000970 <pvPortMallocMicroROS+0x188>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000870:	e004      	b.n	800087c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000874:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800087c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	429a      	cmp	r2, r3
 8000884:	d903      	bls.n	800088e <pvPortMallocMicroROS+0xa6>
 8000886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1f1      	bne.n	8000872 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800088e:	4b35      	ldr	r3, [pc, #212]	@ (8000964 <pvPortMallocMicroROS+0x17c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000894:	429a      	cmp	r2, r3
 8000896:	d04c      	beq.n	8000932 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2208      	movs	r2, #8
 800089e:	4413      	add	r3, r2
 80008a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80008a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	6a3b      	ldr	r3, [r7, #32]
 80008a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80008aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	1ad2      	subs	r2, r2, r3
 80008b2:	2308      	movs	r3, #8
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d920      	bls.n	80008fc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80008ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4413      	add	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	f003 0307 	and.w	r3, r3, #7
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d00b      	beq.n	80008e4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80008cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008d0:	f383 8811 	msr	BASEPRI, r3
 80008d4:	f3bf 8f6f 	isb	sy
 80008d8:	f3bf 8f4f 	dsb	sy
 80008dc:	613b      	str	r3, [r7, #16]
}
 80008de:	bf00      	nop
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80008e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	1ad2      	subs	r2, r2, r3
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80008f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80008f6:	69b8      	ldr	r0, [r7, #24]
 80008f8:	f000 f96c 	bl	8000bd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <pvPortMallocMicroROS+0x184>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	4a19      	ldr	r2, [pc, #100]	@ (800096c <pvPortMallocMicroROS+0x184>)
 8000908:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800090a:	4b18      	ldr	r3, [pc, #96]	@ (800096c <pvPortMallocMicroROS+0x184>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <pvPortMallocMicroROS+0x18c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	429a      	cmp	r2, r3
 8000914:	d203      	bcs.n	800091e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <pvPortMallocMicroROS+0x184>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a16      	ldr	r2, [pc, #88]	@ (8000974 <pvPortMallocMicroROS+0x18c>)
 800091c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800091e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000920:	685a      	ldr	r2, [r3, #4]
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <pvPortMallocMicroROS+0x180>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	431a      	orrs	r2, r3
 8000928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000932:	f006 f8d1 	bl	8006ad8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	f003 0307 	and.w	r3, r3, #7
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00b      	beq.n	8000958 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000944:	f383 8811 	msr	BASEPRI, r3
 8000948:	f3bf 8f6f 	isb	sy
 800094c:	f3bf 8f4f 	dsb	sy
 8000950:	60fb      	str	r3, [r7, #12]
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000958:	69fb      	ldr	r3, [r7, #28]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3728      	adds	r7, #40	@ 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20003cd0 	.word	0x20003cd0
 8000968:	20003cdc 	.word	0x20003cdc
 800096c:	20003cd4 	.word	0x20003cd4
 8000970:	20003cc8 	.word	0x20003cc8
 8000974:	20003cd8 	.word	0x20003cd8

08000978 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d04a      	beq.n	8000a20 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800098a:	2308      	movs	r3, #8
 800098c:	425b      	negs	r3, r3
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	4413      	add	r3, r2
 8000992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <vPortFreeMicroROS+0xb0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4013      	ands	r3, r2
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10b      	bne.n	80009be <vPortFreeMicroROS+0x46>
	__asm volatile
 80009a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009aa:	f383 8811 	msr	BASEPRI, r3
 80009ae:	f3bf 8f6f 	isb	sy
 80009b2:	f3bf 8f4f 	dsb	sy
 80009b6:	60fb      	str	r3, [r7, #12]
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	e7fd      	b.n	80009ba <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00b      	beq.n	80009de <vPortFreeMicroROS+0x66>
	__asm volatile
 80009c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009ca:	f383 8811 	msr	BASEPRI, r3
 80009ce:	f3bf 8f6f 	isb	sy
 80009d2:	f3bf 8f4f 	dsb	sy
 80009d6:	60bb      	str	r3, [r7, #8]
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	e7fd      	b.n	80009da <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <vPortFreeMicroROS+0xb0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4013      	ands	r3, r2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d019      	beq.n	8000a20 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d115      	bne.n	8000a20 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <vPortFreeMicroROS+0xb0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	401a      	ands	r2, r3
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000a04:	f006 f85a 	bl	8006abc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <vPortFreeMicroROS+0xb4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a06      	ldr	r2, [pc, #24]	@ (8000a2c <vPortFreeMicroROS+0xb4>)
 8000a14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000a16:	6938      	ldr	r0, [r7, #16]
 8000a18:	f000 f8dc 	bl	8000bd4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000a1c:	f006 f85c 	bl	8006ad8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000a20:	bf00      	nop
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20003cdc 	.word	0x20003cdc
 8000a2c:	20003cd4 	.word	0x20003cd4

08000a30 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	425b      	negs	r3, r3
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	4413      	add	r3, r2
 8000a44:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <getBlockSize+0x38>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4013      	ands	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]

	return count;
 8000a58:	68fb      	ldr	r3, [r7, #12]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	371c      	adds	r7, #28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20003cdc 	.word	0x20003cdc

08000a6c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a76:	f006 f821 	bl	8006abc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000a7a:	6838      	ldr	r0, [r7, #0]
 8000a7c:	f7ff feb4 	bl	80007e8 <pvPortMallocMicroROS>
 8000a80:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d017      	beq.n	8000ab8 <pvPortReallocMicroROS+0x4c>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d014      	beq.n	8000ab8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffce 	bl	8000a30 <getBlockSize>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2208      	movs	r2, #8
 8000a98:	1a9b      	subs	r3, r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d201      	bcs.n	8000aa8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	68b8      	ldr	r0, [r7, #8]
 8000aae:	f010 ff3c 	bl	801192a <memcpy>

		vPortFreeMicroROS(pv);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ff60 	bl	8000978 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000ab8:	f006 f80e 	bl	8006ad8 <xTaskResumeAll>

	return newmem;
 8000abc:	68bb      	ldr	r3, [r7, #8]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ad0:	f005 fff4 	bl	8006abc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	fb02 f303 	mul.w	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff fe82 	bl	80007e8 <pvPortMallocMicroROS>
 8000ae4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000aea:	e004      	b.n	8000af6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	613a      	str	r2, [r7, #16]
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	617a      	str	r2, [r7, #20]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f5      	bne.n	8000aec <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000b00:	f005 ffea 	bl	8006ad8 <xTaskResumeAll>
  	return mem;
 8000b04:	68fb      	ldr	r3, [r7, #12]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000b16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000b1c:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <prvHeapInit+0xac>)
 8000b1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00c      	beq.n	8000b44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3307      	adds	r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f023 0307 	bic.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bbc <prvHeapInit+0xac>)
 8000b40:	4413      	add	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000b48:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc0 <prvHeapInit+0xb0>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <prvHeapInit+0xb0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	4413      	add	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	1a9b      	subs	r3, r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f023 0307 	bic.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4a15      	ldr	r2, [pc, #84]	@ (8000bc4 <prvHeapInit+0xb4>)
 8000b70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000b72:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <prvHeapInit+0xb4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <prvHeapInit+0xb4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	1ad2      	subs	r2, r2, r3
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <prvHeapInit+0xb4>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <prvHeapInit+0xb8>)
 8000b9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <prvHeapInit+0xbc>)
 8000ba6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <prvHeapInit+0xc0>)
 8000baa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	200030c8 	.word	0x200030c8
 8000bc0:	20003cc8 	.word	0x20003cc8
 8000bc4:	20003cd0 	.word	0x20003cd0
 8000bc8:	20003cd8 	.word	0x20003cd8
 8000bcc:	20003cd4 	.word	0x20003cd4
 8000bd0:	20003cdc 	.word	0x20003cdc

08000bd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000bdc:	4b28      	ldr	r3, [pc, #160]	@ (8000c80 <prvInsertBlockIntoFreeList+0xac>)
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	e002      	b.n	8000be8 <prvInsertBlockIntoFreeList+0x14>
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d8f7      	bhi.n	8000be2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d108      	bne.n	8000c16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	441a      	add	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	441a      	add	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d118      	bne.n	8000c5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <prvInsertBlockIntoFreeList+0xb0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d00d      	beq.n	8000c52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	441a      	add	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	e008      	b.n	8000c64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <prvInsertBlockIntoFreeList+0xb0>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e003      	b.n	8000c64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d002      	beq.n	8000c72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20003cc8 	.word	0x20003cc8
 8000c84:	20003cd0 	.word	0x20003cd0

08000c88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <MX_DMA_Init+0x60>)
 8000c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c92:	4a15      	ldr	r2, [pc, #84]	@ (8000ce8 <MX_DMA_Init+0x60>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <MX_DMA_Init+0x60>)
 8000c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <MX_DMA_Init+0x60>)
 8000ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000caa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce8 <MX_DMA_Init+0x60>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <MX_DMA_Init+0x60>)
 8000cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	200b      	movs	r0, #11
 8000cc4:	f000 fee2 	bl	8001a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cc8:	200b      	movs	r0, #11
 8000cca:	f000 fef9 	bl	8001ac0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	200c      	movs	r0, #12
 8000cd4:	f000 feda 	bl	8001a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000cd8:	200c      	movs	r0, #12
 8000cda:	f000 fef1 	bl	8001ac0 <HAL_NVIC_EnableIRQ>

}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000

08000cec <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000cfa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000cfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d00:	4904      	ldr	r1, [pc, #16]	@ (8000d14 <cubemx_transport_open+0x28>)
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f003 f864 	bl	8003dd0 <HAL_UART_Receive_DMA>
    return true;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20003ce0 	.word	0x20003ce0

08000d18 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000d26:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f003 f89d 	bl	8003e68 <HAL_UART_DMAStop>
    return true;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000d4c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d54:	2b20      	cmp	r3, #32
 8000d56:	d11b      	bne.n	8000d90 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	68b9      	ldr	r1, [r7, #8]
 8000d60:	6978      	ldr	r0, [r7, #20]
 8000d62:	f002 ffb5 	bl	8003cd0 <HAL_UART_Transmit_DMA>
 8000d66:	4603      	mov	r3, r0
 8000d68:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000d6a:	e002      	b.n	8000d72 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f004 fe63 	bl	8005a38 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000d72:	7cfb      	ldrb	r3, [r7, #19]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d104      	bne.n	8000d82 <cubemx_transport_write+0x4a>
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7e:	2b20      	cmp	r3, #32
 8000d80:	d1f4      	bne.n	8000d6c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000d82:	7cfb      	ldrb	r3, [r7, #19]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <cubemx_transport_write+0x54>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	e002      	b.n	8000d92 <cubemx_transport_write+0x5a>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	e000      	b.n	8000d92 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000d90:	2300      	movs	r3, #0
    }
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
 8000da8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000db0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db6:	b672      	cpsid	i
}
 8000db8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e38 <cubemx_transport_read+0x9c>)
 8000dca:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000dcc:	b662      	cpsie	i
}
 8000dce:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f004 fe2e 	bl	8005a38 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <cubemx_transport_read+0xa0>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <cubemx_transport_read+0x9c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d103      	bne.n	8000df0 <cubemx_transport_read+0x54>
 8000de8:	69fa      	ldr	r2, [r7, #28]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbe2      	blt.n	8000db6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000df4:	e011      	b.n	8000e1a <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <cubemx_transport_read+0xa0>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	440b      	add	r3, r1
 8000e00:	490f      	ldr	r1, [pc, #60]	@ (8000e40 <cubemx_transport_read+0xa4>)
 8000e02:	5c8a      	ldrb	r2, [r1, r2]
 8000e04:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <cubemx_transport_read+0xa0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e10:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <cubemx_transport_read+0xa0>)
 8000e12:	6013      	str	r3, [r2, #0]
        wrote++;
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	3301      	adds	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e1a:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <cubemx_transport_read+0xa0>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <cubemx_transport_read+0x9c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d003      	beq.n	8000e2e <cubemx_transport_read+0x92>
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d3e3      	bcc.n	8000df6 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8000e2e:	69bb      	ldr	r3, [r7, #24]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200044e4 	.word	0x200044e4
 8000e3c:	200044e0 	.word	0x200044e0
 8000e40:	20003ce0 	.word	0x20003ce0

08000e44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
 8000e48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e66:	4b2c      	ldr	r3, [pc, #176]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e72:	4b29      	ldr	r3, [pc, #164]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	4a28      	ldr	r2, [pc, #160]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e78:	f043 0320 	orr.w	r3, r3, #32
 8000e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7e:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	f003 0320 	and.w	r3, r3, #32
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	4a22      	ldr	r2, [pc, #136]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec2:	f001 facb 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ec6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ecc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	480f      	ldr	r0, [pc, #60]	@ (8000f1c <MX_GPIO_Init+0xd8>)
 8000ede:	f001 f93b 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f001 f92c 	bl	8002158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2105      	movs	r1, #5
 8000f04:	2028      	movs	r0, #40	@ 0x28
 8000f06:	f000 fdc1 	bl	8001a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f0a:	2028      	movs	r0, #40	@ 0x28
 8000f0c:	f000 fdd8 	bl	8001ac0 <HAL_NVIC_EnableIRQ>

}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	@ 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000800 	.word	0x48000800

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f24:	f000 fcc3 	bl	80018ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f28:	f000 f80e 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2c:	f7ff ff8a 	bl	8000e44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f30:	f7ff feaa 	bl	8000c88 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000f34:	f000 fb8a 	bl	800164c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f38:	f004 fca2 	bl	8005880 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f3c:	f7ff fba0 	bl	8000680 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f40:	f004 fcc2 	bl	80058c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <main+0x24>

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	@ 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0318 	add.w	r3, r7, #24
 8000f52:	2238      	movs	r2, #56	@ 0x38
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f010 fc1e 	bl	8011798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f001 fab2 	bl	80024d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f78:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000f82:	2306      	movs	r3, #6
 8000f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f86:	2355      	movs	r3, #85	@ 0x55
 8000f88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fb4e 	bl	800263c <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000fa6:	f000 f82b 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 fe4c 	bl	8002c60 <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000fce:	f000 f817 	bl	8001000 <Error_Handler>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3750      	adds	r7, #80	@ 0x50
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fee:	f000 fc77 	bl	80018e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40012c00 	.word	0x40012c00

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <Error_Handler+0x8>

0800100c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <microros_allocate+0x3c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	461a      	mov	r2, r3
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <microros_allocate+0x3c>)
 8001024:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <microros_allocate+0x40>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <microros_allocate+0x40>)
 8001034:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fbd6 	bl	80007e8 <pvPortMallocMicroROS>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200044e8 	.word	0x200044e8
 800104c:	200044ec 	.word	0x200044ec

08001050 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00c      	beq.n	800107a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fce5 	bl	8000a30 <getBlockSize>
 8001066:	4603      	mov	r3, r0
 8001068:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <microros_deallocate+0x34>)
 800106a:	6812      	ldr	r2, [r2, #0]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	461a      	mov	r2, r3
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <microros_deallocate+0x34>)
 8001072:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fc7f 	bl	8000978 <vPortFreeMicroROS>
  }
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200044ec 	.word	0x200044ec

08001088 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <microros_reallocate+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	4413      	add	r3, r2
 800109e:	461a      	mov	r2, r3
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <microros_reallocate+0x64>)
 80010a2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <microros_reallocate+0x68>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4413      	add	r3, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <microros_reallocate+0x68>)
 80010b2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d104      	bne.n	80010c4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80010ba:	68b8      	ldr	r0, [r7, #8]
 80010bc:	f7ff fb94 	bl	80007e8 <pvPortMallocMicroROS>
 80010c0:	4603      	mov	r3, r0
 80010c2:	e00e      	b.n	80010e2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f7ff fcb3 	bl	8000a30 <getBlockSize>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <microros_reallocate+0x68>)
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <microros_reallocate+0x68>)
 80010d6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f7ff fcc6 	bl	8000a6c <pvPortReallocMicroROS>
 80010e0:	4603      	mov	r3, r0
  }
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200044e8 	.word	0x200044e8
 80010f0:	200044ec 	.word	0x200044ec

080010f4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	4a0c      	ldr	r2, [pc, #48]	@ (800113c <microros_zero_allocate+0x48>)
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	4413      	add	r3, r2
 800110e:	461a      	mov	r2, r3
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <microros_zero_allocate+0x48>)
 8001112:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	fb02 f303 	mul.w	r3, r2, r3
 800111c:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <microros_zero_allocate+0x4c>)
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	4413      	add	r3, r2
 8001122:	461a      	mov	r2, r3
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <microros_zero_allocate+0x4c>)
 8001126:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f7ff fccb 	bl	8000ac6 <pvPortCallocMicroROS>
 8001130:	4603      	mov	r3, r0
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200044e8 	.word	0x200044e8
 8001140:	200044ec 	.word	0x200044ec
 8001144:	00000000 	.word	0x00000000

08001148 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001148:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800115a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800115e:	a320      	add	r3, pc, #128	@ (adr r3, 80011e0 <UTILS_NanosecondsToTimespec+0x98>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff f8c4 	bl	80002f0 <__aeabi_ldivmod>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001172:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001176:	a31a      	add	r3, pc, #104	@ (adr r3, 80011e0 <UTILS_NanosecondsToTimespec+0x98>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff f8b8 	bl	80002f0 <__aeabi_ldivmod>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	da20      	bge.n	80011ce <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a11      	ldr	r2, [pc, #68]	@ (80011d8 <UTILS_NanosecondsToTimespec+0x90>)
 8001192:	fb82 1203 	smull	r1, r2, r2, r3
 8001196:	1712      	asrs	r2, r2, #28
 8001198:	17db      	asrs	r3, r3, #31
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	6979      	ldr	r1, [r7, #20]
 80011a8:	17c8      	asrs	r0, r1, #31
 80011aa:	460c      	mov	r4, r1
 80011ac:	4605      	mov	r5, r0
 80011ae:	ebb2 0804 	subs.w	r8, r2, r4
 80011b2:	eb63 0905 	sbc.w	r9, r3, r5
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	4906      	ldr	r1, [pc, #24]	@ (80011dc <UTILS_NanosecondsToTimespec+0x94>)
 80011c4:	fb01 f303 	mul.w	r3, r1, r3
 80011c8:	441a      	add	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
    }
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011d8:	44b82fa1 	.word	0x44b82fa1
 80011dc:	3b9aca00 	.word	0x3b9aca00
 80011e0:	3b9aca00 	.word	0x3b9aca00
 80011e4:	00000000 	.word	0x00000000

080011e8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80011e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011ec:	b08e      	sub	sp, #56	@ 0x38
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80011f2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80011f4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80011f8:	2300      	movs	r3, #0
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800120a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120e:	4618      	mov	r0, r3
 8001210:	f005 fede 	bl	8006fd0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001216:	17da      	asrs	r2, r3, #31
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	61fa      	str	r2, [r7, #28]
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	69b9      	ldr	r1, [r7, #24]
 8001226:	000b      	movs	r3, r1
 8001228:	2200      	movs	r2, #0
 800122a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800122e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001230:	2200      	movs	r2, #0
 8001232:	461c      	mov	r4, r3
 8001234:	4615      	mov	r5, r2
 8001236:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800123a:	1911      	adds	r1, r2, r4
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	416b      	adcs	r3, r5
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001246:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800124a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	f04f 0400 	mov.w	r4, #0
 8001256:	f04f 0500 	mov.w	r5, #0
 800125a:	015d      	lsls	r5, r3, #5
 800125c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001260:	0154      	lsls	r4, r2, #5
 8001262:	4622      	mov	r2, r4
 8001264:	462b      	mov	r3, r5
 8001266:	ebb2 0800 	subs.w	r8, r2, r0
 800126a:	eb63 0901 	sbc.w	r9, r3, r1
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800127a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800127e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001282:	4690      	mov	r8, r2
 8001284:	4699      	mov	r9, r3
 8001286:	eb18 0a00 	adds.w	sl, r8, r0
 800128a:	eb49 0b01 	adc.w	fp, r9, r1
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800129a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800129e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80012a2:	ebb2 040a 	subs.w	r4, r2, sl
 80012a6:	603c      	str	r4, [r7, #0]
 80012a8:	eb63 030b 	sbc.w	r3, r3, fp
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012b2:	4623      	mov	r3, r4
 80012b4:	181b      	adds	r3, r3, r0
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	462b      	mov	r3, r5
 80012ba:	eb41 0303 	adc.w	r3, r1, r3
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	6a3a      	ldr	r2, [r7, #32]
 80012c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012c6:	f7ff ff3f 	bl	8001148 <UTILS_NanosecondsToTimespec>

    return 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	3738      	adds	r7, #56	@ 0x38
 80012d0:	46bd      	mov	sp, r7
 80012d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_MspInit+0x50>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e2:	4a11      	ldr	r2, [pc, #68]	@ (8001328 <HAL_MspInit+0x50>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <HAL_MspInit+0x50>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <HAL_MspInit+0x50>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001328 <HAL_MspInit+0x50>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001300:	6593      	str	r3, [r2, #88]	@ 0x58
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <HAL_MspInit+0x50>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	210f      	movs	r1, #15
 8001312:	f06f 0001 	mvn.w	r0, #1
 8001316:	f000 fbb9 	bl	8001a8c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800131a:	f001 f97f 	bl	800261c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000

0800132c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	@ 0x30
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800133c:	4b2c      	ldr	r3, [pc, #176]	@ (80013f0 <HAL_InitTick+0xc4>)
 800133e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001340:	4a2b      	ldr	r2, [pc, #172]	@ (80013f0 <HAL_InitTick+0xc4>)
 8001342:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001346:	6613      	str	r3, [r2, #96]	@ 0x60
 8001348:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <HAL_InitTick+0xc4>)
 800134a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001354:	f107 020c 	add.w	r2, r7, #12
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f001 fe54 	bl	800300c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001364:	f001 fe3c 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 8001368:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800136a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136c:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <HAL_InitTick+0xc8>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0c9b      	lsrs	r3, r3, #18
 8001374:	3b01      	subs	r3, #1
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <HAL_InitTick+0xcc>)
 800137a:	4a20      	ldr	r2, [pc, #128]	@ (80013fc <HAL_InitTick+0xd0>)
 800137c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <HAL_InitTick+0xcc>)
 8001380:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001384:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001386:	4a1c      	ldr	r2, [pc, #112]	@ (80013f8 <HAL_InitTick+0xcc>)
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <HAL_InitTick+0xcc>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <HAL_InitTick+0xcc>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001398:	4817      	ldr	r0, [pc, #92]	@ (80013f8 <HAL_InitTick+0xcc>)
 800139a:	f002 f8fd 	bl	8003598 <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80013a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d11b      	bne.n	80013e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80013ac:	4812      	ldr	r0, [pc, #72]	@ (80013f8 <HAL_InitTick+0xcc>)
 80013ae:	f002 f955 	bl	800365c <HAL_TIM_Base_Start_IT>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80013b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d111      	bne.n	80013e4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013c0:	2019      	movs	r0, #25
 80013c2:	f000 fb7d 	bl	8001ac0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d808      	bhi.n	80013de <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	2019      	movs	r0, #25
 80013d2:	f000 fb5b 	bl	8001a8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <HAL_InitTick+0xd4>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e002      	b.n	80013e4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3730      	adds	r7, #48	@ 0x30
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	431bde83 	.word	0x431bde83
 80013f8:	200044f0 	.word	0x200044f0
 80013fc:	40012c00 	.word	0x40012c00
 8001400:	20000008 	.word	0x20000008

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <NMI_Handler+0x4>

0800140c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <MemManage_Handler+0x4>

0800141c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <UsageFault_Handler+0x4>

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <DMA1_Channel1_IRQHandler+0x10>)
 8001442:	f000 fd2e 	bl	8001ea2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200045d8 	.word	0x200045d8

08001450 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <DMA1_Channel2_IRQHandler+0x10>)
 8001456:	f000 fd24 	bl	8001ea2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20004638 	.word	0x20004638

08001464 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800146a:	f002 f96f 	bl	800374c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200044f0 	.word	0x200044f0

08001478 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800147c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001480:	f001 f804 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <LPUART1_IRQHandler+0x10>)
 800148e:	f002 fd81 	bl	8003f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20004544 	.word	0x20004544

0800149c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return 1;
 80014a0:	2301      	movs	r3, #1
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_kill>:

int _kill(int pid, int sig)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b6:	f010 fa03 	bl	80118c0 <__errno>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2216      	movs	r2, #22
 80014be:	601a      	str	r2, [r3, #0]
  return -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_exit>:

void _exit (int status)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ffe7 	bl	80014ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80014de:	bf00      	nop
 80014e0:	e7fd      	b.n	80014de <_exit+0x12>

080014e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e00a      	b.n	800150a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f4:	f3af 8000 	nop.w
 80014f8:	4601      	mov	r1, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	60ba      	str	r2, [r7, #8]
 8001500:	b2ca      	uxtb	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	dbf0      	blt.n	80014f4 <_read+0x12>
  }

  return len;
 8001512:	687b      	ldr	r3, [r7, #4]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e009      	b.n	8001542 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3301      	adds	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	dbf1      	blt.n	800152e <_write+0x12>
  }
  return len;
 800154a:	687b      	ldr	r3, [r7, #4]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_close>:

int _close(int file)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800157c:	605a      	str	r2, [r3, #4]
  return 0;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_isatty>:

int _isatty(int file)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f010 f968 	bl	80118c0 <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20020000 	.word	0x20020000
 800161c:	00000400 	.word	0x00000400
 8001620:	20004540 	.word	0x20004540
 8001624:	2000ac48 	.word	0x2000ac48

08001628 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001650:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001652:	4a22      	ldr	r2, [pc, #136]	@ (80016dc <MX_LPUART1_UART_Init+0x90>)
 8001654:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800166a:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 800168a:	2200      	movs	r2, #0
 800168c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800168e:	4812      	ldr	r0, [pc, #72]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001690:	f002 face 	bl	8003c30 <HAL_UART_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800169a:	f7ff fcb1 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800169e:	2100      	movs	r1, #0
 80016a0:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 80016a2:	f003 ffde 	bl	8005662 <HAL_UARTEx_SetTxFifoThreshold>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016ac:	f7ff fca8 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	4809      	ldr	r0, [pc, #36]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 80016b4:	f004 f813 	bl	80056de <HAL_UARTEx_SetRxFifoThreshold>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016be:	f7ff fc9f 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 80016c4:	f003 ff94 	bl	80055f0 <HAL_UARTEx_DisableFifoMode>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016ce:	f7ff fc97 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20004544 	.word	0x20004544
 80016dc:	40008000 	.word	0x40008000

080016e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b09e      	sub	sp, #120	@ 0x78
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2254      	movs	r2, #84	@ 0x54
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f010 f849 	bl	8011798 <memset>
  if(uartHandle->Instance==LPUART1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a4e      	ldr	r2, [pc, #312]	@ (8001844 <HAL_UART_MspInit+0x164>)
 800170c:	4293      	cmp	r3, r2
 800170e:	f040 8094 	bne.w	800183a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001712:	2320      	movs	r3, #32
 8001714:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4618      	mov	r0, r3
 8001720:	f001 fcec 	bl	80030fc <HAL_RCCEx_PeriphCLKConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800172a:	f7ff fc69 	bl	8001000 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800172e:	4b46      	ldr	r3, [pc, #280]	@ (8001848 <HAL_UART_MspInit+0x168>)
 8001730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001732:	4a45      	ldr	r2, [pc, #276]	@ (8001848 <HAL_UART_MspInit+0x168>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800173a:	4b43      	ldr	r3, [pc, #268]	@ (8001848 <HAL_UART_MspInit+0x168>)
 800173c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b40      	ldr	r3, [pc, #256]	@ (8001848 <HAL_UART_MspInit+0x168>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	4a3f      	ldr	r2, [pc, #252]	@ (8001848 <HAL_UART_MspInit+0x168>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001752:	4b3d      	ldr	r3, [pc, #244]	@ (8001848 <HAL_UART_MspInit+0x168>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800175e:	230c      	movs	r3, #12
 8001760:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800176e:	230c      	movs	r3, #12
 8001770:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177c:	f000 fcec 	bl	8002158 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8001780:	4b32      	ldr	r3, [pc, #200]	@ (800184c <HAL_UART_MspInit+0x16c>)
 8001782:	4a33      	ldr	r2, [pc, #204]	@ (8001850 <HAL_UART_MspInit+0x170>)
 8001784:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001786:	4b31      	ldr	r3, [pc, #196]	@ (800184c <HAL_UART_MspInit+0x16c>)
 8001788:	2222      	movs	r2, #34	@ 0x22
 800178a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800178c:	4b2f      	ldr	r3, [pc, #188]	@ (800184c <HAL_UART_MspInit+0x16c>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001792:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <HAL_UART_MspInit+0x16c>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001798:	4b2c      	ldr	r3, [pc, #176]	@ (800184c <HAL_UART_MspInit+0x16c>)
 800179a:	2280      	movs	r2, #128	@ 0x80
 800179c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179e:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <HAL_UART_MspInit+0x16c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a4:	4b29      	ldr	r3, [pc, #164]	@ (800184c <HAL_UART_MspInit+0x16c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80017aa:	4b28      	ldr	r3, [pc, #160]	@ (800184c <HAL_UART_MspInit+0x16c>)
 80017ac:	2220      	movs	r2, #32
 80017ae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017b0:	4b26      	ldr	r3, [pc, #152]	@ (800184c <HAL_UART_MspInit+0x16c>)
 80017b2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80017b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80017b8:	4824      	ldr	r0, [pc, #144]	@ (800184c <HAL_UART_MspInit+0x16c>)
 80017ba:	f000 f98f 	bl	8001adc <HAL_DMA_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80017c4:	f7ff fc1c 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a20      	ldr	r2, [pc, #128]	@ (800184c <HAL_UART_MspInit+0x16c>)
 80017cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80017d0:	4a1e      	ldr	r2, [pc, #120]	@ (800184c <HAL_UART_MspInit+0x16c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80017d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001854 <HAL_UART_MspInit+0x174>)
 80017d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001858 <HAL_UART_MspInit+0x178>)
 80017da:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80017dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <HAL_UART_MspInit+0x174>)
 80017de:	2223      	movs	r2, #35	@ 0x23
 80017e0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <HAL_UART_MspInit+0x174>)
 80017e4:	2210      	movs	r2, #16
 80017e6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_UART_MspInit+0x174>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_UART_MspInit+0x174>)
 80017f0:	2280      	movs	r2, #128	@ 0x80
 80017f2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017f4:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <HAL_UART_MspInit+0x174>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017fa:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_UART_MspInit+0x174>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001800:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <HAL_UART_MspInit+0x174>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001806:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <HAL_UART_MspInit+0x174>)
 8001808:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800180c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800180e:	4811      	ldr	r0, [pc, #68]	@ (8001854 <HAL_UART_MspInit+0x174>)
 8001810:	f000 f964 	bl	8001adc <HAL_DMA_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800181a:	f7ff fbf1 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a0c      	ldr	r2, [pc, #48]	@ (8001854 <HAL_UART_MspInit+0x174>)
 8001822:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001824:	4a0b      	ldr	r2, [pc, #44]	@ (8001854 <HAL_UART_MspInit+0x174>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2105      	movs	r1, #5
 800182e:	205b      	movs	r0, #91	@ 0x5b
 8001830:	f000 f92c 	bl	8001a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001834:	205b      	movs	r0, #91	@ 0x5b
 8001836:	f000 f943 	bl	8001ac0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800183a:	bf00      	nop
 800183c:	3778      	adds	r7, #120	@ 0x78
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40008000 	.word	0x40008000
 8001848:	40021000 	.word	0x40021000
 800184c:	200045d8 	.word	0x200045d8
 8001850:	40020008 	.word	0x40020008
 8001854:	20004638 	.word	0x20004638
 8001858:	4002001c 	.word	0x4002001c

0800185c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800185c:	480d      	ldr	r0, [pc, #52]	@ (8001894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800185e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001860:	f7ff fee2 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001864:	480c      	ldr	r0, [pc, #48]	@ (8001898 <LoopForever+0x6>)
  ldr r1, =_edata
 8001866:	490d      	ldr	r1, [pc, #52]	@ (800189c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001868:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <LoopForever+0xe>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800186c:	e002      	b.n	8001874 <LoopCopyDataInit>

0800186e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001872:	3304      	adds	r3, #4

08001874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001878:	d3f9      	bcc.n	800186e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187a:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800187c:	4c0a      	ldr	r4, [pc, #40]	@ (80018a8 <LoopForever+0x16>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001880:	e001      	b.n	8001886 <LoopFillZerobss>

08001882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001884:	3204      	adds	r2, #4

08001886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001888:	d3fb      	bcc.n	8001882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188a:	f010 f81f 	bl	80118cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800188e:	f7ff fb47 	bl	8000f20 <main>

08001892 <LoopForever>:

LoopForever:
    b LoopForever
 8001892:	e7fe      	b.n	8001892 <LoopForever>
  ldr   r0, =_estack
 8001894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80018a0:	08013340 	.word	0x08013340
  ldr r2, =_sbss
 80018a4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80018a8:	2000ac48 	.word	0x2000ac48

080018ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC1_2_IRQHandler>

080018ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f8dc 	bl	8001a76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018be:	200f      	movs	r0, #15
 80018c0:	f7ff fd34 	bl	800132c <HAL_InitTick>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	e001      	b.n	80018d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018d0:	f7ff fd02 	bl	80012d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018d4:	79fb      	ldrb	r3, [r7, #7]

}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_IncTick+0x1c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_IncTick+0x20>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a03      	ldr	r2, [pc, #12]	@ (80018fc <HAL_IncTick+0x1c>)
 80018f0:	6013      	str	r3, [r2, #0]
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	20004698 	.word	0x20004698
 8001900:	2000000c 	.word	0x2000000c

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20004698 	.word	0x20004698

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4907      	ldr	r1, [pc, #28]	@ (80019b8 <__NVIC_EnableIRQ+0x38>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	@ (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff4c 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9a:	f7ff ff63 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001a9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	6978      	ldr	r0, [r7, #20]
 8001aa6:	f7ff ffb3 	bl	8001a10 <NVIC_EncodePriority>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff82 	bl	80019bc <__NVIC_SetPriority>
}
 8001ab8:	bf00      	nop
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff56 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e08d      	b.n	8001c0a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	4b47      	ldr	r3, [pc, #284]	@ (8001c14 <HAL_DMA_Init+0x138>)
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d80f      	bhi.n	8001b1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b45      	ldr	r3, [pc, #276]	@ (8001c18 <HAL_DMA_Init+0x13c>)
 8001b02:	4413      	add	r3, r2
 8001b04:	4a45      	ldr	r2, [pc, #276]	@ (8001c1c <HAL_DMA_Init+0x140>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	009a      	lsls	r2, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a42      	ldr	r2, [pc, #264]	@ (8001c20 <HAL_DMA_Init+0x144>)
 8001b16:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b18:	e00e      	b.n	8001b38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b40      	ldr	r3, [pc, #256]	@ (8001c24 <HAL_DMA_Init+0x148>)
 8001b22:	4413      	add	r3, r2
 8001b24:	4a3d      	ldr	r2, [pc, #244]	@ (8001c1c <HAL_DMA_Init+0x140>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	009a      	lsls	r2, r3, #2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a3c      	ldr	r2, [pc, #240]	@ (8001c28 <HAL_DMA_Init+0x14c>)
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fa82 	bl	8002094 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b98:	d102      	bne.n	8001ba0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bb4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d010      	beq.n	8001be0 <HAL_DMA_Init+0x104>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d80c      	bhi.n	8001be0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 faa2 	bl	8002110 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	e008      	b.n	8001bf2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40020407 	.word	0x40020407
 8001c18:	bffdfff8 	.word	0xbffdfff8
 8001c1c:	cccccccd 	.word	0xcccccccd
 8001c20:	40020000 	.word	0x40020000
 8001c24:	bffdfbf8 	.word	0xbffdfbf8
 8001c28:	40020400 	.word	0x40020400

08001c2c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_DMA_Start_IT+0x20>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e066      	b.n	8001d1a <HAL_DMA_Start_IT+0xee>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d155      	bne.n	8001d0c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0201 	bic.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	68b9      	ldr	r1, [r7, #8]
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 f9c7 	bl	8002018 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d008      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 020e 	orr.w	r2, r2, #14
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e00f      	b.n	8001cc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0204 	bic.w	r2, r2, #4
 8001cb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 020a 	orr.w	r2, r2, #10
 8001cc2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ce0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cf8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e005      	b.n	8001d18 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
 8001d16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d005      	beq.n	8001d46 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e037      	b.n	8001db6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 020e 	bic.w	r2, r2, #14
 8001d54:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d64:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	f003 021f 	and.w	r2, r3, #31
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d92:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00c      	beq.n	8001db6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001daa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001db4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d00d      	beq.n	8001e08 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2204      	movs	r2, #4
 8001df0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e047      	b.n	8001e98 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 020e 	bic.w	r2, r2, #14
 8001e16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	2101      	movs	r1, #1
 8001e46:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
    }
  }
  return status;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d026      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x7a>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d021      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d107      	bne.n	8001ef6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0204 	bic.w	r2, r2, #4
 8001ef4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	f003 021f 	and.w	r2, r3, #31
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2104      	movs	r1, #4
 8001f04:	fa01 f202 	lsl.w	r2, r1, r2
 8001f08:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d071      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001f1a:	e06c      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	2202      	movs	r2, #2
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d02e      	beq.n	8001f8e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d029      	beq.n	8001f8e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10b      	bne.n	8001f60 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 020a 	bic.w	r2, r2, #10
 8001f56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d038      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001f8c:	e033      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2208      	movs	r2, #8
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d02a      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d025      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 020e 	bic.w	r2, r2, #14
 8001fba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	2101      	movs	r1, #1
 8001fca:	fa01 f202 	lsl.w	r2, r1, r2
 8001fce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d004      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
}
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800202e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002040:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f003 021f 	and.w	r2, r3, #31
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f202 	lsl.w	r2, r1, r2
 8002054:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b10      	cmp	r3, #16
 8002064:	d108      	bne.n	8002078 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002076:	e007      	b.n	8002088 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d802      	bhi.n	80020ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80020a8:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	e001      	b.n	80020b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80020ae:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80020b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3b08      	subs	r3, #8
 80020be:	4a12      	ldr	r2, [pc, #72]	@ (8002108 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	009a      	lsls	r2, r3, #2
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	461a      	mov	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a0b      	ldr	r2, [pc, #44]	@ (800210c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80020de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	2201      	movs	r2, #1
 80020e8:	409a      	lsls	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40020407 	.word	0x40020407
 8002100:	40020800 	.word	0x40020800
 8002104:	40020820 	.word	0x40020820
 8002108:	cccccccd 	.word	0xcccccccd
 800210c:	40020880 	.word	0x40020880

08002110 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	461a      	mov	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a08      	ldr	r2, [pc, #32]	@ (8002154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002132:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3b01      	subs	r3, #1
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2201      	movs	r2, #1
 800213e:	409a      	lsls	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	1000823f 	.word	0x1000823f
 8002154:	40020940 	.word	0x40020940

08002158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002166:	e15a      	b.n	800241e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 814c 	beq.w	8002418 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d005      	beq.n	8002198 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002194:	2b02      	cmp	r3, #2
 8002196:	d130      	bne.n	80021fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ce:	2201      	movs	r2, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 0201 	and.w	r2, r3, #1
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b03      	cmp	r3, #3
 8002204:	d017      	beq.n	8002236 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d123      	bne.n	800228a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3208      	adds	r2, #8
 800224a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	6939      	ldr	r1, [r7, #16]
 8002286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0203 	and.w	r2, r3, #3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80a6 	beq.w	8002418 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022cc:	4b5b      	ldr	r3, [pc, #364]	@ (800243c <HAL_GPIO_Init+0x2e4>)
 80022ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d0:	4a5a      	ldr	r2, [pc, #360]	@ (800243c <HAL_GPIO_Init+0x2e4>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80022d8:	4b58      	ldr	r3, [pc, #352]	@ (800243c <HAL_GPIO_Init+0x2e4>)
 80022da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022e4:	4a56      	ldr	r2, [pc, #344]	@ (8002440 <HAL_GPIO_Init+0x2e8>)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	3302      	adds	r3, #2
 80022ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220f      	movs	r2, #15
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800230e:	d01f      	beq.n	8002350 <HAL_GPIO_Init+0x1f8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a4c      	ldr	r2, [pc, #304]	@ (8002444 <HAL_GPIO_Init+0x2ec>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d019      	beq.n	800234c <HAL_GPIO_Init+0x1f4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a4b      	ldr	r2, [pc, #300]	@ (8002448 <HAL_GPIO_Init+0x2f0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_GPIO_Init+0x1f0>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a4a      	ldr	r2, [pc, #296]	@ (800244c <HAL_GPIO_Init+0x2f4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00d      	beq.n	8002344 <HAL_GPIO_Init+0x1ec>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a49      	ldr	r2, [pc, #292]	@ (8002450 <HAL_GPIO_Init+0x2f8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d007      	beq.n	8002340 <HAL_GPIO_Init+0x1e8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a48      	ldr	r2, [pc, #288]	@ (8002454 <HAL_GPIO_Init+0x2fc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_GPIO_Init+0x1e4>
 8002338:	2305      	movs	r3, #5
 800233a:	e00a      	b.n	8002352 <HAL_GPIO_Init+0x1fa>
 800233c:	2306      	movs	r3, #6
 800233e:	e008      	b.n	8002352 <HAL_GPIO_Init+0x1fa>
 8002340:	2304      	movs	r3, #4
 8002342:	e006      	b.n	8002352 <HAL_GPIO_Init+0x1fa>
 8002344:	2303      	movs	r3, #3
 8002346:	e004      	b.n	8002352 <HAL_GPIO_Init+0x1fa>
 8002348:	2302      	movs	r3, #2
 800234a:	e002      	b.n	8002352 <HAL_GPIO_Init+0x1fa>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_GPIO_Init+0x1fa>
 8002350:	2300      	movs	r3, #0
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	f002 0203 	and.w	r2, r2, #3
 8002358:	0092      	lsls	r2, r2, #2
 800235a:	4093      	lsls	r3, r2
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002362:	4937      	ldr	r1, [pc, #220]	@ (8002440 <HAL_GPIO_Init+0x2e8>)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002370:	4b39      	ldr	r3, [pc, #228]	@ (8002458 <HAL_GPIO_Init+0x300>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002394:	4a30      	ldr	r2, [pc, #192]	@ (8002458 <HAL_GPIO_Init+0x300>)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800239a:	4b2f      	ldr	r3, [pc, #188]	@ (8002458 <HAL_GPIO_Init+0x300>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023be:	4a26      	ldr	r2, [pc, #152]	@ (8002458 <HAL_GPIO_Init+0x300>)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80023c4:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <HAL_GPIO_Init+0x300>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002458 <HAL_GPIO_Init+0x300>)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002458 <HAL_GPIO_Init+0x300>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002412:	4a11      	ldr	r2, [pc, #68]	@ (8002458 <HAL_GPIO_Init+0x300>)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	f47f ae9d 	bne.w	8002168 <HAL_GPIO_Init+0x10>
  }
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	40021000 	.word	0x40021000
 8002440:	40010000 	.word	0x40010000
 8002444:	48000400 	.word	0x48000400
 8002448:	48000800 	.word	0x48000800
 800244c:	48000c00 	.word	0x48000c00
 8002450:	48001000 	.word	0x48001000
 8002454:	48001400 	.word	0x48001400
 8002458:	40010400 	.word	0x40010400

0800245c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
 8002468:	4613      	mov	r3, r2
 800246a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800246c:	787b      	ldrb	r3, [r7, #1]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002478:	e002      	b.n	8002480 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002496:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024a2:	4a05      	ldr	r2, [pc, #20]	@ (80024b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f806 	bl	80024bc <HAL_GPIO_EXTI_Callback>
  }
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40010400 	.word	0x40010400

080024bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d141      	bne.n	8002566 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ee:	d131      	bne.n	8002554 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024f0:	4b47      	ldr	r3, [pc, #284]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024f6:	4a46      	ldr	r2, [pc, #280]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002500:	4b43      	ldr	r3, [pc, #268]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002508:	4a41      	ldr	r2, [pc, #260]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800250e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002510:	4b40      	ldr	r3, [pc, #256]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2232      	movs	r2, #50	@ 0x32
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	4a3f      	ldr	r2, [pc, #252]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	0c9b      	lsrs	r3, r3, #18
 8002522:	3301      	adds	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002526:	e002      	b.n	800252e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3b01      	subs	r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800252e:	4b38      	ldr	r3, [pc, #224]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800253a:	d102      	bne.n	8002542 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f2      	bne.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002542:	4b33      	ldr	r3, [pc, #204]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800254e:	d158      	bne.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e057      	b.n	8002604 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002554:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800255a:	4a2d      	ldr	r2, [pc, #180]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002560:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002564:	e04d      	b.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800256c:	d141      	bne.n	80025f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800257a:	d131      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800257c:	4b24      	ldr	r3, [pc, #144]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002582:	4a23      	ldr	r2, [pc, #140]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800258c:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002594:	4a1e      	ldr	r2, [pc, #120]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800259a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800259c:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2232      	movs	r2, #50	@ 0x32
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	0c9b      	lsrs	r3, r3, #18
 80025ae:	3301      	adds	r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b2:	e002      	b.n	80025ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c6:	d102      	bne.n	80025ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f2      	bne.n	80025b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025da:	d112      	bne.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e011      	b.n	8002604 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025f0:	e007      	b.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025f2:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025fa:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002600:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40007000 	.word	0x40007000
 8002614:	20000004 	.word	0x20000004
 8002618:	431bde83 	.word	0x431bde83

0800261c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262a:	6093      	str	r3, [r2, #8]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40007000 	.word	0x40007000

0800263c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e2fe      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d075      	beq.n	8002746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800265a:	4b97      	ldr	r3, [pc, #604]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002664:	4b94      	ldr	r3, [pc, #592]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b0c      	cmp	r3, #12
 8002672:	d102      	bne.n	800267a <HAL_RCC_OscConfig+0x3e>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d002      	beq.n	8002680 <HAL_RCC_OscConfig+0x44>
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d10b      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	4b8d      	ldr	r3, [pc, #564]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d05b      	beq.n	8002744 <HAL_RCC_OscConfig+0x108>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d157      	bne.n	8002744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e2d9      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a0:	d106      	bne.n	80026b0 <HAL_RCC_OscConfig+0x74>
 80026a2:	4b85      	ldr	r3, [pc, #532]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a84      	ldr	r2, [pc, #528]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x98>
 80026ba:	4b7f      	ldr	r3, [pc, #508]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a7e      	ldr	r2, [pc, #504]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b7c      	ldr	r3, [pc, #496]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7b      	ldr	r2, [pc, #492]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026d4:	4b78      	ldr	r3, [pc, #480]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a77      	ldr	r2, [pc, #476]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b75      	ldr	r3, [pc, #468]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a74      	ldr	r2, [pc, #464]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7ff f906 	bl	8001904 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7ff f902 	bl	8001904 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	@ 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e29e      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270e:	4b6a      	ldr	r3, [pc, #424]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xc0>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7ff f8f2 	bl	8001904 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7ff f8ee 	bl	8001904 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e28a      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002736:	4b60      	ldr	r3, [pc, #384]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0xe8>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d075      	beq.n	800283e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002752:	4b59      	ldr	r3, [pc, #356]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800275c:	4b56      	ldr	r3, [pc, #344]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d102      	bne.n	8002772 <HAL_RCC_OscConfig+0x136>
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d002      	beq.n	8002778 <HAL_RCC_OscConfig+0x13c>
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b04      	cmp	r3, #4
 8002776:	d11f      	bne.n	80027b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002778:	4b4f      	ldr	r3, [pc, #316]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_OscConfig+0x154>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e25d      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b49      	ldr	r3, [pc, #292]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	4946      	ldr	r1, [pc, #280]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027a4:	4b45      	ldr	r3, [pc, #276]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fdbf 	bl	800132c <HAL_InitTick>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d043      	beq.n	800283c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e249      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d023      	beq.n	8002808 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c0:	4b3d      	ldr	r3, [pc, #244]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a3c      	ldr	r2, [pc, #240]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80027c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff f89a 	bl	8001904 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d4:	f7ff f896 	bl	8001904 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e232      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e6:	4b34      	ldr	r3, [pc, #208]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b31      	ldr	r3, [pc, #196]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	061b      	lsls	r3, r3, #24
 8002800:	492d      	ldr	r1, [pc, #180]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
 8002806:	e01a      	b.n	800283e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002808:	4b2b      	ldr	r3, [pc, #172]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2a      	ldr	r2, [pc, #168]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800280e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff f876 	bl	8001904 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281c:	f7ff f872 	bl	8001904 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e20e      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800282e:	4b22      	ldr	r3, [pc, #136]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x1e0>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d041      	beq.n	80028ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01c      	beq.n	800288c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002852:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002858:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7ff f84f 	bl	8001904 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286a:	f7ff f84b 	bl	8001904 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e1e7      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800287c:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800287e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0ef      	beq.n	800286a <HAL_RCC_OscConfig+0x22e>
 800288a:	e020      	b.n	80028ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288c:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002892:	4a09      	ldr	r2, [pc, #36]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7ff f832 	bl	8001904 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a2:	e00d      	b.n	80028c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a4:	f7ff f82e 	bl	8001904 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d906      	bls.n	80028c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1ca      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c0:	4b8c      	ldr	r3, [pc, #560]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80028c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ea      	bne.n	80028a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80a6 	beq.w	8002a28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028e0:	4b84      	ldr	r3, [pc, #528]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2b4>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x2b6>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00d      	beq.n	8002912 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	4b7f      	ldr	r3, [pc, #508]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80028f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fa:	4a7e      	ldr	r2, [pc, #504]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002900:	6593      	str	r3, [r2, #88]	@ 0x58
 8002902:	4b7c      	ldr	r3, [pc, #496]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800290e:	2301      	movs	r3, #1
 8002910:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002912:	4b79      	ldr	r3, [pc, #484]	@ (8002af8 <HAL_RCC_OscConfig+0x4bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d118      	bne.n	8002950 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800291e:	4b76      	ldr	r3, [pc, #472]	@ (8002af8 <HAL_RCC_OscConfig+0x4bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a75      	ldr	r2, [pc, #468]	@ (8002af8 <HAL_RCC_OscConfig+0x4bc>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292a:	f7fe ffeb 	bl	8001904 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002932:	f7fe ffe7 	bl	8001904 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e183      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002944:	4b6c      	ldr	r3, [pc, #432]	@ (8002af8 <HAL_RCC_OscConfig+0x4bc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d108      	bne.n	800296a <HAL_RCC_OscConfig+0x32e>
 8002958:	4b66      	ldr	r3, [pc, #408]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	4a65      	ldr	r2, [pc, #404]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002968:	e024      	b.n	80029b4 <HAL_RCC_OscConfig+0x378>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d110      	bne.n	8002994 <HAL_RCC_OscConfig+0x358>
 8002972:	4b60      	ldr	r3, [pc, #384]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002978:	4a5e      	ldr	r2, [pc, #376]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002982:	4b5c      	ldr	r3, [pc, #368]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002988:	4a5a      	ldr	r2, [pc, #360]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002992:	e00f      	b.n	80029b4 <HAL_RCC_OscConfig+0x378>
 8002994:	4b57      	ldr	r3, [pc, #348]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	4a56      	ldr	r2, [pc, #344]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029a4:	4b53      	ldr	r3, [pc, #332]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029aa:	4a52      	ldr	r2, [pc, #328]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d016      	beq.n	80029ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe ffa2 	bl	8001904 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7fe ff9e 	bl	8001904 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e138      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029da:	4b46      	ldr	r3, [pc, #280]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ed      	beq.n	80029c4 <HAL_RCC_OscConfig+0x388>
 80029e8:	e015      	b.n	8002a16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7fe ff8b 	bl	8001904 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fe ff87 	bl	8001904 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e121      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a08:	4b3a      	ldr	r3, [pc, #232]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1ed      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a16:	7ffb      	ldrb	r3, [r7, #31]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1c:	4b35      	ldr	r3, [pc, #212]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a20:	4a34      	ldr	r2, [pc, #208]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d03c      	beq.n	8002aae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a42:	4a2c      	ldr	r2, [pc, #176]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe ff5a 	bl	8001904 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a54:	f7fe ff56 	bl	8001904 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e0f2      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a66:	4b23      	ldr	r3, [pc, #140]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ef      	beq.n	8002a54 <HAL_RCC_OscConfig+0x418>
 8002a74:	e01b      	b.n	8002aae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a76:	4b1f      	ldr	r3, [pc, #124]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7fe ff3d 	bl	8001904 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8e:	f7fe ff39 	bl	8001904 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0d5      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aa0:	4b14      	ldr	r3, [pc, #80]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ef      	bne.n	8002a8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80c9 	beq.w	8002c4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	f000 8083 	beq.w	8002bcc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d15e      	bne.n	8002b8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a08      	ldr	r2, [pc, #32]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7fe ff13 	bl	8001904 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae0:	e00c      	b.n	8002afc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe ff0f 	bl	8001904 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d905      	bls.n	8002afc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e0ab      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	4b55      	ldr	r3, [pc, #340]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ec      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b08:	4b52      	ldr	r3, [pc, #328]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	4b52      	ldr	r3, [pc, #328]	@ (8002c58 <HAL_RCC_OscConfig+0x61c>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6a11      	ldr	r1, [r2, #32]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b22:	0212      	lsls	r2, r2, #8
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b2a:	0852      	lsrs	r2, r2, #1
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	0552      	lsls	r2, r2, #21
 8002b30:	4311      	orrs	r1, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b36:	0852      	lsrs	r2, r2, #1
 8002b38:	3a01      	subs	r2, #1
 8002b3a:	0652      	lsls	r2, r2, #25
 8002b3c:	4311      	orrs	r1, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b42:	06d2      	lsls	r2, r2, #27
 8002b44:	430a      	orrs	r2, r1
 8002b46:	4943      	ldr	r1, [pc, #268]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b4c:	4b41      	ldr	r3, [pc, #260]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a40      	ldr	r2, [pc, #256]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b58:	4b3e      	ldr	r3, [pc, #248]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a3d      	ldr	r2, [pc, #244]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fece 	bl	8001904 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe feca 	bl	8001904 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e066      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7e:	4b35      	ldr	r3, [pc, #212]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x530>
 8002b8a:	e05e      	b.n	8002c4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b31      	ldr	r3, [pc, #196]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a30      	ldr	r2, [pc, #192]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe feb4 	bl	8001904 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe feb0 	bl	8001904 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e04c      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb2:	4b28      	ldr	r3, [pc, #160]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bbe:	4b25      	ldr	r3, [pc, #148]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	4924      	ldr	r1, [pc, #144]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002bc4:	4b25      	ldr	r3, [pc, #148]	@ (8002c5c <HAL_RCC_OscConfig+0x620>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	60cb      	str	r3, [r1, #12]
 8002bca:	e03e      	b.n	8002c4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e039      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d12c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d123      	bne.n	8002c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d11b      	bne.n	8002c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d113      	bne.n	8002c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d109      	bne.n	8002c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000
 8002c58:	019f800c 	.word	0x019f800c
 8002c5c:	feeefffc 	.word	0xfeeefffc

08002c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e11e      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b91      	ldr	r3, [pc, #580]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b8e      	ldr	r3, [pc, #568]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 020f 	bic.w	r2, r3, #15
 8002c8e:	498c      	ldr	r1, [pc, #560]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b8a      	ldr	r3, [pc, #552]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e106      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d073      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d129      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbc:	4b81      	ldr	r3, [pc, #516]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0f4      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ccc:	f000 f9d0 	bl	8003070 <RCC_GetSysClockFreqFromPLLSource>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4a7c      	ldr	r2, [pc, #496]	@ (8002ec8 <HAL_RCC_ClockConfig+0x268>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d93f      	bls.n	8002d5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cda:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d033      	beq.n	8002d5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d12f      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cfa:	4b72      	ldr	r3, [pc, #456]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d02:	4a70      	ldr	r2, [pc, #448]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e024      	b.n	8002d5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d18:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0c6      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d28:	4b66      	ldr	r3, [pc, #408]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0be      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d38:	f000 f8ce 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4a61      	ldr	r2, [pc, #388]	@ (8002ec8 <HAL_RCC_ClockConfig+0x268>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d909      	bls.n	8002d5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d46:	4b5f      	ldr	r3, [pc, #380]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d4e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d56:	2380      	movs	r3, #128	@ 0x80
 8002d58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4957      	ldr	r1, [pc, #348]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fdca 	bl	8001904 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7fe fdc6 	bl	8001904 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e095      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d023      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db4:	4b43      	ldr	r3, [pc, #268]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4a42      	ldr	r2, [pc, #264]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002dd4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b39      	ldr	r3, [pc, #228]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4936      	ldr	r1, [pc, #216]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b80      	cmp	r3, #128	@ 0x80
 8002df4:	d105      	bne.n	8002e02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002df6:	4b33      	ldr	r3, [pc, #204]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	4a32      	ldr	r2, [pc, #200]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e02:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d21d      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 020f 	bic.w	r2, r3, #15
 8002e18:	4929      	ldr	r1, [pc, #164]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e20:	f7fe fd70 	bl	8001904 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e28:	f7fe fd6c 	bl	8001904 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e03b      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1ed      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4917      	ldr	r1, [pc, #92]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e76:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490f      	ldr	r1, [pc, #60]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e8a:	f000 f825 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490c      	ldr	r1, [pc, #48]	@ (8002ecc <HAL_RCC_ClockConfig+0x26c>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed0 <HAL_RCC_ClockConfig+0x270>)
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_RCC_ClockConfig+0x274>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fa3c 	bl	800132c <HAL_InitTick>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	04c4b400 	.word	0x04c4b400
 8002ecc:	080127dc 	.word	0x080127dc
 8002ed0:	20000004 	.word	0x20000004
 8002ed4:	20000008 	.word	0x20000008

08002ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ede:	4b2c      	ldr	r3, [pc, #176]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d102      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eea:	4b2a      	ldr	r3, [pc, #168]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	e047      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ef0:	4b27      	ldr	r3, [pc, #156]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002efc:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	e03e      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f02:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d136      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f0e:	4b20      	ldr	r3, [pc, #128]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f18:	4b1d      	ldr	r3, [pc, #116]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	3301      	adds	r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d10c      	bne.n	8002f46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	4a16      	ldr	r2, [pc, #88]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f36:	68d2      	ldr	r2, [r2, #12]
 8002f38:	0a12      	lsrs	r2, r2, #8
 8002f3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	617b      	str	r3, [r7, #20]
      break;
 8002f44:	e00c      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f46:	4a13      	ldr	r2, [pc, #76]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	4a10      	ldr	r2, [pc, #64]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f50:	68d2      	ldr	r2, [r2, #12]
 8002f52:	0a12      	lsrs	r2, r2, #8
 8002f54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f58:	fb02 f303 	mul.w	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
      break;
 8002f5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0e5b      	lsrs	r3, r3, #25
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	e001      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f80:	693b      	ldr	r3, [r7, #16]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	016e3600 	.word	0x016e3600

08002f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000004 	.word	0x20000004

08002fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fb8:	f7ff fff0 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4904      	ldr	r1, [pc, #16]	@ (8002fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	080127ec 	.word	0x080127ec

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fe4:	f7ff ffda 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0adb      	lsrs	r3, r3, #11
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4904      	ldr	r1, [pc, #16]	@ (8003008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	080127ec 	.word	0x080127ec

0800300c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	220f      	movs	r2, #15
 800301a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800301c:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <HAL_RCC_GetClockConfig+0x5c>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0203 	and.w	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003028:	4b0f      	ldr	r3, [pc, #60]	@ (8003068 <HAL_RCC_GetClockConfig+0x5c>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <HAL_RCC_GetClockConfig+0x5c>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <HAL_RCC_GetClockConfig+0x5c>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	08db      	lsrs	r3, r3, #3
 8003046:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800304e:	4b07      	ldr	r3, [pc, #28]	@ (800306c <HAL_RCC_GetClockConfig+0x60>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 020f 	and.w	r2, r3, #15
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	601a      	str	r2, [r3, #0]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
 800306c:	40022000 	.word	0x40022000

08003070 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003076:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003080:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	3301      	adds	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d10c      	bne.n	80030ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003094:	4a17      	ldr	r2, [pc, #92]	@ (80030f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	4a14      	ldr	r2, [pc, #80]	@ (80030f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800309e:	68d2      	ldr	r2, [r2, #12]
 80030a0:	0a12      	lsrs	r2, r2, #8
 80030a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	617b      	str	r3, [r7, #20]
    break;
 80030ac:	e00c      	b.n	80030c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030ae:	4a12      	ldr	r2, [pc, #72]	@ (80030f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b6:	4a0e      	ldr	r2, [pc, #56]	@ (80030f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030b8:	68d2      	ldr	r2, [r2, #12]
 80030ba:	0a12      	lsrs	r2, r2, #8
 80030bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030c0:	fb02 f303 	mul.w	r3, r2, r3
 80030c4:	617b      	str	r3, [r7, #20]
    break;
 80030c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030c8:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0e5b      	lsrs	r3, r3, #25
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	3301      	adds	r3, #1
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030e2:	687b      	ldr	r3, [r7, #4]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40021000 	.word	0x40021000
 80030f4:	016e3600 	.word	0x016e3600
 80030f8:	00f42400 	.word	0x00f42400

080030fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003104:	2300      	movs	r3, #0
 8003106:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003108:	2300      	movs	r3, #0
 800310a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8098 	beq.w	800324a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b43      	ldr	r3, [pc, #268]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b40      	ldr	r3, [pc, #256]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312e:	4a3f      	ldr	r2, [pc, #252]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003134:	6593      	str	r3, [r2, #88]	@ 0x58
 8003136:	4b3d      	ldr	r3, [pc, #244]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003146:	4b3a      	ldr	r3, [pc, #232]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a39      	ldr	r2, [pc, #228]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800314c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003150:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003152:	f7fe fbd7 	bl	8001904 <HAL_GetTick>
 8003156:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003158:	e009      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315a:	f7fe fbd3 	bl	8001904 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d902      	bls.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	74fb      	strb	r3, [r7, #19]
        break;
 800316c:	e005      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800316e:	4b30      	ldr	r3, [pc, #192]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ef      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d159      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003180:	4b2a      	ldr	r3, [pc, #168]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800318a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01e      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d019      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800319c:	4b23      	ldr	r3, [pc, #140]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031a8:	4b20      	ldr	r3, [pc, #128]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ae:	4a1f      	ldr	r2, [pc, #124]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031b8:	4b1c      	ldr	r3, [pc, #112]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031be:	4a1b      	ldr	r2, [pc, #108]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031c8:	4a18      	ldr	r2, [pc, #96]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d016      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031da:	f7fe fb93 	bl	8001904 <HAL_GetTick>
 80031de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e0:	e00b      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe fb8f 	bl	8001904 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d902      	bls.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	74fb      	strb	r3, [r7, #19]
            break;
 80031f8:	e006      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fa:	4b0c      	ldr	r3, [pc, #48]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0ec      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10b      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800320e:	4b07      	ldr	r3, [pc, #28]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003214:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321c:	4903      	ldr	r1, [pc, #12]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003224:	e008      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	74bb      	strb	r3, [r7, #18]
 800322a:	e005      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800322c:	40021000 	.word	0x40021000
 8003230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003238:	7c7b      	ldrb	r3, [r7, #17]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323e:	4ba7      	ldr	r3, [pc, #668]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003242:	4aa6      	ldr	r2, [pc, #664]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003248:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003256:	4ba1      	ldr	r3, [pc, #644]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325c:	f023 0203 	bic.w	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	499d      	ldr	r1, [pc, #628]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003278:	4b98      	ldr	r3, [pc, #608]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327e:	f023 020c 	bic.w	r2, r3, #12
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	4995      	ldr	r1, [pc, #596]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800329a:	4b90      	ldr	r3, [pc, #576]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	498c      	ldr	r1, [pc, #560]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032bc:	4b87      	ldr	r3, [pc, #540]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	4984      	ldr	r1, [pc, #528]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032de:	4b7f      	ldr	r3, [pc, #508]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	497b      	ldr	r1, [pc, #492]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003300:	4b76      	ldr	r3, [pc, #472]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003306:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	4973      	ldr	r1, [pc, #460]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003322:	4b6e      	ldr	r3, [pc, #440]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003328:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	496a      	ldr	r1, [pc, #424]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003344:	4b65      	ldr	r3, [pc, #404]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4962      	ldr	r1, [pc, #392]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003366:	4b5d      	ldr	r3, [pc, #372]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	4959      	ldr	r1, [pc, #356]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003388:	4b54      	ldr	r3, [pc, #336]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800338a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800338e:	f023 0203 	bic.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003396:	4951      	ldr	r1, [pc, #324]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033aa:	4b4c      	ldr	r3, [pc, #304]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	4948      	ldr	r1, [pc, #288]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033cc:	4b43      	ldr	r3, [pc, #268]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	4940      	ldr	r1, [pc, #256]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ea:	d105      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ec:	4b3b      	ldr	r3, [pc, #236]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4a3a      	ldr	r2, [pc, #232]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033f6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003404:	4b35      	ldr	r3, [pc, #212]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003412:	4932      	ldr	r1, [pc, #200]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003422:	d105      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003424:	4b2d      	ldr	r3, [pc, #180]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a2c      	ldr	r2, [pc, #176]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800342a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800342e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d015      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800343c:	4b27      	ldr	r3, [pc, #156]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003442:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	4924      	ldr	r1, [pc, #144]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800345a:	d105      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345c:	4b1f      	ldr	r3, [pc, #124]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a1e      	ldr	r2, [pc, #120]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003466:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d015      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003474:	4b19      	ldr	r3, [pc, #100]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003482:	4916      	ldr	r1, [pc, #88]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003492:	d105      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003494:	4b11      	ldr	r3, [pc, #68]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a10      	ldr	r2, [pc, #64]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800349a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800349e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d019      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034ac:	4b0b      	ldr	r3, [pc, #44]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	4908      	ldr	r1, [pc, #32]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ca:	d109      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4a02      	ldr	r2, [pc, #8]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034d6:	60d3      	str	r3, [r2, #12]
 80034d8:	e002      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034ec:	4b29      	ldr	r3, [pc, #164]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	4926      	ldr	r1, [pc, #152]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800350a:	d105      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800350c:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a20      	ldr	r2, [pc, #128]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003516:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d015      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003524:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003532:	4918      	ldr	r1, [pc, #96]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003542:	d105      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003544:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a12      	ldr	r2, [pc, #72]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800354a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d015      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800355c:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800355e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003562:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356a:	490a      	ldr	r1, [pc, #40]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003576:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800357a:	d105      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800357c:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4a04      	ldr	r2, [pc, #16]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003586:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003588:	7cbb      	ldrb	r3, [r7, #18]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000

08003598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e049      	b.n	800363e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f841 	bl	8003646 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f000 fa30 	bl	8003a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d001      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e054      	b.n	800371e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a26      	ldr	r2, [pc, #152]	@ (800372c <HAL_TIM_Base_Start_IT+0xd0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d022      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x80>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800369e:	d01d      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x80>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a22      	ldr	r2, [pc, #136]	@ (8003730 <HAL_TIM_Base_Start_IT+0xd4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d018      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x80>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a21      	ldr	r2, [pc, #132]	@ (8003734 <HAL_TIM_Base_Start_IT+0xd8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d013      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x80>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003738 <HAL_TIM_Base_Start_IT+0xdc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00e      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x80>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	@ (800373c <HAL_TIM_Base_Start_IT+0xe0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x80>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003740 <HAL_TIM_Base_Start_IT+0xe4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d004      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x80>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003744 <HAL_TIM_Base_Start_IT+0xe8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d115      	bne.n	8003708 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <HAL_TIM_Base_Start_IT+0xec>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d015      	beq.n	800371a <HAL_TIM_Base_Start_IT+0xbe>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f4:	d011      	beq.n	800371a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003706:	e008      	b.n	800371a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e000      	b.n	800371c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40000c00 	.word	0x40000c00
 800373c:	40013400 	.word	0x40013400
 8003740:	40014000 	.word	0x40014000
 8003744:	40015000 	.word	0x40015000
 8003748:	00010007 	.word	0x00010007

0800374c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d020      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0202 	mvn.w	r2, #2
 8003780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f931 	bl	80039fe <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f923 	bl	80039ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f934 	bl	8003a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d020      	beq.n	80037fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0204 	mvn.w	r2, #4
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f90b 	bl	80039fe <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8fd 	bl	80039ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f90e 	bl	8003a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d020      	beq.n	8003848 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0208 	mvn.w	r2, #8
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2204      	movs	r2, #4
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8e5 	bl	80039fe <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8d7 	bl	80039ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f8e8 	bl	8003a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d020      	beq.n	8003894 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01b      	beq.n	8003894 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0210 	mvn.w	r2, #16
 8003864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2208      	movs	r2, #8
 800386a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8bf 	bl	80039fe <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8b1 	bl	80039ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f8c2 	bl	8003a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0201 	mvn.w	r2, #1
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd fb92 	bl	8000fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00c      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80038de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f969 	bl	8003bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00c      	beq.n	800390a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f961 	bl	8003bcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00c      	beq.n	800392e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f87c 	bl	8003a26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00c      	beq.n	8003952 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f06f 0220 	mvn.w	r2, #32
 800394a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f929 	bl	8003ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00c      	beq.n	8003976 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800396e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f935 	bl	8003be0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f92d 	bl	8003bf4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00c      	beq.n	80039be <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80039b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f925 	bl	8003c08 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00c      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80039da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f91d 	bl	8003c1c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003b80 <TIM_Base_SetConfig+0x144>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d017      	beq.n	8003a84 <TIM_Base_SetConfig+0x48>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5a:	d013      	beq.n	8003a84 <TIM_Base_SetConfig+0x48>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a49      	ldr	r2, [pc, #292]	@ (8003b84 <TIM_Base_SetConfig+0x148>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00f      	beq.n	8003a84 <TIM_Base_SetConfig+0x48>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a48      	ldr	r2, [pc, #288]	@ (8003b88 <TIM_Base_SetConfig+0x14c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00b      	beq.n	8003a84 <TIM_Base_SetConfig+0x48>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a47      	ldr	r2, [pc, #284]	@ (8003b8c <TIM_Base_SetConfig+0x150>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d007      	beq.n	8003a84 <TIM_Base_SetConfig+0x48>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a46      	ldr	r2, [pc, #280]	@ (8003b90 <TIM_Base_SetConfig+0x154>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_Base_SetConfig+0x48>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a45      	ldr	r2, [pc, #276]	@ (8003b94 <TIM_Base_SetConfig+0x158>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d108      	bne.n	8003a96 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a39      	ldr	r2, [pc, #228]	@ (8003b80 <TIM_Base_SetConfig+0x144>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d023      	beq.n	8003ae6 <TIM_Base_SetConfig+0xaa>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa4:	d01f      	beq.n	8003ae6 <TIM_Base_SetConfig+0xaa>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a36      	ldr	r2, [pc, #216]	@ (8003b84 <TIM_Base_SetConfig+0x148>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xaa>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a35      	ldr	r2, [pc, #212]	@ (8003b88 <TIM_Base_SetConfig+0x14c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d017      	beq.n	8003ae6 <TIM_Base_SetConfig+0xaa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a34      	ldr	r2, [pc, #208]	@ (8003b8c <TIM_Base_SetConfig+0x150>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <TIM_Base_SetConfig+0xaa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a33      	ldr	r2, [pc, #204]	@ (8003b90 <TIM_Base_SetConfig+0x154>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <TIM_Base_SetConfig+0xaa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a33      	ldr	r2, [pc, #204]	@ (8003b98 <TIM_Base_SetConfig+0x15c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xaa>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a32      	ldr	r2, [pc, #200]	@ (8003b9c <TIM_Base_SetConfig+0x160>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_Base_SetConfig+0xaa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a31      	ldr	r2, [pc, #196]	@ (8003ba0 <TIM_Base_SetConfig+0x164>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_Base_SetConfig+0xaa>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b94 <TIM_Base_SetConfig+0x158>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d108      	bne.n	8003af8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a18      	ldr	r2, [pc, #96]	@ (8003b80 <TIM_Base_SetConfig+0x144>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <TIM_Base_SetConfig+0x110>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a1a      	ldr	r2, [pc, #104]	@ (8003b90 <TIM_Base_SetConfig+0x154>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00f      	beq.n	8003b4c <TIM_Base_SetConfig+0x110>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b98 <TIM_Base_SetConfig+0x15c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00b      	beq.n	8003b4c <TIM_Base_SetConfig+0x110>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a19      	ldr	r2, [pc, #100]	@ (8003b9c <TIM_Base_SetConfig+0x160>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d007      	beq.n	8003b4c <TIM_Base_SetConfig+0x110>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a18      	ldr	r2, [pc, #96]	@ (8003ba0 <TIM_Base_SetConfig+0x164>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_Base_SetConfig+0x110>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a13      	ldr	r2, [pc, #76]	@ (8003b94 <TIM_Base_SetConfig+0x158>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d103      	bne.n	8003b54 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d105      	bne.n	8003b72 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f023 0201 	bic.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	611a      	str	r2, [r3, #16]
  }
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40013400 	.word	0x40013400
 8003b94:	40015000 	.word	0x40015000
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40014400 	.word	0x40014400
 8003ba0:	40014800 	.word	0x40014800

08003ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e042      	b.n	8003cc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fd fd43 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2224      	movs	r2, #36	@ 0x24
 8003c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f001 f806 	bl	8004c8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fd07 	bl	8004694 <UART_SetConfig>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e01b      	b.n	8003cc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f001 f885 	bl	8004dd0 <UART_CheckIdleState>
 8003cc6:	4603      	mov	r3, r0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	@ 0x28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d167      	bne.n	8003db8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_UART_Transmit_DMA+0x24>
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e060      	b.n	8003dba <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	88fa      	ldrh	r2, [r7, #6]
 8003d02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2221      	movs	r2, #33	@ 0x21
 8003d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d028      	beq.n	8003d78 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d2a:	4a26      	ldr	r2, [pc, #152]	@ (8003dc4 <HAL_UART_Transmit_DMA+0xf4>)
 8003d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d32:	4a25      	ldr	r2, [pc, #148]	@ (8003dc8 <HAL_UART_Transmit_DMA+0xf8>)
 8003d34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d3a:	4a24      	ldr	r2, [pc, #144]	@ (8003dcc <HAL_UART_Transmit_DMA+0xfc>)
 8003d3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d42:	2200      	movs	r2, #0
 8003d44:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4e:	4619      	mov	r1, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3328      	adds	r3, #40	@ 0x28
 8003d56:	461a      	mov	r2, r3
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	f7fd ff67 	bl	8001c2c <HAL_DMA_Start_IT>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2210      	movs	r2, #16
 8003d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e020      	b.n	8003dba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2240      	movs	r2, #64	@ 0x40
 8003d7e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3308      	adds	r3, #8
 8003d86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da0:	623a      	str	r2, [r7, #32]
 8003da2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	69f9      	ldr	r1, [r7, #28]
 8003da6:	6a3a      	ldr	r2, [r7, #32]
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e5      	bne.n	8003d80 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e000      	b.n	8003dba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3728      	adds	r7, #40	@ 0x28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	0800529b 	.word	0x0800529b
 8003dc8:	08005335 	.word	0x08005335
 8003dcc:	080054bb 	.word	0x080054bb

08003dd0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	@ 0x28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d137      	bne.n	8003e58 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_UART_Receive_DMA+0x24>
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e030      	b.n	8003e5a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a18      	ldr	r2, [pc, #96]	@ (8003e64 <HAL_UART_Receive_DMA+0x94>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d01f      	beq.n	8003e48 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d018      	beq.n	8003e48 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	613b      	str	r3, [r7, #16]
   return(result);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	623b      	str	r3, [r7, #32]
 8003e36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	69f9      	ldr	r1, [r7, #28]
 8003e3a:	6a3a      	ldr	r2, [r7, #32]
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e6      	bne.n	8003e16 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f001 f8d6 	bl	8005000 <UART_Start_Receive_DMA>
 8003e54:	4603      	mov	r3, r0
 8003e56:	e000      	b.n	8003e5a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3728      	adds	r7, #40	@ 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40008000 	.word	0x40008000

08003e68 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b090      	sub	sp, #64	@ 0x40
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e7e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8a:	2b80      	cmp	r3, #128	@ 0x80
 8003e8c:	d139      	bne.n	8003f02 <HAL_UART_DMAStop+0x9a>
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e90:	2b21      	cmp	r3, #33	@ 0x21
 8003e92:	d136      	bne.n	8003f02 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3308      	adds	r3, #8
 8003e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e5      	bne.n	8003e94 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd ff24 	bl	8001d22 <HAL_DMA_Abort>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00d      	beq.n	8003efc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe f88b 	bl	8002000 <HAL_DMA_GetError>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d105      	bne.n	8003efc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e047      	b.n	8003f8c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f001 f925 	bl	800514c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b40      	cmp	r3, #64	@ 0x40
 8003f0e:	d13c      	bne.n	8003f8a <HAL_UART_DMAStop+0x122>
 8003f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f12:	2b22      	cmp	r3, #34	@ 0x22
 8003f14:	d139      	bne.n	8003f8a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3308      	adds	r3, #8
 8003f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f36:	61ba      	str	r2, [r7, #24]
 8003f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6979      	ldr	r1, [r7, #20]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	613b      	str	r3, [r7, #16]
   return(result);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d017      	beq.n	8003f84 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fd fee1 	bl	8001d22 <HAL_DMA_Abort>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00e      	beq.n	8003f84 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe f847 	bl	8002000 <HAL_DMA_GetError>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d105      	bne.n	8003f84 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2210      	movs	r2, #16
 8003f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e003      	b.n	8003f8c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f001 f922 	bl	80051ce <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3740      	adds	r7, #64	@ 0x40
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b0ba      	sub	sp, #232	@ 0xe8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003fbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003fc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d11b      	bne.n	8004008 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d015      	beq.n	8004008 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d009      	beq.n	8004008 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8300 	beq.w	80045fe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
      }
      return;
 8004006:	e2fa      	b.n	80045fe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8123 	beq.w	8004258 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004012:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004016:	4b8d      	ldr	r3, [pc, #564]	@ (800424c <HAL_UART_IRQHandler+0x2b8>)
 8004018:	4013      	ands	r3, r2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800401e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004022:	4b8b      	ldr	r3, [pc, #556]	@ (8004250 <HAL_UART_IRQHandler+0x2bc>)
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 8116 	beq.w	8004258 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800402c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d011      	beq.n	800405c <HAL_UART_IRQHandler+0xc8>
 8004038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800405c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d011      	beq.n	800408c <HAL_UART_IRQHandler+0xf8>
 8004068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2202      	movs	r2, #2
 800407a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004082:	f043 0204 	orr.w	r2, r3, #4
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d011      	beq.n	80040bc <HAL_UART_IRQHandler+0x128>
 8004098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2204      	movs	r2, #4
 80040aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b2:	f043 0202 	orr.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d017      	beq.n	80040f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80040d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80040d8:	4b5c      	ldr	r3, [pc, #368]	@ (800424c <HAL_UART_IRQHandler+0x2b8>)
 80040da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00b      	beq.n	80040f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2208      	movs	r2, #8
 80040e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ee:	f043 0208 	orr.w	r2, r3, #8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004100:	2b00      	cmp	r3, #0
 8004102:	d012      	beq.n	800412a <HAL_UART_IRQHandler+0x196>
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00c      	beq.n	800412a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004120:	f043 0220 	orr.w	r2, r3, #32
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8266 	beq.w	8004602 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d013      	beq.n	800416a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d105      	bne.n	800415a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800414e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004170:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417e:	2b40      	cmp	r3, #64	@ 0x40
 8004180:	d005      	beq.n	800418e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004186:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800418a:	2b00      	cmp	r3, #0
 800418c:	d054      	beq.n	8004238 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f001 f81d 	bl	80051ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419e:	2b40      	cmp	r3, #64	@ 0x40
 80041a0:	d146      	bne.n	8004230 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3308      	adds	r3, #8
 80041ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1d9      	bne.n	80041a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d017      	beq.n	8004228 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041fe:	4a15      	ldr	r2, [pc, #84]	@ (8004254 <HAL_UART_IRQHandler+0x2c0>)
 8004200:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004208:	4618      	mov	r0, r3
 800420a:	f7fd fde3 	bl	8001dd4 <HAL_DMA_Abort_IT>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d019      	beq.n	8004248 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800421a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004222:	4610      	mov	r0, r2
 8004224:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004226:	e00f      	b.n	8004248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fa1d 	bl	8004668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422e:	e00b      	b.n	8004248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fa19 	bl	8004668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004236:	e007      	b.n	8004248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fa15 	bl	8004668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004246:	e1dc      	b.n	8004602 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	bf00      	nop
    return;
 800424a:	e1da      	b.n	8004602 <HAL_UART_IRQHandler+0x66e>
 800424c:	10000001 	.word	0x10000001
 8004250:	04000120 	.word	0x04000120
 8004254:	0800553b 	.word	0x0800553b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800425c:	2b01      	cmp	r3, #1
 800425e:	f040 8170 	bne.w	8004542 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8169 	beq.w	8004542 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8162 	beq.w	8004542 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2210      	movs	r2, #16
 8004284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b40      	cmp	r3, #64	@ 0x40
 8004292:	f040 80d8 	bne.w	8004446 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80af 	beq.w	800440c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042b8:	429a      	cmp	r2, r3
 80042ba:	f080 80a7 	bcs.w	800440c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f040 8087 	bne.w	80043ea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800430a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004312:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800431e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1da      	bne.n	80042dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3308      	adds	r3, #8
 8004346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800434a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800434e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004352:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800435c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e1      	bne.n	8004326 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3308      	adds	r3, #8
 8004368:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004372:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004386:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004388:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800438c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e3      	bne.n	8004362 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043b8:	f023 0310 	bic.w	r3, r3, #16
 80043bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e4      	bne.n	80043a8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fd fc9c 	bl	8001d22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	b29b      	uxth	r3, r3
 8004402:	4619      	mov	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f939 	bl	800467c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800440a:	e0fc      	b.n	8004606 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004416:	429a      	cmp	r2, r3
 8004418:	f040 80f5 	bne.w	8004606 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b20      	cmp	r3, #32
 800442c:	f040 80eb 	bne.w	8004606 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f91c 	bl	800467c <HAL_UARTEx_RxEventCallback>
      return;
 8004444:	e0df      	b.n	8004606 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004452:	b29b      	uxth	r3, r3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80d1 	beq.w	800460a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80cc 	beq.w	800460a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004486:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004494:	647b      	str	r3, [r7, #68]	@ 0x44
 8004496:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800449a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e4      	bne.n	8004472 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3308      	adds	r3, #8
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	623b      	str	r3, [r7, #32]
   return(result);
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3308      	adds	r3, #8
 80044cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80044d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e1      	bne.n	80044a8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	60fb      	str	r3, [r7, #12]
   return(result);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f023 0310 	bic.w	r3, r3, #16
 800450c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	69b9      	ldr	r1, [r7, #24]
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	617b      	str	r3, [r7, #20]
   return(result);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e4      	bne.n	80044f8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004538:	4619      	mov	r1, r3
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f89e 	bl	800467c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004540:	e063      	b.n	800460a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00e      	beq.n	800456c <HAL_UART_IRQHandler+0x5d8>
 800454e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004562:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 f825 	bl	80055b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800456a:	e051      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800456c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004574:	2b00      	cmp	r3, #0
 8004576:	d014      	beq.n	80045a2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800457c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004594:	2b00      	cmp	r3, #0
 8004596:	d03a      	beq.n	800460e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
    }
    return;
 80045a0:	e035      	b.n	800460e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_UART_IRQHandler+0x62e>
 80045ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 ffcf 	bl	800555e <UART_EndTransmit_IT>
    return;
 80045c0:	e026      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_UART_IRQHandler+0x64e>
 80045ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fffe 	bl	80055dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045e0:	e016      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d010      	beq.n	8004610 <HAL_UART_IRQHandler+0x67c>
 80045ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	da0c      	bge.n	8004610 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 ffe6 	bl	80055c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045fc:	e008      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
      return;
 80045fe:	bf00      	nop
 8004600:	e006      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
    return;
 8004602:	bf00      	nop
 8004604:	e004      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
      return;
 8004606:	bf00      	nop
 8004608:	e002      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
      return;
 800460a:	bf00      	nop
 800460c:	e000      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
    return;
 800460e:	bf00      	nop
  }
}
 8004610:	37e8      	adds	r7, #232	@ 0xe8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop

08004618 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004698:	b08c      	sub	sp, #48	@ 0x30
 800469a:	af00      	add	r7, sp, #0
 800469c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	431a      	orrs	r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4baa      	ldr	r3, [pc, #680]	@ (800496c <UART_SetConfig+0x2d8>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a9f      	ldr	r2, [pc, #636]	@ (8004970 <UART_SetConfig+0x2dc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046fc:	4313      	orrs	r3, r2
 80046fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800470a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004714:	430b      	orrs	r3, r1
 8004716:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	f023 010f 	bic.w	r1, r3, #15
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a90      	ldr	r2, [pc, #576]	@ (8004974 <UART_SetConfig+0x2e0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d125      	bne.n	8004784 <UART_SetConfig+0xf0>
 8004738:	4b8f      	ldr	r3, [pc, #572]	@ (8004978 <UART_SetConfig+0x2e4>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b03      	cmp	r3, #3
 8004744:	d81a      	bhi.n	800477c <UART_SetConfig+0xe8>
 8004746:	a201      	add	r2, pc, #4	@ (adr r2, 800474c <UART_SetConfig+0xb8>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	0800475d 	.word	0x0800475d
 8004750:	0800476d 	.word	0x0800476d
 8004754:	08004765 	.word	0x08004765
 8004758:	08004775 	.word	0x08004775
 800475c:	2301      	movs	r3, #1
 800475e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004762:	e116      	b.n	8004992 <UART_SetConfig+0x2fe>
 8004764:	2302      	movs	r3, #2
 8004766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800476a:	e112      	b.n	8004992 <UART_SetConfig+0x2fe>
 800476c:	2304      	movs	r3, #4
 800476e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004772:	e10e      	b.n	8004992 <UART_SetConfig+0x2fe>
 8004774:	2308      	movs	r3, #8
 8004776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800477a:	e10a      	b.n	8004992 <UART_SetConfig+0x2fe>
 800477c:	2310      	movs	r3, #16
 800477e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004782:	e106      	b.n	8004992 <UART_SetConfig+0x2fe>
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a7c      	ldr	r2, [pc, #496]	@ (800497c <UART_SetConfig+0x2e8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d138      	bne.n	8004800 <UART_SetConfig+0x16c>
 800478e:	4b7a      	ldr	r3, [pc, #488]	@ (8004978 <UART_SetConfig+0x2e4>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	2b0c      	cmp	r3, #12
 800479a:	d82d      	bhi.n	80047f8 <UART_SetConfig+0x164>
 800479c:	a201      	add	r2, pc, #4	@ (adr r2, 80047a4 <UART_SetConfig+0x110>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047d9 	.word	0x080047d9
 80047a8:	080047f9 	.word	0x080047f9
 80047ac:	080047f9 	.word	0x080047f9
 80047b0:	080047f9 	.word	0x080047f9
 80047b4:	080047e9 	.word	0x080047e9
 80047b8:	080047f9 	.word	0x080047f9
 80047bc:	080047f9 	.word	0x080047f9
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	080047e1 	.word	0x080047e1
 80047c8:	080047f9 	.word	0x080047f9
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	080047f1 	.word	0x080047f1
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047de:	e0d8      	b.n	8004992 <UART_SetConfig+0x2fe>
 80047e0:	2302      	movs	r3, #2
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047e6:	e0d4      	b.n	8004992 <UART_SetConfig+0x2fe>
 80047e8:	2304      	movs	r3, #4
 80047ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ee:	e0d0      	b.n	8004992 <UART_SetConfig+0x2fe>
 80047f0:	2308      	movs	r3, #8
 80047f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047f6:	e0cc      	b.n	8004992 <UART_SetConfig+0x2fe>
 80047f8:	2310      	movs	r3, #16
 80047fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047fe:	e0c8      	b.n	8004992 <UART_SetConfig+0x2fe>
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a5e      	ldr	r2, [pc, #376]	@ (8004980 <UART_SetConfig+0x2ec>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d125      	bne.n	8004856 <UART_SetConfig+0x1c2>
 800480a:	4b5b      	ldr	r3, [pc, #364]	@ (8004978 <UART_SetConfig+0x2e4>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004810:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004814:	2b30      	cmp	r3, #48	@ 0x30
 8004816:	d016      	beq.n	8004846 <UART_SetConfig+0x1b2>
 8004818:	2b30      	cmp	r3, #48	@ 0x30
 800481a:	d818      	bhi.n	800484e <UART_SetConfig+0x1ba>
 800481c:	2b20      	cmp	r3, #32
 800481e:	d00a      	beq.n	8004836 <UART_SetConfig+0x1a2>
 8004820:	2b20      	cmp	r3, #32
 8004822:	d814      	bhi.n	800484e <UART_SetConfig+0x1ba>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <UART_SetConfig+0x19a>
 8004828:	2b10      	cmp	r3, #16
 800482a:	d008      	beq.n	800483e <UART_SetConfig+0x1aa>
 800482c:	e00f      	b.n	800484e <UART_SetConfig+0x1ba>
 800482e:	2300      	movs	r3, #0
 8004830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004834:	e0ad      	b.n	8004992 <UART_SetConfig+0x2fe>
 8004836:	2302      	movs	r3, #2
 8004838:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800483c:	e0a9      	b.n	8004992 <UART_SetConfig+0x2fe>
 800483e:	2304      	movs	r3, #4
 8004840:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004844:	e0a5      	b.n	8004992 <UART_SetConfig+0x2fe>
 8004846:	2308      	movs	r3, #8
 8004848:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800484c:	e0a1      	b.n	8004992 <UART_SetConfig+0x2fe>
 800484e:	2310      	movs	r3, #16
 8004850:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004854:	e09d      	b.n	8004992 <UART_SetConfig+0x2fe>
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a4a      	ldr	r2, [pc, #296]	@ (8004984 <UART_SetConfig+0x2f0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d125      	bne.n	80048ac <UART_SetConfig+0x218>
 8004860:	4b45      	ldr	r3, [pc, #276]	@ (8004978 <UART_SetConfig+0x2e4>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004866:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800486a:	2bc0      	cmp	r3, #192	@ 0xc0
 800486c:	d016      	beq.n	800489c <UART_SetConfig+0x208>
 800486e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004870:	d818      	bhi.n	80048a4 <UART_SetConfig+0x210>
 8004872:	2b80      	cmp	r3, #128	@ 0x80
 8004874:	d00a      	beq.n	800488c <UART_SetConfig+0x1f8>
 8004876:	2b80      	cmp	r3, #128	@ 0x80
 8004878:	d814      	bhi.n	80048a4 <UART_SetConfig+0x210>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <UART_SetConfig+0x1f0>
 800487e:	2b40      	cmp	r3, #64	@ 0x40
 8004880:	d008      	beq.n	8004894 <UART_SetConfig+0x200>
 8004882:	e00f      	b.n	80048a4 <UART_SetConfig+0x210>
 8004884:	2300      	movs	r3, #0
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800488a:	e082      	b.n	8004992 <UART_SetConfig+0x2fe>
 800488c:	2302      	movs	r3, #2
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004892:	e07e      	b.n	8004992 <UART_SetConfig+0x2fe>
 8004894:	2304      	movs	r3, #4
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800489a:	e07a      	b.n	8004992 <UART_SetConfig+0x2fe>
 800489c:	2308      	movs	r3, #8
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048a2:	e076      	b.n	8004992 <UART_SetConfig+0x2fe>
 80048a4:	2310      	movs	r3, #16
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048aa:	e072      	b.n	8004992 <UART_SetConfig+0x2fe>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a35      	ldr	r2, [pc, #212]	@ (8004988 <UART_SetConfig+0x2f4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d12a      	bne.n	800490c <UART_SetConfig+0x278>
 80048b6:	4b30      	ldr	r3, [pc, #192]	@ (8004978 <UART_SetConfig+0x2e4>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048c4:	d01a      	beq.n	80048fc <UART_SetConfig+0x268>
 80048c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ca:	d81b      	bhi.n	8004904 <UART_SetConfig+0x270>
 80048cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048d0:	d00c      	beq.n	80048ec <UART_SetConfig+0x258>
 80048d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048d6:	d815      	bhi.n	8004904 <UART_SetConfig+0x270>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <UART_SetConfig+0x250>
 80048dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e0:	d008      	beq.n	80048f4 <UART_SetConfig+0x260>
 80048e2:	e00f      	b.n	8004904 <UART_SetConfig+0x270>
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ea:	e052      	b.n	8004992 <UART_SetConfig+0x2fe>
 80048ec:	2302      	movs	r3, #2
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f2:	e04e      	b.n	8004992 <UART_SetConfig+0x2fe>
 80048f4:	2304      	movs	r3, #4
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fa:	e04a      	b.n	8004992 <UART_SetConfig+0x2fe>
 80048fc:	2308      	movs	r3, #8
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004902:	e046      	b.n	8004992 <UART_SetConfig+0x2fe>
 8004904:	2310      	movs	r3, #16
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800490a:	e042      	b.n	8004992 <UART_SetConfig+0x2fe>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a17      	ldr	r2, [pc, #92]	@ (8004970 <UART_SetConfig+0x2dc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d13a      	bne.n	800498c <UART_SetConfig+0x2f8>
 8004916:	4b18      	ldr	r3, [pc, #96]	@ (8004978 <UART_SetConfig+0x2e4>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004920:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004924:	d01a      	beq.n	800495c <UART_SetConfig+0x2c8>
 8004926:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800492a:	d81b      	bhi.n	8004964 <UART_SetConfig+0x2d0>
 800492c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004930:	d00c      	beq.n	800494c <UART_SetConfig+0x2b8>
 8004932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004936:	d815      	bhi.n	8004964 <UART_SetConfig+0x2d0>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <UART_SetConfig+0x2b0>
 800493c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004940:	d008      	beq.n	8004954 <UART_SetConfig+0x2c0>
 8004942:	e00f      	b.n	8004964 <UART_SetConfig+0x2d0>
 8004944:	2300      	movs	r3, #0
 8004946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800494a:	e022      	b.n	8004992 <UART_SetConfig+0x2fe>
 800494c:	2302      	movs	r3, #2
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004952:	e01e      	b.n	8004992 <UART_SetConfig+0x2fe>
 8004954:	2304      	movs	r3, #4
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495a:	e01a      	b.n	8004992 <UART_SetConfig+0x2fe>
 800495c:	2308      	movs	r3, #8
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004962:	e016      	b.n	8004992 <UART_SetConfig+0x2fe>
 8004964:	2310      	movs	r3, #16
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800496a:	e012      	b.n	8004992 <UART_SetConfig+0x2fe>
 800496c:	cfff69f3 	.word	0xcfff69f3
 8004970:	40008000 	.word	0x40008000
 8004974:	40013800 	.word	0x40013800
 8004978:	40021000 	.word	0x40021000
 800497c:	40004400 	.word	0x40004400
 8004980:	40004800 	.word	0x40004800
 8004984:	40004c00 	.word	0x40004c00
 8004988:	40005000 	.word	0x40005000
 800498c:	2310      	movs	r3, #16
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4aae      	ldr	r2, [pc, #696]	@ (8004c50 <UART_SetConfig+0x5bc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	f040 8097 	bne.w	8004acc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800499e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d823      	bhi.n	80049ee <UART_SetConfig+0x35a>
 80049a6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ac <UART_SetConfig+0x318>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049ef 	.word	0x080049ef
 80049b4:	080049d9 	.word	0x080049d9
 80049b8:	080049ef 	.word	0x080049ef
 80049bc:	080049df 	.word	0x080049df
 80049c0:	080049ef 	.word	0x080049ef
 80049c4:	080049ef 	.word	0x080049ef
 80049c8:	080049ef 	.word	0x080049ef
 80049cc:	080049e7 	.word	0x080049e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d0:	f7fe faf0 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 80049d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049d6:	e010      	b.n	80049fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d8:	4b9e      	ldr	r3, [pc, #632]	@ (8004c54 <UART_SetConfig+0x5c0>)
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049dc:	e00d      	b.n	80049fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049de:	f7fe fa7b 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 80049e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049e4:	e009      	b.n	80049fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049ec:	e005      	b.n	80049fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8130 	beq.w	8004c62 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	4a94      	ldr	r2, [pc, #592]	@ (8004c58 <UART_SetConfig+0x5c4>)
 8004a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	4413      	add	r3, r2
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d305      	bcc.n	8004a32 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d903      	bls.n	8004a3a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a38:	e113      	b.n	8004c62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	60fa      	str	r2, [r7, #12]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	4a84      	ldr	r2, [pc, #528]	@ (8004c58 <UART_SetConfig+0x5c4>)
 8004a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2200      	movs	r2, #0
 8004a50:	603b      	str	r3, [r7, #0]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a5c:	f7fb fc98 	bl	8000390 <__aeabi_uldivmod>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4610      	mov	r0, r2
 8004a66:	4619      	mov	r1, r3
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	020b      	lsls	r3, r1, #8
 8004a72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a76:	0202      	lsls	r2, r0, #8
 8004a78:	6979      	ldr	r1, [r7, #20]
 8004a7a:	6849      	ldr	r1, [r1, #4]
 8004a7c:	0849      	lsrs	r1, r1, #1
 8004a7e:	2000      	movs	r0, #0
 8004a80:	460c      	mov	r4, r1
 8004a82:	4605      	mov	r5, r0
 8004a84:	eb12 0804 	adds.w	r8, r2, r4
 8004a88:	eb43 0905 	adc.w	r9, r3, r5
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	469a      	mov	sl, r3
 8004a94:	4693      	mov	fp, r2
 8004a96:	4652      	mov	r2, sl
 8004a98:	465b      	mov	r3, fp
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	f7fb fc77 	bl	8000390 <__aeabi_uldivmod>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ab0:	d308      	bcc.n	8004ac4 <UART_SetConfig+0x430>
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ab8:	d204      	bcs.n	8004ac4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6a3a      	ldr	r2, [r7, #32]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	e0ce      	b.n	8004c62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004aca:	e0ca      	b.n	8004c62 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad4:	d166      	bne.n	8004ba4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004ad6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d827      	bhi.n	8004b2e <UART_SetConfig+0x49a>
 8004ade:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae4 <UART_SetConfig+0x450>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	08004b2f 	.word	0x08004b2f
 8004af4:	08004b1f 	.word	0x08004b1f
 8004af8:	08004b2f 	.word	0x08004b2f
 8004afc:	08004b2f 	.word	0x08004b2f
 8004b00:	08004b2f 	.word	0x08004b2f
 8004b04:	08004b27 	.word	0x08004b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7fe fa54 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8004b0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b0e:	e014      	b.n	8004b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b10:	f7fe fa66 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 8004b14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b16:	e010      	b.n	8004b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b18:	4b4e      	ldr	r3, [pc, #312]	@ (8004c54 <UART_SetConfig+0x5c0>)
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b1c:	e00d      	b.n	8004b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1e:	f7fe f9db 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8004b22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b24:	e009      	b.n	8004b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b2c:	e005      	b.n	8004b3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8090 	beq.w	8004c62 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	4a44      	ldr	r2, [pc, #272]	@ (8004c58 <UART_SetConfig+0x5c4>)
 8004b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b54:	005a      	lsls	r2, r3, #1
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	085b      	lsrs	r3, r3, #1
 8004b5c:	441a      	add	r2, r3
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	2b0f      	cmp	r3, #15
 8004b6c:	d916      	bls.n	8004b9c <UART_SetConfig+0x508>
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b74:	d212      	bcs.n	8004b9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f023 030f 	bic.w	r3, r3, #15
 8004b7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	8bfb      	ldrh	r3, [r7, #30]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	8bfa      	ldrh	r2, [r7, #30]
 8004b98:	60da      	str	r2, [r3, #12]
 8004b9a:	e062      	b.n	8004c62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ba2:	e05e      	b.n	8004c62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ba4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d828      	bhi.n	8004bfe <UART_SetConfig+0x56a>
 8004bac:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb4 <UART_SetConfig+0x520>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004be1 	.word	0x08004be1
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	08004bff 	.word	0x08004bff
 8004bc4:	08004bef 	.word	0x08004bef
 8004bc8:	08004bff 	.word	0x08004bff
 8004bcc:	08004bff 	.word	0x08004bff
 8004bd0:	08004bff 	.word	0x08004bff
 8004bd4:	08004bf7 	.word	0x08004bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd8:	f7fe f9ec 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8004bdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bde:	e014      	b.n	8004c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be0:	f7fe f9fe 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 8004be4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004be6:	e010      	b.n	8004c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c54 <UART_SetConfig+0x5c0>)
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bec:	e00d      	b.n	8004c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bee:	f7fe f973 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8004bf2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bf4:	e009      	b.n	8004c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bfc:	e005      	b.n	8004c0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c08:	bf00      	nop
    }

    if (pclk != 0U)
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d028      	beq.n	8004c62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	4a10      	ldr	r2, [pc, #64]	@ (8004c58 <UART_SetConfig+0x5c4>)
 8004c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	441a      	add	r2, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	2b0f      	cmp	r3, #15
 8004c38:	d910      	bls.n	8004c5c <UART_SetConfig+0x5c8>
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c40:	d20c      	bcs.n	8004c5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60da      	str	r2, [r3, #12]
 8004c4c:	e009      	b.n	8004c62 <UART_SetConfig+0x5ce>
 8004c4e:	bf00      	nop
 8004c50:	40008000 	.word	0x40008000
 8004c54:	00f42400 	.word	0x00f42400
 8004c58:	080127f4 	.word	0x080127f4
      }
      else
      {
        ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c7e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3730      	adds	r7, #48	@ 0x30
 8004c86:	46bd      	mov	sp, r7
 8004c88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01a      	beq.n	8004da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d8a:	d10a      	bne.n	8004da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	605a      	str	r2, [r3, #4]
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b098      	sub	sp, #96	@ 0x60
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de0:	f7fc fd90 	bl	8001904 <HAL_GetTick>
 8004de4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d12f      	bne.n	8004e54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f88e 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d022      	beq.n	8004e54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e6      	bne.n	8004e0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e063      	b.n	8004f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d149      	bne.n	8004ef6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f857 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d03c      	beq.n	8004ef6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	623b      	str	r3, [r7, #32]
   return(result);
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e6      	bne.n	8004e7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ece:	61fa      	str	r2, [r7, #28]
 8004ed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	69b9      	ldr	r1, [r7, #24]
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	617b      	str	r3, [r7, #20]
   return(result);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e5      	bne.n	8004eae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e012      	b.n	8004f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3758      	adds	r7, #88	@ 0x58
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f34:	e04f      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f3c:	d04b      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3e:	f7fc fce1 	bl	8001904 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e04e      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d037      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b80      	cmp	r3, #128	@ 0x80
 8004f6a:	d034      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b40      	cmp	r3, #64	@ 0x40
 8004f70:	d031      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d110      	bne.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2208      	movs	r2, #8
 8004f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f920 	bl	80051ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2208      	movs	r2, #8
 8004f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e029      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fb0:	d111      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f906 	bl	80051ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e00f      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d0a0      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b096      	sub	sp, #88	@ 0x58
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2222      	movs	r2, #34	@ 0x22
 8005028:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005032:	2b00      	cmp	r3, #0
 8005034:	d02d      	beq.n	8005092 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503c:	4a40      	ldr	r2, [pc, #256]	@ (8005140 <UART_Start_Receive_DMA+0x140>)
 800503e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005046:	4a3f      	ldr	r2, [pc, #252]	@ (8005144 <UART_Start_Receive_DMA+0x144>)
 8005048:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005050:	4a3d      	ldr	r2, [pc, #244]	@ (8005148 <UART_Start_Receive_DMA+0x148>)
 8005052:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800505a:	2200      	movs	r2, #0
 800505c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3324      	adds	r3, #36	@ 0x24
 800506a:	4619      	mov	r1, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005070:	461a      	mov	r2, r3
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	f7fc fdda 	bl	8001c2c <HAL_DMA_Start_IT>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2210      	movs	r2, #16
 8005082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e051      	b.n	8005136 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d018      	beq.n	80050cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80050c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e6      	bne.n	800509a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3308      	adds	r3, #8
 80050d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80050ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80050ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80050fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3308      	adds	r3, #8
 8005106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	613b      	str	r3, [r7, #16]
   return(result);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3308      	adds	r3, #8
 800511e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005120:	623a      	str	r2, [r7, #32]
 8005122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	69f9      	ldr	r1, [r7, #28]
 8005126:	6a3a      	ldr	r2, [r7, #32]
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	61bb      	str	r3, [r7, #24]
   return(result);
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e5      	bne.n	8005100 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3758      	adds	r7, #88	@ 0x58
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	08005351 	.word	0x08005351
 8005144:	0800547d 	.word	0x0800547d
 8005148:	080054bb 	.word	0x080054bb

0800514c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b08f      	sub	sp, #60	@ 0x3c
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	61fb      	str	r3, [r7, #28]
   return(result);
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005168:	637b      	str	r3, [r7, #52]	@ 0x34
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005174:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e6      	bne.n	8005154 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	60bb      	str	r3, [r7, #8]
   return(result);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800519c:	633b      	str	r3, [r7, #48]	@ 0x30
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3308      	adds	r3, #8
 80051a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a6:	61ba      	str	r2, [r7, #24]
 80051a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6979      	ldr	r1, [r7, #20]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	613b      	str	r3, [r7, #16]
   return(result);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e5      	bne.n	8005186 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80051c2:	bf00      	nop
 80051c4:	373c      	adds	r7, #60	@ 0x3c
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b095      	sub	sp, #84	@ 0x54
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80051f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e6      	bne.n	80051d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3308      	adds	r3, #8
 800520e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	61fb      	str	r3, [r7, #28]
   return(result);
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800521e:	f023 0301 	bic.w	r3, r3, #1
 8005222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3308      	adds	r3, #8
 800522a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800522c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800522e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e3      	bne.n	8005208 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d118      	bne.n	800527a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	e853 3f00 	ldrex	r3, [r3]
 8005254:	60bb      	str	r3, [r7, #8]
   return(result);
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f023 0310 	bic.w	r3, r3, #16
 800525c:	647b      	str	r3, [r7, #68]	@ 0x44
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6979      	ldr	r1, [r7, #20]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	613b      	str	r3, [r7, #16]
   return(result);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e6      	bne.n	8005248 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800528e:	bf00      	nop
 8005290:	3754      	adds	r7, #84	@ 0x54
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b090      	sub	sp, #64	@ 0x40
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d137      	bne.n	8005326 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80052b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	623b      	str	r3, [r7, #32]
   return(result);
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3308      	adds	r3, #8
 80052dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052de:	633a      	str	r2, [r7, #48]	@ 0x30
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e5      	bne.n	80052be <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005306:	637b      	str	r3, [r7, #52]	@ 0x34
 8005308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	69b9      	ldr	r1, [r7, #24]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	617b      	str	r3, [r7, #20]
   return(result);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e6      	bne.n	80052f2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005324:	e002      	b.n	800532c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005326:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005328:	f7ff f976 	bl	8004618 <HAL_UART_TxCpltCallback>
}
 800532c:	bf00      	nop
 800532e:	3740      	adds	r7, #64	@ 0x40
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005340:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7ff f972 	bl	800462c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005348:	bf00      	nop
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b09c      	sub	sp, #112	@ 0x70
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	d171      	bne.n	8005450 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800536c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800536e:	2200      	movs	r2, #0
 8005370:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800538a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005392:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005394:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005398:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e6      	bne.n	8005374 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3308      	adds	r3, #8
 80053ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b8:	f023 0301 	bic.w	r3, r3, #1
 80053bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80053be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3308      	adds	r3, #8
 80053c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80053c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80053c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e5      	bne.n	80053a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3308      	adds	r3, #8
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	623b      	str	r3, [r7, #32]
   return(result);
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3308      	adds	r3, #8
 80053f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80053fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e5      	bne.n	80053da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800540e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d118      	bne.n	8005450 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	60fb      	str	r3, [r7, #12]
   return(result);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0310 	bic.w	r3, r3, #16
 8005432:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	69b9      	ldr	r1, [r7, #24]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	617b      	str	r3, [r7, #20]
   return(result);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e6      	bne.n	800541e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005452:	2200      	movs	r2, #0
 8005454:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d107      	bne.n	800546e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800545e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005464:	4619      	mov	r1, r3
 8005466:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005468:	f7ff f908 	bl	800467c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800546c:	e002      	b.n	8005474 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800546e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005470:	f7ff f8e6 	bl	8004640 <HAL_UART_RxCpltCallback>
}
 8005474:	bf00      	nop
 8005476:	3770      	adds	r7, #112	@ 0x70
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005488:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d109      	bne.n	80054ac <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4619      	mov	r1, r3
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff f8e9 	bl	800467c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054aa:	e002      	b.n	80054b2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff f8d1 	bl	8004654 <HAL_UART_RxHalfCpltCallback>
}
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b086      	sub	sp, #24
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e2:	2b80      	cmp	r3, #128	@ 0x80
 80054e4:	d109      	bne.n	80054fa <UART_DMAError+0x40>
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b21      	cmp	r3, #33	@ 0x21
 80054ea:	d106      	bne.n	80054fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80054f4:	6978      	ldr	r0, [r7, #20]
 80054f6:	f7ff fe29 	bl	800514c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005504:	2b40      	cmp	r3, #64	@ 0x40
 8005506:	d109      	bne.n	800551c <UART_DMAError+0x62>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b22      	cmp	r3, #34	@ 0x22
 800550c:	d106      	bne.n	800551c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2200      	movs	r2, #0
 8005512:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005516:	6978      	ldr	r0, [r7, #20]
 8005518:	f7ff fe59 	bl	80051ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005522:	f043 0210 	orr.w	r2, r3, #16
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800552c:	6978      	ldr	r0, [r7, #20]
 800552e:	f7ff f89b 	bl	8004668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005532:	bf00      	nop
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7ff f889 	bl	8004668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005556:	bf00      	nop
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b088      	sub	sp, #32
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	60bb      	str	r3, [r7, #8]
   return(result);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6979      	ldr	r1, [r7, #20]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	613b      	str	r3, [r7, #16]
   return(result);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e6      	bne.n	8005566 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff f836 	bl	8004618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ac:	bf00      	nop
 80055ae:	3720      	adds	r7, #32
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_UARTEx_DisableFifoMode+0x16>
 8005602:	2302      	movs	r3, #2
 8005604:	e027      	b.n	8005656 <HAL_UARTEx_DisableFifoMode+0x66>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2224      	movs	r2, #36	@ 0x24
 8005612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005634:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005676:	2302      	movs	r3, #2
 8005678:	e02d      	b.n	80056d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2224      	movs	r2, #36	@ 0x24
 8005686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f850 	bl	800575c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b084      	sub	sp, #16
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e02d      	b.n	8005752 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	@ 0x24
 8005702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f812 	bl	800575c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005768:	2b00      	cmp	r3, #0
 800576a:	d108      	bne.n	800577e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800577c:	e031      	b.n	80057e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800577e:	2308      	movs	r3, #8
 8005780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005782:	2308      	movs	r3, #8
 8005784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	0e5b      	lsrs	r3, r3, #25
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	0f5b      	lsrs	r3, r3, #29
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	7b3a      	ldrb	r2, [r7, #12]
 80057aa:	4911      	ldr	r1, [pc, #68]	@ (80057f0 <UARTEx_SetNbDataToProcess+0x94>)
 80057ac:	5c8a      	ldrb	r2, [r1, r2]
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057b2:	7b3a      	ldrb	r2, [r7, #12]
 80057b4:	490f      	ldr	r1, [pc, #60]	@ (80057f4 <UARTEx_SetNbDataToProcess+0x98>)
 80057b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80057bc:	b29a      	uxth	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	7b7a      	ldrb	r2, [r7, #13]
 80057c8:	4909      	ldr	r1, [pc, #36]	@ (80057f0 <UARTEx_SetNbDataToProcess+0x94>)
 80057ca:	5c8a      	ldrb	r2, [r1, r2]
 80057cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057d0:	7b7a      	ldrb	r2, [r7, #13]
 80057d2:	4908      	ldr	r1, [pc, #32]	@ (80057f4 <UARTEx_SetNbDataToProcess+0x98>)
 80057d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80057da:	b29a      	uxth	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	0801280c 	.word	0x0801280c
 80057f4:	08012814 	.word	0x08012814

080057f8 <__NVIC_SetPriority>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4603      	mov	r3, r0
 8005800:	6039      	str	r1, [r7, #0]
 8005802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005808:	2b00      	cmp	r3, #0
 800580a:	db0a      	blt.n	8005822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	490c      	ldr	r1, [pc, #48]	@ (8005844 <__NVIC_SetPriority+0x4c>)
 8005812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005816:	0112      	lsls	r2, r2, #4
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	440b      	add	r3, r1
 800581c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005820:	e00a      	b.n	8005838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	b2da      	uxtb	r2, r3
 8005826:	4908      	ldr	r1, [pc, #32]	@ (8005848 <__NVIC_SetPriority+0x50>)
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	3b04      	subs	r3, #4
 8005830:	0112      	lsls	r2, r2, #4
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	440b      	add	r3, r1
 8005836:	761a      	strb	r2, [r3, #24]
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	e000e100 	.word	0xe000e100
 8005848:	e000ed00 	.word	0xe000ed00

0800584c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005850:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <SysTick_Handler+0x1c>)
 8005852:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005854:	f001 fd40 	bl	80072d8 <xTaskGetSchedulerState>
 8005858:	4603      	mov	r3, r0
 800585a:	2b01      	cmp	r3, #1
 800585c:	d001      	beq.n	8005862 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800585e:	f002 fb3b 	bl	8007ed8 <xPortSysTickHandler>
  }
}
 8005862:	bf00      	nop
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	e000e010 	.word	0xe000e010

0800586c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005870:	2100      	movs	r1, #0
 8005872:	f06f 0004 	mvn.w	r0, #4
 8005876:	f7ff ffbf 	bl	80057f8 <__NVIC_SetPriority>
#endif
}
 800587a:	bf00      	nop
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005886:	f3ef 8305 	mrs	r3, IPSR
 800588a:	603b      	str	r3, [r7, #0]
  return(result);
 800588c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005892:	f06f 0305 	mvn.w	r3, #5
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	e00c      	b.n	80058b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800589a:	4b0a      	ldr	r3, [pc, #40]	@ (80058c4 <osKernelInitialize+0x44>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d105      	bne.n	80058ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058a2:	4b08      	ldr	r3, [pc, #32]	@ (80058c4 <osKernelInitialize+0x44>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	607b      	str	r3, [r7, #4]
 80058ac:	e002      	b.n	80058b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058b4:	687b      	ldr	r3, [r7, #4]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	2000469c 	.word	0x2000469c

080058c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ce:	f3ef 8305 	mrs	r3, IPSR
 80058d2:	603b      	str	r3, [r7, #0]
  return(result);
 80058d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80058da:	f06f 0305 	mvn.w	r3, #5
 80058de:	607b      	str	r3, [r7, #4]
 80058e0:	e010      	b.n	8005904 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005910 <osKernelStart+0x48>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d109      	bne.n	80058fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80058ea:	f7ff ffbf 	bl	800586c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058ee:	4b08      	ldr	r3, [pc, #32]	@ (8005910 <osKernelStart+0x48>)
 80058f0:	2202      	movs	r2, #2
 80058f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058f4:	f001 f87a 	bl	80069ec <vTaskStartScheduler>
      stat = osOK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	607b      	str	r3, [r7, #4]
 80058fc:	e002      	b.n	8005904 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80058fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005902:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005904:	687b      	ldr	r3, [r7, #4]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	2000469c 	.word	0x2000469c

08005914 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b08e      	sub	sp, #56	@ 0x38
 8005918:	af04      	add	r7, sp, #16
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005924:	f3ef 8305 	mrs	r3, IPSR
 8005928:	617b      	str	r3, [r7, #20]
  return(result);
 800592a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800592c:	2b00      	cmp	r3, #0
 800592e:	d17e      	bne.n	8005a2e <osThreadNew+0x11a>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d07b      	beq.n	8005a2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005936:	2380      	movs	r3, #128	@ 0x80
 8005938:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800593a:	2318      	movs	r3, #24
 800593c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005946:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d045      	beq.n	80059da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <osThreadNew+0x48>
        name = attr->name;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <osThreadNew+0x6e>
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	2b38      	cmp	r3, #56	@ 0x38
 8005974:	d805      	bhi.n	8005982 <osThreadNew+0x6e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <osThreadNew+0x72>
        return (NULL);
 8005982:	2300      	movs	r3, #0
 8005984:	e054      	b.n	8005a30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	089b      	lsrs	r3, r3, #2
 8005994:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00e      	beq.n	80059bc <osThreadNew+0xa8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b5b      	cmp	r3, #91	@ 0x5b
 80059a4:	d90a      	bls.n	80059bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d006      	beq.n	80059bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <osThreadNew+0xa8>
        mem = 1;
 80059b6:	2301      	movs	r3, #1
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	e010      	b.n	80059de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10c      	bne.n	80059de <osThreadNew+0xca>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d108      	bne.n	80059de <osThreadNew+0xca>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <osThreadNew+0xca>
          mem = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	e001      	b.n	80059de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d110      	bne.n	8005a06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059ec:	9202      	str	r2, [sp, #8]
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	6a3a      	ldr	r2, [r7, #32]
 80059f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fe1a 	bl	8006634 <xTaskCreateStatic>
 8005a00:	4603      	mov	r3, r0
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	e013      	b.n	8005a2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d110      	bne.n	8005a2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	f107 0310 	add.w	r3, r7, #16
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fe68 	bl	80066f4 <xTaskCreate>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d001      	beq.n	8005a2e <osThreadNew+0x11a>
            hTask = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a2e:	693b      	ldr	r3, [r7, #16]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3728      	adds	r7, #40	@ 0x28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a40:	f3ef 8305 	mrs	r3, IPSR
 8005a44:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <osDelay+0x1c>
    stat = osErrorISR;
 8005a4c:	f06f 0305 	mvn.w	r3, #5
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	e007      	b.n	8005a64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 ff8e 	bl	8006980 <vTaskDelay>
    }
  }

  return (stat);
 8005a64:	68fb      	ldr	r3, [r7, #12]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a07      	ldr	r2, [pc, #28]	@ (8005a9c <vApplicationGetIdleTaskMemory+0x2c>)
 8005a80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4a06      	ldr	r2, [pc, #24]	@ (8005aa0 <vApplicationGetIdleTaskMemory+0x30>)
 8005a86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2280      	movs	r2, #128	@ 0x80
 8005a8c:	601a      	str	r2, [r3, #0]
}
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	200046a0 	.word	0x200046a0
 8005aa0:	200046fc 	.word	0x200046fc

08005aa4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4a07      	ldr	r2, [pc, #28]	@ (8005ad0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ab4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	4a06      	ldr	r2, [pc, #24]	@ (8005ad4 <vApplicationGetTimerTaskMemory+0x30>)
 8005aba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ac2:	601a      	str	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	200048fc 	.word	0x200048fc
 8005ad4:	20004958 	.word	0x20004958

08005ad8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f103 0208 	add.w	r2, r3, #8
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005af0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f103 0208 	add.w	r2, r3, #8
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f103 0208 	add.w	r2, r3, #8
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b90:	d103      	bne.n	8005b9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e00c      	b.n	8005bb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	e002      	b.n	8005ba8 <vListInsert+0x2e>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d2f6      	bcs.n	8005ba2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	601a      	str	r2, [r3, #0]
}
 8005be0:	bf00      	nop
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6892      	ldr	r2, [r2, #8]
 8005c02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6852      	ldr	r2, [r2, #4]
 8005c0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d103      	bne.n	8005c20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	1e5a      	subs	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10b      	bne.n	8005c6c <xQueueGenericReset+0x2c>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	60bb      	str	r3, [r7, #8]
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c6c:	f002 f8a4 	bl	8007db8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c78:	68f9      	ldr	r1, [r7, #12]
 8005c7a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	441a      	add	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	68f9      	ldr	r1, [r7, #12]
 8005ca0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ca2:	fb01 f303 	mul.w	r3, r1, r3
 8005ca6:	441a      	add	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	22ff      	movs	r2, #255	@ 0xff
 8005cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	22ff      	movs	r2, #255	@ 0xff
 8005cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d114      	bne.n	8005cec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01a      	beq.n	8005d00 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3310      	adds	r3, #16
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f001 f91a 	bl	8006f08 <xTaskRemoveFromEventList>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d012      	beq.n	8005d00 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cda:	4b0d      	ldr	r3, [pc, #52]	@ (8005d10 <xQueueGenericReset+0xd0>)
 8005cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	e009      	b.n	8005d00 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3310      	adds	r3, #16
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fef1 	bl	8005ad8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3324      	adds	r3, #36	@ 0x24
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff feec 	bl	8005ad8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d00:	f002 f88c 	bl	8007e1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d04:	2301      	movs	r3, #1
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	e000ed04 	.word	0xe000ed04

08005d14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08e      	sub	sp, #56	@ 0x38
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10b      	bne.n	8005d40 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d3a:	bf00      	nop
 8005d3c:	bf00      	nop
 8005d3e:	e7fd      	b.n	8005d3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	e7fd      	b.n	8005d5a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <xQueueGenericCreateStatic+0x56>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <xQueueGenericCreateStatic+0x5a>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <xQueueGenericCreateStatic+0x5c>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	623b      	str	r3, [r7, #32]
}
 8005d86:	bf00      	nop
 8005d88:	bf00      	nop
 8005d8a:	e7fd      	b.n	8005d88 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <xQueueGenericCreateStatic+0x84>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <xQueueGenericCreateStatic+0x88>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <xQueueGenericCreateStatic+0x8a>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	61fb      	str	r3, [r7, #28]
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	e7fd      	b.n	8005db6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005dba:	2350      	movs	r3, #80	@ 0x50
 8005dbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b50      	cmp	r3, #80	@ 0x50
 8005dc2:	d00b      	beq.n	8005ddc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	61bb      	str	r3, [r7, #24]
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ddc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00d      	beq.n	8005e04 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005df0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f805 	bl	8005e0e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3730      	adds	r7, #48	@ 0x30
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
 8005e1a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d103      	bne.n	8005e2a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e002      	b.n	8005e30 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	69b8      	ldr	r0, [r7, #24]
 8005e40:	f7ff fefe 	bl	8005c40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	78fa      	ldrb	r2, [r7, #3]
 8005e48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08e      	sub	sp, #56	@ 0x38
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e62:	2300      	movs	r3, #0
 8005e64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10b      	bne.n	8005e88 <xQueueGenericSend+0x34>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	e7fd      	b.n	8005e84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d103      	bne.n	8005e96 <xQueueGenericSend+0x42>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <xQueueGenericSend+0x46>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <xQueueGenericSend+0x48>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10b      	bne.n	8005eb8 <xQueueGenericSend+0x64>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d103      	bne.n	8005ec6 <xQueueGenericSend+0x72>
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <xQueueGenericSend+0x76>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e000      	b.n	8005ecc <xQueueGenericSend+0x78>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10b      	bne.n	8005ee8 <xQueueGenericSend+0x94>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	623b      	str	r3, [r7, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	bf00      	nop
 8005ee6:	e7fd      	b.n	8005ee4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ee8:	f001 f9f6 	bl	80072d8 <xTaskGetSchedulerState>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <xQueueGenericSend+0xa4>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <xQueueGenericSend+0xa8>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <xQueueGenericSend+0xaa>
 8005efc:	2300      	movs	r3, #0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10b      	bne.n	8005f1a <xQueueGenericSend+0xc6>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	61fb      	str	r3, [r7, #28]
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	e7fd      	b.n	8005f16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f1a:	f001 ff4d 	bl	8007db8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d302      	bcc.n	8005f30 <xQueueGenericSend+0xdc>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d129      	bne.n	8005f84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f36:	f000 fa0f 	bl	8006358 <prvCopyDataToQueue>
 8005f3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d010      	beq.n	8005f66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f46:	3324      	adds	r3, #36	@ 0x24
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 ffdd 	bl	8006f08 <xTaskRemoveFromEventList>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d013      	beq.n	8005f7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f54:	4b3f      	ldr	r3, [pc, #252]	@ (8006054 <xQueueGenericSend+0x200>)
 8005f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	e00a      	b.n	8005f7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f6c:	4b39      	ldr	r3, [pc, #228]	@ (8006054 <xQueueGenericSend+0x200>)
 8005f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f7c:	f001 ff4e 	bl	8007e1c <vPortExitCritical>
				return pdPASS;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e063      	b.n	800604c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f8a:	f001 ff47 	bl	8007e1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e05c      	b.n	800604c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d106      	bne.n	8005fa6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f98:	f107 0314 	add.w	r3, r7, #20
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f001 f83f 	bl	8007020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fa6:	f001 ff39 	bl	8007e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005faa:	f000 fd87 	bl	8006abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fae:	f001 ff03 	bl	8007db8 <vPortEnterCritical>
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fb8:	b25b      	sxtb	r3, r3
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fbe:	d103      	bne.n	8005fc8 <xQueueGenericSend+0x174>
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fce:	b25b      	sxtb	r3, r3
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fd4:	d103      	bne.n	8005fde <xQueueGenericSend+0x18a>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fde:	f001 ff1d 	bl	8007e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fe2:	1d3a      	adds	r2, r7, #4
 8005fe4:	f107 0314 	add.w	r3, r7, #20
 8005fe8:	4611      	mov	r1, r2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f001 f82e 	bl	800704c <xTaskCheckForTimeOut>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d124      	bne.n	8006040 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ff6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ff8:	f000 faa6 	bl	8006548 <prvIsQueueFull>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d018      	beq.n	8006034 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006004:	3310      	adds	r3, #16
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4611      	mov	r1, r2
 800600a:	4618      	mov	r0, r3
 800600c:	f000 ff2a 	bl	8006e64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006012:	f000 fa31 	bl	8006478 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006016:	f000 fd5f 	bl	8006ad8 <xTaskResumeAll>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	f47f af7c 	bne.w	8005f1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006022:	4b0c      	ldr	r3, [pc, #48]	@ (8006054 <xQueueGenericSend+0x200>)
 8006024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	e772      	b.n	8005f1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006036:	f000 fa1f 	bl	8006478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800603a:	f000 fd4d 	bl	8006ad8 <xTaskResumeAll>
 800603e:	e76c      	b.n	8005f1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006042:	f000 fa19 	bl	8006478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006046:	f000 fd47 	bl	8006ad8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800604a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800604c:	4618      	mov	r0, r3
 800604e:	3738      	adds	r7, #56	@ 0x38
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b090      	sub	sp, #64	@ 0x40
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800606a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10b      	bne.n	8006088 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	e7fd      	b.n	8006084 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <xQueueGenericSendFromISR+0x3e>
 800608e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <xQueueGenericSendFromISR+0x42>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <xQueueGenericSendFromISR+0x44>
 800609a:	2300      	movs	r3, #0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10b      	bne.n	80060b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060b2:	bf00      	nop
 80060b4:	bf00      	nop
 80060b6:	e7fd      	b.n	80060b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d103      	bne.n	80060c6 <xQueueGenericSendFromISR+0x6e>
 80060be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <xQueueGenericSendFromISR+0x72>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <xQueueGenericSendFromISR+0x74>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10b      	bne.n	80060e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	623b      	str	r3, [r7, #32]
}
 80060e2:	bf00      	nop
 80060e4:	bf00      	nop
 80060e6:	e7fd      	b.n	80060e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060e8:	f001 ff46 	bl	8007f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060ec:	f3ef 8211 	mrs	r2, BASEPRI
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	61fa      	str	r2, [r7, #28]
 8006102:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006104:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006106:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800610c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006110:	429a      	cmp	r2, r3
 8006112:	d302      	bcc.n	800611a <xQueueGenericSendFromISR+0xc2>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d12f      	bne.n	800617a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800611a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006120:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006128:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006130:	f000 f912 	bl	8006358 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006134:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800613c:	d112      	bne.n	8006164 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d016      	beq.n	8006174 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006148:	3324      	adds	r3, #36	@ 0x24
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fedc 	bl	8006f08 <xTaskRemoveFromEventList>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00e      	beq.n	8006174 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e007      	b.n	8006174 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006164:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006168:	3301      	adds	r3, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	b25a      	sxtb	r2, r3
 800616e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006174:	2301      	movs	r3, #1
 8006176:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006178:	e001      	b.n	800617e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800617a:	2300      	movs	r3, #0
 800617c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800617e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006180:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006188:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800618a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800618c:	4618      	mov	r0, r3
 800618e:	3740      	adds	r7, #64	@ 0x40
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	@ 0x30
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <xQueueReceive+0x32>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	623b      	str	r3, [r7, #32]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d103      	bne.n	80061d4 <xQueueReceive+0x40>
 80061cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <xQueueReceive+0x44>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <xQueueReceive+0x46>
 80061d8:	2300      	movs	r3, #0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10b      	bne.n	80061f6 <xQueueReceive+0x62>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	61fb      	str	r3, [r7, #28]
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	e7fd      	b.n	80061f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061f6:	f001 f86f 	bl	80072d8 <xTaskGetSchedulerState>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <xQueueReceive+0x72>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <xQueueReceive+0x76>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <xQueueReceive+0x78>
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10b      	bne.n	8006228 <xQueueReceive+0x94>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	61bb      	str	r3, [r7, #24]
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	e7fd      	b.n	8006224 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006228:	f001 fdc6 	bl	8007db8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006230:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01f      	beq.n	8006278 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800623c:	f000 f8f6 	bl	800642c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006242:	1e5a      	subs	r2, r3, #1
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00f      	beq.n	8006270 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006252:	3310      	adds	r3, #16
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fe57 	bl	8006f08 <xTaskRemoveFromEventList>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006260:	4b3c      	ldr	r3, [pc, #240]	@ (8006354 <xQueueReceive+0x1c0>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006270:	f001 fdd4 	bl	8007e1c <vPortExitCritical>
				return pdPASS;
 8006274:	2301      	movs	r3, #1
 8006276:	e069      	b.n	800634c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d103      	bne.n	8006286 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800627e:	f001 fdcd 	bl	8007e1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006282:	2300      	movs	r3, #0
 8006284:	e062      	b.n	800634c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800628c:	f107 0310 	add.w	r3, r7, #16
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fec5 	bl	8007020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006296:	2301      	movs	r3, #1
 8006298:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800629a:	f001 fdbf 	bl	8007e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800629e:	f000 fc0d 	bl	8006abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062a2:	f001 fd89 	bl	8007db8 <vPortEnterCritical>
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062b2:	d103      	bne.n	80062bc <xQueueReceive+0x128>
 80062b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062c8:	d103      	bne.n	80062d2 <xQueueReceive+0x13e>
 80062ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062d2:	f001 fda3 	bl	8007e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d6:	1d3a      	adds	r2, r7, #4
 80062d8:	f107 0310 	add.w	r3, r7, #16
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 feb4 	bl	800704c <xTaskCheckForTimeOut>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d123      	bne.n	8006332 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ec:	f000 f916 	bl	800651c <prvIsQueueEmpty>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d017      	beq.n	8006326 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f8:	3324      	adds	r3, #36	@ 0x24
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fdb0 	bl	8006e64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006304:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006306:	f000 f8b7 	bl	8006478 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800630a:	f000 fbe5 	bl	8006ad8 <xTaskResumeAll>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d189      	bne.n	8006228 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006314:	4b0f      	ldr	r3, [pc, #60]	@ (8006354 <xQueueReceive+0x1c0>)
 8006316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	e780      	b.n	8006228 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006328:	f000 f8a6 	bl	8006478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800632c:	f000 fbd4 	bl	8006ad8 <xTaskResumeAll>
 8006330:	e77a      	b.n	8006228 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006334:	f000 f8a0 	bl	8006478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006338:	f000 fbce 	bl	8006ad8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800633c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800633e:	f000 f8ed 	bl	800651c <prvIsQueueEmpty>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	f43f af6f 	beq.w	8006228 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800634a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800634c:	4618      	mov	r0, r3
 800634e:	3730      	adds	r7, #48	@ 0x30
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10d      	bne.n	8006392 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d14d      	bne.n	800641a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 ffc6 	bl	8007314 <xTaskPriorityDisinherit>
 8006388:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	609a      	str	r2, [r3, #8]
 8006390:	e043      	b.n	800641a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d119      	bne.n	80063cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6858      	ldr	r0, [r3, #4]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a0:	461a      	mov	r2, r3
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	f00b fac1 	bl	801192a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b0:	441a      	add	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d32b      	bcc.n	800641a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	605a      	str	r2, [r3, #4]
 80063ca:	e026      	b.n	800641a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68d8      	ldr	r0, [r3, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d4:	461a      	mov	r2, r3
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	f00b faa7 	bl	801192a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e4:	425b      	negs	r3, r3
 80063e6:	441a      	add	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d207      	bcs.n	8006408 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006400:	425b      	negs	r3, r3
 8006402:	441a      	add	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d105      	bne.n	800641a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3b01      	subs	r3, #1
 8006418:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006422:	697b      	ldr	r3, [r7, #20]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d018      	beq.n	8006470 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	441a      	add	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	429a      	cmp	r2, r3
 8006456:	d303      	bcc.n	8006460 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68d9      	ldr	r1, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006468:	461a      	mov	r2, r3
 800646a:	6838      	ldr	r0, [r7, #0]
 800646c:	f00b fa5d 	bl	801192a <memcpy>
	}
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006480:	f001 fc9a 	bl	8007db8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800648a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800648c:	e011      	b.n	80064b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006492:	2b00      	cmp	r3, #0
 8006494:	d012      	beq.n	80064bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3324      	adds	r3, #36	@ 0x24
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fd34 	bl	8006f08 <xTaskRemoveFromEventList>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064a6:	f000 fe35 	bl	8007114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	dce9      	bgt.n	800648e <prvUnlockQueue+0x16>
 80064ba:	e000      	b.n	80064be <prvUnlockQueue+0x46>
					break;
 80064bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	22ff      	movs	r2, #255	@ 0xff
 80064c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80064c6:	f001 fca9 	bl	8007e1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064ca:	f001 fc75 	bl	8007db8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064d6:	e011      	b.n	80064fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d012      	beq.n	8006506 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3310      	adds	r3, #16
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fd0f 	bl	8006f08 <xTaskRemoveFromEventList>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064f0:	f000 fe10 	bl	8007114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006500:	2b00      	cmp	r3, #0
 8006502:	dce9      	bgt.n	80064d8 <prvUnlockQueue+0x60>
 8006504:	e000      	b.n	8006508 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006506:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	22ff      	movs	r2, #255	@ 0xff
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006510:	f001 fc84 	bl	8007e1c <vPortExitCritical>
}
 8006514:	bf00      	nop
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006524:	f001 fc48 	bl	8007db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e001      	b.n	800653a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800653a:	f001 fc6f 	bl	8007e1c <vPortExitCritical>

	return xReturn;
 800653e:	68fb      	ldr	r3, [r7, #12]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006550:	f001 fc32 	bl	8007db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655c:	429a      	cmp	r2, r3
 800655e:	d102      	bne.n	8006566 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006560:	2301      	movs	r3, #1
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e001      	b.n	800656a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800656a:	f001 fc57 	bl	8007e1c <vPortExitCritical>

	return xReturn;
 800656e:	68fb      	ldr	r3, [r7, #12]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e014      	b.n	80065b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006588:	4a0f      	ldr	r2, [pc, #60]	@ (80065c8 <vQueueAddToRegistry+0x50>)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10b      	bne.n	80065ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006594:	490c      	ldr	r1, [pc, #48]	@ (80065c8 <vQueueAddToRegistry+0x50>)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800659e:	4a0a      	ldr	r2, [pc, #40]	@ (80065c8 <vQueueAddToRegistry+0x50>)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4413      	add	r3, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065aa:	e006      	b.n	80065ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b07      	cmp	r3, #7
 80065b6:	d9e7      	bls.n	8006588 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20004d58 	.word	0x20004d58

080065cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065dc:	f001 fbec 	bl	8007db8 <vPortEnterCritical>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065ec:	d103      	bne.n	80065f6 <vQueueWaitForMessageRestricted+0x2a>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065fc:	b25b      	sxtb	r3, r3
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006602:	d103      	bne.n	800660c <vQueueWaitForMessageRestricted+0x40>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800660c:	f001 fc06 	bl	8007e1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	3324      	adds	r3, #36	@ 0x24
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	68b9      	ldr	r1, [r7, #8]
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fc45 	bl	8006eb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006626:	6978      	ldr	r0, [r7, #20]
 8006628:	f7ff ff26 	bl	8006478 <prvUnlockQueue>
	}
 800662c:	bf00      	nop
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08e      	sub	sp, #56	@ 0x38
 8006638:	af04      	add	r7, sp, #16
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10b      	bne.n	8006660 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	623b      	str	r3, [r7, #32]
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	e7fd      	b.n	800665c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10b      	bne.n	800667e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	61fb      	str	r3, [r7, #28]
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	e7fd      	b.n	800667a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800667e:	235c      	movs	r3, #92	@ 0x5c
 8006680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b5c      	cmp	r3, #92	@ 0x5c
 8006686:	d00b      	beq.n	80066a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	61bb      	str	r3, [r7, #24]
}
 800669a:	bf00      	nop
 800669c:	bf00      	nop
 800669e:	e7fd      	b.n	800669c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01e      	beq.n	80066e6 <xTaskCreateStatic+0xb2>
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01b      	beq.n	80066e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066c0:	2300      	movs	r3, #0
 80066c2:	9303      	str	r3, [sp, #12]
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	9302      	str	r3, [sp, #8]
 80066c8:	f107 0314 	add.w	r3, r7, #20
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f850 	bl	800677e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066e0:	f000 f8de 	bl	80068a0 <prvAddNewTaskToReadyList>
 80066e4:	e001      	b.n	80066ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066ea:	697b      	ldr	r3, [r7, #20]
	}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3728      	adds	r7, #40	@ 0x28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08c      	sub	sp, #48	@ 0x30
 80066f8:	af04      	add	r7, sp, #16
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fc77 	bl	8007ffc <pvPortMalloc>
 800670e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00e      	beq.n	8006734 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006716:	205c      	movs	r0, #92	@ 0x5c
 8006718:	f001 fc70 	bl	8007ffc <pvPortMalloc>
 800671c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	631a      	str	r2, [r3, #48]	@ 0x30
 800672a:	e005      	b.n	8006738 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800672c:	6978      	ldr	r0, [r7, #20]
 800672e:	f001 fd33 	bl	8008198 <vPortFree>
 8006732:	e001      	b.n	8006738 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d017      	beq.n	800676e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	2300      	movs	r3, #0
 800674a:	9303      	str	r3, [sp, #12]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	9302      	str	r3, [sp, #8]
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	9301      	str	r3, [sp, #4]
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f80e 	bl	800677e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006762:	69f8      	ldr	r0, [r7, #28]
 8006764:	f000 f89c 	bl	80068a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006768:	2301      	movs	r3, #1
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	e002      	b.n	8006774 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800676e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006772:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006774:	69bb      	ldr	r3, [r7, #24]
	}
 8006776:	4618      	mov	r0, r3
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b088      	sub	sp, #32
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
 800678a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	461a      	mov	r2, r3
 8006796:	21a5      	movs	r1, #165	@ 0xa5
 8006798:	f00a fffe 	bl	8011798 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067a6:	3b01      	subs	r3, #1
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	f023 0307 	bic.w	r3, r3, #7
 80067b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00b      	beq.n	80067d8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	617b      	str	r3, [r7, #20]
}
 80067d2:	bf00      	nop
 80067d4:	bf00      	nop
 80067d6:	e7fd      	b.n	80067d4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01f      	beq.n	800681e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067de:	2300      	movs	r3, #0
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	e012      	b.n	800680a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	4413      	add	r3, r2
 80067ea:	7819      	ldrb	r1, [r3, #0]
 80067ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	3334      	adds	r3, #52	@ 0x34
 80067f4:	460a      	mov	r2, r1
 80067f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d006      	beq.n	8006812 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	3301      	adds	r3, #1
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	2b0f      	cmp	r3, #15
 800680e:	d9e9      	bls.n	80067e4 <prvInitialiseNewTask+0x66>
 8006810:	e000      	b.n	8006814 <prvInitialiseNewTask+0x96>
			{
				break;
 8006812:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800681c:	e003      	b.n	8006826 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006828:	2b37      	cmp	r3, #55	@ 0x37
 800682a:	d901      	bls.n	8006830 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800682c:	2337      	movs	r3, #55	@ 0x37
 800682e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006834:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800683a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800683c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683e:	2200      	movs	r2, #0
 8006840:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	3304      	adds	r3, #4
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff f966 	bl	8005b18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	3318      	adds	r3, #24
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff f961 	bl	8005b18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800685a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800686a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	2200      	movs	r2, #0
 8006870:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	68f9      	ldr	r1, [r7, #12]
 800687e:	69b8      	ldr	r0, [r7, #24]
 8006880:	f001 f966 	bl	8007b50 <pxPortInitialiseStack>
 8006884:	4602      	mov	r2, r0
 8006886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006888:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800688a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006896:	bf00      	nop
 8006898:	3720      	adds	r7, #32
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068a8:	f001 fa86 	bl	8007db8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068ac:	4b2d      	ldr	r3, [pc, #180]	@ (8006964 <prvAddNewTaskToReadyList+0xc4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3301      	adds	r3, #1
 80068b2:	4a2c      	ldr	r2, [pc, #176]	@ (8006964 <prvAddNewTaskToReadyList+0xc4>)
 80068b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006968 <prvAddNewTaskToReadyList+0xc8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d109      	bne.n	80068d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068be:	4a2a      	ldr	r2, [pc, #168]	@ (8006968 <prvAddNewTaskToReadyList+0xc8>)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068c4:	4b27      	ldr	r3, [pc, #156]	@ (8006964 <prvAddNewTaskToReadyList+0xc4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d110      	bne.n	80068ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068cc:	f000 fc46 	bl	800715c <prvInitialiseTaskLists>
 80068d0:	e00d      	b.n	80068ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068d2:	4b26      	ldr	r3, [pc, #152]	@ (800696c <prvAddNewTaskToReadyList+0xcc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068da:	4b23      	ldr	r3, [pc, #140]	@ (8006968 <prvAddNewTaskToReadyList+0xc8>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d802      	bhi.n	80068ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006968 <prvAddNewTaskToReadyList+0xc8>)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068ee:	4b20      	ldr	r3, [pc, #128]	@ (8006970 <prvAddNewTaskToReadyList+0xd0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006970 <prvAddNewTaskToReadyList+0xd0>)
 80068f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006970 <prvAddNewTaskToReadyList+0xd0>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006904:	4b1b      	ldr	r3, [pc, #108]	@ (8006974 <prvAddNewTaskToReadyList+0xd4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d903      	bls.n	8006914 <prvAddNewTaskToReadyList+0x74>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	4a18      	ldr	r2, [pc, #96]	@ (8006974 <prvAddNewTaskToReadyList+0xd4>)
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4a15      	ldr	r2, [pc, #84]	@ (8006978 <prvAddNewTaskToReadyList+0xd8>)
 8006922:	441a      	add	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3304      	adds	r3, #4
 8006928:	4619      	mov	r1, r3
 800692a:	4610      	mov	r0, r2
 800692c:	f7ff f901 	bl	8005b32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006930:	f001 fa74 	bl	8007e1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006934:	4b0d      	ldr	r3, [pc, #52]	@ (800696c <prvAddNewTaskToReadyList+0xcc>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00e      	beq.n	800695a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800693c:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <prvAddNewTaskToReadyList+0xc8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006946:	429a      	cmp	r2, r3
 8006948:	d207      	bcs.n	800695a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800694a:	4b0c      	ldr	r3, [pc, #48]	@ (800697c <prvAddNewTaskToReadyList+0xdc>)
 800694c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800695a:	bf00      	nop
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	2000526c 	.word	0x2000526c
 8006968:	20004d98 	.word	0x20004d98
 800696c:	20005278 	.word	0x20005278
 8006970:	20005288 	.word	0x20005288
 8006974:	20005274 	.word	0x20005274
 8006978:	20004d9c 	.word	0x20004d9c
 800697c:	e000ed04 	.word	0xe000ed04

08006980 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006992:	4b14      	ldr	r3, [pc, #80]	@ (80069e4 <vTaskDelay+0x64>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00b      	beq.n	80069b2 <vTaskDelay+0x32>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	60bb      	str	r3, [r7, #8]
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	e7fd      	b.n	80069ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069b2:	f000 f883 	bl	8006abc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069b6:	2100      	movs	r1, #0
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fd1b 	bl	80073f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069be:	f000 f88b 	bl	8006ad8 <xTaskResumeAll>
 80069c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d107      	bne.n	80069da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80069ca:	4b07      	ldr	r3, [pc, #28]	@ (80069e8 <vTaskDelay+0x68>)
 80069cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20005294 	.word	0x20005294
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	@ 0x28
 80069f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069fa:	463a      	mov	r2, r7
 80069fc:	1d39      	adds	r1, r7, #4
 80069fe:	f107 0308 	add.w	r3, r7, #8
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff f834 	bl	8005a70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	9202      	str	r2, [sp, #8]
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	2300      	movs	r3, #0
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	2300      	movs	r3, #0
 8006a18:	460a      	mov	r2, r1
 8006a1a:	4922      	ldr	r1, [pc, #136]	@ (8006aa4 <vTaskStartScheduler+0xb8>)
 8006a1c:	4822      	ldr	r0, [pc, #136]	@ (8006aa8 <vTaskStartScheduler+0xbc>)
 8006a1e:	f7ff fe09 	bl	8006634 <xTaskCreateStatic>
 8006a22:	4603      	mov	r3, r0
 8006a24:	4a21      	ldr	r2, [pc, #132]	@ (8006aac <vTaskStartScheduler+0xc0>)
 8006a26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a28:	4b20      	ldr	r3, [pc, #128]	@ (8006aac <vTaskStartScheduler+0xc0>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a30:	2301      	movs	r3, #1
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	e001      	b.n	8006a3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d102      	bne.n	8006a46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a40:	f000 fd2c 	bl	800749c <xTimerCreateTimerTask>
 8006a44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d116      	bne.n	8006a7a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	613b      	str	r3, [r7, #16]
}
 8006a5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a60:	4b13      	ldr	r3, [pc, #76]	@ (8006ab0 <vTaskStartScheduler+0xc4>)
 8006a62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a68:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <vTaskStartScheduler+0xc8>)
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a6e:	4b12      	ldr	r3, [pc, #72]	@ (8006ab8 <vTaskStartScheduler+0xcc>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a74:	f001 f8fc 	bl	8007c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a78:	e00f      	b.n	8006a9a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a80:	d10b      	bne.n	8006a9a <vTaskStartScheduler+0xae>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60fb      	str	r3, [r7, #12]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <vTaskStartScheduler+0xaa>
}
 8006a9a:	bf00      	nop
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	08012794 	.word	0x08012794
 8006aa8:	0800712d 	.word	0x0800712d
 8006aac:	20005290 	.word	0x20005290
 8006ab0:	2000528c 	.word	0x2000528c
 8006ab4:	20005278 	.word	0x20005278
 8006ab8:	20005270 	.word	0x20005270

08006abc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ac0:	4b04      	ldr	r3, [pc, #16]	@ (8006ad4 <vTaskSuspendAll+0x18>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	4a03      	ldr	r2, [pc, #12]	@ (8006ad4 <vTaskSuspendAll+0x18>)
 8006ac8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006aca:	bf00      	nop
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	20005294 	.word	0x20005294

08006ad8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ae6:	4b42      	ldr	r3, [pc, #264]	@ (8006bf0 <xTaskResumeAll+0x118>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10b      	bne.n	8006b06 <xTaskResumeAll+0x2e>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	603b      	str	r3, [r7, #0]
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	e7fd      	b.n	8006b02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b06:	f001 f957 	bl	8007db8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b0a:	4b39      	ldr	r3, [pc, #228]	@ (8006bf0 <xTaskResumeAll+0x118>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4a37      	ldr	r2, [pc, #220]	@ (8006bf0 <xTaskResumeAll+0x118>)
 8006b12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b14:	4b36      	ldr	r3, [pc, #216]	@ (8006bf0 <xTaskResumeAll+0x118>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d162      	bne.n	8006be2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b1c:	4b35      	ldr	r3, [pc, #212]	@ (8006bf4 <xTaskResumeAll+0x11c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d05e      	beq.n	8006be2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b24:	e02f      	b.n	8006b86 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b26:	4b34      	ldr	r3, [pc, #208]	@ (8006bf8 <xTaskResumeAll+0x120>)
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3318      	adds	r3, #24
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff f85a 	bl	8005bec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff f855 	bl	8005bec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b46:	4b2d      	ldr	r3, [pc, #180]	@ (8006bfc <xTaskResumeAll+0x124>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d903      	bls.n	8006b56 <xTaskResumeAll+0x7e>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b52:	4a2a      	ldr	r2, [pc, #168]	@ (8006bfc <xTaskResumeAll+0x124>)
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4a27      	ldr	r2, [pc, #156]	@ (8006c00 <xTaskResumeAll+0x128>)
 8006b64:	441a      	add	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	f7fe ffe0 	bl	8005b32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b76:	4b23      	ldr	r3, [pc, #140]	@ (8006c04 <xTaskResumeAll+0x12c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d302      	bcc.n	8006b86 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006b80:	4b21      	ldr	r3, [pc, #132]	@ (8006c08 <xTaskResumeAll+0x130>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b86:	4b1c      	ldr	r3, [pc, #112]	@ (8006bf8 <xTaskResumeAll+0x120>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1cb      	bne.n	8006b26 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b94:	f000 fb80 	bl	8007298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b98:	4b1c      	ldr	r3, [pc, #112]	@ (8006c0c <xTaskResumeAll+0x134>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d010      	beq.n	8006bc6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ba4:	f000 f846 	bl	8006c34 <xTaskIncrementTick>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006bae:	4b16      	ldr	r3, [pc, #88]	@ (8006c08 <xTaskResumeAll+0x130>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1f1      	bne.n	8006ba4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006bc0:	4b12      	ldr	r3, [pc, #72]	@ (8006c0c <xTaskResumeAll+0x134>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bc6:	4b10      	ldr	r3, [pc, #64]	@ (8006c08 <xTaskResumeAll+0x130>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006c10 <xTaskResumeAll+0x138>)
 8006bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006be2:	f001 f91b 	bl	8007e1c <vPortExitCritical>

	return xAlreadyYielded;
 8006be6:	68bb      	ldr	r3, [r7, #8]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20005294 	.word	0x20005294
 8006bf4:	2000526c 	.word	0x2000526c
 8006bf8:	2000522c 	.word	0x2000522c
 8006bfc:	20005274 	.word	0x20005274
 8006c00:	20004d9c 	.word	0x20004d9c
 8006c04:	20004d98 	.word	0x20004d98
 8006c08:	20005280 	.word	0x20005280
 8006c0c:	2000527c 	.word	0x2000527c
 8006c10:	e000ed04 	.word	0xe000ed04

08006c14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c1a:	4b05      	ldr	r3, [pc, #20]	@ (8006c30 <xTaskGetTickCount+0x1c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c20:	687b      	ldr	r3, [r7, #4]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20005270 	.word	0x20005270

08006c34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c3e:	4b4f      	ldr	r3, [pc, #316]	@ (8006d7c <xTaskIncrementTick+0x148>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f040 8090 	bne.w	8006d68 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c48:	4b4d      	ldr	r3, [pc, #308]	@ (8006d80 <xTaskIncrementTick+0x14c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c50:	4a4b      	ldr	r2, [pc, #300]	@ (8006d80 <xTaskIncrementTick+0x14c>)
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d121      	bne.n	8006ca0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c5c:	4b49      	ldr	r3, [pc, #292]	@ (8006d84 <xTaskIncrementTick+0x150>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	603b      	str	r3, [r7, #0]
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	e7fd      	b.n	8006c7a <xTaskIncrementTick+0x46>
 8006c7e:	4b41      	ldr	r3, [pc, #260]	@ (8006d84 <xTaskIncrementTick+0x150>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	4b40      	ldr	r3, [pc, #256]	@ (8006d88 <xTaskIncrementTick+0x154>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a3e      	ldr	r2, [pc, #248]	@ (8006d84 <xTaskIncrementTick+0x150>)
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d88 <xTaskIncrementTick+0x154>)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	4b3e      	ldr	r3, [pc, #248]	@ (8006d8c <xTaskIncrementTick+0x158>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3301      	adds	r3, #1
 8006c98:	4a3c      	ldr	r2, [pc, #240]	@ (8006d8c <xTaskIncrementTick+0x158>)
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	f000 fafc 	bl	8007298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8006d90 <xTaskIncrementTick+0x15c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d349      	bcc.n	8006d3e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006caa:	4b36      	ldr	r3, [pc, #216]	@ (8006d84 <xTaskIncrementTick+0x150>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d104      	bne.n	8006cbe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb4:	4b36      	ldr	r3, [pc, #216]	@ (8006d90 <xTaskIncrementTick+0x15c>)
 8006cb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006cba:	601a      	str	r2, [r3, #0]
					break;
 8006cbc:	e03f      	b.n	8006d3e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cbe:	4b31      	ldr	r3, [pc, #196]	@ (8006d84 <xTaskIncrementTick+0x150>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d203      	bcs.n	8006cde <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cd6:	4a2e      	ldr	r2, [pc, #184]	@ (8006d90 <xTaskIncrementTick+0x15c>)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cdc:	e02f      	b.n	8006d3e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe ff82 	bl	8005bec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	3318      	adds	r3, #24
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe ff79 	bl	8005bec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfe:	4b25      	ldr	r3, [pc, #148]	@ (8006d94 <xTaskIncrementTick+0x160>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d903      	bls.n	8006d0e <xTaskIncrementTick+0xda>
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0a:	4a22      	ldr	r2, [pc, #136]	@ (8006d94 <xTaskIncrementTick+0x160>)
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8006d98 <xTaskIncrementTick+0x164>)
 8006d1c:	441a      	add	r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4619      	mov	r1, r3
 8006d24:	4610      	mov	r0, r2
 8006d26:	f7fe ff04 	bl	8005b32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8006d9c <xTaskIncrementTick+0x168>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d3b8      	bcc.n	8006caa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d3c:	e7b5      	b.n	8006caa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d3e:	4b17      	ldr	r3, [pc, #92]	@ (8006d9c <xTaskIncrementTick+0x168>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d44:	4914      	ldr	r1, [pc, #80]	@ (8006d98 <xTaskIncrementTick+0x164>)
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d901      	bls.n	8006d5a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006d56:	2301      	movs	r3, #1
 8006d58:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d5a:	4b11      	ldr	r3, [pc, #68]	@ (8006da0 <xTaskIncrementTick+0x16c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e004      	b.n	8006d72 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d68:	4b0e      	ldr	r3, [pc, #56]	@ (8006da4 <xTaskIncrementTick+0x170>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8006da4 <xTaskIncrementTick+0x170>)
 8006d70:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d72:	697b      	ldr	r3, [r7, #20]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20005294 	.word	0x20005294
 8006d80:	20005270 	.word	0x20005270
 8006d84:	20005224 	.word	0x20005224
 8006d88:	20005228 	.word	0x20005228
 8006d8c:	20005284 	.word	0x20005284
 8006d90:	2000528c 	.word	0x2000528c
 8006d94:	20005274 	.word	0x20005274
 8006d98:	20004d9c 	.word	0x20004d9c
 8006d9c:	20004d98 	.word	0x20004d98
 8006da0:	20005280 	.word	0x20005280
 8006da4:	2000527c 	.word	0x2000527c

08006da8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dae:	4b28      	ldr	r3, [pc, #160]	@ (8006e50 <vTaskSwitchContext+0xa8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006db6:	4b27      	ldr	r3, [pc, #156]	@ (8006e54 <vTaskSwitchContext+0xac>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dbc:	e042      	b.n	8006e44 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006dbe:	4b25      	ldr	r3, [pc, #148]	@ (8006e54 <vTaskSwitchContext+0xac>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc4:	4b24      	ldr	r3, [pc, #144]	@ (8006e58 <vTaskSwitchContext+0xb0>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	e011      	b.n	8006df0 <vTaskSwitchContext+0x48>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <vTaskSwitchContext+0x42>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	607b      	str	r3, [r7, #4]
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop
 8006de8:	e7fd      	b.n	8006de6 <vTaskSwitchContext+0x3e>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	491a      	ldr	r1, [pc, #104]	@ (8006e5c <vTaskSwitchContext+0xb4>)
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	440b      	add	r3, r1
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0e3      	beq.n	8006dcc <vTaskSwitchContext+0x24>
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4a13      	ldr	r2, [pc, #76]	@ (8006e5c <vTaskSwitchContext+0xb4>)
 8006e10:	4413      	add	r3, r2
 8006e12:	60bb      	str	r3, [r7, #8]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	605a      	str	r2, [r3, #4]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	3308      	adds	r3, #8
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d104      	bne.n	8006e34 <vTaskSwitchContext+0x8c>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	605a      	str	r2, [r3, #4]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	4a09      	ldr	r2, [pc, #36]	@ (8006e60 <vTaskSwitchContext+0xb8>)
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	4a06      	ldr	r2, [pc, #24]	@ (8006e58 <vTaskSwitchContext+0xb0>)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6013      	str	r3, [r2, #0]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	20005294 	.word	0x20005294
 8006e54:	20005280 	.word	0x20005280
 8006e58:	20005274 	.word	0x20005274
 8006e5c:	20004d9c 	.word	0x20004d9c
 8006e60:	20004d98 	.word	0x20004d98

08006e64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	60fb      	str	r3, [r7, #12]
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	e7fd      	b.n	8006e88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e8c:	4b07      	ldr	r3, [pc, #28]	@ (8006eac <vTaskPlaceOnEventList+0x48>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3318      	adds	r3, #24
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7fe fe70 	bl	8005b7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	6838      	ldr	r0, [r7, #0]
 8006e9e:	f000 faa9 	bl	80073f4 <prvAddCurrentTaskToDelayedList>
}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20004d98 	.word	0x20004d98

08006eb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10b      	bne.n	8006eda <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	617b      	str	r3, [r7, #20]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eda:	4b0a      	ldr	r3, [pc, #40]	@ (8006f04 <vTaskPlaceOnEventListRestricted+0x54>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3318      	adds	r3, #24
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f7fe fe25 	bl	8005b32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006eee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ef2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	68b8      	ldr	r0, [r7, #8]
 8006ef8:	f000 fa7c 	bl	80073f4 <prvAddCurrentTaskToDelayedList>
	}
 8006efc:	bf00      	nop
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20004d98 	.word	0x20004d98

08006f08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10b      	bne.n	8006f36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	60fb      	str	r3, [r7, #12]
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	e7fd      	b.n	8006f32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	3318      	adds	r3, #24
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fe56 	bl	8005bec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f40:	4b1d      	ldr	r3, [pc, #116]	@ (8006fb8 <xTaskRemoveFromEventList+0xb0>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d11d      	bne.n	8006f84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe fe4d 	bl	8005bec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f56:	4b19      	ldr	r3, [pc, #100]	@ (8006fbc <xTaskRemoveFromEventList+0xb4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d903      	bls.n	8006f66 <xTaskRemoveFromEventList+0x5e>
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f62:	4a16      	ldr	r2, [pc, #88]	@ (8006fbc <xTaskRemoveFromEventList+0xb4>)
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4a13      	ldr	r2, [pc, #76]	@ (8006fc0 <xTaskRemoveFromEventList+0xb8>)
 8006f74:	441a      	add	r2, r3
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f7fe fdd8 	bl	8005b32 <vListInsertEnd>
 8006f82:	e005      	b.n	8006f90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	3318      	adds	r3, #24
 8006f88:	4619      	mov	r1, r3
 8006f8a:	480e      	ldr	r0, [pc, #56]	@ (8006fc4 <xTaskRemoveFromEventList+0xbc>)
 8006f8c:	f7fe fdd1 	bl	8005b32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f94:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc8 <xTaskRemoveFromEventList+0xc0>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d905      	bls.n	8006faa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fcc <xTaskRemoveFromEventList+0xc4>)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	e001      	b.n	8006fae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fae:	697b      	ldr	r3, [r7, #20]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20005294 	.word	0x20005294
 8006fbc:	20005274 	.word	0x20005274
 8006fc0:	20004d9c 	.word	0x20004d9c
 8006fc4:	2000522c 	.word	0x2000522c
 8006fc8:	20004d98 	.word	0x20004d98
 8006fcc:	20005280 	.word	0x20005280

08006fd0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10b      	bne.n	8006ff6 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	60fb      	str	r3, [r7, #12]
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	e7fd      	b.n	8006ff2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8006ff6:	f000 fedf 	bl	8007db8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ffa:	4b07      	ldr	r3, [pc, #28]	@ (8007018 <vTaskSetTimeOutState+0x48>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007002:	4b06      	ldr	r3, [pc, #24]	@ (800701c <vTaskSetTimeOutState+0x4c>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800700a:	f000 ff07 	bl	8007e1c <vPortExitCritical>
}
 800700e:	bf00      	nop
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20005284 	.word	0x20005284
 800701c:	20005270 	.word	0x20005270

08007020 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007028:	4b06      	ldr	r3, [pc, #24]	@ (8007044 <vTaskInternalSetTimeOutState+0x24>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007030:	4b05      	ldr	r3, [pc, #20]	@ (8007048 <vTaskInternalSetTimeOutState+0x28>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	605a      	str	r2, [r3, #4]
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	20005284 	.word	0x20005284
 8007048:	20005270 	.word	0x20005270

0800704c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10b      	bne.n	8007074 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	613b      	str	r3, [r7, #16]
}
 800706e:	bf00      	nop
 8007070:	bf00      	nop
 8007072:	e7fd      	b.n	8007070 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10b      	bne.n	8007092 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	60fb      	str	r3, [r7, #12]
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	e7fd      	b.n	800708e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007092:	f000 fe91 	bl	8007db8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007096:	4b1d      	ldr	r3, [pc, #116]	@ (800710c <xTaskCheckForTimeOut+0xc0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070ae:	d102      	bne.n	80070b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e023      	b.n	80070fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b15      	ldr	r3, [pc, #84]	@ (8007110 <xTaskCheckForTimeOut+0xc4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d007      	beq.n	80070d2 <xTaskCheckForTimeOut+0x86>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d302      	bcc.n	80070d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	e015      	b.n	80070fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d20b      	bcs.n	80070f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff ff99 	bl	8007020 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	e004      	b.n	80070fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070fa:	2301      	movs	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070fe:	f000 fe8d 	bl	8007e1c <vPortExitCritical>

	return xReturn;
 8007102:	69fb      	ldr	r3, [r7, #28]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20005270 	.word	0x20005270
 8007110:	20005284 	.word	0x20005284

08007114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007118:	4b03      	ldr	r3, [pc, #12]	@ (8007128 <vTaskMissedYield+0x14>)
 800711a:	2201      	movs	r2, #1
 800711c:	601a      	str	r2, [r3, #0]
}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	20005280 	.word	0x20005280

0800712c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007134:	f000 f852 	bl	80071dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007138:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <prvIdleTask+0x28>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d9f9      	bls.n	8007134 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007140:	4b05      	ldr	r3, [pc, #20]	@ (8007158 <prvIdleTask+0x2c>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007150:	e7f0      	b.n	8007134 <prvIdleTask+0x8>
 8007152:	bf00      	nop
 8007154:	20004d9c 	.word	0x20004d9c
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	e00c      	b.n	8007182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4a12      	ldr	r2, [pc, #72]	@ (80071bc <prvInitialiseTaskLists+0x60>)
 8007174:	4413      	add	r3, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fcae 	bl	8005ad8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3301      	adds	r3, #1
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b37      	cmp	r3, #55	@ 0x37
 8007186:	d9ef      	bls.n	8007168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007188:	480d      	ldr	r0, [pc, #52]	@ (80071c0 <prvInitialiseTaskLists+0x64>)
 800718a:	f7fe fca5 	bl	8005ad8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800718e:	480d      	ldr	r0, [pc, #52]	@ (80071c4 <prvInitialiseTaskLists+0x68>)
 8007190:	f7fe fca2 	bl	8005ad8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007194:	480c      	ldr	r0, [pc, #48]	@ (80071c8 <prvInitialiseTaskLists+0x6c>)
 8007196:	f7fe fc9f 	bl	8005ad8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800719a:	480c      	ldr	r0, [pc, #48]	@ (80071cc <prvInitialiseTaskLists+0x70>)
 800719c:	f7fe fc9c 	bl	8005ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071a0:	480b      	ldr	r0, [pc, #44]	@ (80071d0 <prvInitialiseTaskLists+0x74>)
 80071a2:	f7fe fc99 	bl	8005ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	@ (80071d4 <prvInitialiseTaskLists+0x78>)
 80071a8:	4a05      	ldr	r2, [pc, #20]	@ (80071c0 <prvInitialiseTaskLists+0x64>)
 80071aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071ac:	4b0a      	ldr	r3, [pc, #40]	@ (80071d8 <prvInitialiseTaskLists+0x7c>)
 80071ae:	4a05      	ldr	r2, [pc, #20]	@ (80071c4 <prvInitialiseTaskLists+0x68>)
 80071b0:	601a      	str	r2, [r3, #0]
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20004d9c 	.word	0x20004d9c
 80071c0:	200051fc 	.word	0x200051fc
 80071c4:	20005210 	.word	0x20005210
 80071c8:	2000522c 	.word	0x2000522c
 80071cc:	20005240 	.word	0x20005240
 80071d0:	20005258 	.word	0x20005258
 80071d4:	20005224 	.word	0x20005224
 80071d8:	20005228 	.word	0x20005228

080071dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e2:	e019      	b.n	8007218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071e4:	f000 fde8 	bl	8007db8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e8:	4b10      	ldr	r3, [pc, #64]	@ (800722c <prvCheckTasksWaitingTermination+0x50>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fe fcf9 	bl	8005bec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007230 <prvCheckTasksWaitingTermination+0x54>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3b01      	subs	r3, #1
 8007200:	4a0b      	ldr	r2, [pc, #44]	@ (8007230 <prvCheckTasksWaitingTermination+0x54>)
 8007202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007204:	4b0b      	ldr	r3, [pc, #44]	@ (8007234 <prvCheckTasksWaitingTermination+0x58>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3b01      	subs	r3, #1
 800720a:	4a0a      	ldr	r2, [pc, #40]	@ (8007234 <prvCheckTasksWaitingTermination+0x58>)
 800720c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800720e:	f000 fe05 	bl	8007e1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f810 	bl	8007238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007218:	4b06      	ldr	r3, [pc, #24]	@ (8007234 <prvCheckTasksWaitingTermination+0x58>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e1      	bne.n	80071e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20005240 	.word	0x20005240
 8007230:	2000526c 	.word	0x2000526c
 8007234:	20005254 	.word	0x20005254

08007238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007246:	2b00      	cmp	r3, #0
 8007248:	d108      	bne.n	800725c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724e:	4618      	mov	r0, r3
 8007250:	f000 ffa2 	bl	8008198 <vPortFree>
				vPortFree( pxTCB );
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 ff9f 	bl	8008198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800725a:	e019      	b.n	8007290 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007262:	2b01      	cmp	r3, #1
 8007264:	d103      	bne.n	800726e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 ff96 	bl	8008198 <vPortFree>
	}
 800726c:	e010      	b.n	8007290 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007274:	2b02      	cmp	r3, #2
 8007276:	d00b      	beq.n	8007290 <prvDeleteTCB+0x58>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	60fb      	str	r3, [r7, #12]
}
 800728a:	bf00      	nop
 800728c:	bf00      	nop
 800728e:	e7fd      	b.n	800728c <prvDeleteTCB+0x54>
	}
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800729e:	4b0c      	ldr	r3, [pc, #48]	@ (80072d0 <prvResetNextTaskUnblockTime+0x38>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d104      	bne.n	80072b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <prvResetNextTaskUnblockTime+0x3c>)
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072b0:	e008      	b.n	80072c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b2:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <prvResetNextTaskUnblockTime+0x38>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4a04      	ldr	r2, [pc, #16]	@ (80072d4 <prvResetNextTaskUnblockTime+0x3c>)
 80072c2:	6013      	str	r3, [r2, #0]
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	20005224 	.word	0x20005224
 80072d4:	2000528c 	.word	0x2000528c

080072d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072de:	4b0b      	ldr	r3, [pc, #44]	@ (800730c <xTaskGetSchedulerState+0x34>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d102      	bne.n	80072ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072e6:	2301      	movs	r3, #1
 80072e8:	607b      	str	r3, [r7, #4]
 80072ea:	e008      	b.n	80072fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ec:	4b08      	ldr	r3, [pc, #32]	@ (8007310 <xTaskGetSchedulerState+0x38>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072f4:	2302      	movs	r3, #2
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	e001      	b.n	80072fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072fe:	687b      	ldr	r3, [r7, #4]
	}
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	20005278 	.word	0x20005278
 8007310:	20005294 	.word	0x20005294

08007314 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d058      	beq.n	80073dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800732a:	4b2f      	ldr	r3, [pc, #188]	@ (80073e8 <xTaskPriorityDisinherit+0xd4>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	429a      	cmp	r2, r3
 8007332:	d00b      	beq.n	800734c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	60fb      	str	r3, [r7, #12]
}
 8007346:	bf00      	nop
 8007348:	bf00      	nop
 800734a:	e7fd      	b.n	8007348 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10b      	bne.n	800736c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	60bb      	str	r3, [r7, #8]
}
 8007366:	bf00      	nop
 8007368:	bf00      	nop
 800736a:	e7fd      	b.n	8007368 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007370:	1e5a      	subs	r2, r3, #1
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800737e:	429a      	cmp	r2, r3
 8007380:	d02c      	beq.n	80073dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007386:	2b00      	cmp	r3, #0
 8007388:	d128      	bne.n	80073dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3304      	adds	r3, #4
 800738e:	4618      	mov	r0, r3
 8007390:	f7fe fc2c 	bl	8005bec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ac:	4b0f      	ldr	r3, [pc, #60]	@ (80073ec <xTaskPriorityDisinherit+0xd8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d903      	bls.n	80073bc <xTaskPriorityDisinherit+0xa8>
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b8:	4a0c      	ldr	r2, [pc, #48]	@ (80073ec <xTaskPriorityDisinherit+0xd8>)
 80073ba:	6013      	str	r3, [r2, #0]
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4a09      	ldr	r2, [pc, #36]	@ (80073f0 <xTaskPriorityDisinherit+0xdc>)
 80073ca:	441a      	add	r2, r3
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	3304      	adds	r3, #4
 80073d0:	4619      	mov	r1, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	f7fe fbad 	bl	8005b32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073dc:	697b      	ldr	r3, [r7, #20]
	}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20004d98 	.word	0x20004d98
 80073ec:	20005274 	.word	0x20005274
 80073f0:	20004d9c 	.word	0x20004d9c

080073f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073fe:	4b21      	ldr	r3, [pc, #132]	@ (8007484 <prvAddCurrentTaskToDelayedList+0x90>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007404:	4b20      	ldr	r3, [pc, #128]	@ (8007488 <prvAddCurrentTaskToDelayedList+0x94>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3304      	adds	r3, #4
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fbee 	bl	8005bec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007416:	d10a      	bne.n	800742e <prvAddCurrentTaskToDelayedList+0x3a>
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800741e:	4b1a      	ldr	r3, [pc, #104]	@ (8007488 <prvAddCurrentTaskToDelayedList+0x94>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3304      	adds	r3, #4
 8007424:	4619      	mov	r1, r3
 8007426:	4819      	ldr	r0, [pc, #100]	@ (800748c <prvAddCurrentTaskToDelayedList+0x98>)
 8007428:	f7fe fb83 	bl	8005b32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800742c:	e026      	b.n	800747c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4413      	add	r3, r2
 8007434:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007436:	4b14      	ldr	r3, [pc, #80]	@ (8007488 <prvAddCurrentTaskToDelayedList+0x94>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	429a      	cmp	r2, r3
 8007444:	d209      	bcs.n	800745a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007446:	4b12      	ldr	r3, [pc, #72]	@ (8007490 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	4b0f      	ldr	r3, [pc, #60]	@ (8007488 <prvAddCurrentTaskToDelayedList+0x94>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3304      	adds	r3, #4
 8007450:	4619      	mov	r1, r3
 8007452:	4610      	mov	r0, r2
 8007454:	f7fe fb91 	bl	8005b7a <vListInsert>
}
 8007458:	e010      	b.n	800747c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800745a:	4b0e      	ldr	r3, [pc, #56]	@ (8007494 <prvAddCurrentTaskToDelayedList+0xa0>)
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4b0a      	ldr	r3, [pc, #40]	@ (8007488 <prvAddCurrentTaskToDelayedList+0x94>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3304      	adds	r3, #4
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f7fe fb87 	bl	8005b7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800746c:	4b0a      	ldr	r3, [pc, #40]	@ (8007498 <prvAddCurrentTaskToDelayedList+0xa4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	429a      	cmp	r2, r3
 8007474:	d202      	bcs.n	800747c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007476:	4a08      	ldr	r2, [pc, #32]	@ (8007498 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	6013      	str	r3, [r2, #0]
}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20005270 	.word	0x20005270
 8007488:	20004d98 	.word	0x20004d98
 800748c:	20005258 	.word	0x20005258
 8007490:	20005228 	.word	0x20005228
 8007494:	20005224 	.word	0x20005224
 8007498:	2000528c 	.word	0x2000528c

0800749c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	@ 0x28
 80074a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80074a6:	f000 fb13 	bl	8007ad0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80074aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007520 <xTimerCreateTimerTask+0x84>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d021      	beq.n	80074f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074ba:	1d3a      	adds	r2, r7, #4
 80074bc:	f107 0108 	add.w	r1, r7, #8
 80074c0:	f107 030c 	add.w	r3, r7, #12
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe faed 	bl	8005aa4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	9202      	str	r2, [sp, #8]
 80074d2:	9301      	str	r3, [sp, #4]
 80074d4:	2302      	movs	r3, #2
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	2300      	movs	r3, #0
 80074da:	460a      	mov	r2, r1
 80074dc:	4911      	ldr	r1, [pc, #68]	@ (8007524 <xTimerCreateTimerTask+0x88>)
 80074de:	4812      	ldr	r0, [pc, #72]	@ (8007528 <xTimerCreateTimerTask+0x8c>)
 80074e0:	f7ff f8a8 	bl	8006634 <xTaskCreateStatic>
 80074e4:	4603      	mov	r3, r0
 80074e6:	4a11      	ldr	r2, [pc, #68]	@ (800752c <xTimerCreateTimerTask+0x90>)
 80074e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074ea:	4b10      	ldr	r3, [pc, #64]	@ (800752c <xTimerCreateTimerTask+0x90>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074f2:	2301      	movs	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10b      	bne.n	8007514 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	613b      	str	r3, [r7, #16]
}
 800750e:	bf00      	nop
 8007510:	bf00      	nop
 8007512:	e7fd      	b.n	8007510 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007514:	697b      	ldr	r3, [r7, #20]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	200052c8 	.word	0x200052c8
 8007524:	0801279c 	.word	0x0801279c
 8007528:	08007669 	.word	0x08007669
 800752c:	200052cc 	.word	0x200052cc

08007530 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08a      	sub	sp, #40	@ 0x28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800753e:	2300      	movs	r3, #0
 8007540:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10b      	bne.n	8007560 <xTimerGenericCommand+0x30>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	623b      	str	r3, [r7, #32]
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	e7fd      	b.n	800755c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007560:	4b19      	ldr	r3, [pc, #100]	@ (80075c8 <xTimerGenericCommand+0x98>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d02a      	beq.n	80075be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b05      	cmp	r3, #5
 8007578:	dc18      	bgt.n	80075ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800757a:	f7ff fead 	bl	80072d8 <xTaskGetSchedulerState>
 800757e:	4603      	mov	r3, r0
 8007580:	2b02      	cmp	r3, #2
 8007582:	d109      	bne.n	8007598 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007584:	4b10      	ldr	r3, [pc, #64]	@ (80075c8 <xTimerGenericCommand+0x98>)
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	f107 0110 	add.w	r1, r7, #16
 800758c:	2300      	movs	r3, #0
 800758e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007590:	f7fe fc60 	bl	8005e54 <xQueueGenericSend>
 8007594:	6278      	str	r0, [r7, #36]	@ 0x24
 8007596:	e012      	b.n	80075be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007598:	4b0b      	ldr	r3, [pc, #44]	@ (80075c8 <xTimerGenericCommand+0x98>)
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	f107 0110 	add.w	r1, r7, #16
 80075a0:	2300      	movs	r3, #0
 80075a2:	2200      	movs	r2, #0
 80075a4:	f7fe fc56 	bl	8005e54 <xQueueGenericSend>
 80075a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80075aa:	e008      	b.n	80075be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075ac:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <xTimerGenericCommand+0x98>)
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	f107 0110 	add.w	r1, r7, #16
 80075b4:	2300      	movs	r3, #0
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	f7fe fd4e 	bl	8006058 <xQueueGenericSendFromISR>
 80075bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3728      	adds	r7, #40	@ 0x28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	200052c8 	.word	0x200052c8

080075cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af02      	add	r7, sp, #8
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d6:	4b23      	ldr	r3, [pc, #140]	@ (8007664 <prvProcessExpiredTimer+0x98>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fe fb01 	bl	8005bec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d023      	beq.n	8007640 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	18d1      	adds	r1, r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	6978      	ldr	r0, [r7, #20]
 8007606:	f000 f8d5 	bl	80077b4 <prvInsertTimerInActiveList>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d020      	beq.n	8007652 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007610:	2300      	movs	r3, #0
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	2300      	movs	r3, #0
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	2100      	movs	r1, #0
 800761a:	6978      	ldr	r0, [r7, #20]
 800761c:	f7ff ff88 	bl	8007530 <xTimerGenericCommand>
 8007620:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d114      	bne.n	8007652 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	60fb      	str	r3, [r7, #12]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007646:	f023 0301 	bic.w	r3, r3, #1
 800764a:	b2da      	uxtb	r2, r3
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	6978      	ldr	r0, [r7, #20]
 8007658:	4798      	blx	r3
}
 800765a:	bf00      	nop
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	200052c0 	.word	0x200052c0

08007668 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007670:	f107 0308 	add.w	r3, r7, #8
 8007674:	4618      	mov	r0, r3
 8007676:	f000 f859 	bl	800772c <prvGetNextExpireTime>
 800767a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4619      	mov	r1, r3
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f805 	bl	8007690 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007686:	f000 f8d7 	bl	8007838 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800768a:	bf00      	nop
 800768c:	e7f0      	b.n	8007670 <prvTimerTask+0x8>
	...

08007690 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800769a:	f7ff fa0f 	bl	8006abc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f866 	bl	8007774 <prvSampleTimeNow>
 80076a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d130      	bne.n	8007712 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10a      	bne.n	80076cc <prvProcessTimerOrBlockTask+0x3c>
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d806      	bhi.n	80076cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076be:	f7ff fa0b 	bl	8006ad8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff ff81 	bl	80075cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076ca:	e024      	b.n	8007716 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d008      	beq.n	80076e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076d2:	4b13      	ldr	r3, [pc, #76]	@ (8007720 <prvProcessTimerOrBlockTask+0x90>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <prvProcessTimerOrBlockTask+0x50>
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <prvProcessTimerOrBlockTask+0x52>
 80076e0:	2300      	movs	r3, #0
 80076e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007724 <prvProcessTimerOrBlockTask+0x94>)
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	f7fe ff6b 	bl	80065cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076f6:	f7ff f9ef 	bl	8006ad8 <xTaskResumeAll>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007700:	4b09      	ldr	r3, [pc, #36]	@ (8007728 <prvProcessTimerOrBlockTask+0x98>)
 8007702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	f3bf 8f6f 	isb	sy
}
 8007710:	e001      	b.n	8007716 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007712:	f7ff f9e1 	bl	8006ad8 <xTaskResumeAll>
}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	200052c4 	.word	0x200052c4
 8007724:	200052c8 	.word	0x200052c8
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007734:	4b0e      	ldr	r3, [pc, #56]	@ (8007770 <prvGetNextExpireTime+0x44>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <prvGetNextExpireTime+0x16>
 800773e:	2201      	movs	r2, #1
 8007740:	e000      	b.n	8007744 <prvGetNextExpireTime+0x18>
 8007742:	2200      	movs	r2, #0
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d105      	bne.n	800775c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007750:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <prvGetNextExpireTime+0x44>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e001      	b.n	8007760 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007760:	68fb      	ldr	r3, [r7, #12]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	200052c0 	.word	0x200052c0

08007774 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800777c:	f7ff fa4a 	bl	8006c14 <xTaskGetTickCount>
 8007780:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007782:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <prvSampleTimeNow+0x3c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	429a      	cmp	r2, r3
 800778a:	d205      	bcs.n	8007798 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800778c:	f000 f93a 	bl	8007a04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e002      	b.n	800779e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800779e:	4a04      	ldr	r2, [pc, #16]	@ (80077b0 <prvSampleTimeNow+0x3c>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077a4:	68fb      	ldr	r3, [r7, #12]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200052d0 	.word	0x200052d0

080077b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d812      	bhi.n	8007800 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d302      	bcc.n	80077ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e01b      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077ee:	4b10      	ldr	r3, [pc, #64]	@ (8007830 <prvInsertTimerInActiveList+0x7c>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7fe f9be 	bl	8005b7a <vListInsert>
 80077fe:	e012      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d206      	bcs.n	8007816 <prvInsertTimerInActiveList+0x62>
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d302      	bcc.n	8007816 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007810:	2301      	movs	r3, #1
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	e007      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007816:	4b07      	ldr	r3, [pc, #28]	@ (8007834 <prvInsertTimerInActiveList+0x80>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3304      	adds	r3, #4
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f7fe f9aa 	bl	8005b7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007826:	697b      	ldr	r3, [r7, #20]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	200052c4 	.word	0x200052c4
 8007834:	200052c0 	.word	0x200052c0

08007838 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08e      	sub	sp, #56	@ 0x38
 800783c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800783e:	e0ce      	b.n	80079de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	da19      	bge.n	800787a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007846:	1d3b      	adds	r3, r7, #4
 8007848:	3304      	adds	r3, #4
 800784a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800784c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10b      	bne.n	800786a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	61fb      	str	r3, [r7, #28]
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	e7fd      	b.n	8007866 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800786a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007870:	6850      	ldr	r0, [r2, #4]
 8007872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007874:	6892      	ldr	r2, [r2, #8]
 8007876:	4611      	mov	r1, r2
 8007878:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f2c0 80ae 	blt.w	80079de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d004      	beq.n	8007898 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007890:	3304      	adds	r3, #4
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe f9aa 	bl	8005bec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007898:	463b      	mov	r3, r7
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff ff6a 	bl	8007774 <prvSampleTimeNow>
 80078a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b09      	cmp	r3, #9
 80078a6:	f200 8097 	bhi.w	80079d8 <prvProcessReceivedCommands+0x1a0>
 80078aa:	a201      	add	r2, pc, #4	@ (adr r2, 80078b0 <prvProcessReceivedCommands+0x78>)
 80078ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b0:	080078d9 	.word	0x080078d9
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078d9 	.word	0x080078d9
 80078bc:	0800794f 	.word	0x0800794f
 80078c0:	08007963 	.word	0x08007963
 80078c4:	080079af 	.word	0x080079af
 80078c8:	080078d9 	.word	0x080078d9
 80078cc:	080078d9 	.word	0x080078d9
 80078d0:	0800794f 	.word	0x0800794f
 80078d4:	08007963 	.word	0x08007963
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078de:	f043 0301 	orr.w	r3, r3, #1
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	18d1      	adds	r1, r2, r3
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078f8:	f7ff ff5c 	bl	80077b4 <prvInsertTimerInActiveList>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d06c      	beq.n	80079dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007908:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800790a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d061      	beq.n	80079dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	441a      	add	r2, r3
 8007920:	2300      	movs	r3, #0
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	2300      	movs	r3, #0
 8007926:	2100      	movs	r1, #0
 8007928:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800792a:	f7ff fe01 	bl	8007530 <xTimerGenericCommand>
 800792e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d152      	bne.n	80079dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	61bb      	str	r3, [r7, #24]
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	e7fd      	b.n	800794a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	b2da      	uxtb	r2, r3
 800795a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007960:	e03d      	b.n	80079de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007968:	f043 0301 	orr.w	r3, r3, #1
 800796c:	b2da      	uxtb	r2, r3
 800796e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007970:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007978:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800797a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10b      	bne.n	800799a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	617b      	str	r3, [r7, #20]
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop
 8007998:	e7fd      	b.n	8007996 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	699a      	ldr	r2, [r3, #24]
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	18d1      	adds	r1, r2, r3
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079a8:	f7ff ff04 	bl	80077b4 <prvInsertTimerInActiveList>
					break;
 80079ac:	e017      	b.n	80079de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d103      	bne.n	80079c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80079bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079be:	f000 fbeb 	bl	8008198 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079c2:	e00c      	b.n	80079de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079ca:	f023 0301 	bic.w	r3, r3, #1
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80079d6:	e002      	b.n	80079de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80079d8:	bf00      	nop
 80079da:	e000      	b.n	80079de <prvProcessReceivedCommands+0x1a6>
					break;
 80079dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079de:	4b08      	ldr	r3, [pc, #32]	@ (8007a00 <prvProcessReceivedCommands+0x1c8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	1d39      	adds	r1, r7, #4
 80079e4:	2200      	movs	r2, #0
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fbd4 	bl	8006194 <xQueueReceive>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f47f af26 	bne.w	8007840 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop
 80079f8:	3730      	adds	r7, #48	@ 0x30
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	200052c8 	.word	0x200052c8

08007a04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a0a:	e049      	b.n	8007aa0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8007ac8 <prvSwitchTimerLists+0xc4>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a16:	4b2c      	ldr	r3, [pc, #176]	@ (8007ac8 <prvSwitchTimerLists+0xc4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3304      	adds	r3, #4
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe f8e1 	bl	8005bec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a38:	f003 0304 	and.w	r3, r3, #4
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d02f      	beq.n	8007aa0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4413      	add	r3, r2
 8007a48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d90e      	bls.n	8007a70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac8 <prvSwitchTimerLists+0xc4>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4619      	mov	r1, r3
 8007a68:	4610      	mov	r0, r2
 8007a6a:	f7fe f886 	bl	8005b7a <vListInsert>
 8007a6e:	e017      	b.n	8007aa0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a70:	2300      	movs	r3, #0
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	2300      	movs	r3, #0
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	2100      	movs	r1, #0
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7ff fd58 	bl	8007530 <xTimerGenericCommand>
 8007a80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10b      	bne.n	8007aa0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	603b      	str	r3, [r7, #0]
}
 8007a9a:	bf00      	nop
 8007a9c:	bf00      	nop
 8007a9e:	e7fd      	b.n	8007a9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007aa0:	4b09      	ldr	r3, [pc, #36]	@ (8007ac8 <prvSwitchTimerLists+0xc4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1b0      	bne.n	8007a0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007aaa:	4b07      	ldr	r3, [pc, #28]	@ (8007ac8 <prvSwitchTimerLists+0xc4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ab0:	4b06      	ldr	r3, [pc, #24]	@ (8007acc <prvSwitchTimerLists+0xc8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a04      	ldr	r2, [pc, #16]	@ (8007ac8 <prvSwitchTimerLists+0xc4>)
 8007ab6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ab8:	4a04      	ldr	r2, [pc, #16]	@ (8007acc <prvSwitchTimerLists+0xc8>)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	6013      	str	r3, [r2, #0]
}
 8007abe:	bf00      	nop
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	200052c0 	.word	0x200052c0
 8007acc:	200052c4 	.word	0x200052c4

08007ad0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ad6:	f000 f96f 	bl	8007db8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ada:	4b15      	ldr	r3, [pc, #84]	@ (8007b30 <prvCheckForValidListAndQueue+0x60>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d120      	bne.n	8007b24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ae2:	4814      	ldr	r0, [pc, #80]	@ (8007b34 <prvCheckForValidListAndQueue+0x64>)
 8007ae4:	f7fd fff8 	bl	8005ad8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ae8:	4813      	ldr	r0, [pc, #76]	@ (8007b38 <prvCheckForValidListAndQueue+0x68>)
 8007aea:	f7fd fff5 	bl	8005ad8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007aee:	4b13      	ldr	r3, [pc, #76]	@ (8007b3c <prvCheckForValidListAndQueue+0x6c>)
 8007af0:	4a10      	ldr	r2, [pc, #64]	@ (8007b34 <prvCheckForValidListAndQueue+0x64>)
 8007af2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007af4:	4b12      	ldr	r3, [pc, #72]	@ (8007b40 <prvCheckForValidListAndQueue+0x70>)
 8007af6:	4a10      	ldr	r2, [pc, #64]	@ (8007b38 <prvCheckForValidListAndQueue+0x68>)
 8007af8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007afa:	2300      	movs	r3, #0
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	4b11      	ldr	r3, [pc, #68]	@ (8007b44 <prvCheckForValidListAndQueue+0x74>)
 8007b00:	4a11      	ldr	r2, [pc, #68]	@ (8007b48 <prvCheckForValidListAndQueue+0x78>)
 8007b02:	2110      	movs	r1, #16
 8007b04:	200a      	movs	r0, #10
 8007b06:	f7fe f905 	bl	8005d14 <xQueueGenericCreateStatic>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	4a08      	ldr	r2, [pc, #32]	@ (8007b30 <prvCheckForValidListAndQueue+0x60>)
 8007b0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b10:	4b07      	ldr	r3, [pc, #28]	@ (8007b30 <prvCheckForValidListAndQueue+0x60>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b18:	4b05      	ldr	r3, [pc, #20]	@ (8007b30 <prvCheckForValidListAndQueue+0x60>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	490b      	ldr	r1, [pc, #44]	@ (8007b4c <prvCheckForValidListAndQueue+0x7c>)
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fd2a 	bl	8006578 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b24:	f000 f97a 	bl	8007e1c <vPortExitCritical>
}
 8007b28:	bf00      	nop
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	200052c8 	.word	0x200052c8
 8007b34:	20005298 	.word	0x20005298
 8007b38:	200052ac 	.word	0x200052ac
 8007b3c:	200052c0 	.word	0x200052c0
 8007b40:	200052c4 	.word	0x200052c4
 8007b44:	20005374 	.word	0x20005374
 8007b48:	200052d4 	.word	0x200052d4
 8007b4c:	080127a4 	.word	0x080127a4

08007b50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3b04      	subs	r3, #4
 8007b60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3b04      	subs	r3, #4
 8007b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f023 0201 	bic.w	r2, r3, #1
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3b04      	subs	r3, #4
 8007b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b80:	4a0c      	ldr	r2, [pc, #48]	@ (8007bb4 <pxPortInitialiseStack+0x64>)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3b14      	subs	r3, #20
 8007b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3b04      	subs	r3, #4
 8007b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f06f 0202 	mvn.w	r2, #2
 8007b9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3b20      	subs	r3, #32
 8007ba4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	08007bb9 	.word	0x08007bb9

08007bb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bc2:	4b13      	ldr	r3, [pc, #76]	@ (8007c10 <prvTaskExitError+0x58>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bca:	d00b      	beq.n	8007be4 <prvTaskExitError+0x2c>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60fb      	str	r3, [r7, #12]
}
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <prvTaskExitError+0x28>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	60bb      	str	r3, [r7, #8]
}
 8007bf6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bf8:	bf00      	nop
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0fc      	beq.n	8007bfa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	20000010 	.word	0x20000010
	...

08007c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c20:	4b07      	ldr	r3, [pc, #28]	@ (8007c40 <pxCurrentTCBConst2>)
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	6808      	ldr	r0, [r1, #0]
 8007c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2a:	f380 8809 	msr	PSP, r0
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f04f 0000 	mov.w	r0, #0
 8007c36:	f380 8811 	msr	BASEPRI, r0
 8007c3a:	4770      	bx	lr
 8007c3c:	f3af 8000 	nop.w

08007c40 <pxCurrentTCBConst2>:
 8007c40:	20004d98 	.word	0x20004d98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop

08007c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c48:	4808      	ldr	r0, [pc, #32]	@ (8007c6c <prvPortStartFirstTask+0x24>)
 8007c4a:	6800      	ldr	r0, [r0, #0]
 8007c4c:	6800      	ldr	r0, [r0, #0]
 8007c4e:	f380 8808 	msr	MSP, r0
 8007c52:	f04f 0000 	mov.w	r0, #0
 8007c56:	f380 8814 	msr	CONTROL, r0
 8007c5a:	b662      	cpsie	i
 8007c5c:	b661      	cpsie	f
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	df00      	svc	0
 8007c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c6a:	bf00      	nop
 8007c6c:	e000ed08 	.word	0xe000ed08

08007c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c76:	4b47      	ldr	r3, [pc, #284]	@ (8007d94 <xPortStartScheduler+0x124>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a47      	ldr	r2, [pc, #284]	@ (8007d98 <xPortStartScheduler+0x128>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d10b      	bne.n	8007c98 <xPortStartScheduler+0x28>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	613b      	str	r3, [r7, #16]
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	e7fd      	b.n	8007c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c98:	4b3e      	ldr	r3, [pc, #248]	@ (8007d94 <xPortStartScheduler+0x124>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d9c <xPortStartScheduler+0x12c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d10b      	bne.n	8007cba <xPortStartScheduler+0x4a>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	60fb      	str	r3, [r7, #12]
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop
 8007cb8:	e7fd      	b.n	8007cb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cba:	4b39      	ldr	r3, [pc, #228]	@ (8007da0 <xPortStartScheduler+0x130>)
 8007cbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	22ff      	movs	r2, #255	@ 0xff
 8007cca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	4b31      	ldr	r3, [pc, #196]	@ (8007da4 <xPortStartScheduler+0x134>)
 8007ce0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ce2:	4b31      	ldr	r3, [pc, #196]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007ce4:	2207      	movs	r2, #7
 8007ce6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ce8:	e009      	b.n	8007cfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007cea:	4b2f      	ldr	r3, [pc, #188]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007cf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d06:	2b80      	cmp	r3, #128	@ 0x80
 8007d08:	d0ef      	beq.n	8007cea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d0a:	4b27      	ldr	r3, [pc, #156]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f1c3 0307 	rsb	r3, r3, #7
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d00b      	beq.n	8007d2e <xPortStartScheduler+0xbe>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	60bb      	str	r3, [r7, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	bf00      	nop
 8007d2c:	e7fd      	b.n	8007d2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	021b      	lsls	r3, r3, #8
 8007d34:	4a1c      	ldr	r2, [pc, #112]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007d36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d38:	4b1b      	ldr	r3, [pc, #108]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d40:	4a19      	ldr	r2, [pc, #100]	@ (8007da8 <xPortStartScheduler+0x138>)
 8007d42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d4c:	4b17      	ldr	r3, [pc, #92]	@ (8007dac <xPortStartScheduler+0x13c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a16      	ldr	r2, [pc, #88]	@ (8007dac <xPortStartScheduler+0x13c>)
 8007d52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d58:	4b14      	ldr	r3, [pc, #80]	@ (8007dac <xPortStartScheduler+0x13c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a13      	ldr	r2, [pc, #76]	@ (8007dac <xPortStartScheduler+0x13c>)
 8007d5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d64:	f000 f8da 	bl	8007f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d68:	4b11      	ldr	r3, [pc, #68]	@ (8007db0 <xPortStartScheduler+0x140>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d6e:	f000 f8f9 	bl	8007f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d72:	4b10      	ldr	r3, [pc, #64]	@ (8007db4 <xPortStartScheduler+0x144>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a0f      	ldr	r2, [pc, #60]	@ (8007db4 <xPortStartScheduler+0x144>)
 8007d78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d7e:	f7ff ff63 	bl	8007c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d82:	f7ff f811 	bl	8006da8 <vTaskSwitchContext>
	prvTaskExitError();
 8007d86:	f7ff ff17 	bl	8007bb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	e000ed00 	.word	0xe000ed00
 8007d98:	410fc271 	.word	0x410fc271
 8007d9c:	410fc270 	.word	0x410fc270
 8007da0:	e000e400 	.word	0xe000e400
 8007da4:	200053c4 	.word	0x200053c4
 8007da8:	200053c8 	.word	0x200053c8
 8007dac:	e000ed20 	.word	0xe000ed20
 8007db0:	20000010 	.word	0x20000010
 8007db4:	e000ef34 	.word	0xe000ef34

08007db8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	607b      	str	r3, [r7, #4]
}
 8007dd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dd2:	4b10      	ldr	r3, [pc, #64]	@ (8007e14 <vPortEnterCritical+0x5c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8007e14 <vPortEnterCritical+0x5c>)
 8007dda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8007e14 <vPortEnterCritical+0x5c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d110      	bne.n	8007e06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007de4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e18 <vPortEnterCritical+0x60>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <vPortEnterCritical+0x4e>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	603b      	str	r3, [r7, #0]
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	e7fd      	b.n	8007e02 <vPortEnterCritical+0x4a>
	}
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20000010 	.word	0x20000010
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e22:	4b12      	ldr	r3, [pc, #72]	@ (8007e6c <vPortExitCritical+0x50>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10b      	bne.n	8007e42 <vPortExitCritical+0x26>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	607b      	str	r3, [r7, #4]
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	e7fd      	b.n	8007e3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e42:	4b0a      	ldr	r3, [pc, #40]	@ (8007e6c <vPortExitCritical+0x50>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	4a08      	ldr	r2, [pc, #32]	@ (8007e6c <vPortExitCritical+0x50>)
 8007e4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e4c:	4b07      	ldr	r3, [pc, #28]	@ (8007e6c <vPortExitCritical+0x50>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <vPortExitCritical+0x44>
 8007e54:	2300      	movs	r3, #0
 8007e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	f383 8811 	msr	BASEPRI, r3
}
 8007e5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	20000010 	.word	0x20000010

08007e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e70:	f3ef 8009 	mrs	r0, PSP
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	4b15      	ldr	r3, [pc, #84]	@ (8007ed0 <pxCurrentTCBConst>)
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	f01e 0f10 	tst.w	lr, #16
 8007e80:	bf08      	it	eq
 8007e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8a:	6010      	str	r0, [r2, #0]
 8007e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e94:	f380 8811 	msr	BASEPRI, r0
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f7fe ff82 	bl	8006da8 <vTaskSwitchContext>
 8007ea4:	f04f 0000 	mov.w	r0, #0
 8007ea8:	f380 8811 	msr	BASEPRI, r0
 8007eac:	bc09      	pop	{r0, r3}
 8007eae:	6819      	ldr	r1, [r3, #0]
 8007eb0:	6808      	ldr	r0, [r1, #0]
 8007eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb6:	f01e 0f10 	tst.w	lr, #16
 8007eba:	bf08      	it	eq
 8007ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ec0:	f380 8809 	msr	PSP, r0
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	f3af 8000 	nop.w

08007ed0 <pxCurrentTCBConst>:
 8007ed0:	20004d98 	.word	0x20004d98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop

08007ed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	607b      	str	r3, [r7, #4]
}
 8007ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ef2:	f7fe fe9f 	bl	8006c34 <xTaskIncrementTick>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007efc:	4b06      	ldr	r3, [pc, #24]	@ (8007f18 <xPortSysTickHandler+0x40>)
 8007efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	2300      	movs	r3, #0
 8007f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	f383 8811 	msr	BASEPRI, r3
}
 8007f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f10:	bf00      	nop
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	e000ed04 	.word	0xe000ed04

08007f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f20:	4b0b      	ldr	r3, [pc, #44]	@ (8007f50 <vPortSetupTimerInterrupt+0x34>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f26:	4b0b      	ldr	r3, [pc, #44]	@ (8007f54 <vPortSetupTimerInterrupt+0x38>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f58 <vPortSetupTimerInterrupt+0x3c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0a      	ldr	r2, [pc, #40]	@ (8007f5c <vPortSetupTimerInterrupt+0x40>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	099b      	lsrs	r3, r3, #6
 8007f38:	4a09      	ldr	r2, [pc, #36]	@ (8007f60 <vPortSetupTimerInterrupt+0x44>)
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f3e:	4b04      	ldr	r3, [pc, #16]	@ (8007f50 <vPortSetupTimerInterrupt+0x34>)
 8007f40:	2207      	movs	r2, #7
 8007f42:	601a      	str	r2, [r3, #0]
}
 8007f44:	bf00      	nop
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	e000e010 	.word	0xe000e010
 8007f54:	e000e018 	.word	0xe000e018
 8007f58:	20000004 	.word	0x20000004
 8007f5c:	10624dd3 	.word	0x10624dd3
 8007f60:	e000e014 	.word	0xe000e014

08007f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f74 <vPortEnableVFP+0x10>
 8007f68:	6801      	ldr	r1, [r0, #0]
 8007f6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f6e:	6001      	str	r1, [r0, #0]
 8007f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f72:	bf00      	nop
 8007f74:	e000ed88 	.word	0xe000ed88

08007f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f7e:	f3ef 8305 	mrs	r3, IPSR
 8007f82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b0f      	cmp	r3, #15
 8007f88:	d915      	bls.n	8007fb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f8a:	4a18      	ldr	r2, [pc, #96]	@ (8007fec <vPortValidateInterruptPriority+0x74>)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f94:	4b16      	ldr	r3, [pc, #88]	@ (8007ff0 <vPortValidateInterruptPriority+0x78>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	7afa      	ldrb	r2, [r7, #11]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d20b      	bcs.n	8007fb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	607b      	str	r3, [r7, #4]
}
 8007fb0:	bf00      	nop
 8007fb2:	bf00      	nop
 8007fb4:	e7fd      	b.n	8007fb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff4 <vPortValidateInterruptPriority+0x7c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff8 <vPortValidateInterruptPriority+0x80>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d90b      	bls.n	8007fde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	603b      	str	r3, [r7, #0]
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	e7fd      	b.n	8007fda <vPortValidateInterruptPriority+0x62>
	}
 8007fde:	bf00      	nop
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	e000e3f0 	.word	0xe000e3f0
 8007ff0:	200053c4 	.word	0x200053c4
 8007ff4:	e000ed0c 	.word	0xe000ed0c
 8007ff8:	200053c8 	.word	0x200053c8

08007ffc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08a      	sub	sp, #40	@ 0x28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008004:	2300      	movs	r3, #0
 8008006:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008008:	f7fe fd58 	bl	8006abc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800800c:	4b5c      	ldr	r3, [pc, #368]	@ (8008180 <pvPortMalloc+0x184>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008014:	f000 f924 	bl	8008260 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008018:	4b5a      	ldr	r3, [pc, #360]	@ (8008184 <pvPortMalloc+0x188>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4013      	ands	r3, r2
 8008020:	2b00      	cmp	r3, #0
 8008022:	f040 8095 	bne.w	8008150 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d01e      	beq.n	800806a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800802c:	2208      	movs	r2, #8
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4413      	add	r3, r2
 8008032:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b00      	cmp	r3, #0
 800803c:	d015      	beq.n	800806a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f023 0307 	bic.w	r3, r3, #7
 8008044:	3308      	adds	r3, #8
 8008046:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00b      	beq.n	800806a <pvPortMalloc+0x6e>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	617b      	str	r3, [r7, #20]
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop
 8008068:	e7fd      	b.n	8008066 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d06f      	beq.n	8008150 <pvPortMalloc+0x154>
 8008070:	4b45      	ldr	r3, [pc, #276]	@ (8008188 <pvPortMalloc+0x18c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	429a      	cmp	r2, r3
 8008078:	d86a      	bhi.n	8008150 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800807a:	4b44      	ldr	r3, [pc, #272]	@ (800818c <pvPortMalloc+0x190>)
 800807c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800807e:	4b43      	ldr	r3, [pc, #268]	@ (800818c <pvPortMalloc+0x190>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008084:	e004      	b.n	8008090 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	429a      	cmp	r2, r3
 8008098:	d903      	bls.n	80080a2 <pvPortMalloc+0xa6>
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1f1      	bne.n	8008086 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080a2:	4b37      	ldr	r3, [pc, #220]	@ (8008180 <pvPortMalloc+0x184>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d051      	beq.n	8008150 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2208      	movs	r2, #8
 80080b2:	4413      	add	r3, r2
 80080b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	1ad2      	subs	r2, r2, r3
 80080c6:	2308      	movs	r3, #8
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d920      	bls.n	8008110 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4413      	add	r3, r2
 80080d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <pvPortMalloc+0xfc>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	613b      	str	r3, [r7, #16]
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	e7fd      	b.n	80080f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800810a:	69b8      	ldr	r0, [r7, #24]
 800810c:	f000 f90a 	bl	8008324 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008110:	4b1d      	ldr	r3, [pc, #116]	@ (8008188 <pvPortMalloc+0x18c>)
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	4a1b      	ldr	r2, [pc, #108]	@ (8008188 <pvPortMalloc+0x18c>)
 800811c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800811e:	4b1a      	ldr	r3, [pc, #104]	@ (8008188 <pvPortMalloc+0x18c>)
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	4b1b      	ldr	r3, [pc, #108]	@ (8008190 <pvPortMalloc+0x194>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	429a      	cmp	r2, r3
 8008128:	d203      	bcs.n	8008132 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800812a:	4b17      	ldr	r3, [pc, #92]	@ (8008188 <pvPortMalloc+0x18c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a18      	ldr	r2, [pc, #96]	@ (8008190 <pvPortMalloc+0x194>)
 8008130:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	4b13      	ldr	r3, [pc, #76]	@ (8008184 <pvPortMalloc+0x188>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	431a      	orrs	r2, r3
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008146:	4b13      	ldr	r3, [pc, #76]	@ (8008194 <pvPortMalloc+0x198>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3301      	adds	r3, #1
 800814c:	4a11      	ldr	r2, [pc, #68]	@ (8008194 <pvPortMalloc+0x198>)
 800814e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008150:	f7fe fcc2 	bl	8006ad8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00b      	beq.n	8008176 <pvPortMalloc+0x17a>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	60fb      	str	r3, [r7, #12]
}
 8008170:	bf00      	nop
 8008172:	bf00      	nop
 8008174:	e7fd      	b.n	8008172 <pvPortMalloc+0x176>
	return pvReturn;
 8008176:	69fb      	ldr	r3, [r7, #28]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3728      	adds	r7, #40	@ 0x28
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20005fd4 	.word	0x20005fd4
 8008184:	20005fe8 	.word	0x20005fe8
 8008188:	20005fd8 	.word	0x20005fd8
 800818c:	20005fcc 	.word	0x20005fcc
 8008190:	20005fdc 	.word	0x20005fdc
 8008194:	20005fe0 	.word	0x20005fe0

08008198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d04f      	beq.n	800824a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081aa:	2308      	movs	r3, #8
 80081ac:	425b      	negs	r3, r3
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	4413      	add	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	4b25      	ldr	r3, [pc, #148]	@ (8008254 <vPortFree+0xbc>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4013      	ands	r3, r2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10b      	bne.n	80081de <vPortFree+0x46>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	60fb      	str	r3, [r7, #12]
}
 80081d8:	bf00      	nop
 80081da:	bf00      	nop
 80081dc:	e7fd      	b.n	80081da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00b      	beq.n	80081fe <vPortFree+0x66>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	60bb      	str	r3, [r7, #8]
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	e7fd      	b.n	80081fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	4b14      	ldr	r3, [pc, #80]	@ (8008254 <vPortFree+0xbc>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4013      	ands	r3, r2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01e      	beq.n	800824a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d11a      	bne.n	800824a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	4b0e      	ldr	r3, [pc, #56]	@ (8008254 <vPortFree+0xbc>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	43db      	mvns	r3, r3
 800821e:	401a      	ands	r2, r3
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008224:	f7fe fc4a 	bl	8006abc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	4b0a      	ldr	r3, [pc, #40]	@ (8008258 <vPortFree+0xc0>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4413      	add	r3, r2
 8008232:	4a09      	ldr	r2, [pc, #36]	@ (8008258 <vPortFree+0xc0>)
 8008234:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008236:	6938      	ldr	r0, [r7, #16]
 8008238:	f000 f874 	bl	8008324 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800823c:	4b07      	ldr	r3, [pc, #28]	@ (800825c <vPortFree+0xc4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	4a06      	ldr	r2, [pc, #24]	@ (800825c <vPortFree+0xc4>)
 8008244:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008246:	f7fe fc47 	bl	8006ad8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800824a:	bf00      	nop
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20005fe8 	.word	0x20005fe8
 8008258:	20005fd8 	.word	0x20005fd8
 800825c:	20005fe4 	.word	0x20005fe4

08008260 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008266:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800826a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800826c:	4b27      	ldr	r3, [pc, #156]	@ (800830c <prvHeapInit+0xac>)
 800826e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f003 0307 	and.w	r3, r3, #7
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00c      	beq.n	8008294 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3307      	adds	r3, #7
 800827e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0307 	bic.w	r3, r3, #7
 8008286:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	4a1f      	ldr	r2, [pc, #124]	@ (800830c <prvHeapInit+0xac>)
 8008290:	4413      	add	r3, r2
 8008292:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008298:	4a1d      	ldr	r2, [pc, #116]	@ (8008310 <prvHeapInit+0xb0>)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800829e:	4b1c      	ldr	r3, [pc, #112]	@ (8008310 <prvHeapInit+0xb0>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	4413      	add	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082ac:	2208      	movs	r2, #8
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	1a9b      	subs	r3, r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0307 	bic.w	r3, r3, #7
 80082ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4a15      	ldr	r2, [pc, #84]	@ (8008314 <prvHeapInit+0xb4>)
 80082c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082c2:	4b14      	ldr	r3, [pc, #80]	@ (8008314 <prvHeapInit+0xb4>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2200      	movs	r2, #0
 80082c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082ca:	4b12      	ldr	r3, [pc, #72]	@ (8008314 <prvHeapInit+0xb4>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2200      	movs	r2, #0
 80082d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	1ad2      	subs	r2, r2, r3
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008314 <prvHeapInit+0xb4>)
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008318 <prvHeapInit+0xb8>)
 80082ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	4a09      	ldr	r2, [pc, #36]	@ (800831c <prvHeapInit+0xbc>)
 80082f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082f8:	4b09      	ldr	r3, [pc, #36]	@ (8008320 <prvHeapInit+0xc0>)
 80082fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80082fe:	601a      	str	r2, [r3, #0]
}
 8008300:	bf00      	nop
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	200053cc 	.word	0x200053cc
 8008310:	20005fcc 	.word	0x20005fcc
 8008314:	20005fd4 	.word	0x20005fd4
 8008318:	20005fdc 	.word	0x20005fdc
 800831c:	20005fd8 	.word	0x20005fd8
 8008320:	20005fe8 	.word	0x20005fe8

08008324 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800832c:	4b28      	ldr	r3, [pc, #160]	@ (80083d0 <prvInsertBlockIntoFreeList+0xac>)
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	e002      	b.n	8008338 <prvInsertBlockIntoFreeList+0x14>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	429a      	cmp	r2, r3
 8008340:	d8f7      	bhi.n	8008332 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	4413      	add	r3, r2
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d108      	bne.n	8008366 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	441a      	add	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	441a      	add	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d118      	bne.n	80083ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	4b15      	ldr	r3, [pc, #84]	@ (80083d4 <prvInsertBlockIntoFreeList+0xb0>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	429a      	cmp	r2, r3
 8008384:	d00d      	beq.n	80083a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	441a      	add	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	e008      	b.n	80083b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083a2:	4b0c      	ldr	r3, [pc, #48]	@ (80083d4 <prvInsertBlockIntoFreeList+0xb0>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	e003      	b.n	80083b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d002      	beq.n	80083c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083c2:	bf00      	nop
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	20005fcc 	.word	0x20005fcc
 80083d4:	20005fd4 	.word	0x20005fd4

080083d8 <rcl_get_zero_initialized_init_options>:
 80083d8:	2000      	movs	r0, #0
 80083da:	4770      	bx	lr

080083dc <rcl_init_options_init>:
 80083dc:	b084      	sub	sp, #16
 80083de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083e0:	b097      	sub	sp, #92	@ 0x5c
 80083e2:	ae1d      	add	r6, sp, #116	@ 0x74
 80083e4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d058      	beq.n	800849e <rcl_init_options_init+0xc2>
 80083ec:	6803      	ldr	r3, [r0, #0]
 80083ee:	4605      	mov	r5, r0
 80083f0:	b133      	cbz	r3, 8008400 <rcl_init_options_init+0x24>
 80083f2:	2464      	movs	r4, #100	@ 0x64
 80083f4:	4620      	mov	r0, r4
 80083f6:	b017      	add	sp, #92	@ 0x5c
 80083f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80083fc:	b004      	add	sp, #16
 80083fe:	4770      	bx	lr
 8008400:	4630      	mov	r0, r6
 8008402:	f000 fac3 	bl	800898c <rcutils_allocator_is_valid>
 8008406:	2800      	cmp	r0, #0
 8008408:	d049      	beq.n	800849e <rcl_init_options_init+0xc2>
 800840a:	46b4      	mov	ip, r6
 800840c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008410:	ac11      	add	r4, sp, #68	@ 0x44
 8008412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008414:	f8dc 3000 	ldr.w	r3, [ip]
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800841c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800841e:	2050      	movs	r0, #80	@ 0x50
 8008420:	4798      	blx	r3
 8008422:	4604      	mov	r4, r0
 8008424:	6028      	str	r0, [r5, #0]
 8008426:	2800      	cmp	r0, #0
 8008428:	d03b      	beq.n	80084a2 <rcl_init_options_init+0xc6>
 800842a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800842e:	4686      	mov	lr, r0
 8008430:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008434:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008438:	f8dc 3000 	ldr.w	r3, [ip]
 800843c:	f8ce 3000 	str.w	r3, [lr]
 8008440:	a802      	add	r0, sp, #8
 8008442:	f000 fae5 	bl	8008a10 <rmw_get_zero_initialized_init_options>
 8008446:	f10d 0e08 	add.w	lr, sp, #8
 800844a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800844e:	f104 0c18 	add.w	ip, r4, #24
 8008452:	682f      	ldr	r7, [r5, #0]
 8008454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008458:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800845c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008460:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008464:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008468:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800846c:	ac20      	add	r4, sp, #128	@ 0x80
 800846e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008472:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008476:	e88d 0003 	stmia.w	sp, {r0, r1}
 800847a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800847e:	f107 0018 	add.w	r0, r7, #24
 8008482:	f000 faf3 	bl	8008a6c <rmw_init_options_init>
 8008486:	4604      	mov	r4, r0
 8008488:	2800      	cmp	r0, #0
 800848a:	d0b3      	beq.n	80083f4 <rcl_init_options_init+0x18>
 800848c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800848e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008490:	6828      	ldr	r0, [r5, #0]
 8008492:	4798      	blx	r3
 8008494:	4620      	mov	r0, r4
 8008496:	f005 ff05 	bl	800e2a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800849a:	4604      	mov	r4, r0
 800849c:	e7aa      	b.n	80083f4 <rcl_init_options_init+0x18>
 800849e:	240b      	movs	r4, #11
 80084a0:	e7a8      	b.n	80083f4 <rcl_init_options_init+0x18>
 80084a2:	240a      	movs	r4, #10
 80084a4:	e7a6      	b.n	80083f4 <rcl_init_options_init+0x18>
 80084a6:	bf00      	nop

080084a8 <rcl_init_options_fini>:
 80084a8:	b530      	push	{r4, r5, lr}
 80084aa:	b087      	sub	sp, #28
 80084ac:	b1f0      	cbz	r0, 80084ec <rcl_init_options_fini+0x44>
 80084ae:	6803      	ldr	r3, [r0, #0]
 80084b0:	4604      	mov	r4, r0
 80084b2:	b1db      	cbz	r3, 80084ec <rcl_init_options_fini+0x44>
 80084b4:	469c      	mov	ip, r3
 80084b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80084ba:	f10d 0e04 	add.w	lr, sp, #4
 80084be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80084c2:	f8dc 3000 	ldr.w	r3, [ip]
 80084c6:	f8ce 3000 	str.w	r3, [lr]
 80084ca:	a801      	add	r0, sp, #4
 80084cc:	f000 fa5e 	bl	800898c <rcutils_allocator_is_valid>
 80084d0:	b160      	cbz	r0, 80084ec <rcl_init_options_fini+0x44>
 80084d2:	6820      	ldr	r0, [r4, #0]
 80084d4:	3018      	adds	r0, #24
 80084d6:	f000 fb79 	bl	8008bcc <rmw_init_options_fini>
 80084da:	4605      	mov	r5, r0
 80084dc:	b950      	cbnz	r0, 80084f4 <rcl_init_options_fini+0x4c>
 80084de:	6820      	ldr	r0, [r4, #0]
 80084e0:	9b02      	ldr	r3, [sp, #8]
 80084e2:	9905      	ldr	r1, [sp, #20]
 80084e4:	4798      	blx	r3
 80084e6:	4628      	mov	r0, r5
 80084e8:	b007      	add	sp, #28
 80084ea:	bd30      	pop	{r4, r5, pc}
 80084ec:	250b      	movs	r5, #11
 80084ee:	4628      	mov	r0, r5
 80084f0:	b007      	add	sp, #28
 80084f2:	bd30      	pop	{r4, r5, pc}
 80084f4:	f005 fed6 	bl	800e2a4 <rcl_convert_rmw_ret_to_rcl_ret>
 80084f8:	4605      	mov	r5, r0
 80084fa:	e7f8      	b.n	80084ee <rcl_init_options_fini+0x46>

080084fc <rcl_init_options_copy>:
 80084fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008500:	b094      	sub	sp, #80	@ 0x50
 8008502:	2800      	cmp	r0, #0
 8008504:	d058      	beq.n	80085b8 <rcl_init_options_copy+0xbc>
 8008506:	4604      	mov	r4, r0
 8008508:	6800      	ldr	r0, [r0, #0]
 800850a:	2800      	cmp	r0, #0
 800850c:	d054      	beq.n	80085b8 <rcl_init_options_copy+0xbc>
 800850e:	460e      	mov	r6, r1
 8008510:	f000 fa3c 	bl	800898c <rcutils_allocator_is_valid>
 8008514:	2800      	cmp	r0, #0
 8008516:	d04f      	beq.n	80085b8 <rcl_init_options_copy+0xbc>
 8008518:	2e00      	cmp	r6, #0
 800851a:	d04d      	beq.n	80085b8 <rcl_init_options_copy+0xbc>
 800851c:	6833      	ldr	r3, [r6, #0]
 800851e:	b123      	cbz	r3, 800852a <rcl_init_options_copy+0x2e>
 8008520:	2464      	movs	r4, #100	@ 0x64
 8008522:	4620      	mov	r0, r4
 8008524:	b014      	add	sp, #80	@ 0x50
 8008526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800852a:	6827      	ldr	r7, [r4, #0]
 800852c:	46bc      	mov	ip, r7
 800852e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008532:	ad0f      	add	r5, sp, #60	@ 0x3c
 8008534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008536:	f8dc 3000 	ldr.w	r3, [ip]
 800853a:	f8d7 8000 	ldr.w	r8, [r7]
 800853e:	602b      	str	r3, [r5, #0]
 8008540:	4619      	mov	r1, r3
 8008542:	2050      	movs	r0, #80	@ 0x50
 8008544:	47c0      	blx	r8
 8008546:	4605      	mov	r5, r0
 8008548:	6030      	str	r0, [r6, #0]
 800854a:	b3d0      	cbz	r0, 80085c2 <rcl_init_options_copy+0xc6>
 800854c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8008550:	4686      	mov	lr, r0
 8008552:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008556:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800855a:	f8dc 3000 	ldr.w	r3, [ip]
 800855e:	f8ce 3000 	str.w	r3, [lr]
 8008562:	4668      	mov	r0, sp
 8008564:	f000 fa54 	bl	8008a10 <rmw_get_zero_initialized_init_options>
 8008568:	46ee      	mov	lr, sp
 800856a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800856e:	f105 0c18 	add.w	ip, r5, #24
 8008572:	6824      	ldr	r4, [r4, #0]
 8008574:	6835      	ldr	r5, [r6, #0]
 8008576:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800857a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800857e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008582:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800858a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800858e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008592:	f104 0018 	add.w	r0, r4, #24
 8008596:	f105 0118 	add.w	r1, r5, #24
 800859a:	f000 facf 	bl	8008b3c <rmw_init_options_copy>
 800859e:	4604      	mov	r4, r0
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d0be      	beq.n	8008522 <rcl_init_options_copy+0x26>
 80085a4:	f000 fa00 	bl	80089a8 <rcutils_get_error_string>
 80085a8:	f000 fa16 	bl	80089d8 <rcutils_reset_error>
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff ff7b 	bl	80084a8 <rcl_init_options_fini>
 80085b2:	b140      	cbz	r0, 80085c6 <rcl_init_options_copy+0xca>
 80085b4:	4604      	mov	r4, r0
 80085b6:	e7b4      	b.n	8008522 <rcl_init_options_copy+0x26>
 80085b8:	240b      	movs	r4, #11
 80085ba:	4620      	mov	r0, r4
 80085bc:	b014      	add	sp, #80	@ 0x50
 80085be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c2:	240a      	movs	r4, #10
 80085c4:	e7ad      	b.n	8008522 <rcl_init_options_copy+0x26>
 80085c6:	4620      	mov	r0, r4
 80085c8:	b014      	add	sp, #80	@ 0x50
 80085ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ce:	f005 be69 	b.w	800e2a4 <rcl_convert_rmw_ret_to_rcl_ret>
 80085d2:	bf00      	nop

080085d4 <rcl_init_options_set_domain_id>:
 80085d4:	b120      	cbz	r0, 80085e0 <rcl_init_options_set_domain_id+0xc>
 80085d6:	6803      	ldr	r3, [r0, #0]
 80085d8:	b113      	cbz	r3, 80085e0 <rcl_init_options_set_domain_id+0xc>
 80085da:	6259      	str	r1, [r3, #36]	@ 0x24
 80085dc:	2000      	movs	r0, #0
 80085de:	4770      	bx	lr
 80085e0:	200b      	movs	r0, #11
 80085e2:	4770      	bx	lr

080085e4 <rcl_get_zero_initialized_publisher>:
 80085e4:	4b01      	ldr	r3, [pc, #4]	@ (80085ec <rcl_get_zero_initialized_publisher+0x8>)
 80085e6:	6818      	ldr	r0, [r3, #0]
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	0801281c 	.word	0x0801281c

080085f0 <rcl_publisher_init>:
 80085f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f4:	b088      	sub	sp, #32
 80085f6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	d069      	beq.n	80086d0 <rcl_publisher_init+0xe0>
 80085fc:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8008600:	4604      	mov	r4, r0
 8008602:	4648      	mov	r0, r9
 8008604:	460e      	mov	r6, r1
 8008606:	4690      	mov	r8, r2
 8008608:	461f      	mov	r7, r3
 800860a:	f000 f9bf 	bl	800898c <rcutils_allocator_is_valid>
 800860e:	2800      	cmp	r0, #0
 8008610:	d05e      	beq.n	80086d0 <rcl_publisher_init+0xe0>
 8008612:	2c00      	cmp	r4, #0
 8008614:	d05c      	beq.n	80086d0 <rcl_publisher_init+0xe0>
 8008616:	f8d4 a000 	ldr.w	sl, [r4]
 800861a:	f1ba 0f00 	cmp.w	sl, #0
 800861e:	d004      	beq.n	800862a <rcl_publisher_init+0x3a>
 8008620:	2764      	movs	r7, #100	@ 0x64
 8008622:	4638      	mov	r0, r7
 8008624:	b008      	add	sp, #32
 8008626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862a:	4630      	mov	r0, r6
 800862c:	f006 f934 	bl	800e898 <rcl_node_is_valid>
 8008630:	2800      	cmp	r0, #0
 8008632:	d052      	beq.n	80086da <rcl_publisher_init+0xea>
 8008634:	f1b8 0f00 	cmp.w	r8, #0
 8008638:	d04a      	beq.n	80086d0 <rcl_publisher_init+0xe0>
 800863a:	2f00      	cmp	r7, #0
 800863c:	d048      	beq.n	80086d0 <rcl_publisher_init+0xe0>
 800863e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8008642:	aa07      	add	r2, sp, #28
 8008644:	9205      	str	r2, [sp, #20]
 8008646:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800864a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800864e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008652:	f8cd a01c 	str.w	sl, [sp, #28]
 8008656:	4639      	mov	r1, r7
 8008658:	e899 000c 	ldmia.w	r9, {r2, r3}
 800865c:	4630      	mov	r0, r6
 800865e:	f006 f96f 	bl	800e940 <rcl_node_resolve_name>
 8008662:	4607      	mov	r7, r0
 8008664:	2800      	cmp	r0, #0
 8008666:	d14f      	bne.n	8008708 <rcl_publisher_init+0x118>
 8008668:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800866a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800866c:	20c8      	movs	r0, #200	@ 0xc8
 800866e:	4798      	blx	r3
 8008670:	6020      	str	r0, [r4, #0]
 8008672:	2800      	cmp	r0, #0
 8008674:	d04e      	beq.n	8008714 <rcl_publisher_init+0x124>
 8008676:	4630      	mov	r0, r6
 8008678:	f006 f930 	bl	800e8dc <rcl_node_get_rmw_handle>
 800867c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	9a07      	ldr	r2, [sp, #28]
 8008684:	6827      	ldr	r7, [r4, #0]
 8008686:	462b      	mov	r3, r5
 8008688:	4641      	mov	r1, r8
 800868a:	f000 fdc7 	bl	800921c <rmw_create_publisher>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8008694:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008698:	b370      	cbz	r0, 80086f8 <rcl_publisher_init+0x108>
 800869a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800869e:	f000 fe9b 	bl	80093d8 <rmw_publisher_get_actual_qos>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	4607      	mov	r7, r0
 80086a6:	b9d0      	cbnz	r0, 80086de <rcl_publisher_init+0xee>
 80086a8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80086ac:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80086b0:	4629      	mov	r1, r5
 80086b2:	2270      	movs	r2, #112	@ 0x70
 80086b4:	4618      	mov	r0, r3
 80086b6:	f009 f938 	bl	801192a <memcpy>
 80086ba:	6832      	ldr	r2, [r6, #0]
 80086bc:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80086c0:	9807      	ldr	r0, [sp, #28]
 80086c2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80086c4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80086c6:	4798      	blx	r3
 80086c8:	4638      	mov	r0, r7
 80086ca:	b008      	add	sp, #32
 80086cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d0:	270b      	movs	r7, #11
 80086d2:	4638      	mov	r0, r7
 80086d4:	b008      	add	sp, #32
 80086d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086da:	27c8      	movs	r7, #200	@ 0xc8
 80086dc:	e7a1      	b.n	8008622 <rcl_publisher_init+0x32>
 80086de:	b18b      	cbz	r3, 8008704 <rcl_publisher_init+0x114>
 80086e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80086e4:	b142      	cbz	r2, 80086f8 <rcl_publisher_init+0x108>
 80086e6:	4630      	mov	r0, r6
 80086e8:	f006 f8f8 	bl	800e8dc <rcl_node_get_rmw_handle>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80086f2:	f000 fe81 	bl	80093f8 <rmw_destroy_publisher>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80086fa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80086fc:	4618      	mov	r0, r3
 80086fe:	4790      	blx	r2
 8008700:	2300      	movs	r3, #0
 8008702:	6023      	str	r3, [r4, #0]
 8008704:	2701      	movs	r7, #1
 8008706:	e7db      	b.n	80086c0 <rcl_publisher_init+0xd0>
 8008708:	2867      	cmp	r0, #103	@ 0x67
 800870a:	d0d9      	beq.n	80086c0 <rcl_publisher_init+0xd0>
 800870c:	2869      	cmp	r0, #105	@ 0x69
 800870e:	d003      	beq.n	8008718 <rcl_publisher_init+0x128>
 8008710:	280a      	cmp	r0, #10
 8008712:	d1f7      	bne.n	8008704 <rcl_publisher_init+0x114>
 8008714:	270a      	movs	r7, #10
 8008716:	e7d3      	b.n	80086c0 <rcl_publisher_init+0xd0>
 8008718:	2767      	movs	r7, #103	@ 0x67
 800871a:	e7d1      	b.n	80086c0 <rcl_publisher_init+0xd0>

0800871c <rcl_publisher_get_default_options>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	4d14      	ldr	r5, [pc, #80]	@ (8008770 <rcl_publisher_get_default_options+0x54>)
 8008720:	4914      	ldr	r1, [pc, #80]	@ (8008774 <rcl_publisher_get_default_options+0x58>)
 8008722:	b088      	sub	sp, #32
 8008724:	4604      	mov	r4, r0
 8008726:	2250      	movs	r2, #80	@ 0x50
 8008728:	4628      	mov	r0, r5
 800872a:	f009 f8fe 	bl	801192a <memcpy>
 800872e:	a802      	add	r0, sp, #8
 8008730:	f000 f91e 	bl	8008970 <rcutils_get_default_allocator>
 8008734:	f10d 0c08 	add.w	ip, sp, #8
 8008738:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800873c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8008740:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008744:	466e      	mov	r6, sp
 8008746:	f8dc 3000 	ldr.w	r3, [ip]
 800874a:	f8ce 3000 	str.w	r3, [lr]
 800874e:	4630      	mov	r0, r6
 8008750:	f000 f96e 	bl	8008a30 <rmw_get_default_publisher_options>
 8008754:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008758:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800875c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008760:	2270      	movs	r2, #112	@ 0x70
 8008762:	4629      	mov	r1, r5
 8008764:	4620      	mov	r0, r4
 8008766:	f009 f8e0 	bl	801192a <memcpy>
 800876a:	4620      	mov	r0, r4
 800876c:	b008      	add	sp, #32
 800876e:	bd70      	pop	{r4, r5, r6, pc}
 8008770:	20005ff0 	.word	0x20005ff0
 8008774:	08012820 	.word	0x08012820

08008778 <rcl_publish>:
 8008778:	b1f8      	cbz	r0, 80087ba <rcl_publish+0x42>
 800877a:	6803      	ldr	r3, [r0, #0]
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	4604      	mov	r4, r0
 8008780:	b1b3      	cbz	r3, 80087b0 <rcl_publish+0x38>
 8008782:	4616      	mov	r6, r2
 8008784:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008788:	b192      	cbz	r2, 80087b0 <rcl_publish+0x38>
 800878a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800878e:	460d      	mov	r5, r1
 8008790:	f005 fda6 	bl	800e2e0 <rcl_context_is_valid>
 8008794:	b160      	cbz	r0, 80087b0 <rcl_publish+0x38>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800879c:	b140      	cbz	r0, 80087b0 <rcl_publish+0x38>
 800879e:	b155      	cbz	r5, 80087b6 <rcl_publish+0x3e>
 80087a0:	4632      	mov	r2, r6
 80087a2:	4629      	mov	r1, r5
 80087a4:	f000 fcda 	bl	800915c <rmw_publish>
 80087a8:	3800      	subs	r0, #0
 80087aa:	bf18      	it	ne
 80087ac:	2001      	movne	r0, #1
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80087b4:	bd70      	pop	{r4, r5, r6, pc}
 80087b6:	200b      	movs	r0, #11
 80087b8:	bd70      	pop	{r4, r5, r6, pc}
 80087ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80087be:	4770      	bx	lr

080087c0 <rclc_support_init_with_options>:
 80087c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087c4:	b083      	sub	sp, #12
 80087c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80087c8:	b340      	cbz	r0, 800881c <rclc_support_init_with_options+0x5c>
 80087ca:	461d      	mov	r5, r3
 80087cc:	b333      	cbz	r3, 800881c <rclc_support_init_with_options+0x5c>
 80087ce:	b32e      	cbz	r6, 800881c <rclc_support_init_with_options+0x5c>
 80087d0:	46e9      	mov	r9, sp
 80087d2:	4604      	mov	r4, r0
 80087d4:	4648      	mov	r0, r9
 80087d6:	460f      	mov	r7, r1
 80087d8:	4690      	mov	r8, r2
 80087da:	f005 fd77 	bl	800e2cc <rcl_get_zero_initialized_context>
 80087de:	e899 0003 	ldmia.w	r9, {r0, r1}
 80087e2:	462a      	mov	r2, r5
 80087e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80087e8:	4623      	mov	r3, r4
 80087ea:	4641      	mov	r1, r8
 80087ec:	4638      	mov	r0, r7
 80087ee:	f005 fddd 	bl	800e3ac <rcl_init>
 80087f2:	4605      	mov	r5, r0
 80087f4:	b960      	cbnz	r0, 8008810 <rclc_support_init_with_options+0x50>
 80087f6:	60a6      	str	r6, [r4, #8]
 80087f8:	4632      	mov	r2, r6
 80087fa:	f104 010c 	add.w	r1, r4, #12
 80087fe:	2003      	movs	r0, #3
 8008800:	f006 fa5a 	bl	800ecb8 <rcl_clock_init>
 8008804:	4605      	mov	r5, r0
 8008806:	b918      	cbnz	r0, 8008810 <rclc_support_init_with_options+0x50>
 8008808:	4628      	mov	r0, r5
 800880a:	b003      	add	sp, #12
 800880c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008810:	f000 f8e2 	bl	80089d8 <rcutils_reset_error>
 8008814:	4628      	mov	r0, r5
 8008816:	b003      	add	sp, #12
 8008818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800881c:	250b      	movs	r5, #11
 800881e:	4628      	mov	r0, r5
 8008820:	b003      	add	sp, #12
 8008822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008826:	bf00      	nop

08008828 <rclc_node_init_default>:
 8008828:	b3b8      	cbz	r0, 800889a <rclc_node_init_default+0x72>
 800882a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800882e:	460d      	mov	r5, r1
 8008830:	b0a1      	sub	sp, #132	@ 0x84
 8008832:	b329      	cbz	r1, 8008880 <rclc_node_init_default+0x58>
 8008834:	4616      	mov	r6, r2
 8008836:	b31a      	cbz	r2, 8008880 <rclc_node_init_default+0x58>
 8008838:	461f      	mov	r7, r3
 800883a:	b30b      	cbz	r3, 8008880 <rclc_node_init_default+0x58>
 800883c:	f10d 0810 	add.w	r8, sp, #16
 8008840:	4604      	mov	r4, r0
 8008842:	4640      	mov	r0, r8
 8008844:	f005 fed8 	bl	800e5f8 <rcl_get_zero_initialized_node>
 8008848:	e898 0003 	ldmia.w	r8, {r0, r1}
 800884c:	f10d 0918 	add.w	r9, sp, #24
 8008850:	e884 0003 	stmia.w	r4, {r0, r1}
 8008854:	4648      	mov	r0, r9
 8008856:	f006 f847 	bl	800e8e8 <rcl_node_get_default_options>
 800885a:	4640      	mov	r0, r8
 800885c:	f005 fecc 	bl	800e5f8 <rcl_get_zero_initialized_node>
 8008860:	f8cd 9000 	str.w	r9, [sp]
 8008864:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008868:	463b      	mov	r3, r7
 800886a:	e884 0003 	stmia.w	r4, {r0, r1}
 800886e:	4632      	mov	r2, r6
 8008870:	4629      	mov	r1, r5
 8008872:	4620      	mov	r0, r4
 8008874:	f005 feca 	bl	800e60c <rcl_node_init>
 8008878:	b930      	cbnz	r0, 8008888 <rclc_node_init_default+0x60>
 800887a:	b021      	add	sp, #132	@ 0x84
 800887c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008880:	200b      	movs	r0, #11
 8008882:	b021      	add	sp, #132	@ 0x84
 8008884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008888:	9003      	str	r0, [sp, #12]
 800888a:	f000 f8a5 	bl	80089d8 <rcutils_reset_error>
 800888e:	f000 f8a3 	bl	80089d8 <rcutils_reset_error>
 8008892:	9803      	ldr	r0, [sp, #12]
 8008894:	b021      	add	sp, #132	@ 0x84
 8008896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800889a:	200b      	movs	r0, #11
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop

080088a0 <rclc_publisher_init_default>:
 80088a0:	b368      	cbz	r0, 80088fe <rclc_publisher_init_default+0x5e>
 80088a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a6:	460d      	mov	r5, r1
 80088a8:	b0a0      	sub	sp, #128	@ 0x80
 80088aa:	b321      	cbz	r1, 80088f6 <rclc_publisher_init_default+0x56>
 80088ac:	4616      	mov	r6, r2
 80088ae:	b312      	cbz	r2, 80088f6 <rclc_publisher_init_default+0x56>
 80088b0:	461f      	mov	r7, r3
 80088b2:	b303      	cbz	r3, 80088f6 <rclc_publisher_init_default+0x56>
 80088b4:	4604      	mov	r4, r0
 80088b6:	f7ff fe95 	bl	80085e4 <rcl_get_zero_initialized_publisher>
 80088ba:	f10d 0810 	add.w	r8, sp, #16
 80088be:	6020      	str	r0, [r4, #0]
 80088c0:	4640      	mov	r0, r8
 80088c2:	f7ff ff2b 	bl	800871c <rcl_publisher_get_default_options>
 80088c6:	490f      	ldr	r1, [pc, #60]	@ (8008904 <rclc_publisher_init_default+0x64>)
 80088c8:	2250      	movs	r2, #80	@ 0x50
 80088ca:	4640      	mov	r0, r8
 80088cc:	f009 f82d 	bl	801192a <memcpy>
 80088d0:	f8cd 8000 	str.w	r8, [sp]
 80088d4:	463b      	mov	r3, r7
 80088d6:	4632      	mov	r2, r6
 80088d8:	4629      	mov	r1, r5
 80088da:	4620      	mov	r0, r4
 80088dc:	f7ff fe88 	bl	80085f0 <rcl_publisher_init>
 80088e0:	b910      	cbnz	r0, 80088e8 <rclc_publisher_init_default+0x48>
 80088e2:	b020      	add	sp, #128	@ 0x80
 80088e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e8:	9003      	str	r0, [sp, #12]
 80088ea:	f000 f875 	bl	80089d8 <rcutils_reset_error>
 80088ee:	9803      	ldr	r0, [sp, #12]
 80088f0:	b020      	add	sp, #128	@ 0x80
 80088f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f6:	200b      	movs	r0, #11
 80088f8:	b020      	add	sp, #128	@ 0x80
 80088fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fe:	200b      	movs	r0, #11
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	08012870 	.word	0x08012870

08008908 <__default_zero_allocate>:
 8008908:	f008 bb86 	b.w	8011018 <calloc>

0800890c <__default_reallocate>:
 800890c:	f008 bd12 	b.w	8011334 <realloc>

08008910 <__default_deallocate>:
 8008910:	f008 bbee 	b.w	80110f0 <free>

08008914 <__default_allocate>:
 8008914:	f008 bbe4 	b.w	80110e0 <malloc>

08008918 <rcutils_get_zero_initialized_allocator>:
 8008918:	b510      	push	{r4, lr}
 800891a:	4c05      	ldr	r4, [pc, #20]	@ (8008930 <rcutils_get_zero_initialized_allocator+0x18>)
 800891c:	4686      	mov	lr, r0
 800891e:	4684      	mov	ip, r0
 8008920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008922:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	f8cc 3000 	str.w	r3, [ip]
 800892c:	4670      	mov	r0, lr
 800892e:	bd10      	pop	{r4, pc}
 8008930:	080128c0 	.word	0x080128c0

08008934 <rcutils_set_default_allocator>:
 8008934:	b1a8      	cbz	r0, 8008962 <rcutils_set_default_allocator+0x2e>
 8008936:	6802      	ldr	r2, [r0, #0]
 8008938:	b1a2      	cbz	r2, 8008964 <rcutils_set_default_allocator+0x30>
 800893a:	6841      	ldr	r1, [r0, #4]
 800893c:	b1a1      	cbz	r1, 8008968 <rcutils_set_default_allocator+0x34>
 800893e:	b410      	push	{r4}
 8008940:	68c4      	ldr	r4, [r0, #12]
 8008942:	b164      	cbz	r4, 800895e <rcutils_set_default_allocator+0x2a>
 8008944:	6880      	ldr	r0, [r0, #8]
 8008946:	b138      	cbz	r0, 8008958 <rcutils_set_default_allocator+0x24>
 8008948:	4b08      	ldr	r3, [pc, #32]	@ (800896c <rcutils_set_default_allocator+0x38>)
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	2200      	movs	r2, #0
 800894e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8008952:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8008956:	2001      	movs	r0, #1
 8008958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	4620      	mov	r0, r4
 8008960:	e7fa      	b.n	8008958 <rcutils_set_default_allocator+0x24>
 8008962:	4770      	bx	lr
 8008964:	4610      	mov	r0, r2
 8008966:	4770      	bx	lr
 8008968:	4608      	mov	r0, r1
 800896a:	4770      	bx	lr
 800896c:	20000014 	.word	0x20000014

08008970 <rcutils_get_default_allocator>:
 8008970:	b510      	push	{r4, lr}
 8008972:	4c05      	ldr	r4, [pc, #20]	@ (8008988 <rcutils_get_default_allocator+0x18>)
 8008974:	4686      	mov	lr, r0
 8008976:	4684      	mov	ip, r0
 8008978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800897a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	f8cc 3000 	str.w	r3, [ip]
 8008984:	4670      	mov	r0, lr
 8008986:	bd10      	pop	{r4, pc}
 8008988:	20000014 	.word	0x20000014

0800898c <rcutils_allocator_is_valid>:
 800898c:	b158      	cbz	r0, 80089a6 <rcutils_allocator_is_valid+0x1a>
 800898e:	6803      	ldr	r3, [r0, #0]
 8008990:	b143      	cbz	r3, 80089a4 <rcutils_allocator_is_valid+0x18>
 8008992:	6843      	ldr	r3, [r0, #4]
 8008994:	b133      	cbz	r3, 80089a4 <rcutils_allocator_is_valid+0x18>
 8008996:	68c3      	ldr	r3, [r0, #12]
 8008998:	b123      	cbz	r3, 80089a4 <rcutils_allocator_is_valid+0x18>
 800899a:	6880      	ldr	r0, [r0, #8]
 800899c:	3800      	subs	r0, #0
 800899e:	bf18      	it	ne
 80089a0:	2001      	movne	r0, #1
 80089a2:	4770      	bx	lr
 80089a4:	4618      	mov	r0, r3
 80089a6:	4770      	bx	lr

080089a8 <rcutils_get_error_string>:
 80089a8:	4b06      	ldr	r3, [pc, #24]	@ (80089c4 <rcutils_get_error_string+0x1c>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	b13b      	cbz	r3, 80089be <rcutils_get_error_string+0x16>
 80089ae:	4b06      	ldr	r3, [pc, #24]	@ (80089c8 <rcutils_get_error_string+0x20>)
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	b90a      	cbnz	r2, 80089b8 <rcutils_get_error_string+0x10>
 80089b4:	2201      	movs	r2, #1
 80089b6:	701a      	strb	r2, [r3, #0]
 80089b8:	4b04      	ldr	r3, [pc, #16]	@ (80089cc <rcutils_get_error_string+0x24>)
 80089ba:	7818      	ldrb	r0, [r3, #0]
 80089bc:	4770      	bx	lr
 80089be:	4b04      	ldr	r3, [pc, #16]	@ (80089d0 <rcutils_get_error_string+0x28>)
 80089c0:	7818      	ldrb	r0, [r3, #0]
 80089c2:	4770      	bx	lr
 80089c4:	20006060 	.word	0x20006060
 80089c8:	20006079 	.word	0x20006079
 80089cc:	20006078 	.word	0x20006078
 80089d0:	080128d4 	.word	0x080128d4
 80089d4:	00000000 	.word	0x00000000

080089d8 <rcutils_reset_error>:
 80089d8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80089f8 <rcutils_reset_error+0x20>
 80089dc:	4a08      	ldr	r2, [pc, #32]	@ (8008a00 <rcutils_reset_error+0x28>)
 80089de:	4809      	ldr	r0, [pc, #36]	@ (8008a04 <rcutils_reset_error+0x2c>)
 80089e0:	4909      	ldr	r1, [pc, #36]	@ (8008a08 <rcutils_reset_error+0x30>)
 80089e2:	2300      	movs	r3, #0
 80089e4:	8013      	strh	r3, [r2, #0]
 80089e6:	ed82 7b02 	vstr	d7, [r2, #8]
 80089ea:	4a08      	ldr	r2, [pc, #32]	@ (8008a0c <rcutils_reset_error+0x34>)
 80089ec:	7003      	strb	r3, [r0, #0]
 80089ee:	700b      	strb	r3, [r1, #0]
 80089f0:	7013      	strb	r3, [r2, #0]
 80089f2:	4770      	bx	lr
 80089f4:	f3af 8000 	nop.w
	...
 8008a00:	20006068 	.word	0x20006068
 8008a04:	20006079 	.word	0x20006079
 8008a08:	20006078 	.word	0x20006078
 8008a0c:	20006060 	.word	0x20006060

08008a10 <rmw_get_zero_initialized_init_options>:
 8008a10:	b510      	push	{r4, lr}
 8008a12:	2238      	movs	r2, #56	@ 0x38
 8008a14:	4604      	mov	r4, r0
 8008a16:	2100      	movs	r1, #0
 8008a18:	f008 febe 	bl	8011798 <memset>
 8008a1c:	f104 0010 	add.w	r0, r4, #16
 8008a20:	f000 f80a 	bl	8008a38 <rmw_get_default_security_options>
 8008a24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a28:	60e3      	str	r3, [r4, #12]
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	bf00      	nop

08008a30 <rmw_get_default_publisher_options>:
 8008a30:	2200      	movs	r2, #0
 8008a32:	6002      	str	r2, [r0, #0]
 8008a34:	7102      	strb	r2, [r0, #4]
 8008a36:	4770      	bx	lr

08008a38 <rmw_get_default_security_options>:
 8008a38:	2200      	movs	r2, #0
 8008a3a:	7002      	strb	r2, [r0, #0]
 8008a3c:	6042      	str	r2, [r0, #4]
 8008a3e:	4770      	bx	lr

08008a40 <rmw_uros_set_custom_transport>:
 8008a40:	b470      	push	{r4, r5, r6}
 8008a42:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8008a46:	b162      	cbz	r2, 8008a62 <rmw_uros_set_custom_transport+0x22>
 8008a48:	b15b      	cbz	r3, 8008a62 <rmw_uros_set_custom_transport+0x22>
 8008a4a:	b155      	cbz	r5, 8008a62 <rmw_uros_set_custom_transport+0x22>
 8008a4c:	b14e      	cbz	r6, 8008a62 <rmw_uros_set_custom_transport+0x22>
 8008a4e:	4c06      	ldr	r4, [pc, #24]	@ (8008a68 <rmw_uros_set_custom_transport+0x28>)
 8008a50:	7020      	strb	r0, [r4, #0]
 8008a52:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008a56:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008a5a:	6166      	str	r6, [r4, #20]
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	bc70      	pop	{r4, r5, r6}
 8008a60:	4770      	bx	lr
 8008a62:	200b      	movs	r0, #11
 8008a64:	bc70      	pop	{r4, r5, r6}
 8008a66:	4770      	bx	lr
 8008a68:	2000607c 	.word	0x2000607c

08008a6c <rmw_init_options_init>:
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a70:	b083      	sub	sp, #12
 8008a72:	ad09      	add	r5, sp, #36	@ 0x24
 8008a74:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8008a78:	b130      	cbz	r0, 8008a88 <rmw_init_options_init+0x1c>
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f7ff ff85 	bl	800898c <rcutils_allocator_is_valid>
 8008a82:	b108      	cbz	r0, 8008a88 <rmw_init_options_init+0x1c>
 8008a84:	68a6      	ldr	r6, [r4, #8]
 8008a86:	b12e      	cbz	r6, 8008a94 <rmw_init_options_init+0x28>
 8008a88:	200b      	movs	r0, #11
 8008a8a:	b003      	add	sp, #12
 8008a8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008a90:	b004      	add	sp, #16
 8008a92:	4770      	bx	lr
 8008a94:	2200      	movs	r2, #0
 8008a96:	2300      	movs	r3, #0
 8008a98:	e9c4 2300 	strd	r2, r3, [r4]
 8008a9c:	4b22      	ldr	r3, [pc, #136]	@ (8008b28 <rmw_init_options_init+0xbc>)
 8008a9e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8008b38 <rmw_init_options_init+0xcc>
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	60a3      	str	r3, [r4, #8]
 8008aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008aa8:	f104 0c20 	add.w	ip, r4, #32
 8008aac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008ab0:	466f      	mov	r7, sp
 8008ab2:	682b      	ldr	r3, [r5, #0]
 8008ab4:	f8cc 3000 	str.w	r3, [ip]
 8008ab8:	4638      	mov	r0, r7
 8008aba:	f8c4 e01c 	str.w	lr, [r4, #28]
 8008abe:	60e6      	str	r6, [r4, #12]
 8008ac0:	f7ff ffba 	bl	8008a38 <rmw_get_default_security_options>
 8008ac4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008ac8:	f104 0310 	add.w	r3, r4, #16
 8008acc:	e883 0003 	stmia.w	r3, {r0, r1}
 8008ad0:	2203      	movs	r2, #3
 8008ad2:	4816      	ldr	r0, [pc, #88]	@ (8008b2c <rmw_init_options_init+0xc0>)
 8008ad4:	4916      	ldr	r1, [pc, #88]	@ (8008b30 <rmw_init_options_init+0xc4>)
 8008ad6:	7626      	strb	r6, [r4, #24]
 8008ad8:	f000 fe9c 	bl	8009814 <rmw_uxrce_init_init_options_impl_memory>
 8008adc:	4813      	ldr	r0, [pc, #76]	@ (8008b2c <rmw_init_options_init+0xc0>)
 8008ade:	f006 ff37 	bl	800f950 <get_memory>
 8008ae2:	b1f0      	cbz	r0, 8008b22 <rmw_init_options_init+0xb6>
 8008ae4:	4a13      	ldr	r2, [pc, #76]	@ (8008b34 <rmw_init_options_init+0xc8>)
 8008ae6:	6883      	ldr	r3, [r0, #8]
 8008ae8:	6851      	ldr	r1, [r2, #4]
 8008aea:	7810      	ldrb	r0, [r2, #0]
 8008aec:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aee:	7418      	strb	r0, [r3, #16]
 8008af0:	6159      	str	r1, [r3, #20]
 8008af2:	68d1      	ldr	r1, [r2, #12]
 8008af4:	61d9      	str	r1, [r3, #28]
 8008af6:	6911      	ldr	r1, [r2, #16]
 8008af8:	6219      	str	r1, [r3, #32]
 8008afa:	6951      	ldr	r1, [r2, #20]
 8008afc:	6892      	ldr	r2, [r2, #8]
 8008afe:	619a      	str	r2, [r3, #24]
 8008b00:	6259      	str	r1, [r3, #36]	@ 0x24
 8008b02:	f004 fab9 	bl	800d078 <uxr_nanos>
 8008b06:	f008 fba9 	bl	801125c <srand>
 8008b0a:	f008 fbd5 	bl	80112b8 <rand>
 8008b0e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b10:	6298      	str	r0, [r3, #40]	@ 0x28
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d0f9      	beq.n	8008b0a <rmw_init_options_init+0x9e>
 8008b16:	2000      	movs	r0, #0
 8008b18:	b003      	add	sp, #12
 8008b1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008b1e:	b004      	add	sp, #16
 8008b20:	4770      	bx	lr
 8008b22:	2001      	movs	r0, #1
 8008b24:	e7b1      	b.n	8008a8a <rmw_init_options_init+0x1e>
 8008b26:	bf00      	nop
 8008b28:	080130f4 	.word	0x080130f4
 8008b2c:	2000a994 	.word	0x2000a994
 8008b30:	20006230 	.word	0x20006230
 8008b34:	2000607c 	.word	0x2000607c
 8008b38:	080128d8 	.word	0x080128d8

08008b3c <rmw_init_options_copy>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	b158      	cbz	r0, 8008b58 <rmw_init_options_copy+0x1c>
 8008b40:	460d      	mov	r5, r1
 8008b42:	b149      	cbz	r1, 8008b58 <rmw_init_options_copy+0x1c>
 8008b44:	4604      	mov	r4, r0
 8008b46:	6880      	ldr	r0, [r0, #8]
 8008b48:	b120      	cbz	r0, 8008b54 <rmw_init_options_copy+0x18>
 8008b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8008bc4 <rmw_init_options_copy+0x88>)
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	f7f7 fb67 	bl	8000220 <strcmp>
 8008b52:	bb90      	cbnz	r0, 8008bba <rmw_init_options_copy+0x7e>
 8008b54:	68ab      	ldr	r3, [r5, #8]
 8008b56:	b113      	cbz	r3, 8008b5e <rmw_init_options_copy+0x22>
 8008b58:	250b      	movs	r5, #11
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	bd70      	pop	{r4, r5, r6, pc}
 8008b5e:	4623      	mov	r3, r4
 8008b60:	462a      	mov	r2, r5
 8008b62:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8008b66:	f8d3 c000 	ldr.w	ip, [r3]
 8008b6a:	6858      	ldr	r0, [r3, #4]
 8008b6c:	6899      	ldr	r1, [r3, #8]
 8008b6e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008b72:	f8c2 e00c 	str.w	lr, [r2, #12]
 8008b76:	3310      	adds	r3, #16
 8008b78:	42b3      	cmp	r3, r6
 8008b7a:	f8c2 c000 	str.w	ip, [r2]
 8008b7e:	6050      	str	r0, [r2, #4]
 8008b80:	6091      	str	r1, [r2, #8]
 8008b82:	f102 0210 	add.w	r2, r2, #16
 8008b86:	d1ee      	bne.n	8008b66 <rmw_init_options_copy+0x2a>
 8008b88:	6819      	ldr	r1, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	480e      	ldr	r0, [pc, #56]	@ (8008bc8 <rmw_init_options_copy+0x8c>)
 8008b8e:	6053      	str	r3, [r2, #4]
 8008b90:	6011      	str	r1, [r2, #0]
 8008b92:	f006 fedd 	bl	800f950 <get_memory>
 8008b96:	b198      	cbz	r0, 8008bc0 <rmw_init_options_copy+0x84>
 8008b98:	6883      	ldr	r3, [r0, #8]
 8008b9a:	636b      	str	r3, [r5, #52]	@ 0x34
 8008b9c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008b9e:	f102 0c10 	add.w	ip, r2, #16
 8008ba2:	f103 0410 	add.w	r4, r3, #16
 8008ba6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bac:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8008bb0:	2500      	movs	r5, #0
 8008bb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	bd70      	pop	{r4, r5, r6, pc}
 8008bba:	250c      	movs	r5, #12
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}
 8008bc0:	2501      	movs	r5, #1
 8008bc2:	e7ca      	b.n	8008b5a <rmw_init_options_copy+0x1e>
 8008bc4:	080130f4 	.word	0x080130f4
 8008bc8:	2000a994 	.word	0x2000a994

08008bcc <rmw_init_options_fini>:
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d03d      	beq.n	8008c4c <rmw_init_options_fini+0x80>
 8008bd0:	b510      	push	{r4, lr}
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	b08e      	sub	sp, #56	@ 0x38
 8008bd6:	3020      	adds	r0, #32
 8008bd8:	f7ff fed8 	bl	800898c <rcutils_allocator_is_valid>
 8008bdc:	b360      	cbz	r0, 8008c38 <rmw_init_options_fini+0x6c>
 8008bde:	68a0      	ldr	r0, [r4, #8]
 8008be0:	b120      	cbz	r0, 8008bec <rmw_init_options_fini+0x20>
 8008be2:	4b1c      	ldr	r3, [pc, #112]	@ (8008c54 <rmw_init_options_fini+0x88>)
 8008be4:	6819      	ldr	r1, [r3, #0]
 8008be6:	f7f7 fb1b 	bl	8000220 <strcmp>
 8008bea:	bb68      	cbnz	r0, 8008c48 <rmw_init_options_fini+0x7c>
 8008bec:	4b1a      	ldr	r3, [pc, #104]	@ (8008c58 <rmw_init_options_fini+0x8c>)
 8008bee:	6819      	ldr	r1, [r3, #0]
 8008bf0:	b331      	cbz	r1, 8008c40 <rmw_init_options_fini+0x74>
 8008bf2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008bf4:	e001      	b.n	8008bfa <rmw_init_options_fini+0x2e>
 8008bf6:	6849      	ldr	r1, [r1, #4]
 8008bf8:	b311      	cbz	r1, 8008c40 <rmw_init_options_fini+0x74>
 8008bfa:	688b      	ldr	r3, [r1, #8]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d1fa      	bne.n	8008bf6 <rmw_init_options_fini+0x2a>
 8008c00:	4815      	ldr	r0, [pc, #84]	@ (8008c58 <rmw_init_options_fini+0x8c>)
 8008c02:	f006 feb5 	bl	800f970 <put_memory>
 8008c06:	4668      	mov	r0, sp
 8008c08:	f7ff ff02 	bl	8008a10 <rmw_get_zero_initialized_init_options>
 8008c0c:	46ee      	mov	lr, sp
 8008c0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008c12:	46a4      	mov	ip, r4
 8008c14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008c18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008c1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008c20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008c24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008c28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008c2c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008c30:	2300      	movs	r3, #0
 8008c32:	4618      	mov	r0, r3
 8008c34:	b00e      	add	sp, #56	@ 0x38
 8008c36:	bd10      	pop	{r4, pc}
 8008c38:	230b      	movs	r3, #11
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	b00e      	add	sp, #56	@ 0x38
 8008c3e:	bd10      	pop	{r4, pc}
 8008c40:	2301      	movs	r3, #1
 8008c42:	4618      	mov	r0, r3
 8008c44:	b00e      	add	sp, #56	@ 0x38
 8008c46:	bd10      	pop	{r4, pc}
 8008c48:	230c      	movs	r3, #12
 8008c4a:	e7f2      	b.n	8008c32 <rmw_init_options_fini+0x66>
 8008c4c:	230b      	movs	r3, #11
 8008c4e:	4618      	mov	r0, r3
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	080130f4 	.word	0x080130f4
 8008c58:	2000a994 	.word	0x2000a994

08008c5c <rmw_init>:
 8008c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c60:	b083      	sub	sp, #12
 8008c62:	2800      	cmp	r0, #0
 8008c64:	f000 80d3 	beq.w	8008e0e <rmw_init+0x1b2>
 8008c68:	460e      	mov	r6, r1
 8008c6a:	2900      	cmp	r1, #0
 8008c6c:	f000 80cf 	beq.w	8008e0e <rmw_init+0x1b2>
 8008c70:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008c72:	4605      	mov	r5, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 80ca 	beq.w	8008e0e <rmw_init+0x1b2>
 8008c7a:	4b78      	ldr	r3, [pc, #480]	@ (8008e5c <rmw_init+0x200>)
 8008c7c:	6880      	ldr	r0, [r0, #8]
 8008c7e:	681f      	ldr	r7, [r3, #0]
 8008c80:	b128      	cbz	r0, 8008c8e <rmw_init+0x32>
 8008c82:	4639      	mov	r1, r7
 8008c84:	f7f7 facc 	bl	8000220 <strcmp>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	f040 80ca 	bne.w	8008e22 <rmw_init+0x1c6>
 8008c8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c92:	4c73      	ldr	r4, [pc, #460]	@ (8008e60 <rmw_init+0x204>)
 8008c94:	4973      	ldr	r1, [pc, #460]	@ (8008e64 <rmw_init+0x208>)
 8008c96:	4874      	ldr	r0, [pc, #464]	@ (8008e68 <rmw_init+0x20c>)
 8008c98:	60b7      	str	r7, [r6, #8]
 8008c9a:	e9c6 2300 	strd	r2, r3, [r6]
 8008c9e:	68eb      	ldr	r3, [r5, #12]
 8008ca0:	64b3      	str	r3, [r6, #72]	@ 0x48
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f000 fd56 	bl	8009754 <rmw_uxrce_init_session_memory>
 8008ca8:	4620      	mov	r0, r4
 8008caa:	4970      	ldr	r1, [pc, #448]	@ (8008e6c <rmw_init+0x210>)
 8008cac:	2204      	movs	r2, #4
 8008cae:	f000 fd91 	bl	80097d4 <rmw_uxrce_init_static_input_buffer_memory>
 8008cb2:	f04f 0800 	mov.w	r8, #0
 8008cb6:	486c      	ldr	r0, [pc, #432]	@ (8008e68 <rmw_init+0x20c>)
 8008cb8:	f884 800d 	strb.w	r8, [r4, #13]
 8008cbc:	f006 fe48 	bl	800f950 <get_memory>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f000 80a9 	beq.w	8008e18 <rmw_init+0x1bc>
 8008cc6:	6884      	ldr	r4, [r0, #8]
 8008cc8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8008cca:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8008ccc:	f890 c010 	ldrb.w	ip, [r0, #16]
 8008cd0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8008cd4:	9101      	str	r1, [sp, #4]
 8008cd6:	6a00      	ldr	r0, [r0, #32]
 8008cd8:	9000      	str	r0, [sp, #0]
 8008cda:	f104 0910 	add.w	r9, r4, #16
 8008cde:	4661      	mov	r1, ip
 8008ce0:	4648      	mov	r0, r9
 8008ce2:	f002 f9db 	bl	800b09c <uxr_set_custom_transport_callbacks>
 8008ce6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8008cea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008cee:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8008cf2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8008cf6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8008cfa:	495d      	ldr	r1, [pc, #372]	@ (8008e70 <rmw_init+0x214>)
 8008cfc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8008d00:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8008d04:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8008d08:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8008d0c:	4859      	ldr	r0, [pc, #356]	@ (8008e74 <rmw_init+0x218>)
 8008d0e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8008d12:	2201      	movs	r2, #1
 8008d14:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8008d16:	f000 fcfd 	bl	8009714 <rmw_uxrce_init_node_memory>
 8008d1a:	4957      	ldr	r1, [pc, #348]	@ (8008e78 <rmw_init+0x21c>)
 8008d1c:	4857      	ldr	r0, [pc, #348]	@ (8008e7c <rmw_init+0x220>)
 8008d1e:	2205      	movs	r2, #5
 8008d20:	f000 fcd8 	bl	80096d4 <rmw_uxrce_init_subscription_memory>
 8008d24:	4956      	ldr	r1, [pc, #344]	@ (8008e80 <rmw_init+0x224>)
 8008d26:	4857      	ldr	r0, [pc, #348]	@ (8008e84 <rmw_init+0x228>)
 8008d28:	220a      	movs	r2, #10
 8008d2a:	f000 fcb3 	bl	8009694 <rmw_uxrce_init_publisher_memory>
 8008d2e:	4956      	ldr	r1, [pc, #344]	@ (8008e88 <rmw_init+0x22c>)
 8008d30:	4856      	ldr	r0, [pc, #344]	@ (8008e8c <rmw_init+0x230>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	f000 fc6e 	bl	8009614 <rmw_uxrce_init_service_memory>
 8008d38:	4955      	ldr	r1, [pc, #340]	@ (8008e90 <rmw_init+0x234>)
 8008d3a:	4856      	ldr	r0, [pc, #344]	@ (8008e94 <rmw_init+0x238>)
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f000 fc89 	bl	8009654 <rmw_uxrce_init_client_memory>
 8008d42:	4955      	ldr	r1, [pc, #340]	@ (8008e98 <rmw_init+0x23c>)
 8008d44:	4855      	ldr	r0, [pc, #340]	@ (8008e9c <rmw_init+0x240>)
 8008d46:	220f      	movs	r2, #15
 8008d48:	f000 fd24 	bl	8009794 <rmw_uxrce_init_topic_memory>
 8008d4c:	4954      	ldr	r1, [pc, #336]	@ (8008ea0 <rmw_init+0x244>)
 8008d4e:	4855      	ldr	r0, [pc, #340]	@ (8008ea4 <rmw_init+0x248>)
 8008d50:	2203      	movs	r2, #3
 8008d52:	f000 fd5f 	bl	8009814 <rmw_uxrce_init_init_options_impl_memory>
 8008d56:	4954      	ldr	r1, [pc, #336]	@ (8008ea8 <rmw_init+0x24c>)
 8008d58:	4854      	ldr	r0, [pc, #336]	@ (8008eac <rmw_init+0x250>)
 8008d5a:	2204      	movs	r2, #4
 8008d5c:	f000 fd7a 	bl	8009854 <rmw_uxrce_init_wait_set_memory>
 8008d60:	4953      	ldr	r1, [pc, #332]	@ (8008eb0 <rmw_init+0x254>)
 8008d62:	4854      	ldr	r0, [pc, #336]	@ (8008eb4 <rmw_init+0x258>)
 8008d64:	2204      	movs	r2, #4
 8008d66:	f000 fd95 	bl	8009894 <rmw_uxrce_init_guard_condition_memory>
 8008d6a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8008d6c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8008d6e:	4642      	mov	r2, r8
 8008d70:	f000 fc38 	bl	80095e4 <rmw_uxrce_transport_init>
 8008d74:	4607      	mov	r7, r0
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d158      	bne.n	8008e2c <rmw_init+0x1d0>
 8008d7a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8008d7c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8008d80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d82:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8008d86:	4628      	mov	r0, r5
 8008d88:	f002 fb82 	bl	800b490 <uxr_init_session>
 8008d8c:	494a      	ldr	r1, [pc, #296]	@ (8008eb8 <rmw_init+0x25c>)
 8008d8e:	4622      	mov	r2, r4
 8008d90:	4628      	mov	r0, r5
 8008d92:	f002 fba1 	bl	800b4d8 <uxr_set_topic_callback>
 8008d96:	4949      	ldr	r1, [pc, #292]	@ (8008ebc <rmw_init+0x260>)
 8008d98:	463a      	mov	r2, r7
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f002 fb98 	bl	800b4d0 <uxr_set_status_callback>
 8008da0:	4947      	ldr	r1, [pc, #284]	@ (8008ec0 <rmw_init+0x264>)
 8008da2:	463a      	mov	r2, r7
 8008da4:	4628      	mov	r0, r5
 8008da6:	f002 fb9b 	bl	800b4e0 <uxr_set_request_callback>
 8008daa:	4946      	ldr	r1, [pc, #280]	@ (8008ec4 <rmw_init+0x268>)
 8008dac:	463a      	mov	r2, r7
 8008dae:	4628      	mov	r0, r5
 8008db0:	f002 fb9a 	bl	800b4e8 <uxr_set_reply_callback>
 8008db4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8008db8:	2304      	movs	r3, #4
 8008dba:	0092      	lsls	r2, r2, #2
 8008dbc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	f002 fbcf 	bl	800b564 <uxr_create_input_reliable_stream>
 8008dc6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8008dca:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8008dce:	0092      	lsls	r2, r2, #2
 8008dd0:	2304      	movs	r3, #4
 8008dd2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f002 fb9c 	bl	800b514 <uxr_create_output_reliable_stream>
 8008ddc:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8008de0:	4628      	mov	r0, r5
 8008de2:	f002 fbb9 	bl	800b558 <uxr_create_input_best_effort_stream>
 8008de6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8008dea:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8008dee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8008df2:	3114      	adds	r1, #20
 8008df4:	4628      	mov	r0, r5
 8008df6:	f002 fb7b 	bl	800b4f0 <uxr_create_output_best_effort_stream>
 8008dfa:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f003 f8cc 	bl	800bf9c <uxr_create_session>
 8008e04:	b1f8      	cbz	r0, 8008e46 <rmw_init+0x1ea>
 8008e06:	4638      	mov	r0, r7
 8008e08:	b003      	add	sp, #12
 8008e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e0e:	270b      	movs	r7, #11
 8008e10:	4638      	mov	r0, r7
 8008e12:	b003      	add	sp, #12
 8008e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e18:	2701      	movs	r7, #1
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	b003      	add	sp, #12
 8008e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e22:	270c      	movs	r7, #12
 8008e24:	4638      	mov	r0, r7
 8008e26:	b003      	add	sp, #12
 8008e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e2c:	4648      	mov	r0, r9
 8008e2e:	f002 f977 	bl	800b120 <uxr_close_custom_transport>
 8008e32:	480d      	ldr	r0, [pc, #52]	@ (8008e68 <rmw_init+0x20c>)
 8008e34:	4621      	mov	r1, r4
 8008e36:	f006 fd9b 	bl	800f970 <put_memory>
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8008e40:	b003      	add	sp, #12
 8008e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e46:	4648      	mov	r0, r9
 8008e48:	f002 f96a 	bl	800b120 <uxr_close_custom_transport>
 8008e4c:	4806      	ldr	r0, [pc, #24]	@ (8008e68 <rmw_init+0x20c>)
 8008e4e:	4621      	mov	r1, r4
 8008e50:	f006 fd8e 	bl	800f970 <put_memory>
 8008e54:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8008e56:	2701      	movs	r7, #1
 8008e58:	e7d5      	b.n	8008e06 <rmw_init+0x1aa>
 8008e5a:	bf00      	nop
 8008e5c:	080130f4 	.word	0x080130f4
 8008e60:	2000a9e4 	.word	0x2000a9e4
 8008e64:	20006c90 	.word	0x20006c90
 8008e68:	2000a9d4 	.word	0x2000a9d4
 8008e6c:	20008238 	.word	0x20008238
 8008e70:	200062b4 	.word	0x200062b4
 8008e74:	2000a9a4 	.word	0x2000a9a4
 8008e78:	2000a338 	.word	0x2000a338
 8008e7c:	2000a9f4 	.word	0x2000a9f4
 8008e80:	20006358 	.word	0x20006358
 8008e84:	2000a9b4 	.word	0x2000a9b4
 8008e88:	20006bc8 	.word	0x20006bc8
 8008e8c:	2000a9c4 	.word	0x2000a9c4
 8008e90:	200060e8 	.word	0x200060e8
 8008e94:	200060d4 	.word	0x200060d4
 8008e98:	2000a770 	.word	0x2000a770
 8008e9c:	2000aa04 	.word	0x2000aa04
 8008ea0:	20006230 	.word	0x20006230
 8008ea4:	2000a994 	.word	0x2000a994
 8008ea8:	2000a914 	.word	0x2000a914
 8008eac:	2000aa14 	.word	0x2000aa14
 8008eb0:	200061b0 	.word	0x200061b0
 8008eb4:	2000a984 	.word	0x2000a984
 8008eb8:	0800f789 	.word	0x0800f789
 8008ebc:	0800f781 	.word	0x0800f781
 8008ec0:	0800f821 	.word	0x0800f821
 8008ec4:	0800f8bd 	.word	0x0800f8bd

08008ec8 <rmw_context_fini>:
 8008ec8:	4b17      	ldr	r3, [pc, #92]	@ (8008f28 <rmw_context_fini+0x60>)
 8008eca:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	681c      	ldr	r4, [r3, #0]
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	b334      	cbz	r4, 8008f22 <rmw_context_fini+0x5a>
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8008eda:	6902      	ldr	r2, [r0, #16]
 8008edc:	428a      	cmp	r2, r1
 8008ede:	d018      	beq.n	8008f12 <rmw_context_fini+0x4a>
 8008ee0:	2c00      	cmp	r4, #0
 8008ee2:	d1f8      	bne.n	8008ed6 <rmw_context_fini+0xe>
 8008ee4:	b189      	cbz	r1, 8008f0a <rmw_context_fini+0x42>
 8008ee6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8008eea:	789b      	ldrb	r3, [r3, #2]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8008ef2:	bf14      	ite	ne
 8008ef4:	210a      	movne	r1, #10
 8008ef6:	2100      	moveq	r1, #0
 8008ef8:	f003 f828 	bl	800bf4c <uxr_delete_session_retries>
 8008efc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8008efe:	f000 fce9 	bl	80098d4 <rmw_uxrce_fini_session_memory>
 8008f02:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8008f04:	3010      	adds	r0, #16
 8008f06:	f002 f90b 	bl	800b120 <uxr_close_custom_transport>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8008f0e:	4630      	mov	r0, r6
 8008f10:	bd70      	pop	{r4, r5, r6, pc}
 8008f12:	3018      	adds	r0, #24
 8008f14:	f000 f89c 	bl	8009050 <rmw_destroy_node>
 8008f18:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	2c00      	cmp	r4, #0
 8008f1e:	d1da      	bne.n	8008ed6 <rmw_context_fini+0xe>
 8008f20:	e7e0      	b.n	8008ee4 <rmw_context_fini+0x1c>
 8008f22:	4626      	mov	r6, r4
 8008f24:	e7de      	b.n	8008ee4 <rmw_context_fini+0x1c>
 8008f26:	bf00      	nop
 8008f28:	2000a9a4 	.word	0x2000a9a4

08008f2c <create_node>:
 8008f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f30:	b083      	sub	sp, #12
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d05f      	beq.n	8008ff6 <create_node+0xca>
 8008f36:	4606      	mov	r6, r0
 8008f38:	4835      	ldr	r0, [pc, #212]	@ (8009010 <create_node+0xe4>)
 8008f3a:	460f      	mov	r7, r1
 8008f3c:	4690      	mov	r8, r2
 8008f3e:	461d      	mov	r5, r3
 8008f40:	f006 fd06 	bl	800f950 <get_memory>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d056      	beq.n	8008ff6 <create_node+0xca>
 8008f48:	6884      	ldr	r4, [r0, #8]
 8008f4a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8008f4c:	6123      	str	r3, [r4, #16]
 8008f4e:	f006 fd67 	bl	800fa20 <rmw_get_implementation_identifier>
 8008f52:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8008f56:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8008f5a:	f8c4 9020 	str.w	r9, [r4, #32]
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f7f7 f968 	bl	8000234 <strlen>
 8008f64:	1c42      	adds	r2, r0, #1
 8008f66:	2a3c      	cmp	r2, #60	@ 0x3c
 8008f68:	f104 0518 	add.w	r5, r4, #24
 8008f6c:	d840      	bhi.n	8008ff0 <create_node+0xc4>
 8008f6e:	4648      	mov	r0, r9
 8008f70:	4631      	mov	r1, r6
 8008f72:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8008f76:	f008 fcd8 	bl	801192a <memcpy>
 8008f7a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8008f7e:	4638      	mov	r0, r7
 8008f80:	f7f7 f958 	bl	8000234 <strlen>
 8008f84:	1c42      	adds	r2, r0, #1
 8008f86:	2a3c      	cmp	r2, #60	@ 0x3c
 8008f88:	d832      	bhi.n	8008ff0 <create_node+0xc4>
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	4648      	mov	r0, r9
 8008f8e:	f008 fccc 	bl	801192a <memcpy>
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f98:	2101      	movs	r1, #1
 8008f9a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8008f9e:	1842      	adds	r2, r0, r1
 8008fa0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8008fa4:	f002 f8c0 	bl	800b128 <uxr_object_id>
 8008fa8:	6160      	str	r0, [r4, #20]
 8008faa:	783b      	ldrb	r3, [r7, #0]
 8008fac:	2b2f      	cmp	r3, #47	@ 0x2f
 8008fae:	d127      	bne.n	8009000 <create_node+0xd4>
 8008fb0:	787b      	ldrb	r3, [r7, #1]
 8008fb2:	bb2b      	cbnz	r3, 8009000 <create_node+0xd4>
 8008fb4:	4a17      	ldr	r2, [pc, #92]	@ (8009014 <create_node+0xe8>)
 8008fb6:	4818      	ldr	r0, [pc, #96]	@ (8009018 <create_node+0xec>)
 8008fb8:	4633      	mov	r3, r6
 8008fba:	213c      	movs	r1, #60	@ 0x3c
 8008fbc:	f008 fb3c 	bl	8011638 <sniprintf>
 8008fc0:	6920      	ldr	r0, [r4, #16]
 8008fc2:	4915      	ldr	r1, [pc, #84]	@ (8009018 <create_node+0xec>)
 8008fc4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8008fc8:	9100      	str	r1, [sp, #0]
 8008fca:	2106      	movs	r1, #6
 8008fcc:	9101      	str	r1, [sp, #4]
 8008fce:	6811      	ldr	r1, [r2, #0]
 8008fd0:	6962      	ldr	r2, [r4, #20]
 8008fd2:	fa1f f388 	uxth.w	r3, r8
 8008fd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008fda:	f001 fed5 	bl	800ad88 <uxr_buffer_create_participant_bin>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	6920      	ldr	r0, [r4, #16]
 8008fe2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8008fe6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8008fea:	f000 fd45 	bl	8009a78 <run_xrce_session>
 8008fee:	b918      	cbnz	r0, 8008ff8 <create_node+0xcc>
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f000 fc75 	bl	80098e0 <rmw_uxrce_fini_node_memory>
 8008ff6:	2500      	movs	r5, #0
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	b003      	add	sp, #12
 8008ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009000:	4a06      	ldr	r2, [pc, #24]	@ (800901c <create_node+0xf0>)
 8009002:	9600      	str	r6, [sp, #0]
 8009004:	463b      	mov	r3, r7
 8009006:	213c      	movs	r1, #60	@ 0x3c
 8009008:	4803      	ldr	r0, [pc, #12]	@ (8009018 <create_node+0xec>)
 800900a:	f008 fb15 	bl	8011638 <sniprintf>
 800900e:	e7d7      	b.n	8008fc0 <create_node+0x94>
 8009010:	2000a9a4 	.word	0x2000a9a4
 8009014:	08012918 	.word	0x08012918
 8009018:	20006098 	.word	0x20006098
 800901c:	080128dc 	.word	0x080128dc

08009020 <rmw_create_node>:
 8009020:	b199      	cbz	r1, 800904a <rmw_create_node+0x2a>
 8009022:	780b      	ldrb	r3, [r1, #0]
 8009024:	468c      	mov	ip, r1
 8009026:	b183      	cbz	r3, 800904a <rmw_create_node+0x2a>
 8009028:	b410      	push	{r4}
 800902a:	4614      	mov	r4, r2
 800902c:	b14a      	cbz	r2, 8009042 <rmw_create_node+0x22>
 800902e:	7813      	ldrb	r3, [r2, #0]
 8009030:	b13b      	cbz	r3, 8009042 <rmw_create_node+0x22>
 8009032:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8009034:	4603      	mov	r3, r0
 8009036:	4621      	mov	r1, r4
 8009038:	4660      	mov	r0, ip
 800903a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800903e:	f7ff bf75 	b.w	8008f2c <create_node>
 8009042:	2000      	movs	r0, #0
 8009044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	2000      	movs	r0, #0
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop

08009050 <rmw_destroy_node>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	b328      	cbz	r0, 80090a0 <rmw_destroy_node+0x50>
 8009054:	4607      	mov	r7, r0
 8009056:	6800      	ldr	r0, [r0, #0]
 8009058:	b120      	cbz	r0, 8009064 <rmw_destroy_node+0x14>
 800905a:	4b36      	ldr	r3, [pc, #216]	@ (8009134 <rmw_destroy_node+0xe4>)
 800905c:	6819      	ldr	r1, [r3, #0]
 800905e:	f7f7 f8df 	bl	8000220 <strcmp>
 8009062:	b9e8      	cbnz	r0, 80090a0 <rmw_destroy_node+0x50>
 8009064:	687d      	ldr	r5, [r7, #4]
 8009066:	b1dd      	cbz	r5, 80090a0 <rmw_destroy_node+0x50>
 8009068:	4b33      	ldr	r3, [pc, #204]	@ (8009138 <rmw_destroy_node+0xe8>)
 800906a:	681c      	ldr	r4, [r3, #0]
 800906c:	2c00      	cmp	r4, #0
 800906e:	d05f      	beq.n	8009130 <rmw_destroy_node+0xe0>
 8009070:	2600      	movs	r6, #0
 8009072:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8009076:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800907a:	429d      	cmp	r5, r3
 800907c:	d013      	beq.n	80090a6 <rmw_destroy_node+0x56>
 800907e:	2c00      	cmp	r4, #0
 8009080:	d1f7      	bne.n	8009072 <rmw_destroy_node+0x22>
 8009082:	4b2e      	ldr	r3, [pc, #184]	@ (800913c <rmw_destroy_node+0xec>)
 8009084:	681c      	ldr	r4, [r3, #0]
 8009086:	b1c4      	cbz	r4, 80090ba <rmw_destroy_node+0x6a>
 8009088:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800908c:	6a0b      	ldr	r3, [r1, #32]
 800908e:	429d      	cmp	r5, r3
 8009090:	d1f9      	bne.n	8009086 <rmw_destroy_node+0x36>
 8009092:	317c      	adds	r1, #124	@ 0x7c
 8009094:	4638      	mov	r0, r7
 8009096:	f000 fa45 	bl	8009524 <rmw_destroy_subscription>
 800909a:	2801      	cmp	r0, #1
 800909c:	4606      	mov	r6, r0
 800909e:	d1f2      	bne.n	8009086 <rmw_destroy_node+0x36>
 80090a0:	2601      	movs	r6, #1
 80090a2:	4630      	mov	r0, r6
 80090a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a6:	3184      	adds	r1, #132	@ 0x84
 80090a8:	4638      	mov	r0, r7
 80090aa:	f000 f9a5 	bl	80093f8 <rmw_destroy_publisher>
 80090ae:	2801      	cmp	r0, #1
 80090b0:	4606      	mov	r6, r0
 80090b2:	d0f5      	beq.n	80090a0 <rmw_destroy_node+0x50>
 80090b4:	2c00      	cmp	r4, #0
 80090b6:	d1dc      	bne.n	8009072 <rmw_destroy_node+0x22>
 80090b8:	e7e3      	b.n	8009082 <rmw_destroy_node+0x32>
 80090ba:	4b21      	ldr	r3, [pc, #132]	@ (8009140 <rmw_destroy_node+0xf0>)
 80090bc:	681c      	ldr	r4, [r3, #0]
 80090be:	b16c      	cbz	r4, 80090dc <rmw_destroy_node+0x8c>
 80090c0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80090c4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80090c6:	429d      	cmp	r5, r3
 80090c8:	d1f9      	bne.n	80090be <rmw_destroy_node+0x6e>
 80090ca:	317c      	adds	r1, #124	@ 0x7c
 80090cc:	4638      	mov	r0, r7
 80090ce:	f000 f9e5 	bl	800949c <rmw_destroy_service>
 80090d2:	2801      	cmp	r0, #1
 80090d4:	4606      	mov	r6, r0
 80090d6:	d0e3      	beq.n	80090a0 <rmw_destroy_node+0x50>
 80090d8:	2c00      	cmp	r4, #0
 80090da:	d1f1      	bne.n	80090c0 <rmw_destroy_node+0x70>
 80090dc:	4b19      	ldr	r3, [pc, #100]	@ (8009144 <rmw_destroy_node+0xf4>)
 80090de:	681c      	ldr	r4, [r3, #0]
 80090e0:	b16c      	cbz	r4, 80090fe <rmw_destroy_node+0xae>
 80090e2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80090e6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80090e8:	429d      	cmp	r5, r3
 80090ea:	d1f9      	bne.n	80090e0 <rmw_destroy_node+0x90>
 80090ec:	317c      	adds	r1, #124	@ 0x7c
 80090ee:	4638      	mov	r0, r7
 80090f0:	f006 fc52 	bl	800f998 <rmw_destroy_client>
 80090f4:	2801      	cmp	r0, #1
 80090f6:	4606      	mov	r6, r0
 80090f8:	d0d2      	beq.n	80090a0 <rmw_destroy_node+0x50>
 80090fa:	2c00      	cmp	r4, #0
 80090fc:	d1f1      	bne.n	80090e2 <rmw_destroy_node+0x92>
 80090fe:	6928      	ldr	r0, [r5, #16]
 8009100:	696a      	ldr	r2, [r5, #20]
 8009102:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009106:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800910a:	6819      	ldr	r1, [r3, #0]
 800910c:	f001 fdf0 	bl	800acf0 <uxr_buffer_delete_entity>
 8009110:	4602      	mov	r2, r0
 8009112:	6928      	ldr	r0, [r5, #16]
 8009114:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009118:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800911c:	f000 fcac 	bl	8009a78 <run_xrce_session>
 8009120:	2800      	cmp	r0, #0
 8009122:	bf08      	it	eq
 8009124:	2602      	moveq	r6, #2
 8009126:	4638      	mov	r0, r7
 8009128:	f000 fbda 	bl	80098e0 <rmw_uxrce_fini_node_memory>
 800912c:	4630      	mov	r0, r6
 800912e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009130:	4626      	mov	r6, r4
 8009132:	e7a6      	b.n	8009082 <rmw_destroy_node+0x32>
 8009134:	080130f4 	.word	0x080130f4
 8009138:	2000a9b4 	.word	0x2000a9b4
 800913c:	2000a9f4 	.word	0x2000a9f4
 8009140:	2000a9c4 	.word	0x2000a9c4
 8009144:	200060d4 	.word	0x200060d4

08009148 <rmw_node_get_graph_guard_condition>:
 8009148:	6843      	ldr	r3, [r0, #4]
 800914a:	6918      	ldr	r0, [r3, #16]
 800914c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop

08009154 <flush_session>:
 8009154:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8009156:	f002 bdb1 	b.w	800bcbc <uxr_run_session_until_confirm_delivery>
 800915a:	bf00      	nop

0800915c <rmw_publish>:
 800915c:	2800      	cmp	r0, #0
 800915e:	d053      	beq.n	8009208 <rmw_publish+0xac>
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	460d      	mov	r5, r1
 8009164:	b08e      	sub	sp, #56	@ 0x38
 8009166:	2900      	cmp	r1, #0
 8009168:	d04b      	beq.n	8009202 <rmw_publish+0xa6>
 800916a:	4604      	mov	r4, r0
 800916c:	6800      	ldr	r0, [r0, #0]
 800916e:	f000 fd03 	bl	8009b78 <is_uxrce_rmw_identifier_valid>
 8009172:	2800      	cmp	r0, #0
 8009174:	d045      	beq.n	8009202 <rmw_publish+0xa6>
 8009176:	6866      	ldr	r6, [r4, #4]
 8009178:	2e00      	cmp	r6, #0
 800917a:	d042      	beq.n	8009202 <rmw_publish+0xa6>
 800917c:	69b4      	ldr	r4, [r6, #24]
 800917e:	4628      	mov	r0, r5
 8009180:	6923      	ldr	r3, [r4, #16]
 8009182:	4798      	blx	r3
 8009184:	69f3      	ldr	r3, [r6, #28]
 8009186:	9005      	str	r0, [sp, #20]
 8009188:	b113      	cbz	r3, 8009190 <rmw_publish+0x34>
 800918a:	a805      	add	r0, sp, #20
 800918c:	4798      	blx	r3
 800918e:	9805      	ldr	r0, [sp, #20]
 8009190:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	9000      	str	r0, [sp, #0]
 8009198:	6972      	ldr	r2, [r6, #20]
 800919a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800919c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80091a0:	ab06      	add	r3, sp, #24
 80091a2:	f004 f809 	bl	800d1b8 <uxr_prepare_output_stream>
 80091a6:	b1d8      	cbz	r0, 80091e0 <rmw_publish+0x84>
 80091a8:	68a3      	ldr	r3, [r4, #8]
 80091aa:	a906      	add	r1, sp, #24
 80091ac:	4628      	mov	r0, r5
 80091ae:	4798      	blx	r3
 80091b0:	6a33      	ldr	r3, [r6, #32]
 80091b2:	4604      	mov	r4, r0
 80091b4:	b10b      	cbz	r3, 80091ba <rmw_publish+0x5e>
 80091b6:	a806      	add	r0, sp, #24
 80091b8:	4798      	blx	r3
 80091ba:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80091be:	2b01      	cmp	r3, #1
 80091c0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80091c4:	d022      	beq.n	800920c <rmw_publish+0xb0>
 80091c6:	6918      	ldr	r0, [r3, #16]
 80091c8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80091ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80091ce:	f002 fd75 	bl	800bcbc <uxr_run_session_until_confirm_delivery>
 80091d2:	4020      	ands	r0, r4
 80091d4:	b2c4      	uxtb	r4, r0
 80091d6:	f084 0001 	eor.w	r0, r4, #1
 80091da:	b2c0      	uxtb	r0, r0
 80091dc:	b00e      	add	sp, #56	@ 0x38
 80091de:	bd70      	pop	{r4, r5, r6, pc}
 80091e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80091e4:	6918      	ldr	r0, [r3, #16]
 80091e6:	9b05      	ldr	r3, [sp, #20]
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009218 <rmw_publish+0xbc>)
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	9602      	str	r6, [sp, #8]
 80091f0:	6972      	ldr	r2, [r6, #20]
 80091f2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80091f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80091f8:	ab06      	add	r3, sp, #24
 80091fa:	f004 f80d 	bl	800d218 <uxr_prepare_output_stream_fragmented>
 80091fe:	2800      	cmp	r0, #0
 8009200:	d1d2      	bne.n	80091a8 <rmw_publish+0x4c>
 8009202:	2001      	movs	r0, #1
 8009204:	b00e      	add	sp, #56	@ 0x38
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	2001      	movs	r0, #1
 800920a:	4770      	bx	lr
 800920c:	6918      	ldr	r0, [r3, #16]
 800920e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009212:	f002 f9cd 	bl	800b5b0 <uxr_flash_output_streams>
 8009216:	e7de      	b.n	80091d6 <rmw_publish+0x7a>
 8009218:	08009155 	.word	0x08009155

0800921c <rmw_create_publisher>:
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	b087      	sub	sp, #28
 8009222:	2800      	cmp	r0, #0
 8009224:	f000 80cc 	beq.w	80093c0 <rmw_create_publisher+0x1a4>
 8009228:	460e      	mov	r6, r1
 800922a:	2900      	cmp	r1, #0
 800922c:	f000 80c8 	beq.w	80093c0 <rmw_create_publisher+0x1a4>
 8009230:	4604      	mov	r4, r0
 8009232:	6800      	ldr	r0, [r0, #0]
 8009234:	4615      	mov	r5, r2
 8009236:	4698      	mov	r8, r3
 8009238:	f000 fc9e 	bl	8009b78 <is_uxrce_rmw_identifier_valid>
 800923c:	2800      	cmp	r0, #0
 800923e:	f000 80bf 	beq.w	80093c0 <rmw_create_publisher+0x1a4>
 8009242:	2d00      	cmp	r5, #0
 8009244:	f000 80bc 	beq.w	80093c0 <rmw_create_publisher+0x1a4>
 8009248:	782b      	ldrb	r3, [r5, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 80b8 	beq.w	80093c0 <rmw_create_publisher+0x1a4>
 8009250:	f1b8 0f00 	cmp.w	r8, #0
 8009254:	f000 80b4 	beq.w	80093c0 <rmw_create_publisher+0x1a4>
 8009258:	485c      	ldr	r0, [pc, #368]	@ (80093cc <rmw_create_publisher+0x1b0>)
 800925a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800925e:	f006 fb77 	bl	800f950 <get_memory>
 8009262:	2800      	cmp	r0, #0
 8009264:	f000 80ac 	beq.w	80093c0 <rmw_create_publisher+0x1a4>
 8009268:	6884      	ldr	r4, [r0, #8]
 800926a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800926e:	f006 fbd7 	bl	800fa20 <rmw_get_implementation_identifier>
 8009272:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8009276:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800927a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800927e:	4628      	mov	r0, r5
 8009280:	f7f6 ffd8 	bl	8000234 <strlen>
 8009284:	3001      	adds	r0, #1
 8009286:	283c      	cmp	r0, #60	@ 0x3c
 8009288:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800928c:	f200 8091 	bhi.w	80093b2 <rmw_create_publisher+0x196>
 8009290:	4a4f      	ldr	r2, [pc, #316]	@ (80093d0 <rmw_create_publisher+0x1b4>)
 8009292:	462b      	mov	r3, r5
 8009294:	213c      	movs	r1, #60	@ 0x3c
 8009296:	4650      	mov	r0, sl
 8009298:	f008 f9ce 	bl	8011638 <sniprintf>
 800929c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80092a0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80092a2:	4641      	mov	r1, r8
 80092a4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80092a8:	2250      	movs	r2, #80	@ 0x50
 80092aa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80092ae:	f008 fb3c 	bl	801192a <memcpy>
 80092b2:	f898 3008 	ldrb.w	r3, [r8, #8]
 80092b6:	4947      	ldr	r1, [pc, #284]	@ (80093d4 <rmw_create_publisher+0x1b8>)
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092be:	bf0c      	ite	eq
 80092c0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80092c4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80092c8:	67a3      	str	r3, [r4, #120]	@ 0x78
 80092ca:	2300      	movs	r3, #0
 80092cc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80092d0:	4630      	mov	r0, r6
 80092d2:	f000 fc5f 	bl	8009b94 <get_message_typesupport_handle>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d06b      	beq.n	80093b2 <rmw_create_publisher+0x196>
 80092da:	6842      	ldr	r2, [r0, #4]
 80092dc:	61a2      	str	r2, [r4, #24]
 80092de:	2a00      	cmp	r2, #0
 80092e0:	d067      	beq.n	80093b2 <rmw_create_publisher+0x196>
 80092e2:	4629      	mov	r1, r5
 80092e4:	4643      	mov	r3, r8
 80092e6:	4648      	mov	r0, r9
 80092e8:	f006 fba0 	bl	800fa2c <create_topic>
 80092ec:	6260      	str	r0, [r4, #36]	@ 0x24
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d063      	beq.n	80093ba <rmw_create_publisher+0x19e>
 80092f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092fa:	2103      	movs	r1, #3
 80092fc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8009300:	1c42      	adds	r2, r0, #1
 8009302:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8009306:	f001 ff0f 	bl	800b128 <uxr_object_id>
 800930a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800930e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009312:	6120      	str	r0, [r4, #16]
 8009314:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8009318:	6910      	ldr	r0, [r2, #16]
 800931a:	2506      	movs	r5, #6
 800931c:	9500      	str	r5, [sp, #0]
 800931e:	6819      	ldr	r1, [r3, #0]
 8009320:	6922      	ldr	r2, [r4, #16]
 8009322:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009326:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800932a:	f001 fd95 	bl	800ae58 <uxr_buffer_create_publisher_bin>
 800932e:	4602      	mov	r2, r0
 8009330:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009334:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009338:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800933c:	f000 fb9c 	bl	8009a78 <run_xrce_session>
 8009340:	b3b8      	cbz	r0, 80093b2 <rmw_create_publisher+0x196>
 8009342:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800934a:	2105      	movs	r1, #5
 800934c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8009350:	1c42      	adds	r2, r0, #1
 8009352:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8009356:	f001 fee7 	bl	800b128 <uxr_object_id>
 800935a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800935e:	6160      	str	r0, [r4, #20]
 8009360:	691e      	ldr	r6, [r3, #16]
 8009362:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009366:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800936a:	f10d 0a10 	add.w	sl, sp, #16
 800936e:	4641      	mov	r1, r8
 8009370:	4650      	mov	r0, sl
 8009372:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8009376:	f000 fb9b 	bl	8009ab0 <convert_qos_profile>
 800937a:	9503      	str	r5, [sp, #12]
 800937c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8009380:	9001      	str	r0, [sp, #4]
 8009382:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009386:	f8db 3010 	ldr.w	r3, [fp, #16]
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8009390:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8009394:	f8d8 1000 	ldr.w	r1, [r8]
 8009398:	4630      	mov	r0, r6
 800939a:	f001 fd8d 	bl	800aeb8 <uxr_buffer_create_datawriter_bin>
 800939e:	4602      	mov	r2, r0
 80093a0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80093a4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80093a8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80093ac:	f000 fb64 	bl	8009a78 <run_xrce_session>
 80093b0:	b938      	cbnz	r0, 80093c2 <rmw_create_publisher+0x1a6>
 80093b2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80093b4:	b108      	cbz	r0, 80093ba <rmw_create_publisher+0x19e>
 80093b6:	f000 fb03 	bl	80099c0 <rmw_uxrce_fini_topic_memory>
 80093ba:	4638      	mov	r0, r7
 80093bc:	f000 faa8 	bl	8009910 <rmw_uxrce_fini_publisher_memory>
 80093c0:	2700      	movs	r7, #0
 80093c2:	4638      	mov	r0, r7
 80093c4:	b007      	add	sp, #28
 80093c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ca:	bf00      	nop
 80093cc:	2000a9b4 	.word	0x2000a9b4
 80093d0:	08012918 	.word	0x08012918
 80093d4:	080128e4 	.word	0x080128e4

080093d8 <rmw_publisher_get_actual_qos>:
 80093d8:	b150      	cbz	r0, 80093f0 <rmw_publisher_get_actual_qos+0x18>
 80093da:	b508      	push	{r3, lr}
 80093dc:	460b      	mov	r3, r1
 80093de:	b149      	cbz	r1, 80093f4 <rmw_publisher_get_actual_qos+0x1c>
 80093e0:	6841      	ldr	r1, [r0, #4]
 80093e2:	2250      	movs	r2, #80	@ 0x50
 80093e4:	3128      	adds	r1, #40	@ 0x28
 80093e6:	4618      	mov	r0, r3
 80093e8:	f008 fa9f 	bl	801192a <memcpy>
 80093ec:	2000      	movs	r0, #0
 80093ee:	bd08      	pop	{r3, pc}
 80093f0:	200b      	movs	r0, #11
 80093f2:	4770      	bx	lr
 80093f4:	200b      	movs	r0, #11
 80093f6:	bd08      	pop	{r3, pc}

080093f8 <rmw_destroy_publisher>:
 80093f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fa:	b128      	cbz	r0, 8009408 <rmw_destroy_publisher+0x10>
 80093fc:	4604      	mov	r4, r0
 80093fe:	6800      	ldr	r0, [r0, #0]
 8009400:	460d      	mov	r5, r1
 8009402:	f000 fbb9 	bl	8009b78 <is_uxrce_rmw_identifier_valid>
 8009406:	b910      	cbnz	r0, 800940e <rmw_destroy_publisher+0x16>
 8009408:	2401      	movs	r4, #1
 800940a:	4620      	mov	r0, r4
 800940c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800940e:	6863      	ldr	r3, [r4, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0f9      	beq.n	8009408 <rmw_destroy_publisher+0x10>
 8009414:	2d00      	cmp	r5, #0
 8009416:	d0f7      	beq.n	8009408 <rmw_destroy_publisher+0x10>
 8009418:	6828      	ldr	r0, [r5, #0]
 800941a:	f000 fbad 	bl	8009b78 <is_uxrce_rmw_identifier_valid>
 800941e:	2800      	cmp	r0, #0
 8009420:	d0f2      	beq.n	8009408 <rmw_destroy_publisher+0x10>
 8009422:	686c      	ldr	r4, [r5, #4]
 8009424:	2c00      	cmp	r4, #0
 8009426:	d0ef      	beq.n	8009408 <rmw_destroy_publisher+0x10>
 8009428:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800942a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800942e:	f006 fb4d 	bl	800facc <destroy_topic>
 8009432:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009436:	6962      	ldr	r2, [r4, #20]
 8009438:	6918      	ldr	r0, [r3, #16]
 800943a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800943e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009442:	6819      	ldr	r1, [r3, #0]
 8009444:	f001 fc54 	bl	800acf0 <uxr_buffer_delete_entity>
 8009448:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800944c:	6922      	ldr	r2, [r4, #16]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8009454:	4604      	mov	r4, r0
 8009456:	6809      	ldr	r1, [r1, #0]
 8009458:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800945c:	f001 fc48 	bl	800acf0 <uxr_buffer_delete_entity>
 8009460:	693e      	ldr	r6, [r7, #16]
 8009462:	4622      	mov	r2, r4
 8009464:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8009468:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800946c:	4604      	mov	r4, r0
 800946e:	4630      	mov	r0, r6
 8009470:	f000 fb02 	bl	8009a78 <run_xrce_session>
 8009474:	693e      	ldr	r6, [r7, #16]
 8009476:	4622      	mov	r2, r4
 8009478:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800947c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8009480:	4604      	mov	r4, r0
 8009482:	4630      	mov	r0, r6
 8009484:	f000 faf8 	bl	8009a78 <run_xrce_session>
 8009488:	b12c      	cbz	r4, 8009496 <rmw_destroy_publisher+0x9e>
 800948a:	b120      	cbz	r0, 8009496 <rmw_destroy_publisher+0x9e>
 800948c:	2400      	movs	r4, #0
 800948e:	4628      	mov	r0, r5
 8009490:	f000 fa3e 	bl	8009910 <rmw_uxrce_fini_publisher_memory>
 8009494:	e7b9      	b.n	800940a <rmw_destroy_publisher+0x12>
 8009496:	2402      	movs	r4, #2
 8009498:	e7f9      	b.n	800948e <rmw_destroy_publisher+0x96>
 800949a:	bf00      	nop

0800949c <rmw_destroy_service>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	b128      	cbz	r0, 80094ac <rmw_destroy_service+0x10>
 80094a0:	4604      	mov	r4, r0
 80094a2:	6800      	ldr	r0, [r0, #0]
 80094a4:	460d      	mov	r5, r1
 80094a6:	f000 fb67 	bl	8009b78 <is_uxrce_rmw_identifier_valid>
 80094aa:	b910      	cbnz	r0, 80094b2 <rmw_destroy_service+0x16>
 80094ac:	2401      	movs	r4, #1
 80094ae:	4620      	mov	r0, r4
 80094b0:	bd70      	pop	{r4, r5, r6, pc}
 80094b2:	6863      	ldr	r3, [r4, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d0f9      	beq.n	80094ac <rmw_destroy_service+0x10>
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	d0f7      	beq.n	80094ac <rmw_destroy_service+0x10>
 80094bc:	6828      	ldr	r0, [r5, #0]
 80094be:	f000 fb5b 	bl	8009b78 <is_uxrce_rmw_identifier_valid>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d0f2      	beq.n	80094ac <rmw_destroy_service+0x10>
 80094c6:	686e      	ldr	r6, [r5, #4]
 80094c8:	2e00      	cmp	r6, #0
 80094ca:	d0ef      	beq.n	80094ac <rmw_destroy_service+0x10>
 80094cc:	6864      	ldr	r4, [r4, #4]
 80094ce:	6932      	ldr	r2, [r6, #16]
 80094d0:	6920      	ldr	r0, [r4, #16]
 80094d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80094d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80094da:	6819      	ldr	r1, [r3, #0]
 80094dc:	f001 fe54 	bl	800b188 <uxr_buffer_cancel_data>
 80094e0:	4602      	mov	r2, r0
 80094e2:	6920      	ldr	r0, [r4, #16]
 80094e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80094e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80094ec:	f000 fac4 	bl	8009a78 <run_xrce_session>
 80094f0:	6920      	ldr	r0, [r4, #16]
 80094f2:	6932      	ldr	r2, [r6, #16]
 80094f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80094f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80094fc:	6819      	ldr	r1, [r3, #0]
 80094fe:	f001 fbf7 	bl	800acf0 <uxr_buffer_delete_entity>
 8009502:	4602      	mov	r2, r0
 8009504:	6920      	ldr	r0, [r4, #16]
 8009506:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800950a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800950e:	f000 fab3 	bl	8009a78 <run_xrce_session>
 8009512:	2800      	cmp	r0, #0
 8009514:	4628      	mov	r0, r5
 8009516:	bf14      	ite	ne
 8009518:	2400      	movne	r4, #0
 800951a:	2402      	moveq	r4, #2
 800951c:	f000 fa24 	bl	8009968 <rmw_uxrce_fini_service_memory>
 8009520:	e7c5      	b.n	80094ae <rmw_destroy_service+0x12>
 8009522:	bf00      	nop

08009524 <rmw_destroy_subscription>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	b128      	cbz	r0, 8009534 <rmw_destroy_subscription+0x10>
 8009528:	4604      	mov	r4, r0
 800952a:	6800      	ldr	r0, [r0, #0]
 800952c:	460d      	mov	r5, r1
 800952e:	f000 fb23 	bl	8009b78 <is_uxrce_rmw_identifier_valid>
 8009532:	b910      	cbnz	r0, 800953a <rmw_destroy_subscription+0x16>
 8009534:	2401      	movs	r4, #1
 8009536:	4620      	mov	r0, r4
 8009538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800953a:	6863      	ldr	r3, [r4, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0f9      	beq.n	8009534 <rmw_destroy_subscription+0x10>
 8009540:	2d00      	cmp	r5, #0
 8009542:	d0f7      	beq.n	8009534 <rmw_destroy_subscription+0x10>
 8009544:	6828      	ldr	r0, [r5, #0]
 8009546:	f000 fb17 	bl	8009b78 <is_uxrce_rmw_identifier_valid>
 800954a:	2800      	cmp	r0, #0
 800954c:	d0f2      	beq.n	8009534 <rmw_destroy_subscription+0x10>
 800954e:	686c      	ldr	r4, [r5, #4]
 8009550:	2c00      	cmp	r4, #0
 8009552:	d0ef      	beq.n	8009534 <rmw_destroy_subscription+0x10>
 8009554:	6a26      	ldr	r6, [r4, #32]
 8009556:	6962      	ldr	r2, [r4, #20]
 8009558:	6930      	ldr	r0, [r6, #16]
 800955a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800955e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009562:	6819      	ldr	r1, [r3, #0]
 8009564:	f001 fe10 	bl	800b188 <uxr_buffer_cancel_data>
 8009568:	4602      	mov	r2, r0
 800956a:	6930      	ldr	r0, [r6, #16]
 800956c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009570:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009574:	f000 fa80 	bl	8009a78 <run_xrce_session>
 8009578:	69e0      	ldr	r0, [r4, #28]
 800957a:	f006 faa7 	bl	800facc <destroy_topic>
 800957e:	6a23      	ldr	r3, [r4, #32]
 8009580:	6962      	ldr	r2, [r4, #20]
 8009582:	6918      	ldr	r0, [r3, #16]
 8009584:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009588:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800958c:	6819      	ldr	r1, [r3, #0]
 800958e:	f001 fbaf 	bl	800acf0 <uxr_buffer_delete_entity>
 8009592:	6a23      	ldr	r3, [r4, #32]
 8009594:	6922      	ldr	r2, [r4, #16]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800959c:	4604      	mov	r4, r0
 800959e:	6809      	ldr	r1, [r1, #0]
 80095a0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80095a4:	f001 fba4 	bl	800acf0 <uxr_buffer_delete_entity>
 80095a8:	6937      	ldr	r7, [r6, #16]
 80095aa:	4622      	mov	r2, r4
 80095ac:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80095b0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80095b4:	4604      	mov	r4, r0
 80095b6:	4638      	mov	r0, r7
 80095b8:	f000 fa5e 	bl	8009a78 <run_xrce_session>
 80095bc:	6936      	ldr	r6, [r6, #16]
 80095be:	4622      	mov	r2, r4
 80095c0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80095c4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80095c8:	4604      	mov	r4, r0
 80095ca:	4630      	mov	r0, r6
 80095cc:	f000 fa54 	bl	8009a78 <run_xrce_session>
 80095d0:	b12c      	cbz	r4, 80095de <rmw_destroy_subscription+0xba>
 80095d2:	b120      	cbz	r0, 80095de <rmw_destroy_subscription+0xba>
 80095d4:	2400      	movs	r4, #0
 80095d6:	4628      	mov	r0, r5
 80095d8:	f000 f9b0 	bl	800993c <rmw_uxrce_fini_subscription_memory>
 80095dc:	e7ab      	b.n	8009536 <rmw_destroy_subscription+0x12>
 80095de:	2402      	movs	r4, #2
 80095e0:	e7f9      	b.n	80095d6 <rmw_destroy_subscription+0xb2>
 80095e2:	bf00      	nop

080095e4 <rmw_uxrce_transport_init>:
 80095e4:	b508      	push	{r3, lr}
 80095e6:	b108      	cbz	r0, 80095ec <rmw_uxrce_transport_init+0x8>
 80095e8:	f100 0210 	add.w	r2, r0, #16
 80095ec:	b139      	cbz	r1, 80095fe <rmw_uxrce_transport_init+0x1a>
 80095ee:	6949      	ldr	r1, [r1, #20]
 80095f0:	4610      	mov	r0, r2
 80095f2:	f001 fd61 	bl	800b0b8 <uxr_init_custom_transport>
 80095f6:	f080 0001 	eor.w	r0, r0, #1
 80095fa:	b2c0      	uxtb	r0, r0
 80095fc:	bd08      	pop	{r3, pc}
 80095fe:	4b04      	ldr	r3, [pc, #16]	@ (8009610 <rmw_uxrce_transport_init+0x2c>)
 8009600:	4610      	mov	r0, r2
 8009602:	6859      	ldr	r1, [r3, #4]
 8009604:	f001 fd58 	bl	800b0b8 <uxr_init_custom_transport>
 8009608:	f080 0001 	eor.w	r0, r0, #1
 800960c:	b2c0      	uxtb	r0, r0
 800960e:	bd08      	pop	{r3, pc}
 8009610:	2000607c 	.word	0x2000607c

08009614 <rmw_uxrce_init_service_memory>:
 8009614:	b1e2      	cbz	r2, 8009650 <rmw_uxrce_init_service_memory+0x3c>
 8009616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961a:	7b05      	ldrb	r5, [r0, #12]
 800961c:	4606      	mov	r6, r0
 800961e:	b9ad      	cbnz	r5, 800964c <rmw_uxrce_init_service_memory+0x38>
 8009620:	23c8      	movs	r3, #200	@ 0xc8
 8009622:	e9c0 5500 	strd	r5, r5, [r0]
 8009626:	6083      	str	r3, [r0, #8]
 8009628:	f240 1301 	movw	r3, #257	@ 0x101
 800962c:	4617      	mov	r7, r2
 800962e:	8183      	strh	r3, [r0, #12]
 8009630:	460c      	mov	r4, r1
 8009632:	46a8      	mov	r8, r5
 8009634:	4621      	mov	r1, r4
 8009636:	4630      	mov	r0, r6
 8009638:	3501      	adds	r5, #1
 800963a:	f006 f999 	bl	800f970 <put_memory>
 800963e:	42af      	cmp	r7, r5
 8009640:	60a4      	str	r4, [r4, #8]
 8009642:	f884 800c 	strb.w	r8, [r4, #12]
 8009646:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800964a:	d1f3      	bne.n	8009634 <rmw_uxrce_init_service_memory+0x20>
 800964c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop

08009654 <rmw_uxrce_init_client_memory>:
 8009654:	b1e2      	cbz	r2, 8009690 <rmw_uxrce_init_client_memory+0x3c>
 8009656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800965a:	7b05      	ldrb	r5, [r0, #12]
 800965c:	4606      	mov	r6, r0
 800965e:	b9ad      	cbnz	r5, 800968c <rmw_uxrce_init_client_memory+0x38>
 8009660:	23c8      	movs	r3, #200	@ 0xc8
 8009662:	e9c0 5500 	strd	r5, r5, [r0]
 8009666:	6083      	str	r3, [r0, #8]
 8009668:	f240 1301 	movw	r3, #257	@ 0x101
 800966c:	4617      	mov	r7, r2
 800966e:	8183      	strh	r3, [r0, #12]
 8009670:	460c      	mov	r4, r1
 8009672:	46a8      	mov	r8, r5
 8009674:	4621      	mov	r1, r4
 8009676:	4630      	mov	r0, r6
 8009678:	3501      	adds	r5, #1
 800967a:	f006 f979 	bl	800f970 <put_memory>
 800967e:	42af      	cmp	r7, r5
 8009680:	60a4      	str	r4, [r4, #8]
 8009682:	f884 800c 	strb.w	r8, [r4, #12]
 8009686:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800968a:	d1f3      	bne.n	8009674 <rmw_uxrce_init_client_memory+0x20>
 800968c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop

08009694 <rmw_uxrce_init_publisher_memory>:
 8009694:	b1e2      	cbz	r2, 80096d0 <rmw_uxrce_init_publisher_memory+0x3c>
 8009696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800969a:	7b05      	ldrb	r5, [r0, #12]
 800969c:	4606      	mov	r6, r0
 800969e:	b9ad      	cbnz	r5, 80096cc <rmw_uxrce_init_publisher_memory+0x38>
 80096a0:	23d8      	movs	r3, #216	@ 0xd8
 80096a2:	e9c0 5500 	strd	r5, r5, [r0]
 80096a6:	6083      	str	r3, [r0, #8]
 80096a8:	f240 1301 	movw	r3, #257	@ 0x101
 80096ac:	4617      	mov	r7, r2
 80096ae:	8183      	strh	r3, [r0, #12]
 80096b0:	460c      	mov	r4, r1
 80096b2:	46a8      	mov	r8, r5
 80096b4:	4621      	mov	r1, r4
 80096b6:	4630      	mov	r0, r6
 80096b8:	3501      	adds	r5, #1
 80096ba:	f006 f959 	bl	800f970 <put_memory>
 80096be:	42af      	cmp	r7, r5
 80096c0:	60a4      	str	r4, [r4, #8]
 80096c2:	f884 800c 	strb.w	r8, [r4, #12]
 80096c6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80096ca:	d1f3      	bne.n	80096b4 <rmw_uxrce_init_publisher_memory+0x20>
 80096cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop

080096d4 <rmw_uxrce_init_subscription_memory>:
 80096d4:	b1e2      	cbz	r2, 8009710 <rmw_uxrce_init_subscription_memory+0x3c>
 80096d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096da:	7b05      	ldrb	r5, [r0, #12]
 80096dc:	4606      	mov	r6, r0
 80096de:	b9ad      	cbnz	r5, 800970c <rmw_uxrce_init_subscription_memory+0x38>
 80096e0:	23d8      	movs	r3, #216	@ 0xd8
 80096e2:	e9c0 5500 	strd	r5, r5, [r0]
 80096e6:	6083      	str	r3, [r0, #8]
 80096e8:	f240 1301 	movw	r3, #257	@ 0x101
 80096ec:	4617      	mov	r7, r2
 80096ee:	8183      	strh	r3, [r0, #12]
 80096f0:	460c      	mov	r4, r1
 80096f2:	46a8      	mov	r8, r5
 80096f4:	4621      	mov	r1, r4
 80096f6:	4630      	mov	r0, r6
 80096f8:	3501      	adds	r5, #1
 80096fa:	f006 f939 	bl	800f970 <put_memory>
 80096fe:	42af      	cmp	r7, r5
 8009700:	60a4      	str	r4, [r4, #8]
 8009702:	f884 800c 	strb.w	r8, [r4, #12]
 8009706:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800970a:	d1f3      	bne.n	80096f4 <rmw_uxrce_init_subscription_memory+0x20>
 800970c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop

08009714 <rmw_uxrce_init_node_memory>:
 8009714:	b1e2      	cbz	r2, 8009750 <rmw_uxrce_init_node_memory+0x3c>
 8009716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971a:	7b05      	ldrb	r5, [r0, #12]
 800971c:	4606      	mov	r6, r0
 800971e:	b9ad      	cbnz	r5, 800974c <rmw_uxrce_init_node_memory+0x38>
 8009720:	23a4      	movs	r3, #164	@ 0xa4
 8009722:	e9c0 5500 	strd	r5, r5, [r0]
 8009726:	6083      	str	r3, [r0, #8]
 8009728:	f240 1301 	movw	r3, #257	@ 0x101
 800972c:	4617      	mov	r7, r2
 800972e:	8183      	strh	r3, [r0, #12]
 8009730:	460c      	mov	r4, r1
 8009732:	46a8      	mov	r8, r5
 8009734:	4621      	mov	r1, r4
 8009736:	4630      	mov	r0, r6
 8009738:	3501      	adds	r5, #1
 800973a:	f006 f919 	bl	800f970 <put_memory>
 800973e:	42af      	cmp	r7, r5
 8009740:	60a4      	str	r4, [r4, #8]
 8009742:	f884 800c 	strb.w	r8, [r4, #12]
 8009746:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800974a:	d1f3      	bne.n	8009734 <rmw_uxrce_init_node_memory+0x20>
 800974c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop

08009754 <rmw_uxrce_init_session_memory>:
 8009754:	b1ea      	cbz	r2, 8009792 <rmw_uxrce_init_session_memory+0x3e>
 8009756:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800975a:	7b05      	ldrb	r5, [r0, #12]
 800975c:	4606      	mov	r6, r0
 800975e:	b9b5      	cbnz	r5, 800978e <rmw_uxrce_init_session_memory+0x3a>
 8009760:	e9c0 5500 	strd	r5, r5, [r0]
 8009764:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8009768:	f240 1301 	movw	r3, #257	@ 0x101
 800976c:	4617      	mov	r7, r2
 800976e:	f8c0 8008 	str.w	r8, [r0, #8]
 8009772:	460c      	mov	r4, r1
 8009774:	8183      	strh	r3, [r0, #12]
 8009776:	46a9      	mov	r9, r5
 8009778:	4621      	mov	r1, r4
 800977a:	4630      	mov	r0, r6
 800977c:	3501      	adds	r5, #1
 800977e:	f006 f8f7 	bl	800f970 <put_memory>
 8009782:	42af      	cmp	r7, r5
 8009784:	60a4      	str	r4, [r4, #8]
 8009786:	f884 900c 	strb.w	r9, [r4, #12]
 800978a:	4444      	add	r4, r8
 800978c:	d1f4      	bne.n	8009778 <rmw_uxrce_init_session_memory+0x24>
 800978e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009792:	4770      	bx	lr

08009794 <rmw_uxrce_init_topic_memory>:
 8009794:	b1e2      	cbz	r2, 80097d0 <rmw_uxrce_init_topic_memory+0x3c>
 8009796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979a:	7b05      	ldrb	r5, [r0, #12]
 800979c:	4606      	mov	r6, r0
 800979e:	b9ad      	cbnz	r5, 80097cc <rmw_uxrce_init_topic_memory+0x38>
 80097a0:	231c      	movs	r3, #28
 80097a2:	e9c0 5500 	strd	r5, r5, [r0]
 80097a6:	6083      	str	r3, [r0, #8]
 80097a8:	f240 1301 	movw	r3, #257	@ 0x101
 80097ac:	4617      	mov	r7, r2
 80097ae:	8183      	strh	r3, [r0, #12]
 80097b0:	460c      	mov	r4, r1
 80097b2:	46a8      	mov	r8, r5
 80097b4:	4621      	mov	r1, r4
 80097b6:	4630      	mov	r0, r6
 80097b8:	3501      	adds	r5, #1
 80097ba:	f006 f8d9 	bl	800f970 <put_memory>
 80097be:	42af      	cmp	r7, r5
 80097c0:	60a4      	str	r4, [r4, #8]
 80097c2:	f884 800c 	strb.w	r8, [r4, #12]
 80097c6:	f104 041c 	add.w	r4, r4, #28
 80097ca:	d1f3      	bne.n	80097b4 <rmw_uxrce_init_topic_memory+0x20>
 80097cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop

080097d4 <rmw_uxrce_init_static_input_buffer_memory>:
 80097d4:	b1ea      	cbz	r2, 8009812 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80097d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097da:	7b05      	ldrb	r5, [r0, #12]
 80097dc:	4606      	mov	r6, r0
 80097de:	b9b5      	cbnz	r5, 800980e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80097e0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80097e4:	e9c0 5500 	strd	r5, r5, [r0]
 80097e8:	6083      	str	r3, [r0, #8]
 80097ea:	f240 1301 	movw	r3, #257	@ 0x101
 80097ee:	4617      	mov	r7, r2
 80097f0:	8183      	strh	r3, [r0, #12]
 80097f2:	460c      	mov	r4, r1
 80097f4:	46a8      	mov	r8, r5
 80097f6:	4621      	mov	r1, r4
 80097f8:	4630      	mov	r0, r6
 80097fa:	3501      	adds	r5, #1
 80097fc:	f006 f8b8 	bl	800f970 <put_memory>
 8009800:	42af      	cmp	r7, r5
 8009802:	60a4      	str	r4, [r4, #8]
 8009804:	f884 800c 	strb.w	r8, [r4, #12]
 8009808:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800980c:	d1f3      	bne.n	80097f6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800980e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009812:	4770      	bx	lr

08009814 <rmw_uxrce_init_init_options_impl_memory>:
 8009814:	b1e2      	cbz	r2, 8009850 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8009816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981a:	7b05      	ldrb	r5, [r0, #12]
 800981c:	4606      	mov	r6, r0
 800981e:	b9ad      	cbnz	r5, 800984c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8009820:	232c      	movs	r3, #44	@ 0x2c
 8009822:	e9c0 5500 	strd	r5, r5, [r0]
 8009826:	6083      	str	r3, [r0, #8]
 8009828:	f240 1301 	movw	r3, #257	@ 0x101
 800982c:	4617      	mov	r7, r2
 800982e:	8183      	strh	r3, [r0, #12]
 8009830:	460c      	mov	r4, r1
 8009832:	46a8      	mov	r8, r5
 8009834:	4621      	mov	r1, r4
 8009836:	4630      	mov	r0, r6
 8009838:	3501      	adds	r5, #1
 800983a:	f006 f899 	bl	800f970 <put_memory>
 800983e:	42af      	cmp	r7, r5
 8009840:	60a4      	str	r4, [r4, #8]
 8009842:	f884 800c 	strb.w	r8, [r4, #12]
 8009846:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800984a:	d1f3      	bne.n	8009834 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800984c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop

08009854 <rmw_uxrce_init_wait_set_memory>:
 8009854:	b1e2      	cbz	r2, 8009890 <rmw_uxrce_init_wait_set_memory+0x3c>
 8009856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800985a:	7b05      	ldrb	r5, [r0, #12]
 800985c:	4606      	mov	r6, r0
 800985e:	b9ad      	cbnz	r5, 800988c <rmw_uxrce_init_wait_set_memory+0x38>
 8009860:	231c      	movs	r3, #28
 8009862:	e9c0 5500 	strd	r5, r5, [r0]
 8009866:	6083      	str	r3, [r0, #8]
 8009868:	f240 1301 	movw	r3, #257	@ 0x101
 800986c:	4617      	mov	r7, r2
 800986e:	8183      	strh	r3, [r0, #12]
 8009870:	460c      	mov	r4, r1
 8009872:	46a8      	mov	r8, r5
 8009874:	4621      	mov	r1, r4
 8009876:	4630      	mov	r0, r6
 8009878:	3501      	adds	r5, #1
 800987a:	f006 f879 	bl	800f970 <put_memory>
 800987e:	42af      	cmp	r7, r5
 8009880:	60a4      	str	r4, [r4, #8]
 8009882:	f884 800c 	strb.w	r8, [r4, #12]
 8009886:	f104 041c 	add.w	r4, r4, #28
 800988a:	d1f3      	bne.n	8009874 <rmw_uxrce_init_wait_set_memory+0x20>
 800988c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop

08009894 <rmw_uxrce_init_guard_condition_memory>:
 8009894:	b1e2      	cbz	r2, 80098d0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8009896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989a:	7b05      	ldrb	r5, [r0, #12]
 800989c:	4606      	mov	r6, r0
 800989e:	b9ad      	cbnz	r5, 80098cc <rmw_uxrce_init_guard_condition_memory+0x38>
 80098a0:	2320      	movs	r3, #32
 80098a2:	e9c0 5500 	strd	r5, r5, [r0]
 80098a6:	6083      	str	r3, [r0, #8]
 80098a8:	f240 1301 	movw	r3, #257	@ 0x101
 80098ac:	4617      	mov	r7, r2
 80098ae:	8183      	strh	r3, [r0, #12]
 80098b0:	460c      	mov	r4, r1
 80098b2:	46a8      	mov	r8, r5
 80098b4:	4621      	mov	r1, r4
 80098b6:	4630      	mov	r0, r6
 80098b8:	3501      	adds	r5, #1
 80098ba:	f006 f859 	bl	800f970 <put_memory>
 80098be:	42af      	cmp	r7, r5
 80098c0:	60a4      	str	r4, [r4, #8]
 80098c2:	f884 800c 	strb.w	r8, [r4, #12]
 80098c6:	f104 0420 	add.w	r4, r4, #32
 80098ca:	d1f3      	bne.n	80098b4 <rmw_uxrce_init_guard_condition_memory+0x20>
 80098cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop

080098d4 <rmw_uxrce_fini_session_memory>:
 80098d4:	4601      	mov	r1, r0
 80098d6:	4801      	ldr	r0, [pc, #4]	@ (80098dc <rmw_uxrce_fini_session_memory+0x8>)
 80098d8:	f006 b84a 	b.w	800f970 <put_memory>
 80098dc:	2000a9d4 	.word	0x2000a9d4

080098e0 <rmw_uxrce_fini_node_memory>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	4604      	mov	r4, r0
 80098e4:	6800      	ldr	r0, [r0, #0]
 80098e6:	b128      	cbz	r0, 80098f4 <rmw_uxrce_fini_node_memory+0x14>
 80098e8:	4b07      	ldr	r3, [pc, #28]	@ (8009908 <rmw_uxrce_fini_node_memory+0x28>)
 80098ea:	6819      	ldr	r1, [r3, #0]
 80098ec:	f7f6 fc98 	bl	8000220 <strcmp>
 80098f0:	b940      	cbnz	r0, 8009904 <rmw_uxrce_fini_node_memory+0x24>
 80098f2:	6020      	str	r0, [r4, #0]
 80098f4:	6861      	ldr	r1, [r4, #4]
 80098f6:	b129      	cbz	r1, 8009904 <rmw_uxrce_fini_node_memory+0x24>
 80098f8:	2500      	movs	r5, #0
 80098fa:	4804      	ldr	r0, [pc, #16]	@ (800990c <rmw_uxrce_fini_node_memory+0x2c>)
 80098fc:	610d      	str	r5, [r1, #16]
 80098fe:	f006 f837 	bl	800f970 <put_memory>
 8009902:	6065      	str	r5, [r4, #4]
 8009904:	bd38      	pop	{r3, r4, r5, pc}
 8009906:	bf00      	nop
 8009908:	080130f4 	.word	0x080130f4
 800990c:	2000a9a4 	.word	0x2000a9a4

08009910 <rmw_uxrce_fini_publisher_memory>:
 8009910:	b510      	push	{r4, lr}
 8009912:	4604      	mov	r4, r0
 8009914:	6800      	ldr	r0, [r0, #0]
 8009916:	b128      	cbz	r0, 8009924 <rmw_uxrce_fini_publisher_memory+0x14>
 8009918:	4b06      	ldr	r3, [pc, #24]	@ (8009934 <rmw_uxrce_fini_publisher_memory+0x24>)
 800991a:	6819      	ldr	r1, [r3, #0]
 800991c:	f7f6 fc80 	bl	8000220 <strcmp>
 8009920:	b938      	cbnz	r0, 8009932 <rmw_uxrce_fini_publisher_memory+0x22>
 8009922:	6020      	str	r0, [r4, #0]
 8009924:	6861      	ldr	r1, [r4, #4]
 8009926:	b121      	cbz	r1, 8009932 <rmw_uxrce_fini_publisher_memory+0x22>
 8009928:	4803      	ldr	r0, [pc, #12]	@ (8009938 <rmw_uxrce_fini_publisher_memory+0x28>)
 800992a:	f006 f821 	bl	800f970 <put_memory>
 800992e:	2300      	movs	r3, #0
 8009930:	6063      	str	r3, [r4, #4]
 8009932:	bd10      	pop	{r4, pc}
 8009934:	080130f4 	.word	0x080130f4
 8009938:	2000a9b4 	.word	0x2000a9b4

0800993c <rmw_uxrce_fini_subscription_memory>:
 800993c:	b510      	push	{r4, lr}
 800993e:	4604      	mov	r4, r0
 8009940:	6800      	ldr	r0, [r0, #0]
 8009942:	b128      	cbz	r0, 8009950 <rmw_uxrce_fini_subscription_memory+0x14>
 8009944:	4b06      	ldr	r3, [pc, #24]	@ (8009960 <rmw_uxrce_fini_subscription_memory+0x24>)
 8009946:	6819      	ldr	r1, [r3, #0]
 8009948:	f7f6 fc6a 	bl	8000220 <strcmp>
 800994c:	b938      	cbnz	r0, 800995e <rmw_uxrce_fini_subscription_memory+0x22>
 800994e:	6020      	str	r0, [r4, #0]
 8009950:	6861      	ldr	r1, [r4, #4]
 8009952:	b121      	cbz	r1, 800995e <rmw_uxrce_fini_subscription_memory+0x22>
 8009954:	4803      	ldr	r0, [pc, #12]	@ (8009964 <rmw_uxrce_fini_subscription_memory+0x28>)
 8009956:	f006 f80b 	bl	800f970 <put_memory>
 800995a:	2300      	movs	r3, #0
 800995c:	6063      	str	r3, [r4, #4]
 800995e:	bd10      	pop	{r4, pc}
 8009960:	080130f4 	.word	0x080130f4
 8009964:	2000a9f4 	.word	0x2000a9f4

08009968 <rmw_uxrce_fini_service_memory>:
 8009968:	b510      	push	{r4, lr}
 800996a:	4604      	mov	r4, r0
 800996c:	6800      	ldr	r0, [r0, #0]
 800996e:	b128      	cbz	r0, 800997c <rmw_uxrce_fini_service_memory+0x14>
 8009970:	4b06      	ldr	r3, [pc, #24]	@ (800998c <rmw_uxrce_fini_service_memory+0x24>)
 8009972:	6819      	ldr	r1, [r3, #0]
 8009974:	f7f6 fc54 	bl	8000220 <strcmp>
 8009978:	b938      	cbnz	r0, 800998a <rmw_uxrce_fini_service_memory+0x22>
 800997a:	6020      	str	r0, [r4, #0]
 800997c:	6861      	ldr	r1, [r4, #4]
 800997e:	b121      	cbz	r1, 800998a <rmw_uxrce_fini_service_memory+0x22>
 8009980:	4803      	ldr	r0, [pc, #12]	@ (8009990 <rmw_uxrce_fini_service_memory+0x28>)
 8009982:	f005 fff5 	bl	800f970 <put_memory>
 8009986:	2300      	movs	r3, #0
 8009988:	6063      	str	r3, [r4, #4]
 800998a:	bd10      	pop	{r4, pc}
 800998c:	080130f4 	.word	0x080130f4
 8009990:	2000a9c4 	.word	0x2000a9c4

08009994 <rmw_uxrce_fini_client_memory>:
 8009994:	b510      	push	{r4, lr}
 8009996:	4604      	mov	r4, r0
 8009998:	6800      	ldr	r0, [r0, #0]
 800999a:	b128      	cbz	r0, 80099a8 <rmw_uxrce_fini_client_memory+0x14>
 800999c:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <rmw_uxrce_fini_client_memory+0x24>)
 800999e:	6819      	ldr	r1, [r3, #0]
 80099a0:	f7f6 fc3e 	bl	8000220 <strcmp>
 80099a4:	b938      	cbnz	r0, 80099b6 <rmw_uxrce_fini_client_memory+0x22>
 80099a6:	6020      	str	r0, [r4, #0]
 80099a8:	6861      	ldr	r1, [r4, #4]
 80099aa:	b121      	cbz	r1, 80099b6 <rmw_uxrce_fini_client_memory+0x22>
 80099ac:	4803      	ldr	r0, [pc, #12]	@ (80099bc <rmw_uxrce_fini_client_memory+0x28>)
 80099ae:	f005 ffdf 	bl	800f970 <put_memory>
 80099b2:	2300      	movs	r3, #0
 80099b4:	6063      	str	r3, [r4, #4]
 80099b6:	bd10      	pop	{r4, pc}
 80099b8:	080130f4 	.word	0x080130f4
 80099bc:	200060d4 	.word	0x200060d4

080099c0 <rmw_uxrce_fini_topic_memory>:
 80099c0:	b510      	push	{r4, lr}
 80099c2:	4604      	mov	r4, r0
 80099c4:	4621      	mov	r1, r4
 80099c6:	4803      	ldr	r0, [pc, #12]	@ (80099d4 <rmw_uxrce_fini_topic_memory+0x14>)
 80099c8:	f005 ffd2 	bl	800f970 <put_memory>
 80099cc:	2300      	movs	r3, #0
 80099ce:	61a3      	str	r3, [r4, #24]
 80099d0:	bd10      	pop	{r4, pc}
 80099d2:	bf00      	nop
 80099d4:	2000aa04 	.word	0x2000aa04

080099d8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80099d8:	b082      	sub	sp, #8
 80099da:	b530      	push	{r4, r5, lr}
 80099dc:	4925      	ldr	r1, [pc, #148]	@ (8009a74 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80099de:	680d      	ldr	r5, [r1, #0]
 80099e0:	ac03      	add	r4, sp, #12
 80099e2:	e884 000c 	stmia.w	r4, {r2, r3}
 80099e6:	461c      	mov	r4, r3
 80099e8:	2d00      	cmp	r5, #0
 80099ea:	d041      	beq.n	8009a70 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 80099ec:	462b      	mov	r3, r5
 80099ee:	2100      	movs	r1, #0
 80099f0:	689a      	ldr	r2, [r3, #8]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 80099f8:	4290      	cmp	r0, r2
 80099fa:	bf08      	it	eq
 80099fc:	3101      	addeq	r1, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1f6      	bne.n	80099f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8009a02:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d029      	beq.n	8009a5e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8009a0a:	d907      	bls.n	8009a1c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d005      	beq.n	8009a1c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8009a10:	2100      	movs	r1, #0
 8009a12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a16:	4608      	mov	r0, r1
 8009a18:	b002      	add	sp, #8
 8009a1a:	4770      	bx	lr
 8009a1c:	b314      	cbz	r4, 8009a64 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8009a1e:	428c      	cmp	r4, r1
 8009a20:	d820      	bhi.n	8009a64 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8009a22:	2d00      	cmp	r5, #0
 8009a24:	d0f4      	beq.n	8009a10 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8009a26:	2100      	movs	r1, #0
 8009a28:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8009a2c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8009a30:	e002      	b.n	8009a38 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8009a32:	686d      	ldr	r5, [r5, #4]
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	d0ec      	beq.n	8009a12 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8009a38:	68ab      	ldr	r3, [r5, #8]
 8009a3a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8009a3e:	4290      	cmp	r0, r2
 8009a40:	d1f7      	bne.n	8009a32 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8009a42:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8009a46:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8009a4a:	4562      	cmp	r2, ip
 8009a4c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8009a50:	eb73 0e04 	sbcs.w	lr, r3, r4
 8009a54:	daed      	bge.n	8009a32 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8009a56:	4694      	mov	ip, r2
 8009a58:	461c      	mov	r4, r3
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	e7e9      	b.n	8009a32 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8009a5e:	b10c      	cbz	r4, 8009a64 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8009a60:	428c      	cmp	r4, r1
 8009a62:	d9d5      	bls.n	8009a10 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8009a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a68:	4802      	ldr	r0, [pc, #8]	@ (8009a74 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8009a6a:	b002      	add	sp, #8
 8009a6c:	f005 bf70 	b.w	800f950 <get_memory>
 8009a70:	4629      	mov	r1, r5
 8009a72:	e7c6      	b.n	8009a02 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8009a74:	2000a9e4 	.word	0x2000a9e4

08009a78 <run_xrce_session>:
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	788c      	ldrb	r4, [r1, #2]
 8009a7c:	b086      	sub	sp, #24
 8009a7e:	2c01      	cmp	r4, #1
 8009a80:	f8ad 200e 	strh.w	r2, [sp, #14]
 8009a84:	d00c      	beq.n	8009aa0 <run_xrce_session+0x28>
 8009a86:	4619      	mov	r1, r3
 8009a88:	2301      	movs	r3, #1
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	f10d 020e 	add.w	r2, sp, #14
 8009a90:	f10d 0317 	add.w	r3, sp, #23
 8009a94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009a98:	f002 f936 	bl	800bd08 <uxr_run_session_until_all_status>
 8009a9c:	b006      	add	sp, #24
 8009a9e:	bd10      	pop	{r4, pc}
 8009aa0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009aa4:	f001 fd84 	bl	800b5b0 <uxr_flash_output_streams>
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	b006      	add	sp, #24
 8009aac:	bd10      	pop	{r4, pc}
 8009aae:	bf00      	nop

08009ab0 <convert_qos_profile>:
 8009ab0:	7a4a      	ldrb	r2, [r1, #9]
 8009ab2:	f891 c008 	ldrb.w	ip, [r1, #8]
 8009ab6:	2a02      	cmp	r2, #2
 8009ab8:	bf18      	it	ne
 8009aba:	2200      	movne	r2, #0
 8009abc:	7002      	strb	r2, [r0, #0]
 8009abe:	780a      	ldrb	r2, [r1, #0]
 8009ac0:	8889      	ldrh	r1, [r1, #4]
 8009ac2:	8081      	strh	r1, [r0, #4]
 8009ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8009ac8:	f1a2 0202 	sub.w	r2, r2, #2
 8009acc:	fabc fc8c 	clz	ip, ip
 8009ad0:	fab2 f282 	clz	r2, r2
 8009ad4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8009ad8:	0952      	lsrs	r2, r2, #5
 8009ada:	f880 c001 	strb.w	ip, [r0, #1]
 8009ade:	7082      	strb	r2, [r0, #2]
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop

08009ae4 <generate_type_name>:
 8009ae4:	b530      	push	{r4, r5, lr}
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	700b      	strb	r3, [r1, #0]
 8009aea:	6803      	ldr	r3, [r0, #0]
 8009aec:	b087      	sub	sp, #28
 8009aee:	4614      	mov	r4, r2
 8009af0:	b1d3      	cbz	r3, 8009b28 <generate_type_name+0x44>
 8009af2:	4a0f      	ldr	r2, [pc, #60]	@ (8009b30 <generate_type_name+0x4c>)
 8009af4:	4615      	mov	r5, r2
 8009af6:	9203      	str	r2, [sp, #12]
 8009af8:	9500      	str	r5, [sp, #0]
 8009afa:	6842      	ldr	r2, [r0, #4]
 8009afc:	480d      	ldr	r0, [pc, #52]	@ (8009b34 <generate_type_name+0x50>)
 8009afe:	9001      	str	r0, [sp, #4]
 8009b00:	4608      	mov	r0, r1
 8009b02:	490d      	ldr	r1, [pc, #52]	@ (8009b38 <generate_type_name+0x54>)
 8009b04:	9204      	str	r2, [sp, #16]
 8009b06:	9105      	str	r1, [sp, #20]
 8009b08:	9102      	str	r1, [sp, #8]
 8009b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8009b3c <generate_type_name+0x58>)
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	f007 fd93 	bl	8011638 <sniprintf>
 8009b12:	2800      	cmp	r0, #0
 8009b14:	db05      	blt.n	8009b22 <generate_type_name+0x3e>
 8009b16:	4284      	cmp	r4, r0
 8009b18:	bfd4      	ite	le
 8009b1a:	2000      	movle	r0, #0
 8009b1c:	2001      	movgt	r0, #1
 8009b1e:	b007      	add	sp, #28
 8009b20:	bd30      	pop	{r4, r5, pc}
 8009b22:	2000      	movs	r0, #0
 8009b24:	b007      	add	sp, #28
 8009b26:	bd30      	pop	{r4, r5, pc}
 8009b28:	4b05      	ldr	r3, [pc, #20]	@ (8009b40 <generate_type_name+0x5c>)
 8009b2a:	4a01      	ldr	r2, [pc, #4]	@ (8009b30 <generate_type_name+0x4c>)
 8009b2c:	461d      	mov	r5, r3
 8009b2e:	e7e2      	b.n	8009af6 <generate_type_name+0x12>
 8009b30:	08012908 	.word	0x08012908
 8009b34:	08012920 	.word	0x08012920
 8009b38:	0801291c 	.word	0x0801291c
 8009b3c:	0801290c 	.word	0x0801290c
 8009b40:	08012ecc 	.word	0x08012ecc

08009b44 <generate_topic_name>:
 8009b44:	b510      	push	{r4, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	4614      	mov	r4, r2
 8009b4a:	9000      	str	r0, [sp, #0]
 8009b4c:	4b08      	ldr	r3, [pc, #32]	@ (8009b70 <generate_topic_name+0x2c>)
 8009b4e:	4a09      	ldr	r2, [pc, #36]	@ (8009b74 <generate_topic_name+0x30>)
 8009b50:	4608      	mov	r0, r1
 8009b52:	4621      	mov	r1, r4
 8009b54:	f007 fd70 	bl	8011638 <sniprintf>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	db05      	blt.n	8009b68 <generate_topic_name+0x24>
 8009b5c:	4284      	cmp	r4, r0
 8009b5e:	bfd4      	ite	le
 8009b60:	2000      	movle	r0, #0
 8009b62:	2001      	movgt	r0, #1
 8009b64:	b002      	add	sp, #8
 8009b66:	bd10      	pop	{r4, pc}
 8009b68:	2000      	movs	r0, #0
 8009b6a:	b002      	add	sp, #8
 8009b6c:	bd10      	pop	{r4, pc}
 8009b6e:	bf00      	nop
 8009b70:	0801292c 	.word	0x0801292c
 8009b74:	08012924 	.word	0x08012924

08009b78 <is_uxrce_rmw_identifier_valid>:
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	b140      	cbz	r0, 8009b90 <is_uxrce_rmw_identifier_valid+0x18>
 8009b7e:	f005 ff4f 	bl	800fa20 <rmw_get_implementation_identifier>
 8009b82:	4601      	mov	r1, r0
 8009b84:	4620      	mov	r0, r4
 8009b86:	f7f6 fb4b 	bl	8000220 <strcmp>
 8009b8a:	fab0 f080 	clz	r0, r0
 8009b8e:	0940      	lsrs	r0, r0, #5
 8009b90:	bd10      	pop	{r4, pc}
 8009b92:	bf00      	nop

08009b94 <get_message_typesupport_handle>:
 8009b94:	6883      	ldr	r3, [r0, #8]
 8009b96:	4718      	bx	r3

08009b98 <get_message_typesupport_handle_function>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	6800      	ldr	r0, [r0, #0]
 8009b9e:	f7f6 fb3f 	bl	8000220 <strcmp>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	bf0c      	ite	eq
 8009ba6:	4620      	moveq	r0, r4
 8009ba8:	2000      	movne	r0, #0
 8009baa:	bd10      	pop	{r4, pc}

08009bac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009bac:	4b04      	ldr	r3, [pc, #16]	@ (8009bc0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	b10a      	cbz	r2, 8009bb6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8009bb2:	4803      	ldr	r0, [pc, #12]	@ (8009bc0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009bb4:	4770      	bx	lr
 8009bb6:	4a03      	ldr	r2, [pc, #12]	@ (8009bc4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8009bb8:	4801      	ldr	r0, [pc, #4]	@ (8009bc0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009bba:	6812      	ldr	r2, [r2, #0]
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	4770      	bx	lr
 8009bc0:	20000030 	.word	0x20000030
 8009bc4:	200000ac 	.word	0x200000ac

08009bc8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009bc8:	4a02      	ldr	r2, [pc, #8]	@ (8009bd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8009bca:	4b03      	ldr	r3, [pc, #12]	@ (8009bd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8009bcc:	6812      	ldr	r2, [r2, #0]
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	200000ac 	.word	0x200000ac
 8009bd8:	20000030 	.word	0x20000030

08009bdc <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8009bdc:	f005 bfd4 	b.w	800fb88 <std_msgs__msg__Int32__init>

08009be0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8009be0:	f005 bfd6 	b.w	800fb90 <std_msgs__msg__Int32__fini>

08009be4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009be4:	4b04      	ldr	r3, [pc, #16]	@ (8009bf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	b10a      	cbz	r2, 8009bee <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8009bea:	4803      	ldr	r0, [pc, #12]	@ (8009bf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009bec:	4770      	bx	lr
 8009bee:	4a03      	ldr	r2, [pc, #12]	@ (8009bfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8009bf0:	4801      	ldr	r0, [pc, #4]	@ (8009bf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009bf2:	6812      	ldr	r2, [r2, #0]
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	4770      	bx	lr
 8009bf8:	20000078 	.word	0x20000078
 8009bfc:	200000b0 	.word	0x200000b0

08009c00 <_Int32__max_serialized_size>:
 8009c00:	b508      	push	{r3, lr}
 8009c02:	2104      	movs	r1, #4
 8009c04:	2000      	movs	r0, #0
 8009c06:	f001 f807 	bl	800ac18 <ucdr_alignment>
 8009c0a:	3004      	adds	r0, #4
 8009c0c:	bd08      	pop	{r3, pc}
 8009c0e:	bf00      	nop

08009c10 <_Int32__cdr_deserialize>:
 8009c10:	b109      	cbz	r1, 8009c16 <_Int32__cdr_deserialize+0x6>
 8009c12:	f000 bf19 	b.w	800aa48 <ucdr_deserialize_int32_t>
 8009c16:	4608      	mov	r0, r1
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop

08009c1c <get_serialized_size_std_msgs__msg__Int32>:
 8009c1c:	b138      	cbz	r0, 8009c2e <get_serialized_size_std_msgs__msg__Int32+0x12>
 8009c1e:	b508      	push	{r3, lr}
 8009c20:	460b      	mov	r3, r1
 8009c22:	4618      	mov	r0, r3
 8009c24:	2104      	movs	r1, #4
 8009c26:	f000 fff7 	bl	800ac18 <ucdr_alignment>
 8009c2a:	3004      	adds	r0, #4
 8009c2c:	bd08      	pop	{r3, pc}
 8009c2e:	4770      	bx	lr

08009c30 <_Int32__cdr_serialize>:
 8009c30:	460a      	mov	r2, r1
 8009c32:	b118      	cbz	r0, 8009c3c <_Int32__cdr_serialize+0xc>
 8009c34:	6801      	ldr	r1, [r0, #0]
 8009c36:	4610      	mov	r0, r2
 8009c38:	f000 be6e 	b.w	800a918 <ucdr_serialize_int32_t>
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop

08009c40 <_Int32__get_serialized_size>:
 8009c40:	b130      	cbz	r0, 8009c50 <_Int32__get_serialized_size+0x10>
 8009c42:	b508      	push	{r3, lr}
 8009c44:	2104      	movs	r1, #4
 8009c46:	2000      	movs	r0, #0
 8009c48:	f000 ffe6 	bl	800ac18 <ucdr_alignment>
 8009c4c:	3004      	adds	r0, #4
 8009c4e:	bd08      	pop	{r3, pc}
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop

08009c54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009c54:	4800      	ldr	r0, [pc, #0]	@ (8009c58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8009c56:	4770      	bx	lr
 8009c58:	20000084 	.word	0x20000084

08009c5c <ucdr_serialize_bool>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	460d      	mov	r5, r1
 8009c60:	2101      	movs	r1, #1
 8009c62:	4604      	mov	r4, r0
 8009c64:	f000 ff8c 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 8009c68:	b148      	cbz	r0, 8009c7e <ucdr_serialize_bool+0x22>
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	701d      	strb	r5, [r3, #0]
 8009c6e:	68a2      	ldr	r2, [r4, #8]
 8009c70:	6923      	ldr	r3, [r4, #16]
 8009c72:	2101      	movs	r1, #1
 8009c74:	440a      	add	r2, r1
 8009c76:	440b      	add	r3, r1
 8009c78:	60a2      	str	r2, [r4, #8]
 8009c7a:	6123      	str	r3, [r4, #16]
 8009c7c:	7561      	strb	r1, [r4, #21]
 8009c7e:	7da0      	ldrb	r0, [r4, #22]
 8009c80:	f080 0001 	eor.w	r0, r0, #1
 8009c84:	bd38      	pop	{r3, r4, r5, pc}
 8009c86:	bf00      	nop

08009c88 <ucdr_deserialize_bool>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	460d      	mov	r5, r1
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	4604      	mov	r4, r0
 8009c90:	f000 ff76 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 8009c94:	b160      	cbz	r0, 8009cb0 <ucdr_deserialize_bool+0x28>
 8009c96:	68a2      	ldr	r2, [r4, #8]
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009c9e:	3900      	subs	r1, #0
 8009ca0:	bf18      	it	ne
 8009ca2:	2101      	movne	r1, #1
 8009ca4:	7029      	strb	r1, [r5, #0]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	2101      	movs	r1, #1
 8009caa:	60a2      	str	r2, [r4, #8]
 8009cac:	6123      	str	r3, [r4, #16]
 8009cae:	7561      	strb	r1, [r4, #21]
 8009cb0:	7da0      	ldrb	r0, [r4, #22]
 8009cb2:	f080 0001 	eor.w	r0, r0, #1
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}

08009cb8 <ucdr_serialize_uint8_t>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	460d      	mov	r5, r1
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	f000 ff5e 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 8009cc4:	b148      	cbz	r0, 8009cda <ucdr_serialize_uint8_t+0x22>
 8009cc6:	68a3      	ldr	r3, [r4, #8]
 8009cc8:	701d      	strb	r5, [r3, #0]
 8009cca:	68a2      	ldr	r2, [r4, #8]
 8009ccc:	6923      	ldr	r3, [r4, #16]
 8009cce:	2101      	movs	r1, #1
 8009cd0:	440a      	add	r2, r1
 8009cd2:	440b      	add	r3, r1
 8009cd4:	60a2      	str	r2, [r4, #8]
 8009cd6:	6123      	str	r3, [r4, #16]
 8009cd8:	7561      	strb	r1, [r4, #21]
 8009cda:	7da0      	ldrb	r0, [r4, #22]
 8009cdc:	f080 0001 	eor.w	r0, r0, #1
 8009ce0:	bd38      	pop	{r3, r4, r5, pc}
 8009ce2:	bf00      	nop

08009ce4 <ucdr_deserialize_uint8_t>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	460d      	mov	r5, r1
 8009ce8:	2101      	movs	r1, #1
 8009cea:	4604      	mov	r4, r0
 8009cec:	f000 ff48 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 8009cf0:	b150      	cbz	r0, 8009d08 <ucdr_deserialize_uint8_t+0x24>
 8009cf2:	68a3      	ldr	r3, [r4, #8]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	702b      	strb	r3, [r5, #0]
 8009cf8:	68a2      	ldr	r2, [r4, #8]
 8009cfa:	6923      	ldr	r3, [r4, #16]
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	440a      	add	r2, r1
 8009d00:	440b      	add	r3, r1
 8009d02:	60a2      	str	r2, [r4, #8]
 8009d04:	6123      	str	r3, [r4, #16]
 8009d06:	7561      	strb	r1, [r4, #21]
 8009d08:	7da0      	ldrb	r0, [r4, #22]
 8009d0a:	f080 0001 	eor.w	r0, r0, #1
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}

08009d10 <ucdr_serialize_uint16_t>:
 8009d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	460b      	mov	r3, r1
 8009d18:	2102      	movs	r1, #2
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009d20:	f000 ff82 	bl	800ac28 <ucdr_buffer_alignment>
 8009d24:	4601      	mov	r1, r0
 8009d26:	4620      	mov	r0, r4
 8009d28:	7d67      	ldrb	r7, [r4, #21]
 8009d2a:	f000 ffc1 	bl	800acb0 <ucdr_advance_buffer>
 8009d2e:	2102      	movs	r1, #2
 8009d30:	4620      	mov	r0, r4
 8009d32:	f000 ff19 	bl	800ab68 <ucdr_check_buffer_available_for>
 8009d36:	bb78      	cbnz	r0, 8009d98 <ucdr_serialize_uint16_t+0x88>
 8009d38:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009d3c:	42ab      	cmp	r3, r5
 8009d3e:	d926      	bls.n	8009d8e <ucdr_serialize_uint16_t+0x7e>
 8009d40:	1b5e      	subs	r6, r3, r5
 8009d42:	60a3      	str	r3, [r4, #8]
 8009d44:	6923      	ldr	r3, [r4, #16]
 8009d46:	f1c6 0802 	rsb	r8, r6, #2
 8009d4a:	4433      	add	r3, r6
 8009d4c:	6123      	str	r3, [r4, #16]
 8009d4e:	4641      	mov	r1, r8
 8009d50:	4620      	mov	r0, r4
 8009d52:	f000 ff15 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d03b      	beq.n	8009dd2 <ucdr_serialize_uint16_t+0xc2>
 8009d5a:	7d23      	ldrb	r3, [r4, #20]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d04a      	beq.n	8009df6 <ucdr_serialize_uint16_t+0xe6>
 8009d60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009d64:	702b      	strb	r3, [r5, #0]
 8009d66:	2e00      	cmp	r6, #0
 8009d68:	d040      	beq.n	8009dec <ucdr_serialize_uint16_t+0xdc>
 8009d6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009d6e:	706b      	strb	r3, [r5, #1]
 8009d70:	6923      	ldr	r3, [r4, #16]
 8009d72:	68a2      	ldr	r2, [r4, #8]
 8009d74:	7da0      	ldrb	r0, [r4, #22]
 8009d76:	3302      	adds	r3, #2
 8009d78:	1b9e      	subs	r6, r3, r6
 8009d7a:	4442      	add	r2, r8
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	f080 0001 	eor.w	r0, r0, #1
 8009d82:	60a2      	str	r2, [r4, #8]
 8009d84:	6126      	str	r6, [r4, #16]
 8009d86:	7563      	strb	r3, [r4, #21]
 8009d88:	b002      	add	sp, #8
 8009d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d8e:	2102      	movs	r1, #2
 8009d90:	4620      	mov	r0, r4
 8009d92:	f000 fef5 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 8009d96:	b190      	cbz	r0, 8009dbe <ucdr_serialize_uint16_t+0xae>
 8009d98:	7d23      	ldrb	r3, [r4, #20]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	68a3      	ldr	r3, [r4, #8]
 8009d9e:	d014      	beq.n	8009dca <ucdr_serialize_uint16_t+0xba>
 8009da0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	68a3      	ldr	r3, [r4, #8]
 8009da8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009dac:	705a      	strb	r2, [r3, #1]
 8009dae:	68a2      	ldr	r2, [r4, #8]
 8009db0:	6923      	ldr	r3, [r4, #16]
 8009db2:	3202      	adds	r2, #2
 8009db4:	3302      	adds	r3, #2
 8009db6:	2102      	movs	r1, #2
 8009db8:	60a2      	str	r2, [r4, #8]
 8009dba:	6123      	str	r3, [r4, #16]
 8009dbc:	7561      	strb	r1, [r4, #21]
 8009dbe:	7da0      	ldrb	r0, [r4, #22]
 8009dc0:	f080 0001 	eor.w	r0, r0, #1
 8009dc4:	b002      	add	sp, #8
 8009dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009dce:	801a      	strh	r2, [r3, #0]
 8009dd0:	e7ed      	b.n	8009dae <ucdr_serialize_uint16_t+0x9e>
 8009dd2:	68a2      	ldr	r2, [r4, #8]
 8009dd4:	6923      	ldr	r3, [r4, #16]
 8009dd6:	7da0      	ldrb	r0, [r4, #22]
 8009dd8:	7567      	strb	r7, [r4, #21]
 8009dda:	1b92      	subs	r2, r2, r6
 8009ddc:	1b9b      	subs	r3, r3, r6
 8009dde:	f080 0001 	eor.w	r0, r0, #1
 8009de2:	60a2      	str	r2, [r4, #8]
 8009de4:	6123      	str	r3, [r4, #16]
 8009de6:	b002      	add	sp, #8
 8009de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dec:	68a3      	ldr	r3, [r4, #8]
 8009dee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009df2:	701a      	strb	r2, [r3, #0]
 8009df4:	e7bc      	b.n	8009d70 <ucdr_serialize_uint16_t+0x60>
 8009df6:	4628      	mov	r0, r5
 8009df8:	f10d 0506 	add.w	r5, sp, #6
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	4632      	mov	r2, r6
 8009e00:	f007 fd93 	bl	801192a <memcpy>
 8009e04:	68a0      	ldr	r0, [r4, #8]
 8009e06:	4642      	mov	r2, r8
 8009e08:	19a9      	adds	r1, r5, r6
 8009e0a:	f007 fd8e 	bl	801192a <memcpy>
 8009e0e:	e7af      	b.n	8009d70 <ucdr_serialize_uint16_t+0x60>

08009e10 <ucdr_serialize_endian_uint16_t>:
 8009e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e14:	b083      	sub	sp, #12
 8009e16:	460d      	mov	r5, r1
 8009e18:	2102      	movs	r1, #2
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8009e20:	f000 ff02 	bl	800ac28 <ucdr_buffer_alignment>
 8009e24:	4601      	mov	r1, r0
 8009e26:	4620      	mov	r0, r4
 8009e28:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009e2c:	f000 ff40 	bl	800acb0 <ucdr_advance_buffer>
 8009e30:	2102      	movs	r1, #2
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 fe98 	bl	800ab68 <ucdr_check_buffer_available_for>
 8009e38:	bb70      	cbnz	r0, 8009e98 <ucdr_serialize_endian_uint16_t+0x88>
 8009e3a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009e3e:	42be      	cmp	r6, r7
 8009e40:	d925      	bls.n	8009e8e <ucdr_serialize_endian_uint16_t+0x7e>
 8009e42:	6923      	ldr	r3, [r4, #16]
 8009e44:	60a6      	str	r6, [r4, #8]
 8009e46:	1bf6      	subs	r6, r6, r7
 8009e48:	4433      	add	r3, r6
 8009e4a:	f1c6 0902 	rsb	r9, r6, #2
 8009e4e:	6123      	str	r3, [r4, #16]
 8009e50:	4649      	mov	r1, r9
 8009e52:	4620      	mov	r0, r4
 8009e54:	f000 fe94 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d039      	beq.n	8009ed0 <ucdr_serialize_endian_uint16_t+0xc0>
 8009e5c:	2d01      	cmp	r5, #1
 8009e5e:	d04a      	beq.n	8009ef6 <ucdr_serialize_endian_uint16_t+0xe6>
 8009e60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009e64:	703b      	strb	r3, [r7, #0]
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	d040      	beq.n	8009eec <ucdr_serialize_endian_uint16_t+0xdc>
 8009e6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009e6e:	707b      	strb	r3, [r7, #1]
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	68a2      	ldr	r2, [r4, #8]
 8009e74:	7da0      	ldrb	r0, [r4, #22]
 8009e76:	3302      	adds	r3, #2
 8009e78:	444a      	add	r2, r9
 8009e7a:	1b9b      	subs	r3, r3, r6
 8009e7c:	2102      	movs	r1, #2
 8009e7e:	f080 0001 	eor.w	r0, r0, #1
 8009e82:	60a2      	str	r2, [r4, #8]
 8009e84:	6123      	str	r3, [r4, #16]
 8009e86:	7561      	strb	r1, [r4, #21]
 8009e88:	b003      	add	sp, #12
 8009e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e8e:	2102      	movs	r1, #2
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 fe75 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 8009e96:	b188      	cbz	r0, 8009ebc <ucdr_serialize_endian_uint16_t+0xac>
 8009e98:	2d01      	cmp	r5, #1
 8009e9a:	68a3      	ldr	r3, [r4, #8]
 8009e9c:	d014      	beq.n	8009ec8 <ucdr_serialize_endian_uint16_t+0xb8>
 8009e9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009ea2:	701a      	strb	r2, [r3, #0]
 8009ea4:	68a3      	ldr	r3, [r4, #8]
 8009ea6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009eaa:	705a      	strb	r2, [r3, #1]
 8009eac:	68a2      	ldr	r2, [r4, #8]
 8009eae:	6923      	ldr	r3, [r4, #16]
 8009eb0:	3202      	adds	r2, #2
 8009eb2:	3302      	adds	r3, #2
 8009eb4:	2102      	movs	r1, #2
 8009eb6:	60a2      	str	r2, [r4, #8]
 8009eb8:	6123      	str	r3, [r4, #16]
 8009eba:	7561      	strb	r1, [r4, #21]
 8009ebc:	7da0      	ldrb	r0, [r4, #22]
 8009ebe:	f080 0001 	eor.w	r0, r0, #1
 8009ec2:	b003      	add	sp, #12
 8009ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ec8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009ecc:	801a      	strh	r2, [r3, #0]
 8009ece:	e7ed      	b.n	8009eac <ucdr_serialize_endian_uint16_t+0x9c>
 8009ed0:	68a2      	ldr	r2, [r4, #8]
 8009ed2:	6923      	ldr	r3, [r4, #16]
 8009ed4:	7da0      	ldrb	r0, [r4, #22]
 8009ed6:	f884 8015 	strb.w	r8, [r4, #21]
 8009eda:	1b92      	subs	r2, r2, r6
 8009edc:	1b9b      	subs	r3, r3, r6
 8009ede:	f080 0001 	eor.w	r0, r0, #1
 8009ee2:	60a2      	str	r2, [r4, #8]
 8009ee4:	6123      	str	r3, [r4, #16]
 8009ee6:	b003      	add	sp, #12
 8009ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eec:	68a3      	ldr	r3, [r4, #8]
 8009eee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ef2:	701a      	strb	r2, [r3, #0]
 8009ef4:	e7bc      	b.n	8009e70 <ucdr_serialize_endian_uint16_t+0x60>
 8009ef6:	f10d 0506 	add.w	r5, sp, #6
 8009efa:	4629      	mov	r1, r5
 8009efc:	4632      	mov	r2, r6
 8009efe:	4638      	mov	r0, r7
 8009f00:	f007 fd13 	bl	801192a <memcpy>
 8009f04:	68a0      	ldr	r0, [r4, #8]
 8009f06:	464a      	mov	r2, r9
 8009f08:	19a9      	adds	r1, r5, r6
 8009f0a:	f007 fd0e 	bl	801192a <memcpy>
 8009f0e:	e7af      	b.n	8009e70 <ucdr_serialize_endian_uint16_t+0x60>

08009f10 <ucdr_deserialize_uint16_t>:
 8009f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	460d      	mov	r5, r1
 8009f16:	2102      	movs	r1, #2
 8009f18:	4604      	mov	r4, r0
 8009f1a:	f000 fe85 	bl	800ac28 <ucdr_buffer_alignment>
 8009f1e:	4601      	mov	r1, r0
 8009f20:	4620      	mov	r0, r4
 8009f22:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009f26:	f000 fec3 	bl	800acb0 <ucdr_advance_buffer>
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f000 fe1b 	bl	800ab68 <ucdr_check_buffer_available_for>
 8009f32:	bb60      	cbnz	r0, 8009f8e <ucdr_deserialize_uint16_t+0x7e>
 8009f34:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009f38:	42be      	cmp	r6, r7
 8009f3a:	d923      	bls.n	8009f84 <ucdr_deserialize_uint16_t+0x74>
 8009f3c:	6923      	ldr	r3, [r4, #16]
 8009f3e:	60a6      	str	r6, [r4, #8]
 8009f40:	1bf6      	subs	r6, r6, r7
 8009f42:	4433      	add	r3, r6
 8009f44:	f1c6 0902 	rsb	r9, r6, #2
 8009f48:	6123      	str	r3, [r4, #16]
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 fe17 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d034      	beq.n	8009fc0 <ucdr_deserialize_uint16_t+0xb0>
 8009f56:	7d23      	ldrb	r3, [r4, #20]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d042      	beq.n	8009fe2 <ucdr_deserialize_uint16_t+0xd2>
 8009f5c:	787b      	ldrb	r3, [r7, #1]
 8009f5e:	702b      	strb	r3, [r5, #0]
 8009f60:	2e00      	cmp	r6, #0
 8009f62:	d03a      	beq.n	8009fda <ucdr_deserialize_uint16_t+0xca>
 8009f64:	783b      	ldrb	r3, [r7, #0]
 8009f66:	706b      	strb	r3, [r5, #1]
 8009f68:	6923      	ldr	r3, [r4, #16]
 8009f6a:	68a2      	ldr	r2, [r4, #8]
 8009f6c:	7da0      	ldrb	r0, [r4, #22]
 8009f6e:	2102      	movs	r1, #2
 8009f70:	3302      	adds	r3, #2
 8009f72:	444a      	add	r2, r9
 8009f74:	1b9b      	subs	r3, r3, r6
 8009f76:	7561      	strb	r1, [r4, #21]
 8009f78:	60a2      	str	r2, [r4, #8]
 8009f7a:	6123      	str	r3, [r4, #16]
 8009f7c:	f080 0001 	eor.w	r0, r0, #1
 8009f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f84:	2102      	movs	r1, #2
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 fdfa 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 8009f8c:	b180      	cbz	r0, 8009fb0 <ucdr_deserialize_uint16_t+0xa0>
 8009f8e:	7d23      	ldrb	r3, [r4, #20]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	68a3      	ldr	r3, [r4, #8]
 8009f94:	d011      	beq.n	8009fba <ucdr_deserialize_uint16_t+0xaa>
 8009f96:	785b      	ldrb	r3, [r3, #1]
 8009f98:	702b      	strb	r3, [r5, #0]
 8009f9a:	68a3      	ldr	r3, [r4, #8]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	706b      	strb	r3, [r5, #1]
 8009fa0:	68a2      	ldr	r2, [r4, #8]
 8009fa2:	6923      	ldr	r3, [r4, #16]
 8009fa4:	3202      	adds	r2, #2
 8009fa6:	3302      	adds	r3, #2
 8009fa8:	2102      	movs	r1, #2
 8009faa:	60a2      	str	r2, [r4, #8]
 8009fac:	6123      	str	r3, [r4, #16]
 8009fae:	7561      	strb	r1, [r4, #21]
 8009fb0:	7da0      	ldrb	r0, [r4, #22]
 8009fb2:	f080 0001 	eor.w	r0, r0, #1
 8009fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	802b      	strh	r3, [r5, #0]
 8009fbe:	e7ef      	b.n	8009fa0 <ucdr_deserialize_uint16_t+0x90>
 8009fc0:	68a2      	ldr	r2, [r4, #8]
 8009fc2:	6923      	ldr	r3, [r4, #16]
 8009fc4:	7da0      	ldrb	r0, [r4, #22]
 8009fc6:	f884 8015 	strb.w	r8, [r4, #21]
 8009fca:	1b92      	subs	r2, r2, r6
 8009fcc:	1b9b      	subs	r3, r3, r6
 8009fce:	60a2      	str	r2, [r4, #8]
 8009fd0:	6123      	str	r3, [r4, #16]
 8009fd2:	f080 0001 	eor.w	r0, r0, #1
 8009fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	706b      	strb	r3, [r5, #1]
 8009fe0:	e7c2      	b.n	8009f68 <ucdr_deserialize_uint16_t+0x58>
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	4632      	mov	r2, r6
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f007 fc9f 	bl	801192a <memcpy>
 8009fec:	68a1      	ldr	r1, [r4, #8]
 8009fee:	464a      	mov	r2, r9
 8009ff0:	19a8      	adds	r0, r5, r6
 8009ff2:	f007 fc9a 	bl	801192a <memcpy>
 8009ff6:	e7b7      	b.n	8009f68 <ucdr_deserialize_uint16_t+0x58>

08009ff8 <ucdr_deserialize_endian_uint16_t>:
 8009ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ffc:	460e      	mov	r6, r1
 8009ffe:	2102      	movs	r1, #2
 800a000:	4604      	mov	r4, r0
 800a002:	4615      	mov	r5, r2
 800a004:	f000 fe10 	bl	800ac28 <ucdr_buffer_alignment>
 800a008:	4601      	mov	r1, r0
 800a00a:	4620      	mov	r0, r4
 800a00c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a010:	f000 fe4e 	bl	800acb0 <ucdr_advance_buffer>
 800a014:	2102      	movs	r1, #2
 800a016:	4620      	mov	r0, r4
 800a018:	f000 fda6 	bl	800ab68 <ucdr_check_buffer_available_for>
 800a01c:	bb70      	cbnz	r0, 800a07c <ucdr_deserialize_endian_uint16_t+0x84>
 800a01e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a022:	4547      	cmp	r7, r8
 800a024:	d925      	bls.n	800a072 <ucdr_deserialize_endian_uint16_t+0x7a>
 800a026:	6923      	ldr	r3, [r4, #16]
 800a028:	60a7      	str	r7, [r4, #8]
 800a02a:	eba7 0708 	sub.w	r7, r7, r8
 800a02e:	443b      	add	r3, r7
 800a030:	f1c7 0a02 	rsb	sl, r7, #2
 800a034:	6123      	str	r3, [r4, #16]
 800a036:	4651      	mov	r1, sl
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fda1 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a03e:	2800      	cmp	r0, #0
 800a040:	d034      	beq.n	800a0ac <ucdr_deserialize_endian_uint16_t+0xb4>
 800a042:	2e01      	cmp	r6, #1
 800a044:	d043      	beq.n	800a0ce <ucdr_deserialize_endian_uint16_t+0xd6>
 800a046:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a04a:	702b      	strb	r3, [r5, #0]
 800a04c:	2f00      	cmp	r7, #0
 800a04e:	d03a      	beq.n	800a0c6 <ucdr_deserialize_endian_uint16_t+0xce>
 800a050:	f898 3000 	ldrb.w	r3, [r8]
 800a054:	706b      	strb	r3, [r5, #1]
 800a056:	6923      	ldr	r3, [r4, #16]
 800a058:	68a2      	ldr	r2, [r4, #8]
 800a05a:	7da0      	ldrb	r0, [r4, #22]
 800a05c:	2102      	movs	r1, #2
 800a05e:	3302      	adds	r3, #2
 800a060:	4452      	add	r2, sl
 800a062:	1bdb      	subs	r3, r3, r7
 800a064:	7561      	strb	r1, [r4, #21]
 800a066:	60a2      	str	r2, [r4, #8]
 800a068:	6123      	str	r3, [r4, #16]
 800a06a:	f080 0001 	eor.w	r0, r0, #1
 800a06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a072:	2102      	movs	r1, #2
 800a074:	4620      	mov	r0, r4
 800a076:	f000 fd83 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a07a:	b178      	cbz	r0, 800a09c <ucdr_deserialize_endian_uint16_t+0xa4>
 800a07c:	2e01      	cmp	r6, #1
 800a07e:	68a3      	ldr	r3, [r4, #8]
 800a080:	d011      	beq.n	800a0a6 <ucdr_deserialize_endian_uint16_t+0xae>
 800a082:	785b      	ldrb	r3, [r3, #1]
 800a084:	702b      	strb	r3, [r5, #0]
 800a086:	68a3      	ldr	r3, [r4, #8]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	706b      	strb	r3, [r5, #1]
 800a08c:	68a2      	ldr	r2, [r4, #8]
 800a08e:	6923      	ldr	r3, [r4, #16]
 800a090:	3202      	adds	r2, #2
 800a092:	3302      	adds	r3, #2
 800a094:	2102      	movs	r1, #2
 800a096:	60a2      	str	r2, [r4, #8]
 800a098:	6123      	str	r3, [r4, #16]
 800a09a:	7561      	strb	r1, [r4, #21]
 800a09c:	7da0      	ldrb	r0, [r4, #22]
 800a09e:	f080 0001 	eor.w	r0, r0, #1
 800a0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a6:	881b      	ldrh	r3, [r3, #0]
 800a0a8:	802b      	strh	r3, [r5, #0]
 800a0aa:	e7ef      	b.n	800a08c <ucdr_deserialize_endian_uint16_t+0x94>
 800a0ac:	68a2      	ldr	r2, [r4, #8]
 800a0ae:	6923      	ldr	r3, [r4, #16]
 800a0b0:	7da0      	ldrb	r0, [r4, #22]
 800a0b2:	f884 9015 	strb.w	r9, [r4, #21]
 800a0b6:	1bd2      	subs	r2, r2, r7
 800a0b8:	1bdb      	subs	r3, r3, r7
 800a0ba:	60a2      	str	r2, [r4, #8]
 800a0bc:	6123      	str	r3, [r4, #16]
 800a0be:	f080 0001 	eor.w	r0, r0, #1
 800a0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c6:	68a3      	ldr	r3, [r4, #8]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	706b      	strb	r3, [r5, #1]
 800a0cc:	e7c3      	b.n	800a056 <ucdr_deserialize_endian_uint16_t+0x5e>
 800a0ce:	4641      	mov	r1, r8
 800a0d0:	463a      	mov	r2, r7
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f007 fc29 	bl	801192a <memcpy>
 800a0d8:	68a1      	ldr	r1, [r4, #8]
 800a0da:	4652      	mov	r2, sl
 800a0dc:	19e8      	adds	r0, r5, r7
 800a0de:	f007 fc24 	bl	801192a <memcpy>
 800a0e2:	e7b8      	b.n	800a056 <ucdr_deserialize_endian_uint16_t+0x5e>

0800a0e4 <ucdr_serialize_uint32_t>:
 800a0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	9101      	str	r1, [sp, #4]
 800a0ee:	2104      	movs	r1, #4
 800a0f0:	f000 fd9a 	bl	800ac28 <ucdr_buffer_alignment>
 800a0f4:	4601      	mov	r1, r0
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	7d67      	ldrb	r7, [r4, #21]
 800a0fa:	f000 fdd9 	bl	800acb0 <ucdr_advance_buffer>
 800a0fe:	2104      	movs	r1, #4
 800a100:	4620      	mov	r0, r4
 800a102:	f000 fd31 	bl	800ab68 <ucdr_check_buffer_available_for>
 800a106:	2800      	cmp	r0, #0
 800a108:	d139      	bne.n	800a17e <ucdr_serialize_uint32_t+0x9a>
 800a10a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a10e:	42ab      	cmp	r3, r5
 800a110:	d930      	bls.n	800a174 <ucdr_serialize_uint32_t+0x90>
 800a112:	1b5e      	subs	r6, r3, r5
 800a114:	60a3      	str	r3, [r4, #8]
 800a116:	6923      	ldr	r3, [r4, #16]
 800a118:	f1c6 0804 	rsb	r8, r6, #4
 800a11c:	4433      	add	r3, r6
 800a11e:	6123      	str	r3, [r4, #16]
 800a120:	4641      	mov	r1, r8
 800a122:	4620      	mov	r0, r4
 800a124:	f000 fd2c 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a128:	2800      	cmp	r0, #0
 800a12a:	d04c      	beq.n	800a1c6 <ucdr_serialize_uint32_t+0xe2>
 800a12c:	7d23      	ldrb	r3, [r4, #20]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d063      	beq.n	800a1fa <ucdr_serialize_uint32_t+0x116>
 800a132:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a136:	702b      	strb	r3, [r5, #0]
 800a138:	2e00      	cmp	r6, #0
 800a13a:	d051      	beq.n	800a1e0 <ucdr_serialize_uint32_t+0xfc>
 800a13c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a140:	706b      	strb	r3, [r5, #1]
 800a142:	2e01      	cmp	r6, #1
 800a144:	d050      	beq.n	800a1e8 <ucdr_serialize_uint32_t+0x104>
 800a146:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a14a:	70ab      	strb	r3, [r5, #2]
 800a14c:	2e02      	cmp	r6, #2
 800a14e:	d04f      	beq.n	800a1f0 <ucdr_serialize_uint32_t+0x10c>
 800a150:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a154:	70eb      	strb	r3, [r5, #3]
 800a156:	6923      	ldr	r3, [r4, #16]
 800a158:	68a2      	ldr	r2, [r4, #8]
 800a15a:	7da0      	ldrb	r0, [r4, #22]
 800a15c:	3304      	adds	r3, #4
 800a15e:	1b9e      	subs	r6, r3, r6
 800a160:	4442      	add	r2, r8
 800a162:	2304      	movs	r3, #4
 800a164:	f080 0001 	eor.w	r0, r0, #1
 800a168:	60a2      	str	r2, [r4, #8]
 800a16a:	6126      	str	r6, [r4, #16]
 800a16c:	7563      	strb	r3, [r4, #21]
 800a16e:	b002      	add	sp, #8
 800a170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a174:	2104      	movs	r1, #4
 800a176:	4620      	mov	r0, r4
 800a178:	f000 fd02 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a17c:	b1d0      	cbz	r0, 800a1b4 <ucdr_serialize_uint32_t+0xd0>
 800a17e:	7d23      	ldrb	r3, [r4, #20]
 800a180:	2b01      	cmp	r3, #1
 800a182:	68a3      	ldr	r3, [r4, #8]
 800a184:	d01c      	beq.n	800a1c0 <ucdr_serialize_uint32_t+0xdc>
 800a186:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a18a:	701a      	strb	r2, [r3, #0]
 800a18c:	68a3      	ldr	r3, [r4, #8]
 800a18e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a192:	705a      	strb	r2, [r3, #1]
 800a194:	68a3      	ldr	r3, [r4, #8]
 800a196:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a19a:	709a      	strb	r2, [r3, #2]
 800a19c:	68a3      	ldr	r3, [r4, #8]
 800a19e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a1a2:	70da      	strb	r2, [r3, #3]
 800a1a4:	68a2      	ldr	r2, [r4, #8]
 800a1a6:	6923      	ldr	r3, [r4, #16]
 800a1a8:	3204      	adds	r2, #4
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	2104      	movs	r1, #4
 800a1ae:	60a2      	str	r2, [r4, #8]
 800a1b0:	6123      	str	r3, [r4, #16]
 800a1b2:	7561      	strb	r1, [r4, #21]
 800a1b4:	7da0      	ldrb	r0, [r4, #22]
 800a1b6:	f080 0001 	eor.w	r0, r0, #1
 800a1ba:	b002      	add	sp, #8
 800a1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c0:	9a01      	ldr	r2, [sp, #4]
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	e7ee      	b.n	800a1a4 <ucdr_serialize_uint32_t+0xc0>
 800a1c6:	68a2      	ldr	r2, [r4, #8]
 800a1c8:	6923      	ldr	r3, [r4, #16]
 800a1ca:	7da0      	ldrb	r0, [r4, #22]
 800a1cc:	7567      	strb	r7, [r4, #21]
 800a1ce:	1b92      	subs	r2, r2, r6
 800a1d0:	1b9b      	subs	r3, r3, r6
 800a1d2:	f080 0001 	eor.w	r0, r0, #1
 800a1d6:	60a2      	str	r2, [r4, #8]
 800a1d8:	6123      	str	r3, [r4, #16]
 800a1da:	b002      	add	sp, #8
 800a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e0:	68a3      	ldr	r3, [r4, #8]
 800a1e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a1e6:	701a      	strb	r2, [r3, #0]
 800a1e8:	68a3      	ldr	r3, [r4, #8]
 800a1ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a1ee:	701a      	strb	r2, [r3, #0]
 800a1f0:	68a3      	ldr	r3, [r4, #8]
 800a1f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a1f6:	701a      	strb	r2, [r3, #0]
 800a1f8:	e7ad      	b.n	800a156 <ucdr_serialize_uint32_t+0x72>
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	ad01      	add	r5, sp, #4
 800a1fe:	4629      	mov	r1, r5
 800a200:	4632      	mov	r2, r6
 800a202:	f007 fb92 	bl	801192a <memcpy>
 800a206:	68a0      	ldr	r0, [r4, #8]
 800a208:	4642      	mov	r2, r8
 800a20a:	19a9      	adds	r1, r5, r6
 800a20c:	f007 fb8d 	bl	801192a <memcpy>
 800a210:	e7a1      	b.n	800a156 <ucdr_serialize_uint32_t+0x72>
 800a212:	bf00      	nop

0800a214 <ucdr_serialize_endian_uint32_t>:
 800a214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a218:	b083      	sub	sp, #12
 800a21a:	460d      	mov	r5, r1
 800a21c:	2104      	movs	r1, #4
 800a21e:	4604      	mov	r4, r0
 800a220:	9201      	str	r2, [sp, #4]
 800a222:	f000 fd01 	bl	800ac28 <ucdr_buffer_alignment>
 800a226:	4601      	mov	r1, r0
 800a228:	4620      	mov	r0, r4
 800a22a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a22e:	f000 fd3f 	bl	800acb0 <ucdr_advance_buffer>
 800a232:	2104      	movs	r1, #4
 800a234:	4620      	mov	r0, r4
 800a236:	f000 fc97 	bl	800ab68 <ucdr_check_buffer_available_for>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d138      	bne.n	800a2b0 <ucdr_serialize_endian_uint32_t+0x9c>
 800a23e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a242:	42b7      	cmp	r7, r6
 800a244:	d92f      	bls.n	800a2a6 <ucdr_serialize_endian_uint32_t+0x92>
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	60a7      	str	r7, [r4, #8]
 800a24a:	1bbf      	subs	r7, r7, r6
 800a24c:	443b      	add	r3, r7
 800a24e:	f1c7 0904 	rsb	r9, r7, #4
 800a252:	6123      	str	r3, [r4, #16]
 800a254:	4649      	mov	r1, r9
 800a256:	4620      	mov	r0, r4
 800a258:	f000 fc92 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d04a      	beq.n	800a2f6 <ucdr_serialize_endian_uint32_t+0xe2>
 800a260:	2d01      	cmp	r5, #1
 800a262:	d063      	beq.n	800a32c <ucdr_serialize_endian_uint32_t+0x118>
 800a264:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a268:	7033      	strb	r3, [r6, #0]
 800a26a:	2f00      	cmp	r7, #0
 800a26c:	d051      	beq.n	800a312 <ucdr_serialize_endian_uint32_t+0xfe>
 800a26e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a272:	7073      	strb	r3, [r6, #1]
 800a274:	2f01      	cmp	r7, #1
 800a276:	d050      	beq.n	800a31a <ucdr_serialize_endian_uint32_t+0x106>
 800a278:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a27c:	70b3      	strb	r3, [r6, #2]
 800a27e:	2f02      	cmp	r7, #2
 800a280:	d04f      	beq.n	800a322 <ucdr_serialize_endian_uint32_t+0x10e>
 800a282:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a286:	70f3      	strb	r3, [r6, #3]
 800a288:	6923      	ldr	r3, [r4, #16]
 800a28a:	68a2      	ldr	r2, [r4, #8]
 800a28c:	7da0      	ldrb	r0, [r4, #22]
 800a28e:	3304      	adds	r3, #4
 800a290:	444a      	add	r2, r9
 800a292:	1bdb      	subs	r3, r3, r7
 800a294:	2104      	movs	r1, #4
 800a296:	f080 0001 	eor.w	r0, r0, #1
 800a29a:	60a2      	str	r2, [r4, #8]
 800a29c:	6123      	str	r3, [r4, #16]
 800a29e:	7561      	strb	r1, [r4, #21]
 800a2a0:	b003      	add	sp, #12
 800a2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2a6:	2104      	movs	r1, #4
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f000 fc69 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a2ae:	b1c8      	cbz	r0, 800a2e4 <ucdr_serialize_endian_uint32_t+0xd0>
 800a2b0:	2d01      	cmp	r5, #1
 800a2b2:	68a3      	ldr	r3, [r4, #8]
 800a2b4:	d01c      	beq.n	800a2f0 <ucdr_serialize_endian_uint32_t+0xdc>
 800a2b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a2ba:	701a      	strb	r2, [r3, #0]
 800a2bc:	68a3      	ldr	r3, [r4, #8]
 800a2be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a2c2:	705a      	strb	r2, [r3, #1]
 800a2c4:	68a3      	ldr	r3, [r4, #8]
 800a2c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a2ca:	709a      	strb	r2, [r3, #2]
 800a2cc:	68a3      	ldr	r3, [r4, #8]
 800a2ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a2d2:	70da      	strb	r2, [r3, #3]
 800a2d4:	68a2      	ldr	r2, [r4, #8]
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	3204      	adds	r2, #4
 800a2da:	3304      	adds	r3, #4
 800a2dc:	2104      	movs	r1, #4
 800a2de:	60a2      	str	r2, [r4, #8]
 800a2e0:	6123      	str	r3, [r4, #16]
 800a2e2:	7561      	strb	r1, [r4, #21]
 800a2e4:	7da0      	ldrb	r0, [r4, #22]
 800a2e6:	f080 0001 	eor.w	r0, r0, #1
 800a2ea:	b003      	add	sp, #12
 800a2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2f0:	9a01      	ldr	r2, [sp, #4]
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	e7ee      	b.n	800a2d4 <ucdr_serialize_endian_uint32_t+0xc0>
 800a2f6:	68a2      	ldr	r2, [r4, #8]
 800a2f8:	6923      	ldr	r3, [r4, #16]
 800a2fa:	7da0      	ldrb	r0, [r4, #22]
 800a2fc:	f884 8015 	strb.w	r8, [r4, #21]
 800a300:	1bd2      	subs	r2, r2, r7
 800a302:	1bdb      	subs	r3, r3, r7
 800a304:	f080 0001 	eor.w	r0, r0, #1
 800a308:	60a2      	str	r2, [r4, #8]
 800a30a:	6123      	str	r3, [r4, #16]
 800a30c:	b003      	add	sp, #12
 800a30e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a312:	68a3      	ldr	r3, [r4, #8]
 800a314:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a318:	701a      	strb	r2, [r3, #0]
 800a31a:	68a3      	ldr	r3, [r4, #8]
 800a31c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a320:	701a      	strb	r2, [r3, #0]
 800a322:	68a3      	ldr	r3, [r4, #8]
 800a324:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a328:	701a      	strb	r2, [r3, #0]
 800a32a:	e7ad      	b.n	800a288 <ucdr_serialize_endian_uint32_t+0x74>
 800a32c:	ad01      	add	r5, sp, #4
 800a32e:	4629      	mov	r1, r5
 800a330:	463a      	mov	r2, r7
 800a332:	4630      	mov	r0, r6
 800a334:	f007 faf9 	bl	801192a <memcpy>
 800a338:	68a0      	ldr	r0, [r4, #8]
 800a33a:	464a      	mov	r2, r9
 800a33c:	19e9      	adds	r1, r5, r7
 800a33e:	f007 faf4 	bl	801192a <memcpy>
 800a342:	e7a1      	b.n	800a288 <ucdr_serialize_endian_uint32_t+0x74>

0800a344 <ucdr_deserialize_uint32_t>:
 800a344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a348:	460d      	mov	r5, r1
 800a34a:	2104      	movs	r1, #4
 800a34c:	4604      	mov	r4, r0
 800a34e:	f000 fc6b 	bl	800ac28 <ucdr_buffer_alignment>
 800a352:	4601      	mov	r1, r0
 800a354:	4620      	mov	r0, r4
 800a356:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a35a:	f000 fca9 	bl	800acb0 <ucdr_advance_buffer>
 800a35e:	2104      	movs	r1, #4
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fc01 	bl	800ab68 <ucdr_check_buffer_available_for>
 800a366:	2800      	cmp	r0, #0
 800a368:	d138      	bne.n	800a3dc <ucdr_deserialize_uint32_t+0x98>
 800a36a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a36e:	42b7      	cmp	r7, r6
 800a370:	d92f      	bls.n	800a3d2 <ucdr_deserialize_uint32_t+0x8e>
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	60a7      	str	r7, [r4, #8]
 800a376:	1bbf      	subs	r7, r7, r6
 800a378:	443b      	add	r3, r7
 800a37a:	f1c7 0904 	rsb	r9, r7, #4
 800a37e:	6123      	str	r3, [r4, #16]
 800a380:	4649      	mov	r1, r9
 800a382:	4620      	mov	r0, r4
 800a384:	f000 fbfc 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a388:	2800      	cmp	r0, #0
 800a38a:	d046      	beq.n	800a41a <ucdr_deserialize_uint32_t+0xd6>
 800a38c:	7d23      	ldrb	r3, [r4, #20]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d05c      	beq.n	800a44c <ucdr_deserialize_uint32_t+0x108>
 800a392:	78f3      	ldrb	r3, [r6, #3]
 800a394:	702b      	strb	r3, [r5, #0]
 800a396:	2f00      	cmp	r7, #0
 800a398:	d04c      	beq.n	800a434 <ucdr_deserialize_uint32_t+0xf0>
 800a39a:	78b3      	ldrb	r3, [r6, #2]
 800a39c:	706b      	strb	r3, [r5, #1]
 800a39e:	2f01      	cmp	r7, #1
 800a3a0:	f105 0302 	add.w	r3, r5, #2
 800a3a4:	d04a      	beq.n	800a43c <ucdr_deserialize_uint32_t+0xf8>
 800a3a6:	7873      	ldrb	r3, [r6, #1]
 800a3a8:	70ab      	strb	r3, [r5, #2]
 800a3aa:	2f02      	cmp	r7, #2
 800a3ac:	f105 0303 	add.w	r3, r5, #3
 800a3b0:	d048      	beq.n	800a444 <ucdr_deserialize_uint32_t+0x100>
 800a3b2:	7833      	ldrb	r3, [r6, #0]
 800a3b4:	70eb      	strb	r3, [r5, #3]
 800a3b6:	6923      	ldr	r3, [r4, #16]
 800a3b8:	68a2      	ldr	r2, [r4, #8]
 800a3ba:	7da0      	ldrb	r0, [r4, #22]
 800a3bc:	2104      	movs	r1, #4
 800a3be:	3304      	adds	r3, #4
 800a3c0:	444a      	add	r2, r9
 800a3c2:	1bdb      	subs	r3, r3, r7
 800a3c4:	7561      	strb	r1, [r4, #21]
 800a3c6:	60a2      	str	r2, [r4, #8]
 800a3c8:	6123      	str	r3, [r4, #16]
 800a3ca:	f080 0001 	eor.w	r0, r0, #1
 800a3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d2:	2104      	movs	r1, #4
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f000 fbd3 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a3da:	b1b0      	cbz	r0, 800a40a <ucdr_deserialize_uint32_t+0xc6>
 800a3dc:	7d23      	ldrb	r3, [r4, #20]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	68a3      	ldr	r3, [r4, #8]
 800a3e2:	d017      	beq.n	800a414 <ucdr_deserialize_uint32_t+0xd0>
 800a3e4:	78db      	ldrb	r3, [r3, #3]
 800a3e6:	702b      	strb	r3, [r5, #0]
 800a3e8:	68a3      	ldr	r3, [r4, #8]
 800a3ea:	789b      	ldrb	r3, [r3, #2]
 800a3ec:	706b      	strb	r3, [r5, #1]
 800a3ee:	68a3      	ldr	r3, [r4, #8]
 800a3f0:	785b      	ldrb	r3, [r3, #1]
 800a3f2:	70ab      	strb	r3, [r5, #2]
 800a3f4:	68a3      	ldr	r3, [r4, #8]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	70eb      	strb	r3, [r5, #3]
 800a3fa:	68a2      	ldr	r2, [r4, #8]
 800a3fc:	6923      	ldr	r3, [r4, #16]
 800a3fe:	3204      	adds	r2, #4
 800a400:	3304      	adds	r3, #4
 800a402:	2104      	movs	r1, #4
 800a404:	60a2      	str	r2, [r4, #8]
 800a406:	6123      	str	r3, [r4, #16]
 800a408:	7561      	strb	r1, [r4, #21]
 800a40a:	7da0      	ldrb	r0, [r4, #22]
 800a40c:	f080 0001 	eor.w	r0, r0, #1
 800a410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	602b      	str	r3, [r5, #0]
 800a418:	e7ef      	b.n	800a3fa <ucdr_deserialize_uint32_t+0xb6>
 800a41a:	68a2      	ldr	r2, [r4, #8]
 800a41c:	6923      	ldr	r3, [r4, #16]
 800a41e:	7da0      	ldrb	r0, [r4, #22]
 800a420:	f884 8015 	strb.w	r8, [r4, #21]
 800a424:	1bd2      	subs	r2, r2, r7
 800a426:	1bdb      	subs	r3, r3, r7
 800a428:	60a2      	str	r2, [r4, #8]
 800a42a:	6123      	str	r3, [r4, #16]
 800a42c:	f080 0001 	eor.w	r0, r0, #1
 800a430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a434:	68a3      	ldr	r3, [r4, #8]
 800a436:	789b      	ldrb	r3, [r3, #2]
 800a438:	706b      	strb	r3, [r5, #1]
 800a43a:	1cab      	adds	r3, r5, #2
 800a43c:	68a2      	ldr	r2, [r4, #8]
 800a43e:	7852      	ldrb	r2, [r2, #1]
 800a440:	f803 2b01 	strb.w	r2, [r3], #1
 800a444:	68a2      	ldr	r2, [r4, #8]
 800a446:	7812      	ldrb	r2, [r2, #0]
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	e7b4      	b.n	800a3b6 <ucdr_deserialize_uint32_t+0x72>
 800a44c:	4631      	mov	r1, r6
 800a44e:	463a      	mov	r2, r7
 800a450:	4628      	mov	r0, r5
 800a452:	f007 fa6a 	bl	801192a <memcpy>
 800a456:	68a1      	ldr	r1, [r4, #8]
 800a458:	464a      	mov	r2, r9
 800a45a:	19e8      	adds	r0, r5, r7
 800a45c:	f007 fa65 	bl	801192a <memcpy>
 800a460:	e7a9      	b.n	800a3b6 <ucdr_deserialize_uint32_t+0x72>
 800a462:	bf00      	nop

0800a464 <ucdr_deserialize_endian_uint32_t>:
 800a464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a468:	460e      	mov	r6, r1
 800a46a:	2104      	movs	r1, #4
 800a46c:	4604      	mov	r4, r0
 800a46e:	4615      	mov	r5, r2
 800a470:	f000 fbda 	bl	800ac28 <ucdr_buffer_alignment>
 800a474:	4601      	mov	r1, r0
 800a476:	4620      	mov	r0, r4
 800a478:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a47c:	f000 fc18 	bl	800acb0 <ucdr_advance_buffer>
 800a480:	2104      	movs	r1, #4
 800a482:	4620      	mov	r0, r4
 800a484:	f000 fb70 	bl	800ab68 <ucdr_check_buffer_available_for>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d13c      	bne.n	800a506 <ucdr_deserialize_endian_uint32_t+0xa2>
 800a48c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800a490:	42bb      	cmp	r3, r7
 800a492:	d933      	bls.n	800a4fc <ucdr_deserialize_endian_uint32_t+0x98>
 800a494:	eba3 0807 	sub.w	r8, r3, r7
 800a498:	60a3      	str	r3, [r4, #8]
 800a49a:	6923      	ldr	r3, [r4, #16]
 800a49c:	f1c8 0a04 	rsb	sl, r8, #4
 800a4a0:	4443      	add	r3, r8
 800a4a2:	6123      	str	r3, [r4, #16]
 800a4a4:	4651      	mov	r1, sl
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f000 fb6a 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d048      	beq.n	800a542 <ucdr_deserialize_endian_uint32_t+0xde>
 800a4b0:	2e01      	cmp	r6, #1
 800a4b2:	d061      	beq.n	800a578 <ucdr_deserialize_endian_uint32_t+0x114>
 800a4b4:	78fb      	ldrb	r3, [r7, #3]
 800a4b6:	702b      	strb	r3, [r5, #0]
 800a4b8:	f1b8 0f00 	cmp.w	r8, #0
 800a4bc:	d050      	beq.n	800a560 <ucdr_deserialize_endian_uint32_t+0xfc>
 800a4be:	78bb      	ldrb	r3, [r7, #2]
 800a4c0:	706b      	strb	r3, [r5, #1]
 800a4c2:	f1b8 0f01 	cmp.w	r8, #1
 800a4c6:	f105 0302 	add.w	r3, r5, #2
 800a4ca:	d04d      	beq.n	800a568 <ucdr_deserialize_endian_uint32_t+0x104>
 800a4cc:	787b      	ldrb	r3, [r7, #1]
 800a4ce:	70ab      	strb	r3, [r5, #2]
 800a4d0:	f1b8 0f02 	cmp.w	r8, #2
 800a4d4:	f105 0303 	add.w	r3, r5, #3
 800a4d8:	d04a      	beq.n	800a570 <ucdr_deserialize_endian_uint32_t+0x10c>
 800a4da:	783b      	ldrb	r3, [r7, #0]
 800a4dc:	70eb      	strb	r3, [r5, #3]
 800a4de:	6923      	ldr	r3, [r4, #16]
 800a4e0:	68a2      	ldr	r2, [r4, #8]
 800a4e2:	7da0      	ldrb	r0, [r4, #22]
 800a4e4:	2104      	movs	r1, #4
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	4452      	add	r2, sl
 800a4ea:	eba3 0308 	sub.w	r3, r3, r8
 800a4ee:	7561      	strb	r1, [r4, #21]
 800a4f0:	60a2      	str	r2, [r4, #8]
 800a4f2:	6123      	str	r3, [r4, #16]
 800a4f4:	f080 0001 	eor.w	r0, r0, #1
 800a4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4fc:	2104      	movs	r1, #4
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 fb3e 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a504:	b1a8      	cbz	r0, 800a532 <ucdr_deserialize_endian_uint32_t+0xce>
 800a506:	2e01      	cmp	r6, #1
 800a508:	68a3      	ldr	r3, [r4, #8]
 800a50a:	d017      	beq.n	800a53c <ucdr_deserialize_endian_uint32_t+0xd8>
 800a50c:	78db      	ldrb	r3, [r3, #3]
 800a50e:	702b      	strb	r3, [r5, #0]
 800a510:	68a3      	ldr	r3, [r4, #8]
 800a512:	789b      	ldrb	r3, [r3, #2]
 800a514:	706b      	strb	r3, [r5, #1]
 800a516:	68a3      	ldr	r3, [r4, #8]
 800a518:	785b      	ldrb	r3, [r3, #1]
 800a51a:	70ab      	strb	r3, [r5, #2]
 800a51c:	68a3      	ldr	r3, [r4, #8]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	70eb      	strb	r3, [r5, #3]
 800a522:	68a2      	ldr	r2, [r4, #8]
 800a524:	6923      	ldr	r3, [r4, #16]
 800a526:	3204      	adds	r2, #4
 800a528:	3304      	adds	r3, #4
 800a52a:	2104      	movs	r1, #4
 800a52c:	60a2      	str	r2, [r4, #8]
 800a52e:	6123      	str	r3, [r4, #16]
 800a530:	7561      	strb	r1, [r4, #21]
 800a532:	7da0      	ldrb	r0, [r4, #22]
 800a534:	f080 0001 	eor.w	r0, r0, #1
 800a538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	e7ef      	b.n	800a522 <ucdr_deserialize_endian_uint32_t+0xbe>
 800a542:	68a2      	ldr	r2, [r4, #8]
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	7da0      	ldrb	r0, [r4, #22]
 800a548:	f884 9015 	strb.w	r9, [r4, #21]
 800a54c:	eba2 0208 	sub.w	r2, r2, r8
 800a550:	eba3 0308 	sub.w	r3, r3, r8
 800a554:	60a2      	str	r2, [r4, #8]
 800a556:	6123      	str	r3, [r4, #16]
 800a558:	f080 0001 	eor.w	r0, r0, #1
 800a55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a560:	68a3      	ldr	r3, [r4, #8]
 800a562:	789b      	ldrb	r3, [r3, #2]
 800a564:	706b      	strb	r3, [r5, #1]
 800a566:	1cab      	adds	r3, r5, #2
 800a568:	68a2      	ldr	r2, [r4, #8]
 800a56a:	7852      	ldrb	r2, [r2, #1]
 800a56c:	f803 2b01 	strb.w	r2, [r3], #1
 800a570:	68a2      	ldr	r2, [r4, #8]
 800a572:	7812      	ldrb	r2, [r2, #0]
 800a574:	701a      	strb	r2, [r3, #0]
 800a576:	e7b2      	b.n	800a4de <ucdr_deserialize_endian_uint32_t+0x7a>
 800a578:	4639      	mov	r1, r7
 800a57a:	4642      	mov	r2, r8
 800a57c:	4628      	mov	r0, r5
 800a57e:	f007 f9d4 	bl	801192a <memcpy>
 800a582:	68a1      	ldr	r1, [r4, #8]
 800a584:	4652      	mov	r2, sl
 800a586:	eb05 0008 	add.w	r0, r5, r8
 800a58a:	f007 f9ce 	bl	801192a <memcpy>
 800a58e:	e7a6      	b.n	800a4de <ucdr_deserialize_endian_uint32_t+0x7a>

0800a590 <ucdr_serialize_uint64_t>:
 800a590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	2108      	movs	r1, #8
 800a596:	b082      	sub	sp, #8
 800a598:	4604      	mov	r4, r0
 800a59a:	e9cd 2300 	strd	r2, r3, [sp]
 800a59e:	f000 fb43 	bl	800ac28 <ucdr_buffer_alignment>
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	7d67      	ldrb	r7, [r4, #21]
 800a5a8:	f000 fb82 	bl	800acb0 <ucdr_advance_buffer>
 800a5ac:	2108      	movs	r1, #8
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f000 fada 	bl	800ab68 <ucdr_check_buffer_available_for>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d14e      	bne.n	800a656 <ucdr_serialize_uint64_t+0xc6>
 800a5b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a5bc:	42ab      	cmp	r3, r5
 800a5be:	d945      	bls.n	800a64c <ucdr_serialize_uint64_t+0xbc>
 800a5c0:	1b5e      	subs	r6, r3, r5
 800a5c2:	60a3      	str	r3, [r4, #8]
 800a5c4:	6923      	ldr	r3, [r4, #16]
 800a5c6:	f1c6 0808 	rsb	r8, r6, #8
 800a5ca:	4433      	add	r3, r6
 800a5cc:	6123      	str	r3, [r4, #16]
 800a5ce:	4641      	mov	r1, r8
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 fad5 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d074      	beq.n	800a6c4 <ucdr_serialize_uint64_t+0x134>
 800a5da:	7d23      	ldrb	r3, [r4, #20]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	f000 809b 	beq.w	800a718 <ucdr_serialize_uint64_t+0x188>
 800a5e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a5e6:	702b      	strb	r3, [r5, #0]
 800a5e8:	2e00      	cmp	r6, #0
 800a5ea:	d078      	beq.n	800a6de <ucdr_serialize_uint64_t+0x14e>
 800a5ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a5f0:	706b      	strb	r3, [r5, #1]
 800a5f2:	2e01      	cmp	r6, #1
 800a5f4:	d077      	beq.n	800a6e6 <ucdr_serialize_uint64_t+0x156>
 800a5f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a5fa:	70ab      	strb	r3, [r5, #2]
 800a5fc:	2e02      	cmp	r6, #2
 800a5fe:	d076      	beq.n	800a6ee <ucdr_serialize_uint64_t+0x15e>
 800a600:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a604:	70eb      	strb	r3, [r5, #3]
 800a606:	2e03      	cmp	r6, #3
 800a608:	d075      	beq.n	800a6f6 <ucdr_serialize_uint64_t+0x166>
 800a60a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a60e:	712b      	strb	r3, [r5, #4]
 800a610:	2e04      	cmp	r6, #4
 800a612:	d074      	beq.n	800a6fe <ucdr_serialize_uint64_t+0x16e>
 800a614:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800a618:	716b      	strb	r3, [r5, #5]
 800a61a:	2e05      	cmp	r6, #5
 800a61c:	d073      	beq.n	800a706 <ucdr_serialize_uint64_t+0x176>
 800a61e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800a622:	71ab      	strb	r3, [r5, #6]
 800a624:	2e06      	cmp	r6, #6
 800a626:	d072      	beq.n	800a70e <ucdr_serialize_uint64_t+0x17e>
 800a628:	f89d 3000 	ldrb.w	r3, [sp]
 800a62c:	71eb      	strb	r3, [r5, #7]
 800a62e:	6923      	ldr	r3, [r4, #16]
 800a630:	68a2      	ldr	r2, [r4, #8]
 800a632:	7da0      	ldrb	r0, [r4, #22]
 800a634:	3308      	adds	r3, #8
 800a636:	1b9e      	subs	r6, r3, r6
 800a638:	4442      	add	r2, r8
 800a63a:	2308      	movs	r3, #8
 800a63c:	f080 0001 	eor.w	r0, r0, #1
 800a640:	60a2      	str	r2, [r4, #8]
 800a642:	6126      	str	r6, [r4, #16]
 800a644:	7563      	strb	r3, [r4, #21]
 800a646:	b002      	add	sp, #8
 800a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a64c:	2108      	movs	r1, #8
 800a64e:	4620      	mov	r0, r4
 800a650:	f000 fa96 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a654:	b350      	cbz	r0, 800a6ac <ucdr_serialize_uint64_t+0x11c>
 800a656:	7d23      	ldrb	r3, [r4, #20]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d02d      	beq.n	800a6b8 <ucdr_serialize_uint64_t+0x128>
 800a65c:	68a3      	ldr	r3, [r4, #8]
 800a65e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a662:	701a      	strb	r2, [r3, #0]
 800a664:	68a3      	ldr	r3, [r4, #8]
 800a666:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a66a:	705a      	strb	r2, [r3, #1]
 800a66c:	68a3      	ldr	r3, [r4, #8]
 800a66e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a672:	709a      	strb	r2, [r3, #2]
 800a674:	68a3      	ldr	r3, [r4, #8]
 800a676:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a67a:	70da      	strb	r2, [r3, #3]
 800a67c:	68a3      	ldr	r3, [r4, #8]
 800a67e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a682:	711a      	strb	r2, [r3, #4]
 800a684:	68a3      	ldr	r3, [r4, #8]
 800a686:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a68a:	715a      	strb	r2, [r3, #5]
 800a68c:	68a3      	ldr	r3, [r4, #8]
 800a68e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a692:	719a      	strb	r2, [r3, #6]
 800a694:	68a3      	ldr	r3, [r4, #8]
 800a696:	f89d 2000 	ldrb.w	r2, [sp]
 800a69a:	71da      	strb	r2, [r3, #7]
 800a69c:	68a2      	ldr	r2, [r4, #8]
 800a69e:	6923      	ldr	r3, [r4, #16]
 800a6a0:	3208      	adds	r2, #8
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	2108      	movs	r1, #8
 800a6a6:	60a2      	str	r2, [r4, #8]
 800a6a8:	6123      	str	r3, [r4, #16]
 800a6aa:	7561      	strb	r1, [r4, #21]
 800a6ac:	7da0      	ldrb	r0, [r4, #22]
 800a6ae:	f080 0001 	eor.w	r0, r0, #1
 800a6b2:	b002      	add	sp, #8
 800a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b8:	466b      	mov	r3, sp
 800a6ba:	cb03      	ldmia	r3!, {r0, r1}
 800a6bc:	68a3      	ldr	r3, [r4, #8]
 800a6be:	6018      	str	r0, [r3, #0]
 800a6c0:	6059      	str	r1, [r3, #4]
 800a6c2:	e7eb      	b.n	800a69c <ucdr_serialize_uint64_t+0x10c>
 800a6c4:	68a2      	ldr	r2, [r4, #8]
 800a6c6:	6923      	ldr	r3, [r4, #16]
 800a6c8:	7da0      	ldrb	r0, [r4, #22]
 800a6ca:	7567      	strb	r7, [r4, #21]
 800a6cc:	1b92      	subs	r2, r2, r6
 800a6ce:	1b9b      	subs	r3, r3, r6
 800a6d0:	f080 0001 	eor.w	r0, r0, #1
 800a6d4:	60a2      	str	r2, [r4, #8]
 800a6d6:	6123      	str	r3, [r4, #16]
 800a6d8:	b002      	add	sp, #8
 800a6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6de:	68a3      	ldr	r3, [r4, #8]
 800a6e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a6e4:	701a      	strb	r2, [r3, #0]
 800a6e6:	68a3      	ldr	r3, [r4, #8]
 800a6e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a6ec:	701a      	strb	r2, [r3, #0]
 800a6ee:	68a3      	ldr	r3, [r4, #8]
 800a6f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a6f4:	701a      	strb	r2, [r3, #0]
 800a6f6:	68a3      	ldr	r3, [r4, #8]
 800a6f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	68a3      	ldr	r3, [r4, #8]
 800a700:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	68a3      	ldr	r3, [r4, #8]
 800a708:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a70c:	701a      	strb	r2, [r3, #0]
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	f89d 2000 	ldrb.w	r2, [sp]
 800a714:	701a      	strb	r2, [r3, #0]
 800a716:	e78a      	b.n	800a62e <ucdr_serialize_uint64_t+0x9e>
 800a718:	4628      	mov	r0, r5
 800a71a:	466d      	mov	r5, sp
 800a71c:	4629      	mov	r1, r5
 800a71e:	4632      	mov	r2, r6
 800a720:	f007 f903 	bl	801192a <memcpy>
 800a724:	68a0      	ldr	r0, [r4, #8]
 800a726:	4642      	mov	r2, r8
 800a728:	19a9      	adds	r1, r5, r6
 800a72a:	f007 f8fe 	bl	801192a <memcpy>
 800a72e:	e77e      	b.n	800a62e <ucdr_serialize_uint64_t+0x9e>

0800a730 <ucdr_serialize_int16_t>:
 800a730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a734:	b082      	sub	sp, #8
 800a736:	460b      	mov	r3, r1
 800a738:	2102      	movs	r1, #2
 800a73a:	4604      	mov	r4, r0
 800a73c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a740:	f000 fa72 	bl	800ac28 <ucdr_buffer_alignment>
 800a744:	4601      	mov	r1, r0
 800a746:	4620      	mov	r0, r4
 800a748:	7d67      	ldrb	r7, [r4, #21]
 800a74a:	f000 fab1 	bl	800acb0 <ucdr_advance_buffer>
 800a74e:	2102      	movs	r1, #2
 800a750:	4620      	mov	r0, r4
 800a752:	f000 fa09 	bl	800ab68 <ucdr_check_buffer_available_for>
 800a756:	bb78      	cbnz	r0, 800a7b8 <ucdr_serialize_int16_t+0x88>
 800a758:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a75c:	42ab      	cmp	r3, r5
 800a75e:	d926      	bls.n	800a7ae <ucdr_serialize_int16_t+0x7e>
 800a760:	1b5e      	subs	r6, r3, r5
 800a762:	60a3      	str	r3, [r4, #8]
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	f1c6 0802 	rsb	r8, r6, #2
 800a76a:	4433      	add	r3, r6
 800a76c:	6123      	str	r3, [r4, #16]
 800a76e:	4641      	mov	r1, r8
 800a770:	4620      	mov	r0, r4
 800a772:	f000 fa05 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a776:	2800      	cmp	r0, #0
 800a778:	d03b      	beq.n	800a7f2 <ucdr_serialize_int16_t+0xc2>
 800a77a:	7d23      	ldrb	r3, [r4, #20]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d04a      	beq.n	800a816 <ucdr_serialize_int16_t+0xe6>
 800a780:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a784:	702b      	strb	r3, [r5, #0]
 800a786:	2e00      	cmp	r6, #0
 800a788:	d040      	beq.n	800a80c <ucdr_serialize_int16_t+0xdc>
 800a78a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a78e:	706b      	strb	r3, [r5, #1]
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	68a2      	ldr	r2, [r4, #8]
 800a794:	7da0      	ldrb	r0, [r4, #22]
 800a796:	3302      	adds	r3, #2
 800a798:	1b9e      	subs	r6, r3, r6
 800a79a:	4442      	add	r2, r8
 800a79c:	2302      	movs	r3, #2
 800a79e:	f080 0001 	eor.w	r0, r0, #1
 800a7a2:	60a2      	str	r2, [r4, #8]
 800a7a4:	6126      	str	r6, [r4, #16]
 800a7a6:	7563      	strb	r3, [r4, #21]
 800a7a8:	b002      	add	sp, #8
 800a7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ae:	2102      	movs	r1, #2
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 f9e5 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a7b6:	b190      	cbz	r0, 800a7de <ucdr_serialize_int16_t+0xae>
 800a7b8:	7d23      	ldrb	r3, [r4, #20]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	68a3      	ldr	r3, [r4, #8]
 800a7be:	d014      	beq.n	800a7ea <ucdr_serialize_int16_t+0xba>
 800a7c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a7c4:	701a      	strb	r2, [r3, #0]
 800a7c6:	68a3      	ldr	r3, [r4, #8]
 800a7c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a7cc:	705a      	strb	r2, [r3, #1]
 800a7ce:	68a2      	ldr	r2, [r4, #8]
 800a7d0:	6923      	ldr	r3, [r4, #16]
 800a7d2:	3202      	adds	r2, #2
 800a7d4:	3302      	adds	r3, #2
 800a7d6:	2102      	movs	r1, #2
 800a7d8:	60a2      	str	r2, [r4, #8]
 800a7da:	6123      	str	r3, [r4, #16]
 800a7dc:	7561      	strb	r1, [r4, #21]
 800a7de:	7da0      	ldrb	r0, [r4, #22]
 800a7e0:	f080 0001 	eor.w	r0, r0, #1
 800a7e4:	b002      	add	sp, #8
 800a7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a7ee:	801a      	strh	r2, [r3, #0]
 800a7f0:	e7ed      	b.n	800a7ce <ucdr_serialize_int16_t+0x9e>
 800a7f2:	68a2      	ldr	r2, [r4, #8]
 800a7f4:	6923      	ldr	r3, [r4, #16]
 800a7f6:	7da0      	ldrb	r0, [r4, #22]
 800a7f8:	7567      	strb	r7, [r4, #21]
 800a7fa:	1b92      	subs	r2, r2, r6
 800a7fc:	1b9b      	subs	r3, r3, r6
 800a7fe:	f080 0001 	eor.w	r0, r0, #1
 800a802:	60a2      	str	r2, [r4, #8]
 800a804:	6123      	str	r3, [r4, #16]
 800a806:	b002      	add	sp, #8
 800a808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a80c:	68a3      	ldr	r3, [r4, #8]
 800a80e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a812:	701a      	strb	r2, [r3, #0]
 800a814:	e7bc      	b.n	800a790 <ucdr_serialize_int16_t+0x60>
 800a816:	4628      	mov	r0, r5
 800a818:	f10d 0506 	add.w	r5, sp, #6
 800a81c:	4629      	mov	r1, r5
 800a81e:	4632      	mov	r2, r6
 800a820:	f007 f883 	bl	801192a <memcpy>
 800a824:	68a0      	ldr	r0, [r4, #8]
 800a826:	4642      	mov	r2, r8
 800a828:	19a9      	adds	r1, r5, r6
 800a82a:	f007 f87e 	bl	801192a <memcpy>
 800a82e:	e7af      	b.n	800a790 <ucdr_serialize_int16_t+0x60>

0800a830 <ucdr_deserialize_int16_t>:
 800a830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a834:	460d      	mov	r5, r1
 800a836:	2102      	movs	r1, #2
 800a838:	4604      	mov	r4, r0
 800a83a:	f000 f9f5 	bl	800ac28 <ucdr_buffer_alignment>
 800a83e:	4601      	mov	r1, r0
 800a840:	4620      	mov	r0, r4
 800a842:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a846:	f000 fa33 	bl	800acb0 <ucdr_advance_buffer>
 800a84a:	2102      	movs	r1, #2
 800a84c:	4620      	mov	r0, r4
 800a84e:	f000 f98b 	bl	800ab68 <ucdr_check_buffer_available_for>
 800a852:	bb60      	cbnz	r0, 800a8ae <ucdr_deserialize_int16_t+0x7e>
 800a854:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a858:	42be      	cmp	r6, r7
 800a85a:	d923      	bls.n	800a8a4 <ucdr_deserialize_int16_t+0x74>
 800a85c:	6923      	ldr	r3, [r4, #16]
 800a85e:	60a6      	str	r6, [r4, #8]
 800a860:	1bf6      	subs	r6, r6, r7
 800a862:	4433      	add	r3, r6
 800a864:	f1c6 0902 	rsb	r9, r6, #2
 800a868:	6123      	str	r3, [r4, #16]
 800a86a:	4649      	mov	r1, r9
 800a86c:	4620      	mov	r0, r4
 800a86e:	f000 f987 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a872:	2800      	cmp	r0, #0
 800a874:	d034      	beq.n	800a8e0 <ucdr_deserialize_int16_t+0xb0>
 800a876:	7d23      	ldrb	r3, [r4, #20]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d042      	beq.n	800a902 <ucdr_deserialize_int16_t+0xd2>
 800a87c:	787b      	ldrb	r3, [r7, #1]
 800a87e:	702b      	strb	r3, [r5, #0]
 800a880:	2e00      	cmp	r6, #0
 800a882:	d03a      	beq.n	800a8fa <ucdr_deserialize_int16_t+0xca>
 800a884:	783b      	ldrb	r3, [r7, #0]
 800a886:	706b      	strb	r3, [r5, #1]
 800a888:	6923      	ldr	r3, [r4, #16]
 800a88a:	68a2      	ldr	r2, [r4, #8]
 800a88c:	7da0      	ldrb	r0, [r4, #22]
 800a88e:	2102      	movs	r1, #2
 800a890:	3302      	adds	r3, #2
 800a892:	444a      	add	r2, r9
 800a894:	1b9b      	subs	r3, r3, r6
 800a896:	7561      	strb	r1, [r4, #21]
 800a898:	60a2      	str	r2, [r4, #8]
 800a89a:	6123      	str	r3, [r4, #16]
 800a89c:	f080 0001 	eor.w	r0, r0, #1
 800a8a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8a4:	2102      	movs	r1, #2
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f000 f96a 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a8ac:	b180      	cbz	r0, 800a8d0 <ucdr_deserialize_int16_t+0xa0>
 800a8ae:	7d23      	ldrb	r3, [r4, #20]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	68a3      	ldr	r3, [r4, #8]
 800a8b4:	d011      	beq.n	800a8da <ucdr_deserialize_int16_t+0xaa>
 800a8b6:	785b      	ldrb	r3, [r3, #1]
 800a8b8:	702b      	strb	r3, [r5, #0]
 800a8ba:	68a3      	ldr	r3, [r4, #8]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	706b      	strb	r3, [r5, #1]
 800a8c0:	68a2      	ldr	r2, [r4, #8]
 800a8c2:	6923      	ldr	r3, [r4, #16]
 800a8c4:	3202      	adds	r2, #2
 800a8c6:	3302      	adds	r3, #2
 800a8c8:	2102      	movs	r1, #2
 800a8ca:	60a2      	str	r2, [r4, #8]
 800a8cc:	6123      	str	r3, [r4, #16]
 800a8ce:	7561      	strb	r1, [r4, #21]
 800a8d0:	7da0      	ldrb	r0, [r4, #22]
 800a8d2:	f080 0001 	eor.w	r0, r0, #1
 800a8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	802b      	strh	r3, [r5, #0]
 800a8de:	e7ef      	b.n	800a8c0 <ucdr_deserialize_int16_t+0x90>
 800a8e0:	68a2      	ldr	r2, [r4, #8]
 800a8e2:	6923      	ldr	r3, [r4, #16]
 800a8e4:	7da0      	ldrb	r0, [r4, #22]
 800a8e6:	f884 8015 	strb.w	r8, [r4, #21]
 800a8ea:	1b92      	subs	r2, r2, r6
 800a8ec:	1b9b      	subs	r3, r3, r6
 800a8ee:	60a2      	str	r2, [r4, #8]
 800a8f0:	6123      	str	r3, [r4, #16]
 800a8f2:	f080 0001 	eor.w	r0, r0, #1
 800a8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8fa:	68a3      	ldr	r3, [r4, #8]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	706b      	strb	r3, [r5, #1]
 800a900:	e7c2      	b.n	800a888 <ucdr_deserialize_int16_t+0x58>
 800a902:	4639      	mov	r1, r7
 800a904:	4632      	mov	r2, r6
 800a906:	4628      	mov	r0, r5
 800a908:	f007 f80f 	bl	801192a <memcpy>
 800a90c:	68a1      	ldr	r1, [r4, #8]
 800a90e:	464a      	mov	r2, r9
 800a910:	19a8      	adds	r0, r5, r6
 800a912:	f007 f80a 	bl	801192a <memcpy>
 800a916:	e7b7      	b.n	800a888 <ucdr_deserialize_int16_t+0x58>

0800a918 <ucdr_serialize_int32_t>:
 800a918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	4604      	mov	r4, r0
 800a920:	9101      	str	r1, [sp, #4]
 800a922:	2104      	movs	r1, #4
 800a924:	f000 f980 	bl	800ac28 <ucdr_buffer_alignment>
 800a928:	4601      	mov	r1, r0
 800a92a:	4620      	mov	r0, r4
 800a92c:	7d67      	ldrb	r7, [r4, #21]
 800a92e:	f000 f9bf 	bl	800acb0 <ucdr_advance_buffer>
 800a932:	2104      	movs	r1, #4
 800a934:	4620      	mov	r0, r4
 800a936:	f000 f917 	bl	800ab68 <ucdr_check_buffer_available_for>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d139      	bne.n	800a9b2 <ucdr_serialize_int32_t+0x9a>
 800a93e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a942:	42ab      	cmp	r3, r5
 800a944:	d930      	bls.n	800a9a8 <ucdr_serialize_int32_t+0x90>
 800a946:	1b5e      	subs	r6, r3, r5
 800a948:	60a3      	str	r3, [r4, #8]
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	f1c6 0804 	rsb	r8, r6, #4
 800a950:	4433      	add	r3, r6
 800a952:	6123      	str	r3, [r4, #16]
 800a954:	4641      	mov	r1, r8
 800a956:	4620      	mov	r0, r4
 800a958:	f000 f912 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d04c      	beq.n	800a9fa <ucdr_serialize_int32_t+0xe2>
 800a960:	7d23      	ldrb	r3, [r4, #20]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d063      	beq.n	800aa2e <ucdr_serialize_int32_t+0x116>
 800a966:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a96a:	702b      	strb	r3, [r5, #0]
 800a96c:	2e00      	cmp	r6, #0
 800a96e:	d051      	beq.n	800aa14 <ucdr_serialize_int32_t+0xfc>
 800a970:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a974:	706b      	strb	r3, [r5, #1]
 800a976:	2e01      	cmp	r6, #1
 800a978:	d050      	beq.n	800aa1c <ucdr_serialize_int32_t+0x104>
 800a97a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a97e:	70ab      	strb	r3, [r5, #2]
 800a980:	2e02      	cmp	r6, #2
 800a982:	d04f      	beq.n	800aa24 <ucdr_serialize_int32_t+0x10c>
 800a984:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a988:	70eb      	strb	r3, [r5, #3]
 800a98a:	6923      	ldr	r3, [r4, #16]
 800a98c:	68a2      	ldr	r2, [r4, #8]
 800a98e:	7da0      	ldrb	r0, [r4, #22]
 800a990:	3304      	adds	r3, #4
 800a992:	1b9e      	subs	r6, r3, r6
 800a994:	4442      	add	r2, r8
 800a996:	2304      	movs	r3, #4
 800a998:	f080 0001 	eor.w	r0, r0, #1
 800a99c:	60a2      	str	r2, [r4, #8]
 800a99e:	6126      	str	r6, [r4, #16]
 800a9a0:	7563      	strb	r3, [r4, #21]
 800a9a2:	b002      	add	sp, #8
 800a9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a8:	2104      	movs	r1, #4
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 f8e8 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800a9b0:	b1d0      	cbz	r0, 800a9e8 <ucdr_serialize_int32_t+0xd0>
 800a9b2:	7d23      	ldrb	r3, [r4, #20]
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	68a3      	ldr	r3, [r4, #8]
 800a9b8:	d01c      	beq.n	800a9f4 <ucdr_serialize_int32_t+0xdc>
 800a9ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a9be:	701a      	strb	r2, [r3, #0]
 800a9c0:	68a3      	ldr	r3, [r4, #8]
 800a9c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9c6:	705a      	strb	r2, [r3, #1]
 800a9c8:	68a3      	ldr	r3, [r4, #8]
 800a9ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a9ce:	709a      	strb	r2, [r3, #2]
 800a9d0:	68a3      	ldr	r3, [r4, #8]
 800a9d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a9d6:	70da      	strb	r2, [r3, #3]
 800a9d8:	68a2      	ldr	r2, [r4, #8]
 800a9da:	6923      	ldr	r3, [r4, #16]
 800a9dc:	3204      	adds	r2, #4
 800a9de:	3304      	adds	r3, #4
 800a9e0:	2104      	movs	r1, #4
 800a9e2:	60a2      	str	r2, [r4, #8]
 800a9e4:	6123      	str	r3, [r4, #16]
 800a9e6:	7561      	strb	r1, [r4, #21]
 800a9e8:	7da0      	ldrb	r0, [r4, #22]
 800a9ea:	f080 0001 	eor.w	r0, r0, #1
 800a9ee:	b002      	add	sp, #8
 800a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f4:	9a01      	ldr	r2, [sp, #4]
 800a9f6:	601a      	str	r2, [r3, #0]
 800a9f8:	e7ee      	b.n	800a9d8 <ucdr_serialize_int32_t+0xc0>
 800a9fa:	68a2      	ldr	r2, [r4, #8]
 800a9fc:	6923      	ldr	r3, [r4, #16]
 800a9fe:	7da0      	ldrb	r0, [r4, #22]
 800aa00:	7567      	strb	r7, [r4, #21]
 800aa02:	1b92      	subs	r2, r2, r6
 800aa04:	1b9b      	subs	r3, r3, r6
 800aa06:	f080 0001 	eor.w	r0, r0, #1
 800aa0a:	60a2      	str	r2, [r4, #8]
 800aa0c:	6123      	str	r3, [r4, #16]
 800aa0e:	b002      	add	sp, #8
 800aa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa14:	68a3      	ldr	r3, [r4, #8]
 800aa16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa1a:	701a      	strb	r2, [r3, #0]
 800aa1c:	68a3      	ldr	r3, [r4, #8]
 800aa1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aa22:	701a      	strb	r2, [r3, #0]
 800aa24:	68a3      	ldr	r3, [r4, #8]
 800aa26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aa2a:	701a      	strb	r2, [r3, #0]
 800aa2c:	e7ad      	b.n	800a98a <ucdr_serialize_int32_t+0x72>
 800aa2e:	4628      	mov	r0, r5
 800aa30:	ad01      	add	r5, sp, #4
 800aa32:	4629      	mov	r1, r5
 800aa34:	4632      	mov	r2, r6
 800aa36:	f006 ff78 	bl	801192a <memcpy>
 800aa3a:	68a0      	ldr	r0, [r4, #8]
 800aa3c:	4642      	mov	r2, r8
 800aa3e:	19a9      	adds	r1, r5, r6
 800aa40:	f006 ff73 	bl	801192a <memcpy>
 800aa44:	e7a1      	b.n	800a98a <ucdr_serialize_int32_t+0x72>
 800aa46:	bf00      	nop

0800aa48 <ucdr_deserialize_int32_t>:
 800aa48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa4c:	460d      	mov	r5, r1
 800aa4e:	2104      	movs	r1, #4
 800aa50:	4604      	mov	r4, r0
 800aa52:	f000 f8e9 	bl	800ac28 <ucdr_buffer_alignment>
 800aa56:	4601      	mov	r1, r0
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aa5e:	f000 f927 	bl	800acb0 <ucdr_advance_buffer>
 800aa62:	2104      	movs	r1, #4
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 f87f 	bl	800ab68 <ucdr_check_buffer_available_for>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d138      	bne.n	800aae0 <ucdr_deserialize_int32_t+0x98>
 800aa6e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800aa72:	42b7      	cmp	r7, r6
 800aa74:	d92f      	bls.n	800aad6 <ucdr_deserialize_int32_t+0x8e>
 800aa76:	6923      	ldr	r3, [r4, #16]
 800aa78:	60a7      	str	r7, [r4, #8]
 800aa7a:	1bbf      	subs	r7, r7, r6
 800aa7c:	443b      	add	r3, r7
 800aa7e:	f1c7 0904 	rsb	r9, r7, #4
 800aa82:	6123      	str	r3, [r4, #16]
 800aa84:	4649      	mov	r1, r9
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 f87a 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d046      	beq.n	800ab1e <ucdr_deserialize_int32_t+0xd6>
 800aa90:	7d23      	ldrb	r3, [r4, #20]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d05c      	beq.n	800ab50 <ucdr_deserialize_int32_t+0x108>
 800aa96:	78f3      	ldrb	r3, [r6, #3]
 800aa98:	702b      	strb	r3, [r5, #0]
 800aa9a:	2f00      	cmp	r7, #0
 800aa9c:	d04c      	beq.n	800ab38 <ucdr_deserialize_int32_t+0xf0>
 800aa9e:	78b3      	ldrb	r3, [r6, #2]
 800aaa0:	706b      	strb	r3, [r5, #1]
 800aaa2:	2f01      	cmp	r7, #1
 800aaa4:	f105 0302 	add.w	r3, r5, #2
 800aaa8:	d04a      	beq.n	800ab40 <ucdr_deserialize_int32_t+0xf8>
 800aaaa:	7873      	ldrb	r3, [r6, #1]
 800aaac:	70ab      	strb	r3, [r5, #2]
 800aaae:	2f02      	cmp	r7, #2
 800aab0:	f105 0303 	add.w	r3, r5, #3
 800aab4:	d048      	beq.n	800ab48 <ucdr_deserialize_int32_t+0x100>
 800aab6:	7833      	ldrb	r3, [r6, #0]
 800aab8:	70eb      	strb	r3, [r5, #3]
 800aaba:	6923      	ldr	r3, [r4, #16]
 800aabc:	68a2      	ldr	r2, [r4, #8]
 800aabe:	7da0      	ldrb	r0, [r4, #22]
 800aac0:	2104      	movs	r1, #4
 800aac2:	3304      	adds	r3, #4
 800aac4:	444a      	add	r2, r9
 800aac6:	1bdb      	subs	r3, r3, r7
 800aac8:	7561      	strb	r1, [r4, #21]
 800aaca:	60a2      	str	r2, [r4, #8]
 800aacc:	6123      	str	r3, [r4, #16]
 800aace:	f080 0001 	eor.w	r0, r0, #1
 800aad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aad6:	2104      	movs	r1, #4
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 f851 	bl	800ab80 <ucdr_check_final_buffer_behavior>
 800aade:	b1b0      	cbz	r0, 800ab0e <ucdr_deserialize_int32_t+0xc6>
 800aae0:	7d23      	ldrb	r3, [r4, #20]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	68a3      	ldr	r3, [r4, #8]
 800aae6:	d017      	beq.n	800ab18 <ucdr_deserialize_int32_t+0xd0>
 800aae8:	78db      	ldrb	r3, [r3, #3]
 800aaea:	702b      	strb	r3, [r5, #0]
 800aaec:	68a3      	ldr	r3, [r4, #8]
 800aaee:	789b      	ldrb	r3, [r3, #2]
 800aaf0:	706b      	strb	r3, [r5, #1]
 800aaf2:	68a3      	ldr	r3, [r4, #8]
 800aaf4:	785b      	ldrb	r3, [r3, #1]
 800aaf6:	70ab      	strb	r3, [r5, #2]
 800aaf8:	68a3      	ldr	r3, [r4, #8]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	70eb      	strb	r3, [r5, #3]
 800aafe:	68a2      	ldr	r2, [r4, #8]
 800ab00:	6923      	ldr	r3, [r4, #16]
 800ab02:	3204      	adds	r2, #4
 800ab04:	3304      	adds	r3, #4
 800ab06:	2104      	movs	r1, #4
 800ab08:	60a2      	str	r2, [r4, #8]
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	7561      	strb	r1, [r4, #21]
 800ab0e:	7da0      	ldrb	r0, [r4, #22]
 800ab10:	f080 0001 	eor.w	r0, r0, #1
 800ab14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	602b      	str	r3, [r5, #0]
 800ab1c:	e7ef      	b.n	800aafe <ucdr_deserialize_int32_t+0xb6>
 800ab1e:	68a2      	ldr	r2, [r4, #8]
 800ab20:	6923      	ldr	r3, [r4, #16]
 800ab22:	7da0      	ldrb	r0, [r4, #22]
 800ab24:	f884 8015 	strb.w	r8, [r4, #21]
 800ab28:	1bd2      	subs	r2, r2, r7
 800ab2a:	1bdb      	subs	r3, r3, r7
 800ab2c:	60a2      	str	r2, [r4, #8]
 800ab2e:	6123      	str	r3, [r4, #16]
 800ab30:	f080 0001 	eor.w	r0, r0, #1
 800ab34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab38:	68a3      	ldr	r3, [r4, #8]
 800ab3a:	789b      	ldrb	r3, [r3, #2]
 800ab3c:	706b      	strb	r3, [r5, #1]
 800ab3e:	1cab      	adds	r3, r5, #2
 800ab40:	68a2      	ldr	r2, [r4, #8]
 800ab42:	7852      	ldrb	r2, [r2, #1]
 800ab44:	f803 2b01 	strb.w	r2, [r3], #1
 800ab48:	68a2      	ldr	r2, [r4, #8]
 800ab4a:	7812      	ldrb	r2, [r2, #0]
 800ab4c:	701a      	strb	r2, [r3, #0]
 800ab4e:	e7b4      	b.n	800aaba <ucdr_deserialize_int32_t+0x72>
 800ab50:	4631      	mov	r1, r6
 800ab52:	463a      	mov	r2, r7
 800ab54:	4628      	mov	r0, r5
 800ab56:	f006 fee8 	bl	801192a <memcpy>
 800ab5a:	68a1      	ldr	r1, [r4, #8]
 800ab5c:	464a      	mov	r2, r9
 800ab5e:	19e8      	adds	r0, r5, r7
 800ab60:	f006 fee3 	bl	801192a <memcpy>
 800ab64:	e7a9      	b.n	800aaba <ucdr_deserialize_int32_t+0x72>
 800ab66:	bf00      	nop

0800ab68 <ucdr_check_buffer_available_for>:
 800ab68:	7d83      	ldrb	r3, [r0, #22]
 800ab6a:	b93b      	cbnz	r3, 800ab7c <ucdr_check_buffer_available_for+0x14>
 800ab6c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ab70:	4419      	add	r1, r3
 800ab72:	4288      	cmp	r0, r1
 800ab74:	bf34      	ite	cc
 800ab76:	2000      	movcc	r0, #0
 800ab78:	2001      	movcs	r0, #1
 800ab7a:	4770      	bx	lr
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	4770      	bx	lr

0800ab80 <ucdr_check_final_buffer_behavior>:
 800ab80:	7d83      	ldrb	r3, [r0, #22]
 800ab82:	b943      	cbnz	r3, 800ab96 <ucdr_check_final_buffer_behavior+0x16>
 800ab84:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ab88:	4291      	cmp	r1, r2
 800ab8a:	b510      	push	{r4, lr}
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	d205      	bcs.n	800ab9c <ucdr_check_final_buffer_behavior+0x1c>
 800ab90:	2301      	movs	r3, #1
 800ab92:	4618      	mov	r0, r3
 800ab94:	bd10      	pop	{r4, pc}
 800ab96:	2300      	movs	r3, #0
 800ab98:	4618      	mov	r0, r3
 800ab9a:	4770      	bx	lr
 800ab9c:	6982      	ldr	r2, [r0, #24]
 800ab9e:	b13a      	cbz	r2, 800abb0 <ucdr_check_final_buffer_behavior+0x30>
 800aba0:	69c1      	ldr	r1, [r0, #28]
 800aba2:	4790      	blx	r2
 800aba4:	f080 0301 	eor.w	r3, r0, #1
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	75a0      	strb	r0, [r4, #22]
 800abac:	4618      	mov	r0, r3
 800abae:	bd10      	pop	{r4, pc}
 800abb0:	2001      	movs	r0, #1
 800abb2:	75a0      	strb	r0, [r4, #22]
 800abb4:	e7fa      	b.n	800abac <ucdr_check_final_buffer_behavior+0x2c>
 800abb6:	bf00      	nop

0800abb8 <ucdr_set_on_full_buffer_callback>:
 800abb8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop

0800abc0 <ucdr_init_buffer_origin_offset_endian>:
 800abc0:	b410      	push	{r4}
 800abc2:	9c01      	ldr	r4, [sp, #4]
 800abc4:	6001      	str	r1, [r0, #0]
 800abc6:	440a      	add	r2, r1
 800abc8:	6042      	str	r2, [r0, #4]
 800abca:	190a      	adds	r2, r1, r4
 800abcc:	441c      	add	r4, r3
 800abce:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800abd2:	6082      	str	r2, [r0, #8]
 800abd4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800abd8:	7503      	strb	r3, [r0, #20]
 800abda:	2200      	movs	r2, #0
 800abdc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800abe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abe4:	7542      	strb	r2, [r0, #21]
 800abe6:	7582      	strb	r2, [r0, #22]
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop

0800abec <ucdr_init_buffer_origin_offset>:
 800abec:	b510      	push	{r4, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	9c04      	ldr	r4, [sp, #16]
 800abf2:	9400      	str	r4, [sp, #0]
 800abf4:	2401      	movs	r4, #1
 800abf6:	9401      	str	r4, [sp, #4]
 800abf8:	f7ff ffe2 	bl	800abc0 <ucdr_init_buffer_origin_offset_endian>
 800abfc:	b002      	add	sp, #8
 800abfe:	bd10      	pop	{r4, pc}

0800ac00 <ucdr_init_buffer_origin>:
 800ac00:	b510      	push	{r4, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	2400      	movs	r4, #0
 800ac06:	9400      	str	r4, [sp, #0]
 800ac08:	f7ff fff0 	bl	800abec <ucdr_init_buffer_origin_offset>
 800ac0c:	b002      	add	sp, #8
 800ac0e:	bd10      	pop	{r4, pc}

0800ac10 <ucdr_init_buffer>:
 800ac10:	2300      	movs	r3, #0
 800ac12:	f7ff bff5 	b.w	800ac00 <ucdr_init_buffer_origin>
 800ac16:	bf00      	nop

0800ac18 <ucdr_alignment>:
 800ac18:	fbb0 f3f1 	udiv	r3, r0, r1
 800ac1c:	fb03 0011 	mls	r0, r3, r1, r0
 800ac20:	1a08      	subs	r0, r1, r0
 800ac22:	3901      	subs	r1, #1
 800ac24:	4008      	ands	r0, r1
 800ac26:	4770      	bx	lr

0800ac28 <ucdr_buffer_alignment>:
 800ac28:	7d43      	ldrb	r3, [r0, #21]
 800ac2a:	428b      	cmp	r3, r1
 800ac2c:	d208      	bcs.n	800ac40 <ucdr_buffer_alignment+0x18>
 800ac2e:	6900      	ldr	r0, [r0, #16]
 800ac30:	fbb0 f3f1 	udiv	r3, r0, r1
 800ac34:	fb01 0013 	mls	r0, r1, r3, r0
 800ac38:	1a08      	subs	r0, r1, r0
 800ac3a:	3901      	subs	r1, #1
 800ac3c:	4008      	ands	r0, r1
 800ac3e:	4770      	bx	lr
 800ac40:	2000      	movs	r0, #0
 800ac42:	4770      	bx	lr

0800ac44 <ucdr_align_to>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4604      	mov	r4, r0
 800ac48:	460d      	mov	r5, r1
 800ac4a:	f7ff ffed 	bl	800ac28 <ucdr_buffer_alignment>
 800ac4e:	68a3      	ldr	r3, [r4, #8]
 800ac50:	6921      	ldr	r1, [r4, #16]
 800ac52:	7565      	strb	r5, [r4, #21]
 800ac54:	181a      	adds	r2, r3, r0
 800ac56:	6863      	ldr	r3, [r4, #4]
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	4408      	add	r0, r1
 800ac5c:	bf28      	it	cs
 800ac5e:	4613      	movcs	r3, r2
 800ac60:	6120      	str	r0, [r4, #16]
 800ac62:	60a3      	str	r3, [r4, #8]
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop

0800ac68 <ucdr_buffer_length>:
 800ac68:	6882      	ldr	r2, [r0, #8]
 800ac6a:	6800      	ldr	r0, [r0, #0]
 800ac6c:	1a10      	subs	r0, r2, r0
 800ac6e:	4770      	bx	lr

0800ac70 <ucdr_buffer_remaining>:
 800ac70:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ac74:	1a10      	subs	r0, r2, r0
 800ac76:	4770      	bx	lr

0800ac78 <ucdr_check_final_buffer_behavior_array>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	7d83      	ldrb	r3, [r0, #22]
 800ac7c:	b963      	cbnz	r3, 800ac98 <ucdr_check_final_buffer_behavior_array+0x20>
 800ac7e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	4604      	mov	r4, r0
 800ac86:	460d      	mov	r5, r1
 800ac88:	d308      	bcc.n	800ac9c <ucdr_check_final_buffer_behavior_array+0x24>
 800ac8a:	b139      	cbz	r1, 800ac9c <ucdr_check_final_buffer_behavior_array+0x24>
 800ac8c:	6983      	ldr	r3, [r0, #24]
 800ac8e:	b163      	cbz	r3, 800acaa <ucdr_check_final_buffer_behavior_array+0x32>
 800ac90:	69c1      	ldr	r1, [r0, #28]
 800ac92:	4798      	blx	r3
 800ac94:	75a0      	strb	r0, [r4, #22]
 800ac96:	b108      	cbz	r0, 800ac9c <ucdr_check_final_buffer_behavior_array+0x24>
 800ac98:	2000      	movs	r0, #0
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f7ff ffe7 	bl	800ac70 <ucdr_buffer_remaining>
 800aca2:	42a8      	cmp	r0, r5
 800aca4:	bf28      	it	cs
 800aca6:	4628      	movcs	r0, r5
 800aca8:	bd38      	pop	{r3, r4, r5, pc}
 800acaa:	2301      	movs	r3, #1
 800acac:	7583      	strb	r3, [r0, #22]
 800acae:	e7f3      	b.n	800ac98 <ucdr_check_final_buffer_behavior_array+0x20>

0800acb0 <ucdr_advance_buffer>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4604      	mov	r4, r0
 800acb4:	460d      	mov	r5, r1
 800acb6:	f7ff ff57 	bl	800ab68 <ucdr_check_buffer_available_for>
 800acba:	b178      	cbz	r0, 800acdc <ucdr_advance_buffer+0x2c>
 800acbc:	6923      	ldr	r3, [r4, #16]
 800acbe:	68a2      	ldr	r2, [r4, #8]
 800acc0:	442b      	add	r3, r5
 800acc2:	6123      	str	r3, [r4, #16]
 800acc4:	2301      	movs	r3, #1
 800acc6:	442a      	add	r2, r5
 800acc8:	7563      	strb	r3, [r4, #21]
 800acca:	60a2      	str	r2, [r4, #8]
 800accc:	bd38      	pop	{r3, r4, r5, pc}
 800acce:	68a2      	ldr	r2, [r4, #8]
 800acd0:	6923      	ldr	r3, [r4, #16]
 800acd2:	4402      	add	r2, r0
 800acd4:	4403      	add	r3, r0
 800acd6:	1a2d      	subs	r5, r5, r0
 800acd8:	60a2      	str	r2, [r4, #8]
 800acda:	6123      	str	r3, [r4, #16]
 800acdc:	4629      	mov	r1, r5
 800acde:	2201      	movs	r2, #1
 800ace0:	4620      	mov	r0, r4
 800ace2:	f7ff ffc9 	bl	800ac78 <ucdr_check_final_buffer_behavior_array>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d1f1      	bne.n	800acce <ucdr_advance_buffer+0x1e>
 800acea:	2301      	movs	r3, #1
 800acec:	7563      	strb	r3, [r4, #21]
 800acee:	bd38      	pop	{r3, r4, r5, pc}

0800acf0 <uxr_buffer_delete_entity>:
 800acf0:	b510      	push	{r4, lr}
 800acf2:	2300      	movs	r3, #0
 800acf4:	b08e      	sub	sp, #56	@ 0x38
 800acf6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800acfa:	2303      	movs	r3, #3
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	2204      	movs	r2, #4
 800ad00:	ab06      	add	r3, sp, #24
 800ad02:	4604      	mov	r4, r0
 800ad04:	9103      	str	r1, [sp, #12]
 800ad06:	f001 fa27 	bl	800c158 <uxr_prepare_stream_to_write_submessage>
 800ad0a:	b918      	cbnz	r0, 800ad14 <uxr_buffer_delete_entity+0x24>
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	4620      	mov	r0, r4
 800ad10:	b00e      	add	sp, #56	@ 0x38
 800ad12:	bd10      	pop	{r4, pc}
 800ad14:	9902      	ldr	r1, [sp, #8]
 800ad16:	aa05      	add	r2, sp, #20
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f001 fb53 	bl	800c3c4 <uxr_init_base_object_request>
 800ad1e:	a905      	add	r1, sp, #20
 800ad20:	4604      	mov	r4, r0
 800ad22:	a806      	add	r0, sp, #24
 800ad24:	f003 f94a 	bl	800dfbc <uxr_serialize_DELETE_Payload>
 800ad28:	4620      	mov	r0, r4
 800ad2a:	b00e      	add	sp, #56	@ 0x38
 800ad2c:	bd10      	pop	{r4, pc}
 800ad2e:	bf00      	nop

0800ad30 <uxr_common_create_entity>:
 800ad30:	b510      	push	{r4, lr}
 800ad32:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ad36:	b08c      	sub	sp, #48	@ 0x30
 800ad38:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ad3c:	f1bc 0f01 	cmp.w	ip, #1
 800ad40:	bf0c      	ite	eq
 800ad42:	f003 0201 	andeq.w	r2, r3, #1
 800ad46:	2200      	movne	r2, #0
 800ad48:	330e      	adds	r3, #14
 800ad4a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800ad4e:	9101      	str	r1, [sp, #4]
 800ad50:	441a      	add	r2, r3
 800ad52:	2301      	movs	r3, #1
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	9903      	ldr	r1, [sp, #12]
 800ad58:	ab04      	add	r3, sp, #16
 800ad5a:	b292      	uxth	r2, r2
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	f001 f9fb 	bl	800c158 <uxr_prepare_stream_to_write_submessage>
 800ad62:	b918      	cbnz	r0, 800ad6c <uxr_common_create_entity+0x3c>
 800ad64:	4604      	mov	r4, r0
 800ad66:	4620      	mov	r0, r4
 800ad68:	b00c      	add	sp, #48	@ 0x30
 800ad6a:	bd10      	pop	{r4, pc}
 800ad6c:	9902      	ldr	r1, [sp, #8]
 800ad6e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ad70:	4620      	mov	r0, r4
 800ad72:	f001 fb27 	bl	800c3c4 <uxr_init_base_object_request>
 800ad76:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad78:	4604      	mov	r4, r0
 800ad7a:	a804      	add	r0, sp, #16
 800ad7c:	f003 f87a 	bl	800de74 <uxr_serialize_CREATE_Payload>
 800ad80:	4620      	mov	r0, r4
 800ad82:	b00c      	add	sp, #48	@ 0x30
 800ad84:	bd10      	pop	{r4, pc}
 800ad86:	bf00      	nop

0800ad88 <uxr_buffer_create_participant_bin>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800ad8e:	ac11      	add	r4, sp, #68	@ 0x44
 800ad90:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800ad94:	2303      	movs	r3, #3
 800ad96:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ad9a:	7223      	strb	r3, [r4, #8]
 800ad9c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800ad9e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800ada2:	2201      	movs	r2, #1
 800ada4:	2100      	movs	r1, #0
 800ada6:	4605      	mov	r5, r0
 800ada8:	7122      	strb	r2, [r4, #4]
 800adaa:	f88d 1014 	strb.w	r1, [sp, #20]
 800adae:	b1cb      	cbz	r3, 800ade4 <uxr_buffer_create_participant_bin+0x5c>
 800adb0:	f88d 201c 	strb.w	r2, [sp, #28]
 800adb4:	9308      	str	r3, [sp, #32]
 800adb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adba:	a915      	add	r1, sp, #84	@ 0x54
 800adbc:	a809      	add	r0, sp, #36	@ 0x24
 800adbe:	f7ff ff27 	bl	800ac10 <ucdr_init_buffer>
 800adc2:	a905      	add	r1, sp, #20
 800adc4:	a809      	add	r0, sp, #36	@ 0x24
 800adc6:	f002 fd23 	bl	800d810 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800adca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adcc:	9600      	str	r6, [sp, #0]
 800adce:	9401      	str	r4, [sp, #4]
 800add0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800add4:	60e3      	str	r3, [r4, #12]
 800add6:	4628      	mov	r0, r5
 800add8:	b29b      	uxth	r3, r3
 800adda:	f7ff ffa9 	bl	800ad30 <uxr_common_create_entity>
 800adde:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800ade2:	bd70      	pop	{r4, r5, r6, pc}
 800ade4:	f88d 301c 	strb.w	r3, [sp, #28]
 800ade8:	e7e5      	b.n	800adb6 <uxr_buffer_create_participant_bin+0x2e>
 800adea:	bf00      	nop

0800adec <uxr_buffer_create_topic_bin>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800adf2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800adf6:	9105      	str	r1, [sp, #20]
 800adf8:	4605      	mov	r5, r0
 800adfa:	a997      	add	r1, sp, #604	@ 0x25c
 800adfc:	4618      	mov	r0, r3
 800adfe:	2302      	movs	r3, #2
 800ae00:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800ae04:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800ae08:	f000 f9b0 	bl	800b16c <uxr_object_id_to_raw>
 800ae0c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800ae0e:	9306      	str	r3, [sp, #24]
 800ae10:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800ae12:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae14:	2303      	movs	r3, #3
 800ae16:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae20:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800ae24:	a917      	add	r1, sp, #92	@ 0x5c
 800ae26:	2300      	movs	r3, #0
 800ae28:	a80b      	add	r0, sp, #44	@ 0x2c
 800ae2a:	f88d 301c 	strb.w	r3, [sp, #28]
 800ae2e:	f7ff feef 	bl	800ac10 <ucdr_init_buffer>
 800ae32:	a906      	add	r1, sp, #24
 800ae34:	a80b      	add	r0, sp, #44	@ 0x2c
 800ae36:	f002 fd0d 	bl	800d854 <uxr_serialize_OBJK_Topic_Binary>
 800ae3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae3c:	9316      	str	r3, [sp, #88]	@ 0x58
 800ae3e:	ac13      	add	r4, sp, #76	@ 0x4c
 800ae40:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ae44:	9600      	str	r6, [sp, #0]
 800ae46:	9401      	str	r4, [sp, #4]
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	f7ff ff70 	bl	800ad30 <uxr_common_create_entity>
 800ae50:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800ae54:	bd70      	pop	{r4, r5, r6, pc}
 800ae56:	bf00      	nop

0800ae58 <uxr_buffer_create_publisher_bin>:
 800ae58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae5a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800ae5e:	4605      	mov	r5, r0
 800ae60:	9105      	str	r1, [sp, #20]
 800ae62:	4618      	mov	r0, r3
 800ae64:	2603      	movs	r6, #3
 800ae66:	a992      	add	r1, sp, #584	@ 0x248
 800ae68:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ae6c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800ae70:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800ae74:	f000 f97a 	bl	800b16c <uxr_object_id_to_raw>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae7e:	a912      	add	r1, sp, #72	@ 0x48
 800ae80:	a806      	add	r0, sp, #24
 800ae82:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800ae86:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800ae8a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800ae8e:	f7ff febf 	bl	800ac10 <ucdr_init_buffer>
 800ae92:	a993      	add	r1, sp, #588	@ 0x24c
 800ae94:	a806      	add	r0, sp, #24
 800ae96:	f002 fd91 	bl	800d9bc <uxr_serialize_OBJK_Publisher_Binary>
 800ae9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae9c:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae9e:	ac0e      	add	r4, sp, #56	@ 0x38
 800aea0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800aea4:	9700      	str	r7, [sp, #0]
 800aea6:	9401      	str	r4, [sp, #4]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f7ff ff40 	bl	800ad30 <uxr_common_create_entity>
 800aeb0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800aeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeb6:	bf00      	nop

0800aeb8 <uxr_buffer_create_datawriter_bin>:
 800aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aebc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800aec0:	ac1d      	add	r4, sp, #116	@ 0x74
 800aec2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800aec6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800aeca:	9105      	str	r1, [sp, #20]
 800aecc:	4606      	mov	r6, r0
 800aece:	a9a1      	add	r1, sp, #644	@ 0x284
 800aed0:	4618      	mov	r0, r3
 800aed2:	2305      	movs	r3, #5
 800aed4:	7123      	strb	r3, [r4, #4]
 800aed6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800aeda:	2703      	movs	r7, #3
 800aedc:	f000 f946 	bl	800b16c <uxr_object_id_to_raw>
 800aee0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800aee2:	7227      	strb	r7, [r4, #8]
 800aee4:	a90e      	add	r1, sp, #56	@ 0x38
 800aee6:	f000 f941 	bl	800b16c <uxr_object_id_to_raw>
 800aeea:	2300      	movs	r3, #0
 800aeec:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800aef0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800aef4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800aef8:	3d00      	subs	r5, #0
 800aefa:	bf18      	it	ne
 800aefc:	2501      	movne	r5, #1
 800aefe:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800af02:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800af06:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800af0a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800af0e:	2301      	movs	r3, #1
 800af10:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800af14:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800af18:	bb8a      	cbnz	r2, 800af7e <uxr_buffer_create_datawriter_bin+0xc6>
 800af1a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800af1e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800af22:	f04f 0c13 	mov.w	ip, #19
 800af26:	250b      	movs	r5, #11
 800af28:	2221      	movs	r2, #33	@ 0x21
 800af2a:	2111      	movs	r1, #17
 800af2c:	2009      	movs	r0, #9
 800af2e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800af32:	b923      	cbnz	r3, 800af3e <uxr_buffer_create_datawriter_bin+0x86>
 800af34:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800af38:	4672      	mov	r2, lr
 800af3a:	4661      	mov	r1, ip
 800af3c:	4628      	mov	r0, r5
 800af3e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800af42:	2b01      	cmp	r3, #1
 800af44:	d025      	beq.n	800af92 <uxr_buffer_create_datawriter_bin+0xda>
 800af46:	2b03      	cmp	r3, #3
 800af48:	d029      	beq.n	800af9e <uxr_buffer_create_datawriter_bin+0xe6>
 800af4a:	b32b      	cbz	r3, 800af98 <uxr_buffer_create_datawriter_bin+0xe0>
 800af4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af50:	a921      	add	r1, sp, #132	@ 0x84
 800af52:	a806      	add	r0, sp, #24
 800af54:	f7ff fe5c 	bl	800ac10 <ucdr_init_buffer>
 800af58:	a90e      	add	r1, sp, #56	@ 0x38
 800af5a:	a806      	add	r0, sp, #24
 800af5c:	f002 fda4 	bl	800daa8 <uxr_serialize_OBJK_DataWriter_Binary>
 800af60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af62:	f8cd 8000 	str.w	r8, [sp]
 800af66:	9401      	str	r4, [sp, #4]
 800af68:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800af6c:	60e3      	str	r3, [r4, #12]
 800af6e:	4630      	mov	r0, r6
 800af70:	b29b      	uxth	r3, r3
 800af72:	f7ff fedd 	bl	800ad30 <uxr_common_create_entity>
 800af76:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800af7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af7e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800af82:	f04f 0c12 	mov.w	ip, #18
 800af86:	250a      	movs	r5, #10
 800af88:	2220      	movs	r2, #32
 800af8a:	2110      	movs	r1, #16
 800af8c:	2008      	movs	r0, #8
 800af8e:	2702      	movs	r7, #2
 800af90:	e7cd      	b.n	800af2e <uxr_buffer_create_datawriter_bin+0x76>
 800af92:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800af96:	e7d9      	b.n	800af4c <uxr_buffer_create_datawriter_bin+0x94>
 800af98:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800af9c:	e7d6      	b.n	800af4c <uxr_buffer_create_datawriter_bin+0x94>
 800af9e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800afa2:	e7d3      	b.n	800af4c <uxr_buffer_create_datawriter_bin+0x94>

0800afa4 <get_custom_error>:
 800afa4:	4b01      	ldr	r3, [pc, #4]	@ (800afac <get_custom_error+0x8>)
 800afa6:	7818      	ldrb	r0, [r3, #0]
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	2000aa24 	.word	0x2000aa24

0800afb0 <recv_custom_msg>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	4693      	mov	fp, r2
 800afb6:	b089      	sub	sp, #36	@ 0x24
 800afb8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800afbc:	9305      	str	r3, [sp, #20]
 800afbe:	468a      	mov	sl, r1
 800afc0:	2100      	movs	r1, #0
 800afc2:	4604      	mov	r4, r0
 800afc4:	f88d 101e 	strb.w	r1, [sp, #30]
 800afc8:	b322      	cbz	r2, 800b014 <recv_custom_msg+0x64>
 800afca:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800afce:	f10d 081f 	add.w	r8, sp, #31
 800afd2:	af05      	add	r7, sp, #20
 800afd4:	f10d 061e 	add.w	r6, sp, #30
 800afd8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800afdc:	e002      	b.n	800afe4 <recv_custom_msg+0x34>
 800afde:	9b05      	ldr	r3, [sp, #20]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	dd0f      	ble.n	800b004 <recv_custom_msg+0x54>
 800afe4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800afe8:	4623      	mov	r3, r4
 800afea:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800afee:	e9cd 5600 	strd	r5, r6, [sp]
 800aff2:	4622      	mov	r2, r4
 800aff4:	4648      	mov	r0, r9
 800aff6:	f001 fc13 	bl	800c820 <uxr_read_framed_msg>
 800affa:	2800      	cmp	r0, #0
 800affc:	d0ef      	beq.n	800afde <recv_custom_msg+0x2e>
 800affe:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800b002:	b1b3      	cbz	r3, 800b032 <recv_custom_msg+0x82>
 800b004:	4b0f      	ldr	r3, [pc, #60]	@ (800b044 <recv_custom_msg+0x94>)
 800b006:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800b00a:	701a      	strb	r2, [r3, #0]
 800b00c:	2000      	movs	r0, #0
 800b00e:	b009      	add	sp, #36	@ 0x24
 800b010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b014:	f10d 021f 	add.w	r2, sp, #31
 800b018:	9200      	str	r2, [sp, #0]
 800b01a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800b01e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b022:	4601      	mov	r1, r0
 800b024:	47a8      	blx	r5
 800b026:	2800      	cmp	r0, #0
 800b028:	d0ec      	beq.n	800b004 <recv_custom_msg+0x54>
 800b02a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1e8      	bne.n	800b004 <recv_custom_msg+0x54>
 800b032:	f8cb 0000 	str.w	r0, [fp]
 800b036:	2001      	movs	r0, #1
 800b038:	f8ca 4000 	str.w	r4, [sl]
 800b03c:	b009      	add	sp, #36	@ 0x24
 800b03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b042:	bf00      	nop
 800b044:	2000aa24 	.word	0x2000aa24

0800b048 <send_custom_msg>:
 800b048:	b530      	push	{r4, r5, lr}
 800b04a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800b04e:	b087      	sub	sp, #28
 800b050:	4615      	mov	r5, r2
 800b052:	b974      	cbnz	r4, 800b072 <send_custom_msg+0x2a>
 800b054:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800b058:	f10d 0317 	add.w	r3, sp, #23
 800b05c:	47a0      	blx	r4
 800b05e:	b108      	cbz	r0, 800b064 <send_custom_msg+0x1c>
 800b060:	42a8      	cmp	r0, r5
 800b062:	d015      	beq.n	800b090 <send_custom_msg+0x48>
 800b064:	4b0c      	ldr	r3, [pc, #48]	@ (800b098 <send_custom_msg+0x50>)
 800b066:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800b06a:	701a      	strb	r2, [r3, #0]
 800b06c:	2000      	movs	r0, #0
 800b06e:	b007      	add	sp, #28
 800b070:	bd30      	pop	{r4, r5, pc}
 800b072:	460b      	mov	r3, r1
 800b074:	2200      	movs	r2, #0
 800b076:	f10d 0117 	add.w	r1, sp, #23
 800b07a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b07e:	4602      	mov	r2, r0
 800b080:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800b084:	9500      	str	r5, [sp, #0]
 800b086:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800b08a:	f001 f9d1 	bl	800c430 <uxr_write_framed_msg>
 800b08e:	e7e6      	b.n	800b05e <send_custom_msg+0x16>
 800b090:	2001      	movs	r0, #1
 800b092:	b007      	add	sp, #28
 800b094:	bd30      	pop	{r4, r5, pc}
 800b096:	bf00      	nop
 800b098:	2000aa24 	.word	0x2000aa24

0800b09c <uxr_set_custom_transport_callbacks>:
 800b09c:	b410      	push	{r4}
 800b09e:	9c01      	ldr	r4, [sp, #4]
 800b0a0:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800b0a4:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800b0a8:	9b02      	ldr	r3, [sp, #8]
 800b0aa:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800b0ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800b0b6:	4770      	bx	lr

0800b0b8 <uxr_init_custom_transport>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800b0be:	b303      	cbz	r3, 800b102 <uxr_init_custom_transport+0x4a>
 800b0c0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	b1e2      	cbz	r2, 800b102 <uxr_init_custom_transport+0x4a>
 800b0c8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800b0cc:	b1ca      	cbz	r2, 800b102 <uxr_init_custom_transport+0x4a>
 800b0ce:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800b0d2:	b1b2      	cbz	r2, 800b102 <uxr_init_custom_transport+0x4a>
 800b0d4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800b0d8:	4798      	blx	r3
 800b0da:	4605      	mov	r5, r0
 800b0dc:	b188      	cbz	r0, 800b102 <uxr_init_custom_transport+0x4a>
 800b0de:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800b0e2:	b98b      	cbnz	r3, 800b108 <uxr_init_custom_transport+0x50>
 800b0e4:	490b      	ldr	r1, [pc, #44]	@ (800b114 <uxr_init_custom_transport+0x5c>)
 800b0e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b118 <uxr_init_custom_transport+0x60>)
 800b0e8:	4a0c      	ldr	r2, [pc, #48]	@ (800b11c <uxr_init_custom_transport+0x64>)
 800b0ea:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800b0ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0f2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800b0f6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800b0fa:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800b0fe:	4628      	mov	r0, r5
 800b100:	bd38      	pop	{r3, r4, r5, pc}
 800b102:	2500      	movs	r5, #0
 800b104:	4628      	mov	r0, r5
 800b106:	bd38      	pop	{r3, r4, r5, pc}
 800b108:	2100      	movs	r1, #0
 800b10a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800b10e:	f001 f989 	bl	800c424 <uxr_init_framing_io>
 800b112:	e7e7      	b.n	800b0e4 <uxr_init_custom_transport+0x2c>
 800b114:	0800b049 	.word	0x0800b049
 800b118:	0800afb1 	.word	0x0800afb1
 800b11c:	0800afa5 	.word	0x0800afa5

0800b120 <uxr_close_custom_transport>:
 800b120:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800b124:	4718      	bx	r3
 800b126:	bf00      	nop

0800b128 <uxr_object_id>:
 800b128:	b082      	sub	sp, #8
 800b12a:	2300      	movs	r3, #0
 800b12c:	f88d 1006 	strb.w	r1, [sp, #6]
 800b130:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b134:	f360 030f 	bfi	r3, r0, #0, #16
 800b138:	f362 431f 	bfi	r3, r2, #16, #16
 800b13c:	4618      	mov	r0, r3
 800b13e:	b002      	add	sp, #8
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop

0800b144 <uxr_object_id_from_raw>:
 800b144:	7843      	ldrb	r3, [r0, #1]
 800b146:	7801      	ldrb	r1, [r0, #0]
 800b148:	b082      	sub	sp, #8
 800b14a:	f003 020f 	and.w	r2, r3, #15
 800b14e:	f88d 2006 	strb.w	r2, [sp, #6]
 800b152:	091b      	lsrs	r3, r3, #4
 800b154:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b158:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b15c:	2000      	movs	r0, #0
 800b15e:	f363 000f 	bfi	r0, r3, #0, #16
 800b162:	f362 401f 	bfi	r0, r2, #16, #16
 800b166:	b002      	add	sp, #8
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop

0800b16c <uxr_object_id_to_raw>:
 800b16c:	4602      	mov	r2, r0
 800b16e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800b172:	b082      	sub	sp, #8
 800b174:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800b178:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800b17c:	f881 c000 	strb.w	ip, [r1]
 800b180:	7048      	strb	r0, [r1, #1]
 800b182:	b002      	add	sp, #8
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop

0800b188 <uxr_buffer_cancel_data>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	b094      	sub	sp, #80	@ 0x50
 800b18c:	2300      	movs	r3, #0
 800b18e:	9202      	str	r2, [sp, #8]
 800b190:	9205      	str	r2, [sp, #20]
 800b192:	9301      	str	r3, [sp, #4]
 800b194:	2201      	movs	r2, #1
 800b196:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b19a:	f88d 301e 	strb.w	r3, [sp, #30]
 800b19e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800b1a2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800b1a6:	2308      	movs	r3, #8
 800b1a8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	2210      	movs	r2, #16
 800b1b0:	ab0c      	add	r3, sp, #48	@ 0x30
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	9103      	str	r1, [sp, #12]
 800b1b6:	f000 ffcf 	bl	800c158 <uxr_prepare_stream_to_write_submessage>
 800b1ba:	b918      	cbnz	r0, 800b1c4 <uxr_buffer_cancel_data+0x3c>
 800b1bc:	4604      	mov	r4, r0
 800b1be:	4620      	mov	r0, r4
 800b1c0:	b014      	add	sp, #80	@ 0x50
 800b1c2:	bd10      	pop	{r4, pc}
 800b1c4:	9905      	ldr	r1, [sp, #20]
 800b1c6:	aa06      	add	r2, sp, #24
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f001 f8fb 	bl	800c3c4 <uxr_init_base_object_request>
 800b1ce:	a906      	add	r1, sp, #24
 800b1d0:	4604      	mov	r4, r0
 800b1d2:	a80c      	add	r0, sp, #48	@ 0x30
 800b1d4:	f002 ff9c 	bl	800e110 <uxr_serialize_READ_DATA_Payload>
 800b1d8:	4620      	mov	r0, r4
 800b1da:	b014      	add	sp, #80	@ 0x50
 800b1dc:	bd10      	pop	{r4, pc}
 800b1de:	bf00      	nop

0800b1e0 <read_submessage_format>:
 800b1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1e4:	b095      	sub	sp, #84	@ 0x54
 800b1e6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800b1ea:	b113      	cbz	r3, 800b1f2 <read_submessage_format+0x12>
 800b1ec:	b015      	add	sp, #84	@ 0x54
 800b1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	4615      	mov	r5, r2
 800b1f6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800b1fa:	4607      	mov	r7, r0
 800b1fc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800b1fe:	9004      	str	r0, [sp, #16]
 800b200:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800b202:	9005      	str	r0, [sp, #20]
 800b204:	1a52      	subs	r2, r2, r1
 800b206:	a80c      	add	r0, sp, #48	@ 0x30
 800b208:	4699      	mov	r9, r3
 800b20a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800b20e:	f7ff fcff 	bl	800ac10 <ucdr_init_buffer>
 800b212:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800b216:	a80c      	add	r0, sp, #48	@ 0x30
 800b218:	f7ff fcce 	bl	800abb8 <ucdr_set_on_full_buffer_callback>
 800b21c:	69e2      	ldr	r2, [r4, #28]
 800b21e:	b19a      	cbz	r2, 800b248 <read_submessage_format+0x68>
 800b220:	f1b8 0f07 	cmp.w	r8, #7
 800b224:	f882 9014 	strb.w	r9, [r2, #20]
 800b228:	d040      	beq.n	800b2ac <read_submessage_format+0xcc>
 800b22a:	f1b8 0f08 	cmp.w	r8, #8
 800b22e:	d02e      	beq.n	800b28e <read_submessage_format+0xae>
 800b230:	f1b8 0f06 	cmp.w	r8, #6
 800b234:	d011      	beq.n	800b25a <read_submessage_format+0x7a>
 800b236:	2301      	movs	r3, #1
 800b238:	7513      	strb	r3, [r2, #20]
 800b23a:	4629      	mov	r1, r5
 800b23c:	4620      	mov	r0, r4
 800b23e:	f7ff fd37 	bl	800acb0 <ucdr_advance_buffer>
 800b242:	b015      	add	sp, #84	@ 0x54
 800b244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b248:	f1b8 0f07 	cmp.w	r8, #7
 800b24c:	d02e      	beq.n	800b2ac <read_submessage_format+0xcc>
 800b24e:	f1b8 0f08 	cmp.w	r8, #8
 800b252:	d01c      	beq.n	800b28e <read_submessage_format+0xae>
 800b254:	f1b8 0f06 	cmp.w	r8, #6
 800b258:	d1ef      	bne.n	800b23a <read_submessage_format+0x5a>
 800b25a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800b25e:	f1b8 0f00 	cmp.w	r8, #0
 800b262:	d011      	beq.n	800b288 <read_submessage_format+0xa8>
 800b264:	ab0c      	add	r3, sp, #48	@ 0x30
 800b266:	e9cd 3500 	strd	r3, r5, [sp]
 800b26a:	2306      	movs	r3, #6
 800b26c:	f88d 3016 	strb.w	r3, [sp, #22]
 800b270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b274:	9302      	str	r3, [sp, #8]
 800b276:	4632      	mov	r2, r6
 800b278:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800b27c:	4638      	mov	r0, r7
 800b27e:	47c0      	blx	r8
 800b280:	2301      	movs	r3, #1
 800b282:	69e2      	ldr	r2, [r4, #28]
 800b284:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800b288:	2a00      	cmp	r2, #0
 800b28a:	d1d4      	bne.n	800b236 <read_submessage_format+0x56>
 800b28c:	e7d5      	b.n	800b23a <read_submessage_format+0x5a>
 800b28e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0f8      	beq.n	800b288 <read_submessage_format+0xa8>
 800b296:	a906      	add	r1, sp, #24
 800b298:	a80c      	add	r0, sp, #48	@ 0x30
 800b29a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800b29e:	f002 ffd7 	bl	800e250 <uxr_deserialize_SampleIdentity>
 800b2a2:	b9a0      	cbnz	r0, 800b2ce <read_submessage_format+0xee>
 800b2a4:	69e2      	ldr	r2, [r4, #28]
 800b2a6:	2a00      	cmp	r2, #0
 800b2a8:	d1c5      	bne.n	800b236 <read_submessage_format+0x56>
 800b2aa:	e7c6      	b.n	800b23a <read_submessage_format+0x5a>
 800b2ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2b0:	b13b      	cbz	r3, 800b2c2 <read_submessage_format+0xe2>
 800b2b2:	a906      	add	r1, sp, #24
 800b2b4:	a80c      	add	r0, sp, #48	@ 0x30
 800b2b6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800b2ba:	f002 fcc3 	bl	800dc44 <uxr_deserialize_BaseObjectRequest>
 800b2be:	bb60      	cbnz	r0, 800b31a <read_submessage_format+0x13a>
 800b2c0:	69e2      	ldr	r2, [r4, #28]
 800b2c2:	68a3      	ldr	r3, [r4, #8]
 800b2c4:	442b      	add	r3, r5
 800b2c6:	60a3      	str	r3, [r4, #8]
 800b2c8:	2a00      	cmp	r2, #0
 800b2ca:	d1b4      	bne.n	800b236 <read_submessage_format+0x56>
 800b2cc:	e7b5      	b.n	800b23a <read_submessage_format+0x5a>
 800b2ce:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800b2d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2d4:	1a52      	subs	r2, r2, r1
 800b2d6:	eba8 0803 	sub.w	r8, r8, r3
 800b2da:	a80c      	add	r0, sp, #48	@ 0x30
 800b2dc:	f7ff fc98 	bl	800ac10 <ucdr_init_buffer>
 800b2e0:	44a8      	add	r8, r5
 800b2e2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800b2e6:	a80c      	add	r0, sp, #48	@ 0x30
 800b2e8:	f7ff fc66 	bl	800abb8 <ucdr_set_on_full_buffer_callback>
 800b2ec:	fa1f f888 	uxth.w	r8, r8
 800b2f0:	ab0c      	add	r3, sp, #48	@ 0x30
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	f8cd 8004 	str.w	r8, [sp, #4]
 800b2f8:	2108      	movs	r1, #8
 800b2fa:	f88d 1016 	strb.w	r1, [sp, #22]
 800b2fe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800b302:	9102      	str	r1, [sp, #8]
 800b304:	ab06      	add	r3, sp, #24
 800b306:	4632      	mov	r2, r6
 800b308:	9905      	ldr	r1, [sp, #20]
 800b30a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800b30e:	4638      	mov	r0, r7
 800b310:	47b0      	blx	r6
 800b312:	2301      	movs	r3, #1
 800b314:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800b318:	e7c4      	b.n	800b2a4 <read_submessage_format+0xc4>
 800b31a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800b31e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b320:	1a52      	subs	r2, r2, r1
 800b322:	a80c      	add	r0, sp, #48	@ 0x30
 800b324:	eba8 0803 	sub.w	r8, r8, r3
 800b328:	f7ff fc72 	bl	800ac10 <ucdr_init_buffer>
 800b32c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800b330:	a80c      	add	r0, sp, #48	@ 0x30
 800b332:	f7ff fc41 	bl	800abb8 <ucdr_set_on_full_buffer_callback>
 800b336:	ab0c      	add	r3, sp, #48	@ 0x30
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800b33e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b342:	44a8      	add	r8, r5
 800b344:	fa1f f888 	uxth.w	r8, r8
 800b348:	f8cd 8004 	str.w	r8, [sp, #4]
 800b34c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800b350:	2107      	movs	r1, #7
 800b352:	f88d 1016 	strb.w	r1, [sp, #22]
 800b356:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800b35a:	9102      	str	r1, [sp, #8]
 800b35c:	4632      	mov	r2, r6
 800b35e:	b29b      	uxth	r3, r3
 800b360:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800b364:	9905      	ldr	r1, [sp, #20]
 800b366:	4638      	mov	r0, r7
 800b368:	47b0      	blx	r6
 800b36a:	2301      	movs	r3, #1
 800b36c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800b370:	e7a6      	b.n	800b2c0 <read_submessage_format+0xe0>
 800b372:	bf00      	nop

0800b374 <on_get_fragmentation_info>:
 800b374:	b500      	push	{lr}
 800b376:	b08b      	sub	sp, #44	@ 0x2c
 800b378:	4601      	mov	r1, r0
 800b37a:	2204      	movs	r2, #4
 800b37c:	a802      	add	r0, sp, #8
 800b37e:	f7ff fc47 	bl	800ac10 <ucdr_init_buffer>
 800b382:	f10d 0305 	add.w	r3, sp, #5
 800b386:	f10d 0206 	add.w	r2, sp, #6
 800b38a:	a901      	add	r1, sp, #4
 800b38c:	a802      	add	r0, sp, #8
 800b38e:	f001 fe2d 	bl	800cfec <uxr_read_submessage_header>
 800b392:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b396:	2b0d      	cmp	r3, #13
 800b398:	d003      	beq.n	800b3a2 <on_get_fragmentation_info+0x2e>
 800b39a:	2000      	movs	r0, #0
 800b39c:	b00b      	add	sp, #44	@ 0x2c
 800b39e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b3a6:	f013 0f02 	tst.w	r3, #2
 800b3aa:	bf14      	ite	ne
 800b3ac:	2002      	movne	r0, #2
 800b3ae:	2001      	moveq	r0, #1
 800b3b0:	b00b      	add	sp, #44	@ 0x2c
 800b3b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3b6:	bf00      	nop

0800b3b8 <read_submessage_get_info>:
 800b3b8:	b570      	push	{r4, r5, r6, lr}
 800b3ba:	2500      	movs	r5, #0
 800b3bc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800b3c6:	460e      	mov	r6, r1
 800b3c8:	a810      	add	r0, sp, #64	@ 0x40
 800b3ca:	4629      	mov	r1, r5
 800b3cc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800b3d0:	f006 f9e2 	bl	8011798 <memset>
 800b3d4:	a903      	add	r1, sp, #12
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f002 fddc 	bl	800df94 <uxr_deserialize_GET_INFO_Payload>
 800b3dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b3e0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f000 ffe5 	bl	800c3b4 <uxr_session_header_offset>
 800b3ea:	462b      	mov	r3, r5
 800b3ec:	9000      	str	r0, [sp, #0]
 800b3ee:	220c      	movs	r2, #12
 800b3f0:	a905      	add	r1, sp, #20
 800b3f2:	a808      	add	r0, sp, #32
 800b3f4:	f7ff fbfa 	bl	800abec <ucdr_init_buffer_origin_offset>
 800b3f8:	a910      	add	r1, sp, #64	@ 0x40
 800b3fa:	a808      	add	r0, sp, #32
 800b3fc:	f002 fe3c 	bl	800e078 <uxr_serialize_INFO_Payload>
 800b400:	9b08      	ldr	r3, [sp, #32]
 800b402:	462a      	mov	r2, r5
 800b404:	4629      	mov	r1, r5
 800b406:	4620      	mov	r0, r4
 800b408:	f000 ff7e 	bl	800c308 <uxr_stamp_session_header>
 800b40c:	a808      	add	r0, sp, #32
 800b40e:	f7ff fc2b 	bl	800ac68 <ucdr_buffer_length>
 800b412:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b414:	4602      	mov	r2, r0
 800b416:	a905      	add	r1, sp, #20
 800b418:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b41c:	47a0      	blx	r4
 800b41e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800b422:	bd70      	pop	{r4, r5, r6, pc}

0800b424 <write_submessage_acknack.isra.0>:
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	b092      	sub	sp, #72	@ 0x48
 800b428:	4605      	mov	r5, r0
 800b42a:	460e      	mov	r6, r1
 800b42c:	4614      	mov	r4, r2
 800b42e:	f000 ffc1 	bl	800c3b4 <uxr_session_header_offset>
 800b432:	a905      	add	r1, sp, #20
 800b434:	9000      	str	r0, [sp, #0]
 800b436:	2300      	movs	r3, #0
 800b438:	a80a      	add	r0, sp, #40	@ 0x28
 800b43a:	2211      	movs	r2, #17
 800b43c:	f7ff fbd6 	bl	800abec <ucdr_init_buffer_origin_offset>
 800b440:	2218      	movs	r2, #24
 800b442:	fb02 5404 	mla	r4, r2, r4, r5
 800b446:	2300      	movs	r3, #0
 800b448:	2205      	movs	r2, #5
 800b44a:	3450      	adds	r4, #80	@ 0x50
 800b44c:	210a      	movs	r1, #10
 800b44e:	a80a      	add	r0, sp, #40	@ 0x28
 800b450:	f001 fdb2 	bl	800cfb8 <uxr_buffer_submessage_header>
 800b454:	a903      	add	r1, sp, #12
 800b456:	4620      	mov	r0, r4
 800b458:	f004 feda 	bl	8010210 <uxr_compute_acknack>
 800b45c:	ba40      	rev16	r0, r0
 800b45e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800b462:	a903      	add	r1, sp, #12
 800b464:	a80a      	add	r0, sp, #40	@ 0x28
 800b466:	f88d 6010 	strb.w	r6, [sp, #16]
 800b46a:	f002 fe75 	bl	800e158 <uxr_serialize_ACKNACK_Payload>
 800b46e:	2200      	movs	r2, #0
 800b470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b472:	4611      	mov	r1, r2
 800b474:	4628      	mov	r0, r5
 800b476:	f000 ff47 	bl	800c308 <uxr_stamp_session_header>
 800b47a:	a80a      	add	r0, sp, #40	@ 0x28
 800b47c:	f7ff fbf4 	bl	800ac68 <ucdr_buffer_length>
 800b480:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b482:	4602      	mov	r2, r0
 800b484:	a905      	add	r1, sp, #20
 800b486:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b48a:	47a0      	blx	r4
 800b48c:	b012      	add	sp, #72	@ 0x48
 800b48e:	bd70      	pop	{r4, r5, r6, pc}

0800b490 <uxr_init_session>:
 800b490:	b510      	push	{r4, lr}
 800b492:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800b4c8 <uxr_init_session+0x38>
 800b496:	2300      	movs	r3, #0
 800b498:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800b49c:	4604      	mov	r4, r0
 800b49e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800b4a2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800b4a6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800b4aa:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800b4ae:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800b4b2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800b4b6:	2181      	movs	r1, #129	@ 0x81
 800b4b8:	f000 fe92 	bl	800c1e0 <uxr_init_session_info>
 800b4bc:	f104 0008 	add.w	r0, r4, #8
 800b4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4c4:	f001 bc94 	b.w	800cdf0 <uxr_init_stream_storage>
	...

0800b4d0 <uxr_set_status_callback>:
 800b4d0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop

0800b4d8 <uxr_set_topic_callback>:
 800b4d8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop

0800b4e0 <uxr_set_request_callback>:
 800b4e0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop

0800b4e8 <uxr_set_reply_callback>:
 800b4e8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop

0800b4f0 <uxr_create_output_best_effort_stream>:
 800b4f0:	b510      	push	{r4, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	e9cd 2100 	strd	r2, r1, [sp]
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	f000 ff5b 	bl	800c3b4 <uxr_session_header_offset>
 800b4fe:	e9dd 2100 	ldrd	r2, r1, [sp]
 800b502:	4603      	mov	r3, r0
 800b504:	f104 0008 	add.w	r0, r4, #8
 800b508:	b004      	add	sp, #16
 800b50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b50e:	f001 bcb9 	b.w	800ce84 <uxr_add_output_best_effort_buffer>
 800b512:	bf00      	nop

0800b514 <uxr_create_output_reliable_stream>:
 800b514:	b510      	push	{r4, lr}
 800b516:	b088      	sub	sp, #32
 800b518:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800b51c:	4604      	mov	r4, r0
 800b51e:	9303      	str	r3, [sp, #12]
 800b520:	f000 ff48 	bl	800c3b4 <uxr_session_header_offset>
 800b524:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b528:	9000      	str	r0, [sp, #0]
 800b52a:	9905      	ldr	r1, [sp, #20]
 800b52c:	f104 0008 	add.w	r0, r4, #8
 800b530:	f001 fcbc 	bl	800ceac <uxr_add_output_reliable_buffer>
 800b534:	2200      	movs	r2, #0
 800b536:	b2c3      	uxtb	r3, r0
 800b538:	f363 0207 	bfi	r2, r3, #0, #8
 800b53c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b540:	f363 220f 	bfi	r2, r3, #8, #8
 800b544:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b548:	f363 4217 	bfi	r2, r3, #16, #8
 800b54c:	0e03      	lsrs	r3, r0, #24
 800b54e:	f363 621f 	bfi	r2, r3, #24, #8
 800b552:	4610      	mov	r0, r2
 800b554:	b008      	add	sp, #32
 800b556:	bd10      	pop	{r4, pc}

0800b558 <uxr_create_input_best_effort_stream>:
 800b558:	b082      	sub	sp, #8
 800b55a:	3008      	adds	r0, #8
 800b55c:	b002      	add	sp, #8
 800b55e:	f001 bcbf 	b.w	800cee0 <uxr_add_input_best_effort_buffer>
 800b562:	bf00      	nop

0800b564 <uxr_create_input_reliable_stream>:
 800b564:	b510      	push	{r4, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	4c0b      	ldr	r4, [pc, #44]	@ (800b598 <uxr_create_input_reliable_stream+0x34>)
 800b56a:	9400      	str	r4, [sp, #0]
 800b56c:	3008      	adds	r0, #8
 800b56e:	f001 fccd 	bl	800cf0c <uxr_add_input_reliable_buffer>
 800b572:	2200      	movs	r2, #0
 800b574:	b2c3      	uxtb	r3, r0
 800b576:	f363 0207 	bfi	r2, r3, #0, #8
 800b57a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b57e:	f363 220f 	bfi	r2, r3, #8, #8
 800b582:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b586:	f363 4217 	bfi	r2, r3, #16, #8
 800b58a:	0e03      	lsrs	r3, r0, #24
 800b58c:	f363 621f 	bfi	r2, r3, #24, #8
 800b590:	4610      	mov	r0, r2
 800b592:	b004      	add	sp, #16
 800b594:	bd10      	pop	{r4, pc}
 800b596:	bf00      	nop
 800b598:	0800b375 	.word	0x0800b375

0800b59c <uxr_epoch_nanos>:
 800b59c:	b510      	push	{r4, lr}
 800b59e:	4604      	mov	r4, r0
 800b5a0:	f001 fd6a 	bl	800d078 <uxr_nanos>
 800b5a4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800b5a8:	1ac0      	subs	r0, r0, r3
 800b5aa:	eb61 0102 	sbc.w	r1, r1, r2
 800b5ae:	bd10      	pop	{r4, pc}

0800b5b0 <uxr_flash_output_streams>:
 800b5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b4:	7e03      	ldrb	r3, [r0, #24]
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d035      	beq.n	800b62a <uxr_flash_output_streams+0x7a>
 800b5be:	f04f 0900 	mov.w	r9, #0
 800b5c2:	4648      	mov	r0, r9
 800b5c4:	f10d 0802 	add.w	r8, sp, #2
 800b5c8:	af03      	add	r7, sp, #12
 800b5ca:	ae02      	add	r6, sp, #8
 800b5cc:	e006      	b.n	800b5dc <uxr_flash_output_streams+0x2c>
 800b5ce:	7e23      	ldrb	r3, [r4, #24]
 800b5d0:	f109 0901 	add.w	r9, r9, #1
 800b5d4:	fa5f f089 	uxtb.w	r0, r9
 800b5d8:	4283      	cmp	r3, r0
 800b5da:	d926      	bls.n	800b62a <uxr_flash_output_streams+0x7a>
 800b5dc:	2201      	movs	r2, #1
 800b5de:	4611      	mov	r1, r2
 800b5e0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800b5e4:	f001 fbb0 	bl	800cd48 <uxr_stream_id>
 800b5e8:	3508      	adds	r5, #8
 800b5ea:	4684      	mov	ip, r0
 800b5ec:	4643      	mov	r3, r8
 800b5ee:	463a      	mov	r2, r7
 800b5f0:	4631      	mov	r1, r6
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f8cd c004 	str.w	ip, [sp, #4]
 800b5f8:	f004 fe90 	bl	801031c <uxr_prepare_best_effort_buffer_to_send>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d0e6      	beq.n	800b5ce <uxr_flash_output_streams+0x1e>
 800b600:	9b02      	ldr	r3, [sp, #8]
 800b602:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b606:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b60a:	4620      	mov	r0, r4
 800b60c:	f000 fe7c 	bl	800c308 <uxr_stamp_session_header>
 800b610:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b612:	9a03      	ldr	r2, [sp, #12]
 800b614:	685d      	ldr	r5, [r3, #4]
 800b616:	6818      	ldr	r0, [r3, #0]
 800b618:	9902      	ldr	r1, [sp, #8]
 800b61a:	47a8      	blx	r5
 800b61c:	f109 0901 	add.w	r9, r9, #1
 800b620:	7e23      	ldrb	r3, [r4, #24]
 800b622:	fa5f f089 	uxtb.w	r0, r9
 800b626:	4283      	cmp	r3, r0
 800b628:	d8d8      	bhi.n	800b5dc <uxr_flash_output_streams+0x2c>
 800b62a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800b62e:	b38b      	cbz	r3, 800b694 <uxr_flash_output_streams+0xe4>
 800b630:	f04f 0900 	mov.w	r9, #0
 800b634:	f10d 0802 	add.w	r8, sp, #2
 800b638:	af03      	add	r7, sp, #12
 800b63a:	ae02      	add	r6, sp, #8
 800b63c:	4648      	mov	r0, r9
 800b63e:	2201      	movs	r2, #1
 800b640:	2102      	movs	r1, #2
 800b642:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800b646:	f001 fb7f 	bl	800cd48 <uxr_stream_id>
 800b64a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800b64e:	3520      	adds	r5, #32
 800b650:	9001      	str	r0, [sp, #4]
 800b652:	e00d      	b.n	800b670 <uxr_flash_output_streams+0xc0>
 800b654:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b658:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b65c:	9b02      	ldr	r3, [sp, #8]
 800b65e:	f000 fe53 	bl	800c308 <uxr_stamp_session_header>
 800b662:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b664:	9a03      	ldr	r2, [sp, #12]
 800b666:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800b66a:	9902      	ldr	r1, [sp, #8]
 800b66c:	6818      	ldr	r0, [r3, #0]
 800b66e:	47d0      	blx	sl
 800b670:	4643      	mov	r3, r8
 800b672:	463a      	mov	r2, r7
 800b674:	4631      	mov	r1, r6
 800b676:	4628      	mov	r0, r5
 800b678:	f005 f86e 	bl	8010758 <uxr_prepare_next_reliable_buffer_to_send>
 800b67c:	4603      	mov	r3, r0
 800b67e:	4620      	mov	r0, r4
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1e7      	bne.n	800b654 <uxr_flash_output_streams+0xa4>
 800b684:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800b688:	f109 0901 	add.w	r9, r9, #1
 800b68c:	fa5f f089 	uxtb.w	r0, r9
 800b690:	4283      	cmp	r3, r0
 800b692:	d8d4      	bhi.n	800b63e <uxr_flash_output_streams+0x8e>
 800b694:	b004      	add	sp, #16
 800b696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69a:	bf00      	nop

0800b69c <read_submessage_info>:
 800b69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a0:	460d      	mov	r5, r1
 800b6a2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800b6a6:	4669      	mov	r1, sp
 800b6a8:	4607      	mov	r7, r0
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f002 fb80 	bl	800ddb0 <uxr_deserialize_BaseObjectReply>
 800b6b0:	a902      	add	r1, sp, #8
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800b6ba:	f7fe fae5 	bl	8009c88 <ucdr_deserialize_bool>
 800b6be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b6c2:	4004      	ands	r4, r0
 800b6c4:	b2e4      	uxtb	r4, r4
 800b6c6:	b95b      	cbnz	r3, 800b6e0 <read_submessage_info+0x44>
 800b6c8:	a987      	add	r1, sp, #540	@ 0x21c
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	f7fe fadc 	bl	8009c88 <ucdr_deserialize_bool>
 800b6d0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	b94b      	cbnz	r3, 800b6ec <read_submessage_info+0x50>
 800b6d8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800b6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e0:	a903      	add	r1, sp, #12
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	f002 fa0c 	bl	800db00 <uxr_deserialize_ObjectVariant>
 800b6e8:	4004      	ands	r4, r0
 800b6ea:	e7ed      	b.n	800b6c8 <read_submessage_info+0x2c>
 800b6ec:	a988      	add	r1, sp, #544	@ 0x220
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f7fe faf8 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800b6f4:	4234      	tst	r4, r6
 800b6f6:	d0ef      	beq.n	800b6d8 <read_submessage_info+0x3c>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d0ed      	beq.n	800b6d8 <read_submessage_info+0x3c>
 800b6fc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800b700:	2b0d      	cmp	r3, #13
 800b702:	d1e9      	bne.n	800b6d8 <read_submessage_info+0x3c>
 800b704:	a98a      	add	r1, sp, #552	@ 0x228
 800b706:	4628      	mov	r0, r5
 800b708:	f7ff f892 	bl	800a830 <ucdr_deserialize_int16_t>
 800b70c:	b140      	cbz	r0, 800b720 <read_submessage_info+0x84>
 800b70e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800b712:	2b00      	cmp	r3, #0
 800b714:	dd07      	ble.n	800b726 <read_submessage_info+0x8a>
 800b716:	f1b8 0f00 	cmp.w	r8, #0
 800b71a:	bf14      	ite	ne
 800b71c:	2001      	movne	r0, #1
 800b71e:	2002      	moveq	r0, #2
 800b720:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800b724:	e7d8      	b.n	800b6d8 <read_submessage_info+0x3c>
 800b726:	2000      	movs	r0, #0
 800b728:	e7fa      	b.n	800b720 <read_submessage_info+0x84>
 800b72a:	bf00      	nop

0800b72c <read_submessage_list>:
 800b72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b730:	b097      	sub	sp, #92	@ 0x5c
 800b732:	4ec1      	ldr	r6, [pc, #772]	@ (800ba38 <read_submessage_list+0x30c>)
 800b734:	9209      	str	r2, [sp, #36]	@ 0x24
 800b736:	4604      	mov	r4, r0
 800b738:	460d      	mov	r5, r1
 800b73a:	f04f 0801 	mov.w	r8, #1
 800b73e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800b742:	aa0c      	add	r2, sp, #48	@ 0x30
 800b744:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800b748:	4628      	mov	r0, r5
 800b74a:	f001 fc4f 	bl	800cfec <uxr_read_submessage_header>
 800b74e:	2800      	cmp	r0, #0
 800b750:	f000 813e 	beq.w	800b9d0 <read_submessage_list+0x2a4>
 800b754:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800b758:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800b75c:	3b02      	subs	r3, #2
 800b75e:	2b0d      	cmp	r3, #13
 800b760:	d8ed      	bhi.n	800b73e <read_submessage_list+0x12>
 800b762:	a101      	add	r1, pc, #4	@ (adr r1, 800b768 <read_submessage_list+0x3c>)
 800b764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b768:	0800b9c7 	.word	0x0800b9c7
 800b76c:	0800b73f 	.word	0x0800b73f
 800b770:	0800b9b7 	.word	0x0800b9b7
 800b774:	0800b955 	.word	0x0800b955
 800b778:	0800b94b 	.word	0x0800b94b
 800b77c:	0800b73f 	.word	0x0800b73f
 800b780:	0800b73f 	.word	0x0800b73f
 800b784:	0800b8ab 	.word	0x0800b8ab
 800b788:	0800b83b 	.word	0x0800b83b
 800b78c:	0800b7fb 	.word	0x0800b7fb
 800b790:	0800b73f 	.word	0x0800b73f
 800b794:	0800b73f 	.word	0x0800b73f
 800b798:	0800b73f 	.word	0x0800b73f
 800b79c:	0800b7a1 	.word	0x0800b7a1
 800b7a0:	a910      	add	r1, sp, #64	@ 0x40
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f002 fd28 	bl	800e1f8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800b7a8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800b7ac:	f1b9 0f00 	cmp.w	r9, #0
 800b7b0:	f000 8116 	beq.w	800b9e0 <read_submessage_list+0x2b4>
 800b7b4:	f001 fc60 	bl	800d078 <uxr_nanos>
 800b7b8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	468c      	mov	ip, r1
 800b7c4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800b7c8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800b7cc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b7ce:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800b7d0:	468c      	mov	ip, r1
 800b7d2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800b7d6:	46e2      	mov	sl, ip
 800b7d8:	46bc      	mov	ip, r7
 800b7da:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800b7de:	fbc0 7106 	smlal	r7, r1, r0, r6
 800b7e2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800b7e6:	e9cd 7100 	strd	r7, r1, [sp]
 800b7ea:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800b7ee:	9106      	str	r1, [sp, #24]
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	47c8      	blx	r9
 800b7f4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800b7f8:	e7a1      	b.n	800b73e <read_submessage_list+0x12>
 800b7fa:	a910      	add	r1, sp, #64	@ 0x40
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	f002 fce9 	bl	800e1d4 <uxr_deserialize_HEARTBEAT_Payload>
 800b802:	2100      	movs	r1, #0
 800b804:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800b808:	f001 fac8 	bl	800cd9c <uxr_stream_id_from_raw>
 800b80c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800b810:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b812:	4639      	mov	r1, r7
 800b814:	f104 0008 	add.w	r0, r4, #8
 800b818:	f001 fbae 	bl	800cf78 <uxr_get_input_reliable_stream>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d08e      	beq.n	800b73e <read_submessage_list+0x12>
 800b820:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800b824:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800b828:	f004 fce6 	bl	80101f8 <uxr_process_heartbeat>
 800b82c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800b830:	463a      	mov	r2, r7
 800b832:	4620      	mov	r0, r4
 800b834:	f7ff fdf6 	bl	800b424 <write_submessage_acknack.isra.0>
 800b838:	e781      	b.n	800b73e <read_submessage_list+0x12>
 800b83a:	a910      	add	r1, sp, #64	@ 0x40
 800b83c:	4628      	mov	r0, r5
 800b83e:	f002 fca1 	bl	800e184 <uxr_deserialize_ACKNACK_Payload>
 800b842:	2100      	movs	r1, #0
 800b844:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800b848:	f001 faa8 	bl	800cd9c <uxr_stream_id_from_raw>
 800b84c:	900d      	str	r0, [sp, #52]	@ 0x34
 800b84e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800b852:	f104 0008 	add.w	r0, r4, #8
 800b856:	f001 fb7b 	bl	800cf50 <uxr_get_output_reliable_stream>
 800b85a:	4607      	mov	r7, r0
 800b85c:	2800      	cmp	r0, #0
 800b85e:	f43f af6e 	beq.w	800b73e <read_submessage_list+0x12>
 800b862:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800b866:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800b86a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800b86e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800b872:	b289      	uxth	r1, r1
 800b874:	f005 f81a 	bl	80108ac <uxr_process_acknack>
 800b878:	4638      	mov	r0, r7
 800b87a:	f004 ffd7 	bl	801082c <uxr_begin_output_nack_buffer_it>
 800b87e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800b882:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800b886:	e006      	b.n	800b896 <read_submessage_list+0x16a>
 800b888:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b88a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b88c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800b890:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b892:	6818      	ldr	r0, [r3, #0]
 800b894:	47c8      	blx	r9
 800b896:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800b89a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b89c:	4651      	mov	r1, sl
 800b89e:	4638      	mov	r0, r7
 800b8a0:	f004 ffc6 	bl	8010830 <uxr_next_reliable_nack_buffer_to_send>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d1ef      	bne.n	800b888 <read_submessage_list+0x15c>
 800b8a8:	e749      	b.n	800b73e <read_submessage_list+0x12>
 800b8aa:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800b8ae:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800b8b2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800b8b6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800b8ba:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800b8be:	4651      	mov	r1, sl
 800b8c0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800b8c4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800b8c8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800b8cc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800b8d6:	f002 f9b5 	bl	800dc44 <uxr_deserialize_BaseObjectRequest>
 800b8da:	4650      	mov	r0, sl
 800b8dc:	a90f      	add	r1, sp, #60	@ 0x3c
 800b8de:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800b8e2:	f000 fd8d 	bl	800c400 <uxr_parse_base_object_request>
 800b8e6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800b8ea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b8ec:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800b8f0:	9110      	str	r1, [sp, #64]	@ 0x40
 800b8f2:	3f04      	subs	r7, #4
 800b8f4:	f009 090e 	and.w	r9, r9, #14
 800b8f8:	b2bf      	uxth	r7, r7
 800b8fa:	f1bb 0f00 	cmp.w	fp, #0
 800b8fe:	d006      	beq.n	800b90e <read_submessage_list+0x1e2>
 800b900:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	4652      	mov	r2, sl
 800b908:	2300      	movs	r3, #0
 800b90a:	4620      	mov	r0, r4
 800b90c:	47d8      	blx	fp
 800b90e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800b910:	b16a      	cbz	r2, 800b92e <read_submessage_list+0x202>
 800b912:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800b914:	2100      	movs	r1, #0
 800b916:	3802      	subs	r0, #2
 800b918:	e002      	b.n	800b920 <read_submessage_list+0x1f4>
 800b91a:	3101      	adds	r1, #1
 800b91c:	4291      	cmp	r1, r2
 800b91e:	d006      	beq.n	800b92e <read_submessage_list+0x202>
 800b920:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800b924:	4553      	cmp	r3, sl
 800b926:	d1f8      	bne.n	800b91a <read_submessage_list+0x1ee>
 800b928:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800b92a:	2200      	movs	r2, #0
 800b92c:	545a      	strb	r2, [r3, r1]
 800b92e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800b932:	9102      	str	r1, [sp, #8]
 800b934:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b936:	9101      	str	r1, [sp, #4]
 800b938:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b93a:	9100      	str	r1, [sp, #0]
 800b93c:	464b      	mov	r3, r9
 800b93e:	463a      	mov	r2, r7
 800b940:	4629      	mov	r1, r5
 800b942:	4620      	mov	r0, r4
 800b944:	f7ff fc4c 	bl	800b1e0 <read_submessage_format>
 800b948:	e6f9      	b.n	800b73e <read_submessage_list+0x12>
 800b94a:	4629      	mov	r1, r5
 800b94c:	4620      	mov	r0, r4
 800b94e:	f7ff fea5 	bl	800b69c <read_submessage_info>
 800b952:	e6f4      	b.n	800b73e <read_submessage_list+0x12>
 800b954:	2a00      	cmp	r2, #0
 800b956:	d03e      	beq.n	800b9d6 <read_submessage_list+0x2aa>
 800b958:	a910      	add	r1, sp, #64	@ 0x40
 800b95a:	4628      	mov	r0, r5
 800b95c:	f002 fb6e 	bl	800e03c <uxr_deserialize_STATUS_Payload>
 800b960:	a90e      	add	r1, sp, #56	@ 0x38
 800b962:	aa0d      	add	r2, sp, #52	@ 0x34
 800b964:	a810      	add	r0, sp, #64	@ 0x40
 800b966:	f000 fd4b 	bl	800c400 <uxr_parse_base_object_request>
 800b96a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800b96e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b970:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800b974:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800b978:	910f      	str	r1, [sp, #60]	@ 0x3c
 800b97a:	f1ba 0f00 	cmp.w	sl, #0
 800b97e:	d006      	beq.n	800b98e <read_submessage_list+0x262>
 800b980:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	463a      	mov	r2, r7
 800b988:	464b      	mov	r3, r9
 800b98a:	4620      	mov	r0, r4
 800b98c:	47d0      	blx	sl
 800b98e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800b990:	2a00      	cmp	r2, #0
 800b992:	f43f aed4 	beq.w	800b73e <read_submessage_list+0x12>
 800b996:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800b998:	2100      	movs	r1, #0
 800b99a:	3802      	subs	r0, #2
 800b99c:	e003      	b.n	800b9a6 <read_submessage_list+0x27a>
 800b99e:	3101      	adds	r1, #1
 800b9a0:	4291      	cmp	r1, r2
 800b9a2:	f43f aecc 	beq.w	800b73e <read_submessage_list+0x12>
 800b9a6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800b9aa:	42bb      	cmp	r3, r7
 800b9ac:	d1f7      	bne.n	800b99e <read_submessage_list+0x272>
 800b9ae:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800b9b0:	f803 9001 	strb.w	r9, [r3, r1]
 800b9b4:	e6c3      	b.n	800b73e <read_submessage_list+0x12>
 800b9b6:	2a00      	cmp	r2, #0
 800b9b8:	f47f aec1 	bne.w	800b73e <read_submessage_list+0x12>
 800b9bc:	4629      	mov	r1, r5
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f000 fc64 	bl	800c28c <uxr_read_create_session_status>
 800b9c4:	e6bb      	b.n	800b73e <read_submessage_list+0x12>
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f7ff fcf5 	bl	800b3b8 <read_submessage_get_info>
 800b9ce:	e6b6      	b.n	800b73e <read_submessage_list+0x12>
 800b9d0:	b017      	add	sp, #92	@ 0x5c
 800b9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f000 fc63 	bl	800c2a4 <uxr_read_delete_session_status>
 800b9de:	e6ae      	b.n	800b73e <read_submessage_list+0x12>
 800b9e0:	f001 fb4a 	bl	800d078 <uxr_nanos>
 800b9e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b9e6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b9e8:	464f      	mov	r7, r9
 800b9ea:	fbc3 2706 	smlal	r2, r7, r3, r6
 800b9ee:	1812      	adds	r2, r2, r0
 800b9f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9f2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b9f4:	eb47 0101 	adc.w	r1, r7, r1
 800b9f8:	464f      	mov	r7, r9
 800b9fa:	fbc3 0706 	smlal	r0, r7, r3, r6
 800b9fe:	463b      	mov	r3, r7
 800ba00:	4684      	mov	ip, r0
 800ba02:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800ba06:	fbc7 0906 	smlal	r0, r9, r7, r6
 800ba0a:	eb1c 0c00 	adds.w	ip, ip, r0
 800ba0e:	464f      	mov	r7, r9
 800ba10:	eb43 0307 	adc.w	r3, r3, r7
 800ba14:	ebb2 0c0c 	subs.w	ip, r2, ip
 800ba18:	eb61 0303 	sbc.w	r3, r1, r3
 800ba1c:	0fda      	lsrs	r2, r3, #31
 800ba1e:	eb12 020c 	adds.w	r2, r2, ip
 800ba22:	f143 0300 	adc.w	r3, r3, #0
 800ba26:	0852      	lsrs	r2, r2, #1
 800ba28:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800ba2c:	105b      	asrs	r3, r3, #1
 800ba2e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800ba32:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800ba36:	e6dd      	b.n	800b7f4 <read_submessage_list+0xc8>
 800ba38:	3b9aca00 	.word	0x3b9aca00

0800ba3c <listen_message_reliably>:
 800ba3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba40:	1e0b      	subs	r3, r1, #0
 800ba42:	b09d      	sub	sp, #116	@ 0x74
 800ba44:	bfb8      	it	lt
 800ba46:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800ba4a:	4680      	mov	r8, r0
 800ba4c:	9305      	str	r3, [sp, #20]
 800ba4e:	f001 faf9 	bl	800d044 <uxr_millis>
 800ba52:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800ba56:	4681      	mov	r9, r0
 800ba58:	2a00      	cmp	r2, #0
 800ba5a:	f000 80a1 	beq.w	800bba0 <listen_message_reliably+0x164>
 800ba5e:	2600      	movs	r6, #0
 800ba60:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ba64:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ba68:	9303      	str	r3, [sp, #12]
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	460f      	mov	r7, r1
 800ba6e:	e00f      	b.n	800ba90 <listen_message_reliably+0x54>
 800ba70:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ba74:	9903      	ldr	r1, [sp, #12]
 800ba76:	455a      	cmp	r2, fp
 800ba78:	f106 0601 	add.w	r6, r6, #1
 800ba7c:	eb73 0101 	sbcs.w	r1, r3, r1
 800ba80:	b2f0      	uxtb	r0, r6
 800ba82:	da01      	bge.n	800ba88 <listen_message_reliably+0x4c>
 800ba84:	4693      	mov	fp, r2
 800ba86:	9303      	str	r3, [sp, #12]
 800ba88:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800ba8c:	4283      	cmp	r3, r0
 800ba8e:	d960      	bls.n	800bb52 <listen_message_reliably+0x116>
 800ba90:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800ba94:	2102      	movs	r1, #2
 800ba96:	2201      	movs	r2, #1
 800ba98:	f001 f956 	bl	800cd48 <uxr_stream_id>
 800ba9c:	00e4      	lsls	r4, r4, #3
 800ba9e:	f104 0520 	add.w	r5, r4, #32
 800baa2:	4445      	add	r5, r8
 800baa4:	4601      	mov	r1, r0
 800baa6:	463b      	mov	r3, r7
 800baa8:	464a      	mov	r2, r9
 800baaa:	4628      	mov	r0, r5
 800baac:	9109      	str	r1, [sp, #36]	@ 0x24
 800baae:	f004 fe93 	bl	80107d8 <uxr_update_output_stream_heartbeat_timestamp>
 800bab2:	eb08 0304 	add.w	r3, r8, r4
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d0da      	beq.n	800ba70 <listen_message_reliably+0x34>
 800baba:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800babe:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800bac2:	9304      	str	r3, [sp, #16]
 800bac4:	4640      	mov	r0, r8
 800bac6:	f000 fc75 	bl	800c3b4 <uxr_session_header_offset>
 800baca:	3501      	adds	r5, #1
 800bacc:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800bad0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800bad4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800bad8:	2300      	movs	r3, #0
 800bada:	2211      	movs	r2, #17
 800badc:	9000      	str	r0, [sp, #0]
 800bade:	a90c      	add	r1, sp, #48	@ 0x30
 800bae0:	4650      	mov	r0, sl
 800bae2:	f7ff f883 	bl	800abec <ucdr_init_buffer_origin_offset>
 800bae6:	2300      	movs	r3, #0
 800bae8:	2205      	movs	r2, #5
 800baea:	210b      	movs	r1, #11
 800baec:	4650      	mov	r0, sl
 800baee:	f001 fa63 	bl	800cfb8 <uxr_buffer_submessage_header>
 800baf2:	8968      	ldrh	r0, [r5, #10]
 800baf4:	2101      	movs	r1, #1
 800baf6:	f004 ff31 	bl	801095c <uxr_seq_num_add>
 800bafa:	892b      	ldrh	r3, [r5, #8]
 800bafc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800bb00:	4602      	mov	r2, r0
 800bb02:	9b04      	ldr	r3, [sp, #16]
 800bb04:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800bb08:	a90a      	add	r1, sp, #40	@ 0x28
 800bb0a:	4650      	mov	r0, sl
 800bb0c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800bb10:	f002 fb4c 	bl	800e1ac <uxr_serialize_HEARTBEAT_Payload>
 800bb14:	2200      	movs	r2, #0
 800bb16:	4611      	mov	r1, r2
 800bb18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	f000 fbf4 	bl	800c308 <uxr_stamp_session_header>
 800bb20:	4650      	mov	r0, sl
 800bb22:	f7ff f8a1 	bl	800ac68 <ucdr_buffer_length>
 800bb26:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	a90c      	add	r1, sp, #48	@ 0x30
 800bb2e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800bb32:	4444      	add	r4, r8
 800bb34:	47a8      	blx	r5
 800bb36:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800bb3a:	9903      	ldr	r1, [sp, #12]
 800bb3c:	455a      	cmp	r2, fp
 800bb3e:	f106 0601 	add.w	r6, r6, #1
 800bb42:	eb73 0101 	sbcs.w	r1, r3, r1
 800bb46:	b2f0      	uxtb	r0, r6
 800bb48:	db9c      	blt.n	800ba84 <listen_message_reliably+0x48>
 800bb4a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800bb4e:	4283      	cmp	r3, r0
 800bb50:	d89e      	bhi.n	800ba90 <listen_message_reliably+0x54>
 800bb52:	9a03      	ldr	r2, [sp, #12]
 800bb54:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	bf08      	it	eq
 800bb5c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800bb60:	d01e      	beq.n	800bba0 <listen_message_reliably+0x164>
 800bb62:	ebab 0309 	sub.w	r3, fp, r9
 800bb66:	9905      	ldr	r1, [sp, #20]
 800bb68:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	bf08      	it	eq
 800bb70:	2301      	moveq	r3, #1
 800bb72:	4299      	cmp	r1, r3
 800bb74:	bfa8      	it	ge
 800bb76:	4619      	movge	r1, r3
 800bb78:	6894      	ldr	r4, [r2, #8]
 800bb7a:	6810      	ldr	r0, [r2, #0]
 800bb7c:	4689      	mov	r9, r1
 800bb7e:	460b      	mov	r3, r1
 800bb80:	aa08      	add	r2, sp, #32
 800bb82:	a907      	add	r1, sp, #28
 800bb84:	47a0      	blx	r4
 800bb86:	b968      	cbnz	r0, 800bba4 <listen_message_reliably+0x168>
 800bb88:	9b05      	ldr	r3, [sp, #20]
 800bb8a:	eba3 0309 	sub.w	r3, r3, r9
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	9305      	str	r3, [sp, #20]
 800bb92:	f73f af5c 	bgt.w	800ba4e <listen_message_reliably+0x12>
 800bb96:	4604      	mov	r4, r0
 800bb98:	4620      	mov	r0, r4
 800bb9a:	b01d      	add	sp, #116	@ 0x74
 800bb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba0:	9b05      	ldr	r3, [sp, #20]
 800bba2:	e7e0      	b.n	800bb66 <listen_message_reliably+0x12a>
 800bba4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800bba8:	4604      	mov	r4, r0
 800bbaa:	a80c      	add	r0, sp, #48	@ 0x30
 800bbac:	f7ff f830 	bl	800ac10 <ucdr_init_buffer>
 800bbb0:	2500      	movs	r5, #0
 800bbb2:	f10d 031a 	add.w	r3, sp, #26
 800bbb6:	aa06      	add	r2, sp, #24
 800bbb8:	a90c      	add	r1, sp, #48	@ 0x30
 800bbba:	4640      	mov	r0, r8
 800bbbc:	f88d 5018 	strb.w	r5, [sp, #24]
 800bbc0:	f000 fbb6 	bl	800c330 <uxr_read_session_header>
 800bbc4:	b918      	cbnz	r0, 800bbce <listen_message_reliably+0x192>
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	b01d      	add	sp, #116	@ 0x74
 800bbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbce:	4629      	mov	r1, r5
 800bbd0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800bbd4:	f001 f8e2 	bl	800cd9c <uxr_stream_id_from_raw>
 800bbd8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800bbdc:	2d01      	cmp	r5, #1
 800bbde:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800bbe2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800bbe6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800bbea:	d04b      	beq.n	800bc84 <listen_message_reliably+0x248>
 800bbec:	2d02      	cmp	r5, #2
 800bbee:	d00f      	beq.n	800bc10 <listen_message_reliably+0x1d4>
 800bbf0:	2d00      	cmp	r5, #0
 800bbf2:	d1e8      	bne.n	800bbc6 <listen_message_reliably+0x18a>
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f001 f8d0 	bl	800cd9c <uxr_stream_id_from_raw>
 800bbfc:	a90c      	add	r1, sp, #48	@ 0x30
 800bbfe:	4602      	mov	r2, r0
 800bc00:	4640      	mov	r0, r8
 800bc02:	920a      	str	r2, [sp, #40]	@ 0x28
 800bc04:	f7ff fd92 	bl	800b72c <read_submessage_list>
 800bc08:	4620      	mov	r0, r4
 800bc0a:	b01d      	add	sp, #116	@ 0x74
 800bc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc10:	4631      	mov	r1, r6
 800bc12:	f108 0008 	add.w	r0, r8, #8
 800bc16:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800bc1a:	f001 f9ad 	bl	800cf78 <uxr_get_input_reliable_stream>
 800bc1e:	4607      	mov	r7, r0
 800bc20:	b338      	cbz	r0, 800bc72 <listen_message_reliably+0x236>
 800bc22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc24:	9203      	str	r2, [sp, #12]
 800bc26:	a80c      	add	r0, sp, #48	@ 0x30
 800bc28:	f7ff f822 	bl	800ac70 <ucdr_buffer_remaining>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	f10d 0019 	add.w	r0, sp, #25
 800bc32:	9000      	str	r0, [sp, #0]
 800bc34:	9a03      	ldr	r2, [sp, #12]
 800bc36:	4651      	mov	r1, sl
 800bc38:	4638      	mov	r0, r7
 800bc3a:	f004 f9e3 	bl	8010004 <uxr_receive_reliable_message>
 800bc3e:	b1c0      	cbz	r0, 800bc72 <listen_message_reliably+0x236>
 800bc40:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bc44:	b393      	cbz	r3, 800bcac <listen_message_reliably+0x270>
 800bc46:	ad14      	add	r5, sp, #80	@ 0x50
 800bc48:	f04f 0a02 	mov.w	sl, #2
 800bc4c:	e00a      	b.n	800bc64 <listen_message_reliably+0x228>
 800bc4e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800bc52:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800bc56:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800bc5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	4640      	mov	r0, r8
 800bc60:	f7ff fd64 	bl	800b72c <read_submessage_list>
 800bc64:	2204      	movs	r2, #4
 800bc66:	4629      	mov	r1, r5
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f004 fa4b 	bl	8010104 <uxr_next_input_reliable_buffer_available>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d1ed      	bne.n	800bc4e <listen_message_reliably+0x212>
 800bc72:	4640      	mov	r0, r8
 800bc74:	4632      	mov	r2, r6
 800bc76:	4649      	mov	r1, r9
 800bc78:	f7ff fbd4 	bl	800b424 <write_submessage_acknack.isra.0>
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	b01d      	add	sp, #116	@ 0x74
 800bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc84:	4631      	mov	r1, r6
 800bc86:	f108 0008 	add.w	r0, r8, #8
 800bc8a:	f001 f96b 	bl	800cf64 <uxr_get_input_best_effort_stream>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d099      	beq.n	800bbc6 <listen_message_reliably+0x18a>
 800bc92:	4651      	mov	r1, sl
 800bc94:	f004 f922 	bl	800fedc <uxr_receive_best_effort_message>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d094      	beq.n	800bbc6 <listen_message_reliably+0x18a>
 800bc9c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800bca0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bca2:	a90c      	add	r1, sp, #48	@ 0x30
 800bca4:	4640      	mov	r0, r8
 800bca6:	f7ff fd41 	bl	800b72c <read_submessage_list>
 800bcaa:	e78c      	b.n	800bbc6 <listen_message_reliably+0x18a>
 800bcac:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800bcb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcb2:	a90c      	add	r1, sp, #48	@ 0x30
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	f7ff fd39 	bl	800b72c <read_submessage_list>
 800bcba:	e7c4      	b.n	800bc46 <listen_message_reliably+0x20a>

0800bcbc <uxr_run_session_until_confirm_delivery>:
 800bcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	460d      	mov	r5, r1
 800bcc4:	f001 f9be 	bl	800d044 <uxr_millis>
 800bcc8:	4607      	mov	r7, r0
 800bcca:	4630      	mov	r0, r6
 800bccc:	f7ff fc70 	bl	800b5b0 <uxr_flash_output_streams>
 800bcd0:	2d00      	cmp	r5, #0
 800bcd2:	f106 0808 	add.w	r8, r6, #8
 800bcd6:	bfa8      	it	ge
 800bcd8:	462c      	movge	r4, r5
 800bcda:	da07      	bge.n	800bcec <uxr_run_session_until_confirm_delivery+0x30>
 800bcdc:	e00e      	b.n	800bcfc <uxr_run_session_until_confirm_delivery+0x40>
 800bcde:	f7ff fead 	bl	800ba3c <listen_message_reliably>
 800bce2:	f001 f9af 	bl	800d044 <uxr_millis>
 800bce6:	1bc3      	subs	r3, r0, r7
 800bce8:	1aec      	subs	r4, r5, r3
 800bcea:	d407      	bmi.n	800bcfc <uxr_run_session_until_confirm_delivery+0x40>
 800bcec:	4640      	mov	r0, r8
 800bcee:	f001 f94d 	bl	800cf8c <uxr_output_streams_confirmed>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d0f0      	beq.n	800bcde <uxr_run_session_until_confirm_delivery+0x22>
 800bcfc:	4640      	mov	r0, r8
 800bcfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd02:	f001 b943 	b.w	800cf8c <uxr_output_streams_confirmed>
 800bd06:	bf00      	nop

0800bd08 <uxr_run_session_until_all_status>:
 800bd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd0c:	9c08      	ldr	r4, [sp, #32]
 800bd0e:	4606      	mov	r6, r0
 800bd10:	460f      	mov	r7, r1
 800bd12:	4691      	mov	r9, r2
 800bd14:	461d      	mov	r5, r3
 800bd16:	f7ff fc4b 	bl	800b5b0 <uxr_flash_output_streams>
 800bd1a:	b124      	cbz	r4, 800bd26 <uxr_run_session_until_all_status+0x1e>
 800bd1c:	4622      	mov	r2, r4
 800bd1e:	21ff      	movs	r1, #255	@ 0xff
 800bd20:	4628      	mov	r0, r5
 800bd22:	f005 fd39 	bl	8011798 <memset>
 800bd26:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800bd2a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800bd2c:	f001 f98a 	bl	800d044 <uxr_millis>
 800bd30:	3d01      	subs	r5, #1
 800bd32:	f1a9 0902 	sub.w	r9, r9, #2
 800bd36:	4680      	mov	r8, r0
 800bd38:	4639      	mov	r1, r7
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f7ff fe7e 	bl	800ba3c <listen_message_reliably>
 800bd40:	f001 f980 	bl	800d044 <uxr_millis>
 800bd44:	eba0 0008 	sub.w	r0, r0, r8
 800bd48:	1a39      	subs	r1, r7, r0
 800bd4a:	b344      	cbz	r4, 800bd9e <uxr_run_session_until_all_status+0x96>
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	46ac      	mov	ip, r5
 800bd50:	2301      	movs	r3, #1
 800bd52:	e002      	b.n	800bd5a <uxr_run_session_until_all_status+0x52>
 800bd54:	42a3      	cmp	r3, r4
 800bd56:	d20d      	bcs.n	800bd74 <uxr_run_session_until_all_status+0x6c>
 800bd58:	3301      	adds	r3, #1
 800bd5a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800bd5e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800bd62:	d1f7      	bne.n	800bd54 <uxr_run_session_until_all_status+0x4c>
 800bd64:	42a3      	cmp	r3, r4
 800bd66:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800bd6a:	d213      	bcs.n	800bd94 <uxr_run_session_until_all_status+0x8c>
 800bd6c:	2a00      	cmp	r2, #0
 800bd6e:	d0f3      	beq.n	800bd58 <uxr_run_session_until_all_status+0x50>
 800bd70:	2900      	cmp	r1, #0
 800bd72:	dce2      	bgt.n	800bd3a <uxr_run_session_until_all_status+0x32>
 800bd74:	2300      	movs	r3, #0
 800bd76:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800bd78:	442c      	add	r4, r5
 800bd7a:	e001      	b.n	800bd80 <uxr_run_session_until_all_status+0x78>
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d812      	bhi.n	800bda6 <uxr_run_session_until_all_status+0x9e>
 800bd80:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800bd84:	4284      	cmp	r4, r0
 800bd86:	d1f9      	bne.n	800bd7c <uxr_run_session_until_all_status+0x74>
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	bf8c      	ite	hi
 800bd8c:	2000      	movhi	r0, #0
 800bd8e:	2001      	movls	r0, #1
 800bd90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd94:	2900      	cmp	r1, #0
 800bd96:	dded      	ble.n	800bd74 <uxr_run_session_until_all_status+0x6c>
 800bd98:	2a00      	cmp	r2, #0
 800bd9a:	d1ce      	bne.n	800bd3a <uxr_run_session_until_all_status+0x32>
 800bd9c:	e7ea      	b.n	800bd74 <uxr_run_session_until_all_status+0x6c>
 800bd9e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800bda0:	2001      	movs	r0, #1
 800bda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bda6:	2000      	movs	r0, #0
 800bda8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800bdac <wait_session_status>:
 800bdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	b09d      	sub	sp, #116	@ 0x74
 800bdb4:	20ff      	movs	r0, #255	@ 0xff
 800bdb6:	7160      	strb	r0, [r4, #5]
 800bdb8:	9303      	str	r3, [sp, #12]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 80b6 	beq.w	800bf2c <wait_session_status+0x180>
 800bdc0:	468a      	mov	sl, r1
 800bdc2:	4691      	mov	r9, r2
 800bdc4:	f04f 0b00 	mov.w	fp, #0
 800bdc8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bdca:	464a      	mov	r2, r9
 800bdcc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800bdd0:	4651      	mov	r1, sl
 800bdd2:	47a8      	blx	r5
 800bdd4:	f001 f936 	bl	800d044 <uxr_millis>
 800bdd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bddc:	4605      	mov	r5, r0
 800bdde:	e009      	b.n	800bdf4 <wait_session_status+0x48>
 800bde0:	f001 f930 	bl	800d044 <uxr_millis>
 800bde4:	1b40      	subs	r0, r0, r5
 800bde6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	dd40      	ble.n	800be70 <wait_session_status+0xc4>
 800bdee:	7960      	ldrb	r0, [r4, #5]
 800bdf0:	28ff      	cmp	r0, #255	@ 0xff
 800bdf2:	d145      	bne.n	800be80 <wait_session_status+0xd4>
 800bdf4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800bdf6:	a908      	add	r1, sp, #32
 800bdf8:	6896      	ldr	r6, [r2, #8]
 800bdfa:	6810      	ldr	r0, [r2, #0]
 800bdfc:	aa09      	add	r2, sp, #36	@ 0x24
 800bdfe:	47b0      	blx	r6
 800be00:	2800      	cmp	r0, #0
 800be02:	d0ed      	beq.n	800bde0 <wait_session_status+0x34>
 800be04:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800be08:	a80c      	add	r0, sp, #48	@ 0x30
 800be0a:	f7fe ff01 	bl	800ac10 <ucdr_init_buffer>
 800be0e:	2600      	movs	r6, #0
 800be10:	f10d 031e 	add.w	r3, sp, #30
 800be14:	aa07      	add	r2, sp, #28
 800be16:	a90c      	add	r1, sp, #48	@ 0x30
 800be18:	4620      	mov	r0, r4
 800be1a:	f88d 601c 	strb.w	r6, [sp, #28]
 800be1e:	f000 fa87 	bl	800c330 <uxr_read_session_header>
 800be22:	2800      	cmp	r0, #0
 800be24:	d0dc      	beq.n	800bde0 <wait_session_status+0x34>
 800be26:	4631      	mov	r1, r6
 800be28:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800be2c:	f000 ffb6 	bl	800cd9c <uxr_stream_id_from_raw>
 800be30:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800be34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800be38:	9302      	str	r3, [sp, #8]
 800be3a:	2f01      	cmp	r7, #1
 800be3c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800be40:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800be44:	d05c      	beq.n	800bf00 <wait_session_status+0x154>
 800be46:	2f02      	cmp	r7, #2
 800be48:	d020      	beq.n	800be8c <wait_session_status+0xe0>
 800be4a:	2f00      	cmp	r7, #0
 800be4c:	d1c8      	bne.n	800bde0 <wait_session_status+0x34>
 800be4e:	4639      	mov	r1, r7
 800be50:	4638      	mov	r0, r7
 800be52:	f000 ffa3 	bl	800cd9c <uxr_stream_id_from_raw>
 800be56:	a90c      	add	r1, sp, #48	@ 0x30
 800be58:	4602      	mov	r2, r0
 800be5a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800be5c:	4620      	mov	r0, r4
 800be5e:	f7ff fc65 	bl	800b72c <read_submessage_list>
 800be62:	f001 f8ef 	bl	800d044 <uxr_millis>
 800be66:	1b40      	subs	r0, r0, r5
 800be68:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	dcbe      	bgt.n	800bdee <wait_session_status+0x42>
 800be70:	9b03      	ldr	r3, [sp, #12]
 800be72:	7960      	ldrb	r0, [r4, #5]
 800be74:	f10b 0b01 	add.w	fp, fp, #1
 800be78:	455b      	cmp	r3, fp
 800be7a:	d001      	beq.n	800be80 <wait_session_status+0xd4>
 800be7c:	28ff      	cmp	r0, #255	@ 0xff
 800be7e:	d0a3      	beq.n	800bdc8 <wait_session_status+0x1c>
 800be80:	38ff      	subs	r0, #255	@ 0xff
 800be82:	bf18      	it	ne
 800be84:	2001      	movne	r0, #1
 800be86:	b01d      	add	sp, #116	@ 0x74
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800be90:	9304      	str	r3, [sp, #16]
 800be92:	4631      	mov	r1, r6
 800be94:	f104 0008 	add.w	r0, r4, #8
 800be98:	f001 f86e 	bl	800cf78 <uxr_get_input_reliable_stream>
 800be9c:	4680      	mov	r8, r0
 800be9e:	b348      	cbz	r0, 800bef4 <wait_session_status+0x148>
 800bea0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bea2:	9205      	str	r2, [sp, #20]
 800bea4:	a80c      	add	r0, sp, #48	@ 0x30
 800bea6:	f7fe fee3 	bl	800ac70 <ucdr_buffer_remaining>
 800beaa:	4603      	mov	r3, r0
 800beac:	f10d 001d 	add.w	r0, sp, #29
 800beb0:	9000      	str	r0, [sp, #0]
 800beb2:	9a05      	ldr	r2, [sp, #20]
 800beb4:	9902      	ldr	r1, [sp, #8]
 800beb6:	4640      	mov	r0, r8
 800beb8:	f004 f8a4 	bl	8010004 <uxr_receive_reliable_message>
 800bebc:	b1d0      	cbz	r0, 800bef4 <wait_session_status+0x148>
 800bebe:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d03a      	beq.n	800bf3c <wait_session_status+0x190>
 800bec6:	9f04      	ldr	r7, [sp, #16]
 800bec8:	e00a      	b.n	800bee0 <wait_session_status+0x134>
 800beca:	f04f 0302 	mov.w	r3, #2
 800bece:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800bed2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800bed6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800beda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bedc:	f7ff fc26 	bl	800b72c <read_submessage_list>
 800bee0:	a914      	add	r1, sp, #80	@ 0x50
 800bee2:	2204      	movs	r2, #4
 800bee4:	4640      	mov	r0, r8
 800bee6:	f004 f90d 	bl	8010104 <uxr_next_input_reliable_buffer_available>
 800beea:	4603      	mov	r3, r0
 800beec:	a914      	add	r1, sp, #80	@ 0x50
 800beee:	4620      	mov	r0, r4
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1ea      	bne.n	800beca <wait_session_status+0x11e>
 800bef4:	9904      	ldr	r1, [sp, #16]
 800bef6:	4632      	mov	r2, r6
 800bef8:	4620      	mov	r0, r4
 800befa:	f7ff fa93 	bl	800b424 <write_submessage_acknack.isra.0>
 800befe:	e76f      	b.n	800bde0 <wait_session_status+0x34>
 800bf00:	4631      	mov	r1, r6
 800bf02:	f104 0008 	add.w	r0, r4, #8
 800bf06:	f001 f82d 	bl	800cf64 <uxr_get_input_best_effort_stream>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	f43f af68 	beq.w	800bde0 <wait_session_status+0x34>
 800bf10:	9902      	ldr	r1, [sp, #8]
 800bf12:	f003 ffe3 	bl	800fedc <uxr_receive_best_effort_message>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f43f af62 	beq.w	800bde0 <wait_session_status+0x34>
 800bf1c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800bf20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf22:	a90c      	add	r1, sp, #48	@ 0x30
 800bf24:	4620      	mov	r0, r4
 800bf26:	f7ff fc01 	bl	800b72c <read_submessage_list>
 800bf2a:	e759      	b.n	800bde0 <wait_session_status+0x34>
 800bf2c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bf2e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800bf32:	47a0      	blx	r4
 800bf34:	2001      	movs	r0, #1
 800bf36:	b01d      	add	sp, #116	@ 0x74
 800bf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800bf40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf42:	a90c      	add	r1, sp, #48	@ 0x30
 800bf44:	4620      	mov	r0, r4
 800bf46:	f7ff fbf1 	bl	800b72c <read_submessage_list>
 800bf4a:	e7bc      	b.n	800bec6 <wait_session_status+0x11a>

0800bf4c <uxr_delete_session_retries>:
 800bf4c:	b530      	push	{r4, r5, lr}
 800bf4e:	b08f      	sub	sp, #60	@ 0x3c
 800bf50:	4604      	mov	r4, r0
 800bf52:	460d      	mov	r5, r1
 800bf54:	f000 fa2e 	bl	800c3b4 <uxr_session_header_offset>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	2210      	movs	r2, #16
 800bf5c:	9000      	str	r0, [sp, #0]
 800bf5e:	a902      	add	r1, sp, #8
 800bf60:	a806      	add	r0, sp, #24
 800bf62:	f7fe fe43 	bl	800abec <ucdr_init_buffer_origin_offset>
 800bf66:	a906      	add	r1, sp, #24
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f000 f973 	bl	800c254 <uxr_buffer_delete_session>
 800bf6e:	2200      	movs	r2, #0
 800bf70:	4611      	mov	r1, r2
 800bf72:	9b06      	ldr	r3, [sp, #24]
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 f9c7 	bl	800c308 <uxr_stamp_session_header>
 800bf7a:	a806      	add	r0, sp, #24
 800bf7c:	f7fe fe74 	bl	800ac68 <ucdr_buffer_length>
 800bf80:	462b      	mov	r3, r5
 800bf82:	4602      	mov	r2, r0
 800bf84:	a902      	add	r1, sp, #8
 800bf86:	4620      	mov	r0, r4
 800bf88:	f7ff ff10 	bl	800bdac <wait_session_status>
 800bf8c:	b118      	cbz	r0, 800bf96 <uxr_delete_session_retries+0x4a>
 800bf8e:	7960      	ldrb	r0, [r4, #5]
 800bf90:	fab0 f080 	clz	r0, r0
 800bf94:	0940      	lsrs	r0, r0, #5
 800bf96:	b00f      	add	sp, #60	@ 0x3c
 800bf98:	bd30      	pop	{r4, r5, pc}
 800bf9a:	bf00      	nop

0800bf9c <uxr_create_session>:
 800bf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa0:	f100 0b08 	add.w	fp, r0, #8
 800bfa4:	b0ab      	sub	sp, #172	@ 0xac
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	4658      	mov	r0, fp
 800bfaa:	f000 ff2b 	bl	800ce04 <uxr_reset_stream_storage>
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f000 fa00 	bl	800c3b4 <uxr_session_header_offset>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	9000      	str	r0, [sp, #0]
 800bfb8:	221c      	movs	r2, #28
 800bfba:	a90b      	add	r1, sp, #44	@ 0x2c
 800bfbc:	a812      	add	r0, sp, #72	@ 0x48
 800bfbe:	f7fe fe15 	bl	800abec <ucdr_init_buffer_origin_offset>
 800bfc2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bfc4:	8a1a      	ldrh	r2, [r3, #16]
 800bfc6:	3a04      	subs	r2, #4
 800bfc8:	b292      	uxth	r2, r2
 800bfca:	a912      	add	r1, sp, #72	@ 0x48
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f000 f917 	bl	800c200 <uxr_buffer_create_session>
 800bfd2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f000 f983 	bl	800c2e0 <uxr_stamp_create_session_header>
 800bfda:	a812      	add	r0, sp, #72	@ 0x48
 800bfdc:	f7fe fe44 	bl	800ac68 <ucdr_buffer_length>
 800bfe0:	23ff      	movs	r3, #255	@ 0xff
 800bfe2:	7163      	strb	r3, [r4, #5]
 800bfe4:	230a      	movs	r3, #10
 800bfe6:	46da      	mov	sl, fp
 800bfe8:	9303      	str	r3, [sp, #12]
 800bfea:	4683      	mov	fp, r0
 800bfec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bfee:	465a      	mov	r2, fp
 800bff0:	e9d3 0500 	ldrd	r0, r5, [r3]
 800bff4:	a90b      	add	r1, sp, #44	@ 0x2c
 800bff6:	47a8      	blx	r5
 800bff8:	f001 f824 	bl	800d044 <uxr_millis>
 800bffc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c000:	4605      	mov	r5, r0
 800c002:	e009      	b.n	800c018 <uxr_create_session+0x7c>
 800c004:	f001 f81e 	bl	800d044 <uxr_millis>
 800c008:	1b40      	subs	r0, r0, r5
 800c00a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c00e:	2b00      	cmp	r3, #0
 800c010:	7962      	ldrb	r2, [r4, #5]
 800c012:	dd38      	ble.n	800c086 <uxr_create_session+0xea>
 800c014:	2aff      	cmp	r2, #255	@ 0xff
 800c016:	d13c      	bne.n	800c092 <uxr_create_session+0xf6>
 800c018:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800c01a:	a907      	add	r1, sp, #28
 800c01c:	6896      	ldr	r6, [r2, #8]
 800c01e:	6810      	ldr	r0, [r2, #0]
 800c020:	aa08      	add	r2, sp, #32
 800c022:	47b0      	blx	r6
 800c024:	2800      	cmp	r0, #0
 800c026:	d0ed      	beq.n	800c004 <uxr_create_session+0x68>
 800c028:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c02c:	a81a      	add	r0, sp, #104	@ 0x68
 800c02e:	f7fe fdef 	bl	800ac10 <ucdr_init_buffer>
 800c032:	2600      	movs	r6, #0
 800c034:	f10d 031a 	add.w	r3, sp, #26
 800c038:	aa06      	add	r2, sp, #24
 800c03a:	a91a      	add	r1, sp, #104	@ 0x68
 800c03c:	4620      	mov	r0, r4
 800c03e:	f88d 6018 	strb.w	r6, [sp, #24]
 800c042:	f000 f975 	bl	800c330 <uxr_read_session_header>
 800c046:	2800      	cmp	r0, #0
 800c048:	d0dc      	beq.n	800c004 <uxr_create_session+0x68>
 800c04a:	4631      	mov	r1, r6
 800c04c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c050:	f000 fea4 	bl	800cd9c <uxr_stream_id_from_raw>
 800c054:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800c058:	2e01      	cmp	r6, #1
 800c05a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800c05e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800c062:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800c066:	d053      	beq.n	800c110 <uxr_create_session+0x174>
 800c068:	2e02      	cmp	r6, #2
 800c06a:	d018      	beq.n	800c09e <uxr_create_session+0x102>
 800c06c:	2e00      	cmp	r6, #0
 800c06e:	d1c9      	bne.n	800c004 <uxr_create_session+0x68>
 800c070:	4631      	mov	r1, r6
 800c072:	4630      	mov	r0, r6
 800c074:	f000 fe92 	bl	800cd9c <uxr_stream_id_from_raw>
 800c078:	a91a      	add	r1, sp, #104	@ 0x68
 800c07a:	4602      	mov	r2, r0
 800c07c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c07e:	4620      	mov	r0, r4
 800c080:	f7ff fb54 	bl	800b72c <read_submessage_list>
 800c084:	e7be      	b.n	800c004 <uxr_create_session+0x68>
 800c086:	9b03      	ldr	r3, [sp, #12]
 800c088:	3b01      	subs	r3, #1
 800c08a:	9303      	str	r3, [sp, #12]
 800c08c:	d001      	beq.n	800c092 <uxr_create_session+0xf6>
 800c08e:	2aff      	cmp	r2, #255	@ 0xff
 800c090:	d0ac      	beq.n	800bfec <uxr_create_session+0x50>
 800c092:	2a00      	cmp	r2, #0
 800c094:	d051      	beq.n	800c13a <uxr_create_session+0x19e>
 800c096:	2000      	movs	r0, #0
 800c098:	b02b      	add	sp, #172	@ 0xac
 800c09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c09e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800c0a2:	9304      	str	r3, [sp, #16]
 800c0a4:	4639      	mov	r1, r7
 800c0a6:	4650      	mov	r0, sl
 800c0a8:	f000 ff66 	bl	800cf78 <uxr_get_input_reliable_stream>
 800c0ac:	4680      	mov	r8, r0
 800c0ae:	b348      	cbz	r0, 800c104 <uxr_create_session+0x168>
 800c0b0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c0b2:	9205      	str	r2, [sp, #20]
 800c0b4:	a81a      	add	r0, sp, #104	@ 0x68
 800c0b6:	f7fe fddb 	bl	800ac70 <ucdr_buffer_remaining>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	f10d 0019 	add.w	r0, sp, #25
 800c0c0:	9000      	str	r0, [sp, #0]
 800c0c2:	9a05      	ldr	r2, [sp, #20]
 800c0c4:	4649      	mov	r1, r9
 800c0c6:	4640      	mov	r0, r8
 800c0c8:	f003 ff9c 	bl	8010004 <uxr_receive_reliable_message>
 800c0cc:	b1d0      	cbz	r0, 800c104 <uxr_create_session+0x168>
 800c0ce:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d038      	beq.n	800c148 <uxr_create_session+0x1ac>
 800c0d6:	9e04      	ldr	r6, [sp, #16]
 800c0d8:	e00a      	b.n	800c0f0 <uxr_create_session+0x154>
 800c0da:	f04f 0302 	mov.w	r3, #2
 800c0de:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800c0e2:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800c0e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0ec:	f7ff fb1e 	bl	800b72c <read_submessage_list>
 800c0f0:	a922      	add	r1, sp, #136	@ 0x88
 800c0f2:	2204      	movs	r2, #4
 800c0f4:	4640      	mov	r0, r8
 800c0f6:	f004 f805 	bl	8010104 <uxr_next_input_reliable_buffer_available>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	a922      	add	r1, sp, #136	@ 0x88
 800c0fe:	4620      	mov	r0, r4
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1ea      	bne.n	800c0da <uxr_create_session+0x13e>
 800c104:	9904      	ldr	r1, [sp, #16]
 800c106:	463a      	mov	r2, r7
 800c108:	4620      	mov	r0, r4
 800c10a:	f7ff f98b 	bl	800b424 <write_submessage_acknack.isra.0>
 800c10e:	e779      	b.n	800c004 <uxr_create_session+0x68>
 800c110:	4639      	mov	r1, r7
 800c112:	4650      	mov	r0, sl
 800c114:	f000 ff26 	bl	800cf64 <uxr_get_input_best_effort_stream>
 800c118:	2800      	cmp	r0, #0
 800c11a:	f43f af73 	beq.w	800c004 <uxr_create_session+0x68>
 800c11e:	4649      	mov	r1, r9
 800c120:	f003 fedc 	bl	800fedc <uxr_receive_best_effort_message>
 800c124:	2800      	cmp	r0, #0
 800c126:	f43f af6d 	beq.w	800c004 <uxr_create_session+0x68>
 800c12a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800c12e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c130:	a91a      	add	r1, sp, #104	@ 0x68
 800c132:	4620      	mov	r0, r4
 800c134:	f7ff fafa 	bl	800b72c <read_submessage_list>
 800c138:	e764      	b.n	800c004 <uxr_create_session+0x68>
 800c13a:	4650      	mov	r0, sl
 800c13c:	f000 fe62 	bl	800ce04 <uxr_reset_stream_storage>
 800c140:	2001      	movs	r0, #1
 800c142:	b02b      	add	sp, #172	@ 0xac
 800c144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c148:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800c14c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c14e:	a91a      	add	r1, sp, #104	@ 0x68
 800c150:	4620      	mov	r0, r4
 800c152:	f7ff faeb 	bl	800b72c <read_submessage_list>
 800c156:	e7be      	b.n	800c0d6 <uxr_create_session+0x13a>

0800c158 <uxr_prepare_stream_to_write_submessage>:
 800c158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	4682      	mov	sl, r0
 800c160:	4610      	mov	r0, r2
 800c162:	4615      	mov	r5, r2
 800c164:	461e      	mov	r6, r3
 800c166:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800c16a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800c16e:	9101      	str	r1, [sp, #4]
 800c170:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c174:	f000 ff60 	bl	800d038 <uxr_submessage_padding>
 800c178:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c17c:	f105 0904 	add.w	r9, r5, #4
 800c180:	2b01      	cmp	r3, #1
 800c182:	4481      	add	r9, r0
 800c184:	d01d      	beq.n	800c1c2 <uxr_prepare_stream_to_write_submessage+0x6a>
 800c186:	2b02      	cmp	r3, #2
 800c188:	d116      	bne.n	800c1b8 <uxr_prepare_stream_to_write_submessage+0x60>
 800c18a:	4621      	mov	r1, r4
 800c18c:	f10a 0008 	add.w	r0, sl, #8
 800c190:	f000 fede 	bl	800cf50 <uxr_get_output_reliable_stream>
 800c194:	4604      	mov	r4, r0
 800c196:	b158      	cbz	r0, 800c1b0 <uxr_prepare_stream_to_write_submessage+0x58>
 800c198:	4649      	mov	r1, r9
 800c19a:	4632      	mov	r2, r6
 800c19c:	f004 f96e 	bl	801047c <uxr_prepare_reliable_buffer_to_write>
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	b12c      	cbz	r4, 800c1b0 <uxr_prepare_stream_to_write_submessage+0x58>
 800c1a4:	4643      	mov	r3, r8
 800c1a6:	b2aa      	uxth	r2, r5
 800c1a8:	4639      	mov	r1, r7
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f000 ff04 	bl	800cfb8 <uxr_buffer_submessage_header>
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	b002      	add	sp, #8
 800c1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b8:	2400      	movs	r4, #0
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	b002      	add	sp, #8
 800c1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	f10a 0008 	add.w	r0, sl, #8
 800c1c8:	f000 feba 	bl	800cf40 <uxr_get_output_best_effort_stream>
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d0ee      	beq.n	800c1b0 <uxr_prepare_stream_to_write_submessage+0x58>
 800c1d2:	4649      	mov	r1, r9
 800c1d4:	4632      	mov	r2, r6
 800c1d6:	f004 f881 	bl	80102dc <uxr_prepare_best_effort_buffer_to_write>
 800c1da:	4604      	mov	r4, r0
 800c1dc:	e7e1      	b.n	800c1a2 <uxr_prepare_stream_to_write_submessage+0x4a>
 800c1de:	bf00      	nop

0800c1e0 <uxr_init_session_info>:
 800c1e0:	0e13      	lsrs	r3, r2, #24
 800c1e2:	7043      	strb	r3, [r0, #1]
 800c1e4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800c1e8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c1ec:	7001      	strb	r1, [r0, #0]
 800c1ee:	70c3      	strb	r3, [r0, #3]
 800c1f0:	2109      	movs	r1, #9
 800c1f2:	23ff      	movs	r3, #255	@ 0xff
 800c1f4:	f880 c002 	strb.w	ip, [r0, #2]
 800c1f8:	7102      	strb	r2, [r0, #4]
 800c1fa:	80c1      	strh	r1, [r0, #6]
 800c1fc:	7143      	strb	r3, [r0, #5]
 800c1fe:	4770      	bx	lr

0800c200 <uxr_buffer_create_session>:
 800c200:	b530      	push	{r4, r5, lr}
 800c202:	b089      	sub	sp, #36	@ 0x24
 800c204:	2300      	movs	r3, #0
 800c206:	4d12      	ldr	r5, [pc, #72]	@ (800c250 <uxr_buffer_create_session+0x50>)
 800c208:	9307      	str	r3, [sp, #28]
 800c20a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800c20e:	2201      	movs	r2, #1
 800c210:	9301      	str	r3, [sp, #4]
 800c212:	80c2      	strh	r2, [r0, #6]
 800c214:	f88d 2004 	strb.w	r2, [sp, #4]
 800c218:	682a      	ldr	r2, [r5, #0]
 800c21a:	9200      	str	r2, [sp, #0]
 800c21c:	88aa      	ldrh	r2, [r5, #4]
 800c21e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c222:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800c226:	9202      	str	r2, [sp, #8]
 800c228:	460c      	mov	r4, r1
 800c22a:	7802      	ldrb	r2, [r0, #0]
 800c22c:	9303      	str	r3, [sp, #12]
 800c22e:	4619      	mov	r1, r3
 800c230:	f88d 200c 	strb.w	r2, [sp, #12]
 800c234:	4620      	mov	r0, r4
 800c236:	2210      	movs	r2, #16
 800c238:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c23c:	9306      	str	r3, [sp, #24]
 800c23e:	f000 febb 	bl	800cfb8 <uxr_buffer_submessage_header>
 800c242:	4669      	mov	r1, sp
 800c244:	4620      	mov	r0, r4
 800c246:	f001 fe13 	bl	800de70 <uxr_serialize_CREATE_CLIENT_Payload>
 800c24a:	b009      	add	sp, #36	@ 0x24
 800c24c:	bd30      	pop	{r4, r5, pc}
 800c24e:	bf00      	nop
 800c250:	080127ac 	.word	0x080127ac

0800c254 <uxr_buffer_delete_session>:
 800c254:	b510      	push	{r4, lr}
 800c256:	4b0c      	ldr	r3, [pc, #48]	@ (800c288 <uxr_buffer_delete_session+0x34>)
 800c258:	b082      	sub	sp, #8
 800c25a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800c25e:	f8ad c006 	strh.w	ip, [sp, #6]
 800c262:	460c      	mov	r4, r1
 800c264:	2202      	movs	r2, #2
 800c266:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c26a:	80c2      	strh	r2, [r0, #6]
 800c26c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c270:	2204      	movs	r2, #4
 800c272:	2300      	movs	r3, #0
 800c274:	2103      	movs	r1, #3
 800c276:	4620      	mov	r0, r4
 800c278:	f000 fe9e 	bl	800cfb8 <uxr_buffer_submessage_header>
 800c27c:	a901      	add	r1, sp, #4
 800c27e:	4620      	mov	r0, r4
 800c280:	f001 fe9c 	bl	800dfbc <uxr_serialize_DELETE_Payload>
 800c284:	b002      	add	sp, #8
 800c286:	bd10      	pop	{r4, pc}
 800c288:	080127ac 	.word	0x080127ac

0800c28c <uxr_read_create_session_status>:
 800c28c:	b510      	push	{r4, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	4604      	mov	r4, r0
 800c292:	4608      	mov	r0, r1
 800c294:	a901      	add	r1, sp, #4
 800c296:	f001 fea1 	bl	800dfdc <uxr_deserialize_STATUS_AGENT_Payload>
 800c29a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c29e:	7163      	strb	r3, [r4, #5]
 800c2a0:	b008      	add	sp, #32
 800c2a2:	bd10      	pop	{r4, pc}

0800c2a4 <uxr_read_delete_session_status>:
 800c2a4:	b510      	push	{r4, lr}
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	b084      	sub	sp, #16
 800c2aa:	4608      	mov	r0, r1
 800c2ac:	a902      	add	r1, sp, #8
 800c2ae:	f001 fec5 	bl	800e03c <uxr_deserialize_STATUS_Payload>
 800c2b2:	88e3      	ldrh	r3, [r4, #6]
 800c2b4:	2b02      	cmp	r3, #2
 800c2b6:	d001      	beq.n	800c2bc <uxr_read_delete_session_status+0x18>
 800c2b8:	b004      	add	sp, #16
 800c2ba:	bd10      	pop	{r4, pc}
 800c2bc:	f10d 000a 	add.w	r0, sp, #10
 800c2c0:	f7fe ff40 	bl	800b144 <uxr_object_id_from_raw>
 800c2c4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800c2c8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c2cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	bf04      	itt	eq
 800c2d6:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800c2da:	7163      	strbeq	r3, [r4, #5]
 800c2dc:	b004      	add	sp, #16
 800c2de:	bd10      	pop	{r4, pc}

0800c2e0 <uxr_stamp_create_session_header>:
 800c2e0:	b510      	push	{r4, lr}
 800c2e2:	2208      	movs	r2, #8
 800c2e4:	b08a      	sub	sp, #40	@ 0x28
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	eb0d 0002 	add.w	r0, sp, r2
 800c2ec:	f7fe fc90 	bl	800ac10 <ucdr_init_buffer>
 800c2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f4:	9400      	str	r4, [sp, #0]
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800c2fe:	a802      	add	r0, sp, #8
 800c300:	f001 f854 	bl	800d3ac <uxr_serialize_message_header>
 800c304:	b00a      	add	sp, #40	@ 0x28
 800c306:	bd10      	pop	{r4, pc}

0800c308 <uxr_stamp_session_header>:
 800c308:	b530      	push	{r4, r5, lr}
 800c30a:	b08d      	sub	sp, #52	@ 0x34
 800c30c:	4604      	mov	r4, r0
 800c30e:	460d      	mov	r5, r1
 800c310:	9203      	str	r2, [sp, #12]
 800c312:	4619      	mov	r1, r3
 800c314:	a804      	add	r0, sp, #16
 800c316:	2208      	movs	r2, #8
 800c318:	f7fe fc7a 	bl	800ac10 <ucdr_init_buffer>
 800c31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c320:	9b03      	ldr	r3, [sp, #12]
 800c322:	9400      	str	r4, [sp, #0]
 800c324:	462a      	mov	r2, r5
 800c326:	a804      	add	r0, sp, #16
 800c328:	f001 f840 	bl	800d3ac <uxr_serialize_message_header>
 800c32c:	b00d      	add	sp, #52	@ 0x34
 800c32e:	bd30      	pop	{r4, r5, pc}

0800c330 <uxr_read_session_header>:
 800c330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c334:	4607      	mov	r7, r0
 800c336:	b084      	sub	sp, #16
 800c338:	4608      	mov	r0, r1
 800c33a:	460c      	mov	r4, r1
 800c33c:	4615      	mov	r5, r2
 800c33e:	461e      	mov	r6, r3
 800c340:	f7fe fc96 	bl	800ac70 <ucdr_buffer_remaining>
 800c344:	2808      	cmp	r0, #8
 800c346:	d803      	bhi.n	800c350 <uxr_read_session_header+0x20>
 800c348:	2000      	movs	r0, #0
 800c34a:	b004      	add	sp, #16
 800c34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c350:	f10d 080c 	add.w	r8, sp, #12
 800c354:	4633      	mov	r3, r6
 800c356:	462a      	mov	r2, r5
 800c358:	f8cd 8000 	str.w	r8, [sp]
 800c35c:	4620      	mov	r0, r4
 800c35e:	f10d 010b 	add.w	r1, sp, #11
 800c362:	f001 f841 	bl	800d3e8 <uxr_deserialize_message_header>
 800c366:	783a      	ldrb	r2, [r7, #0]
 800c368:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d1eb      	bne.n	800c348 <uxr_read_session_header+0x18>
 800c370:	061b      	lsls	r3, r3, #24
 800c372:	d41c      	bmi.n	800c3ae <uxr_read_session_header+0x7e>
 800c374:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c378:	787b      	ldrb	r3, [r7, #1]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d003      	beq.n	800c386 <uxr_read_session_header+0x56>
 800c37e:	2001      	movs	r0, #1
 800c380:	f080 0001 	eor.w	r0, r0, #1
 800c384:	e7e1      	b.n	800c34a <uxr_read_session_header+0x1a>
 800c386:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800c38a:	78bb      	ldrb	r3, [r7, #2]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	f107 0102 	add.w	r1, r7, #2
 800c392:	d1f4      	bne.n	800c37e <uxr_read_session_header+0x4e>
 800c394:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800c398:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d1ee      	bne.n	800c37e <uxr_read_session_header+0x4e>
 800c3a0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c3a4:	784b      	ldrb	r3, [r1, #1]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d1e9      	bne.n	800c37e <uxr_read_session_header+0x4e>
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	e7e8      	b.n	800c380 <uxr_read_session_header+0x50>
 800c3ae:	2001      	movs	r0, #1
 800c3b0:	e7cb      	b.n	800c34a <uxr_read_session_header+0x1a>
 800c3b2:	bf00      	nop

0800c3b4 <uxr_session_header_offset>:
 800c3b4:	f990 3000 	ldrsb.w	r3, [r0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	bfac      	ite	ge
 800c3bc:	2008      	movge	r0, #8
 800c3be:	2004      	movlt	r0, #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop

0800c3c4 <uxr_init_base_object_request>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	88c3      	ldrh	r3, [r0, #6]
 800c3c8:	b082      	sub	sp, #8
 800c3ca:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800c3ce:	9101      	str	r1, [sp, #4]
 800c3d0:	f1a3 010a 	sub.w	r1, r3, #10
 800c3d4:	b289      	uxth	r1, r1
 800c3d6:	42a1      	cmp	r1, r4
 800c3d8:	d80e      	bhi.n	800c3f8 <uxr_init_base_object_request+0x34>
 800c3da:	3301      	adds	r3, #1
 800c3dc:	b29c      	uxth	r4, r3
 800c3de:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	80c4      	strh	r4, [r0, #6]
 800c3e6:	9801      	ldr	r0, [sp, #4]
 800c3e8:	7011      	strb	r1, [r2, #0]
 800c3ea:	7053      	strb	r3, [r2, #1]
 800c3ec:	1c91      	adds	r1, r2, #2
 800c3ee:	f7fe febd 	bl	800b16c <uxr_object_id_to_raw>
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	b002      	add	sp, #8
 800c3f6:	bd10      	pop	{r4, pc}
 800c3f8:	230a      	movs	r3, #10
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	461c      	mov	r4, r3
 800c3fe:	e7f1      	b.n	800c3e4 <uxr_init_base_object_request+0x20>

0800c400 <uxr_parse_base_object_request>:
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	4604      	mov	r4, r0
 800c404:	3002      	adds	r0, #2
 800c406:	460d      	mov	r5, r1
 800c408:	4616      	mov	r6, r2
 800c40a:	f7fe fe9b 	bl	800b144 <uxr_object_id_from_raw>
 800c40e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800c412:	8028      	strh	r0, [r5, #0]
 800c414:	806b      	strh	r3, [r5, #2]
 800c416:	7822      	ldrb	r2, [r4, #0]
 800c418:	7863      	ldrb	r3, [r4, #1]
 800c41a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c41e:	8033      	strh	r3, [r6, #0]
 800c420:	bd70      	pop	{r4, r5, r6, pc}
 800c422:	bf00      	nop

0800c424 <uxr_init_framing_io>:
 800c424:	2300      	movs	r3, #0
 800c426:	7041      	strb	r1, [r0, #1]
 800c428:	7003      	strb	r3, [r0, #0]
 800c42a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop

0800c430 <uxr_write_framed_msg>:
 800c430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c434:	4617      	mov	r7, r2
 800c436:	7842      	ldrb	r2, [r0, #1]
 800c438:	b083      	sub	sp, #12
 800c43a:	460e      	mov	r6, r1
 800c43c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800c440:	469a      	mov	sl, r3
 800c442:	2901      	cmp	r1, #1
 800c444:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800c448:	4604      	mov	r4, r0
 800c44a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800c44e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800c452:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800c456:	f240 8137 	bls.w	800c6c8 <uxr_write_framed_msg+0x298>
 800c45a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800c45e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800c462:	2901      	cmp	r1, #1
 800c464:	f04f 0202 	mov.w	r2, #2
 800c468:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c46c:	f240 808f 	bls.w	800c58e <uxr_write_framed_msg+0x15e>
 800c470:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c472:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800c476:	b2dd      	uxtb	r5, r3
 800c478:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800c47c:	2203      	movs	r2, #3
 800c47e:	2901      	cmp	r1, #1
 800c480:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c484:	f240 809a 	bls.w	800c5bc <uxr_write_framed_msg+0x18c>
 800c488:	18a1      	adds	r1, r4, r2
 800c48a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c48c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800c490:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c494:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800c498:	3201      	adds	r2, #1
 800c49a:	2801      	cmp	r0, #1
 800c49c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c4a0:	f240 80a0 	bls.w	800c5e4 <uxr_write_framed_msg+0x1b4>
 800c4a4:	18a0      	adds	r0, r4, r2
 800c4a6:	3201      	adds	r2, #1
 800c4a8:	b2d2      	uxtb	r2, r2
 800c4aa:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800c4ae:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f000 80a9 	beq.w	800c60a <uxr_write_framed_msg+0x1da>
 800c4b8:	f04f 0900 	mov.w	r9, #0
 800c4bc:	46c8      	mov	r8, r9
 800c4be:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800c4c2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800c4c6:	2901      	cmp	r1, #1
 800c4c8:	f240 80c3 	bls.w	800c652 <uxr_write_framed_msg+0x222>
 800c4cc:	2a29      	cmp	r2, #41	@ 0x29
 800c4ce:	f200 809f 	bhi.w	800c610 <uxr_write_framed_msg+0x1e0>
 800c4d2:	18a1      	adds	r1, r4, r2
 800c4d4:	3201      	adds	r2, #1
 800c4d6:	b2d2      	uxtb	r2, r2
 800c4d8:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800c4dc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c4e0:	ea89 0303 	eor.w	r3, r9, r3
 800c4e4:	498c      	ldr	r1, [pc, #560]	@ (800c718 <uxr_write_framed_msg+0x2e8>)
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	f108 0801 	add.w	r8, r8, #1
 800c4ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c4f0:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800c4f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c4f6:	4543      	cmp	r3, r8
 800c4f8:	d8e1      	bhi.n	800c4be <uxr_write_framed_msg+0x8e>
 800c4fa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800c4fe:	fa5f f889 	uxtb.w	r8, r9
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	f04f 0900 	mov.w	r9, #0
 800c508:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800c50c:	fa5f f18a 	uxtb.w	r1, sl
 800c510:	2901      	cmp	r1, #1
 800c512:	d921      	bls.n	800c558 <uxr_write_framed_msg+0x128>
 800c514:	2a29      	cmp	r2, #41	@ 0x29
 800c516:	f240 80af 	bls.w	800c678 <uxr_write_framed_msg+0x248>
 800c51a:	2500      	movs	r5, #0
 800c51c:	e000      	b.n	800c520 <uxr_write_framed_msg+0xf0>
 800c51e:	b160      	cbz	r0, 800c53a <uxr_write_framed_msg+0x10a>
 800c520:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800c524:	1b52      	subs	r2, r2, r5
 800c526:	465b      	mov	r3, fp
 800c528:	4421      	add	r1, r4
 800c52a:	4638      	mov	r0, r7
 800c52c:	47b0      	blx	r6
 800c52e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800c532:	4405      	add	r5, r0
 800c534:	4295      	cmp	r5, r2
 800c536:	d3f2      	bcc.n	800c51e <uxr_write_framed_msg+0xee>
 800c538:	d003      	beq.n	800c542 <uxr_write_framed_msg+0x112>
 800c53a:	2000      	movs	r0, #0
 800c53c:	b003      	add	sp, #12
 800c53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c542:	fa5f f18a 	uxtb.w	r1, sl
 800c546:	f04f 0300 	mov.w	r3, #0
 800c54a:	2901      	cmp	r1, #1
 800c54c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800c550:	f04f 0200 	mov.w	r2, #0
 800c554:	f200 8090 	bhi.w	800c678 <uxr_write_framed_msg+0x248>
 800c558:	1c51      	adds	r1, r2, #1
 800c55a:	b2c9      	uxtb	r1, r1
 800c55c:	2929      	cmp	r1, #41	@ 0x29
 800c55e:	d8dc      	bhi.n	800c51a <uxr_write_framed_msg+0xea>
 800c560:	18a5      	adds	r5, r4, r2
 800c562:	4421      	add	r1, r4
 800c564:	3202      	adds	r2, #2
 800c566:	f088 0820 	eor.w	r8, r8, #32
 800c56a:	4648      	mov	r0, r9
 800c56c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800c570:	b2d2      	uxtb	r2, r2
 800c572:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800c576:	f04f 0901 	mov.w	r9, #1
 800c57a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800c57e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c582:	2800      	cmp	r0, #0
 800c584:	f040 8085 	bne.w	800c692 <uxr_write_framed_msg+0x262>
 800c588:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c58c:	e7bc      	b.n	800c508 <uxr_write_framed_msg+0xd8>
 800c58e:	4611      	mov	r1, r2
 800c590:	f04f 0c03 	mov.w	ip, #3
 800c594:	2204      	movs	r2, #4
 800c596:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c598:	4421      	add	r1, r4
 800c59a:	b2dd      	uxtb	r5, r3
 800c59c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800c5a0:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800c5a4:	44a4      	add	ip, r4
 800c5a6:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800c5aa:	f080 0020 	eor.w	r0, r0, #32
 800c5ae:	2901      	cmp	r1, #1
 800c5b0:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800c5b4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c5b8:	f63f af66 	bhi.w	800c488 <uxr_write_framed_msg+0x58>
 800c5bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5be:	18a0      	adds	r0, r4, r2
 800c5c0:	f085 0520 	eor.w	r5, r5, #32
 800c5c4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800c5c8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c5cc:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800c5d0:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800c5d4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800c5d8:	3202      	adds	r2, #2
 800c5da:	2801      	cmp	r0, #1
 800c5dc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c5e0:	f63f af60 	bhi.w	800c4a4 <uxr_write_framed_msg+0x74>
 800c5e4:	1c50      	adds	r0, r2, #1
 800c5e6:	18a5      	adds	r5, r4, r2
 800c5e8:	fa54 f080 	uxtab	r0, r4, r0
 800c5ec:	3202      	adds	r2, #2
 800c5ee:	f081 0120 	eor.w	r1, r1, #32
 800c5f2:	b2d2      	uxtb	r2, r2
 800c5f4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800c5f8:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800c5fc:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800c600:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c604:	2b00      	cmp	r3, #0
 800c606:	f47f af57 	bne.w	800c4b8 <uxr_write_framed_msg+0x88>
 800c60a:	9301      	str	r3, [sp, #4]
 800c60c:	4698      	mov	r8, r3
 800c60e:	e779      	b.n	800c504 <uxr_write_framed_msg+0xd4>
 800c610:	2500      	movs	r5, #0
 800c612:	e001      	b.n	800c618 <uxr_write_framed_msg+0x1e8>
 800c614:	2800      	cmp	r0, #0
 800c616:	d090      	beq.n	800c53a <uxr_write_framed_msg+0x10a>
 800c618:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800c61c:	1b52      	subs	r2, r2, r5
 800c61e:	465b      	mov	r3, fp
 800c620:	4421      	add	r1, r4
 800c622:	4638      	mov	r0, r7
 800c624:	47b0      	blx	r6
 800c626:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800c62a:	4405      	add	r5, r0
 800c62c:	4295      	cmp	r5, r2
 800c62e:	d3f1      	bcc.n	800c614 <uxr_write_framed_msg+0x1e4>
 800c630:	d183      	bne.n	800c53a <uxr_write_framed_msg+0x10a>
 800c632:	f04f 0300 	mov.w	r3, #0
 800c636:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800c63a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c63c:	4543      	cmp	r3, r8
 800c63e:	d964      	bls.n	800c70a <uxr_write_framed_msg+0x2da>
 800c640:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800c644:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800c648:	2901      	cmp	r1, #1
 800c64a:	f04f 0200 	mov.w	r2, #0
 800c64e:	f63f af3d 	bhi.w	800c4cc <uxr_write_framed_msg+0x9c>
 800c652:	1c51      	adds	r1, r2, #1
 800c654:	b2c9      	uxtb	r1, r1
 800c656:	2929      	cmp	r1, #41	@ 0x29
 800c658:	d8da      	bhi.n	800c610 <uxr_write_framed_msg+0x1e0>
 800c65a:	18a0      	adds	r0, r4, r2
 800c65c:	4421      	add	r1, r4
 800c65e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800c662:	3202      	adds	r2, #2
 800c664:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800c668:	b2d2      	uxtb	r2, r2
 800c66a:	f083 0020 	eor.w	r0, r3, #32
 800c66e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800c672:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c676:	e733      	b.n	800c4e0 <uxr_write_framed_msg+0xb0>
 800c678:	18a1      	adds	r1, r4, r2
 800c67a:	3201      	adds	r2, #1
 800c67c:	4648      	mov	r0, r9
 800c67e:	b2d2      	uxtb	r2, r2
 800c680:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800c684:	f04f 0901 	mov.w	r9, #1
 800c688:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c68c:	2800      	cmp	r0, #0
 800c68e:	f43f af7b 	beq.w	800c588 <uxr_write_framed_msg+0x158>
 800c692:	2500      	movs	r5, #0
 800c694:	e002      	b.n	800c69c <uxr_write_framed_msg+0x26c>
 800c696:	2800      	cmp	r0, #0
 800c698:	f43f af4f 	beq.w	800c53a <uxr_write_framed_msg+0x10a>
 800c69c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800c6a0:	1b52      	subs	r2, r2, r5
 800c6a2:	465b      	mov	r3, fp
 800c6a4:	4421      	add	r1, r4
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	47b0      	blx	r6
 800c6aa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800c6ae:	4405      	add	r5, r0
 800c6b0:	4295      	cmp	r5, r2
 800c6b2:	d3f0      	bcc.n	800c696 <uxr_write_framed_msg+0x266>
 800c6b4:	f47f af41 	bne.w	800c53a <uxr_write_framed_msg+0x10a>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800c6be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6c0:	b298      	uxth	r0, r3
 800c6c2:	b003      	add	sp, #12
 800c6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c8:	217d      	movs	r1, #125	@ 0x7d
 800c6ca:	f082 0220 	eor.w	r2, r2, #32
 800c6ce:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800c6d2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800c6d6:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800c6da:	2901      	cmp	r1, #1
 800c6dc:	f04f 0203 	mov.w	r2, #3
 800c6e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c6e4:	d804      	bhi.n	800c6f0 <uxr_write_framed_msg+0x2c0>
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	f04f 0c04 	mov.w	ip, #4
 800c6ec:	2205      	movs	r2, #5
 800c6ee:	e752      	b.n	800c596 <uxr_write_framed_msg+0x166>
 800c6f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6f2:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800c6f6:	b2dd      	uxtb	r5, r3
 800c6f8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800c6fc:	2204      	movs	r2, #4
 800c6fe:	2901      	cmp	r1, #1
 800c700:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800c704:	f63f aec0 	bhi.w	800c488 <uxr_write_framed_msg+0x58>
 800c708:	e758      	b.n	800c5bc <uxr_write_framed_msg+0x18c>
 800c70a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800c70e:	fa5f f889 	uxtb.w	r8, r9
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	e6f5      	b.n	800c504 <uxr_write_framed_msg+0xd4>
 800c718:	08012a80 	.word	0x08012a80

0800c71c <uxr_framing_read_transport>:
 800c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c720:	4604      	mov	r4, r0
 800c722:	b083      	sub	sp, #12
 800c724:	461f      	mov	r7, r3
 800c726:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800c72a:	4689      	mov	r9, r1
 800c72c:	4692      	mov	sl, r2
 800c72e:	f000 fc89 	bl	800d044 <uxr_millis>
 800c732:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c736:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800c73a:	42b3      	cmp	r3, r6
 800c73c:	4680      	mov	r8, r0
 800c73e:	d061      	beq.n	800c804 <uxr_framing_read_transport+0xe8>
 800c740:	d81c      	bhi.n	800c77c <uxr_framing_read_transport+0x60>
 800c742:	1e75      	subs	r5, r6, #1
 800c744:	1aed      	subs	r5, r5, r3
 800c746:	b2ed      	uxtb	r5, r5
 800c748:	2600      	movs	r6, #0
 800c74a:	455d      	cmp	r5, fp
 800c74c:	d81f      	bhi.n	800c78e <uxr_framing_read_transport+0x72>
 800c74e:	19ab      	adds	r3, r5, r6
 800c750:	455b      	cmp	r3, fp
 800c752:	bf84      	itt	hi
 800c754:	ebab 0605 	subhi.w	r6, fp, r5
 800c758:	b2f6      	uxtbhi	r6, r6
 800c75a:	b9ed      	cbnz	r5, 800c798 <uxr_framing_read_transport+0x7c>
 800c75c:	f04f 0b00 	mov.w	fp, #0
 800c760:	f000 fc70 	bl	800d044 <uxr_millis>
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	eba0 0808 	sub.w	r8, r0, r8
 800c76a:	eba3 0308 	sub.w	r3, r3, r8
 800c76e:	4658      	mov	r0, fp
 800c770:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c774:	603b      	str	r3, [r7, #0]
 800c776:	b003      	add	sp, #12
 800c778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77c:	2e00      	cmp	r6, #0
 800c77e:	d049      	beq.n	800c814 <uxr_framing_read_transport+0xf8>
 800c780:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800c784:	b2ed      	uxtb	r5, r5
 800c786:	3e01      	subs	r6, #1
 800c788:	455d      	cmp	r5, fp
 800c78a:	b2f6      	uxtb	r6, r6
 800c78c:	d9df      	bls.n	800c74e <uxr_framing_read_transport+0x32>
 800c78e:	fa5f f58b 	uxtb.w	r5, fp
 800c792:	2600      	movs	r6, #0
 800c794:	2d00      	cmp	r5, #0
 800c796:	d0e1      	beq.n	800c75c <uxr_framing_read_transport+0x40>
 800c798:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800c79c:	3102      	adds	r1, #2
 800c79e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	4421      	add	r1, r4
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4650      	mov	r0, sl
 800c7aa:	47c8      	blx	r9
 800c7ac:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c7b0:	4a1a      	ldr	r2, [pc, #104]	@ (800c81c <uxr_framing_read_transport+0x100>)
 800c7b2:	4403      	add	r3, r0
 800c7b4:	0859      	lsrs	r1, r3, #1
 800c7b6:	fba2 2101 	umull	r2, r1, r2, r1
 800c7ba:	0889      	lsrs	r1, r1, #2
 800c7bc:	222a      	movs	r2, #42	@ 0x2a
 800c7be:	fb02 3111 	mls	r1, r2, r1, r3
 800c7c2:	4683      	mov	fp, r0
 800c7c4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d0c7      	beq.n	800c75c <uxr_framing_read_transport+0x40>
 800c7cc:	42a8      	cmp	r0, r5
 800c7ce:	d1c7      	bne.n	800c760 <uxr_framing_read_transport+0x44>
 800c7d0:	2e00      	cmp	r6, #0
 800c7d2:	d0c5      	beq.n	800c760 <uxr_framing_read_transport+0x44>
 800c7d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	3102      	adds	r1, #2
 800c7da:	4632      	mov	r2, r6
 800c7dc:	4421      	add	r1, r4
 800c7de:	2300      	movs	r3, #0
 800c7e0:	4650      	mov	r0, sl
 800c7e2:	47c8      	blx	r9
 800c7e4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800c7e8:	4a0c      	ldr	r2, [pc, #48]	@ (800c81c <uxr_framing_read_transport+0x100>)
 800c7ea:	180b      	adds	r3, r1, r0
 800c7ec:	0859      	lsrs	r1, r3, #1
 800c7ee:	fba2 1201 	umull	r1, r2, r2, r1
 800c7f2:	0892      	lsrs	r2, r2, #2
 800c7f4:	212a      	movs	r1, #42	@ 0x2a
 800c7f6:	fb01 3312 	mls	r3, r1, r2, r3
 800c7fa:	eb00 0b05 	add.w	fp, r0, r5
 800c7fe:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800c802:	e7ad      	b.n	800c760 <uxr_framing_read_transport+0x44>
 800c804:	2600      	movs	r6, #0
 800c806:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800c80a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800c80c:	d9bf      	bls.n	800c78e <uxr_framing_read_transport+0x72>
 800c80e:	2102      	movs	r1, #2
 800c810:	2529      	movs	r5, #41	@ 0x29
 800c812:	e7c4      	b.n	800c79e <uxr_framing_read_transport+0x82>
 800c814:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800c818:	b2ed      	uxtb	r5, r5
 800c81a:	e796      	b.n	800c74a <uxr_framing_read_transport+0x2e>
 800c81c:	30c30c31 	.word	0x30c30c31

0800c820 <uxr_read_framed_msg>:
 800c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	461e      	mov	r6, r3
 800c826:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800c82a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800c82e:	429d      	cmp	r5, r3
 800c830:	b083      	sub	sp, #12
 800c832:	4604      	mov	r4, r0
 800c834:	4688      	mov	r8, r1
 800c836:	4691      	mov	r9, r2
 800c838:	f000 8188 	beq.w	800cb4c <uxr_read_framed_msg+0x32c>
 800c83c:	7823      	ldrb	r3, [r4, #0]
 800c83e:	4dc1      	ldr	r5, [pc, #772]	@ (800cb44 <uxr_read_framed_msg+0x324>)
 800c840:	4fc1      	ldr	r7, [pc, #772]	@ (800cb48 <uxr_read_framed_msg+0x328>)
 800c842:	2b07      	cmp	r3, #7
 800c844:	d8fd      	bhi.n	800c842 <uxr_read_framed_msg+0x22>
 800c846:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c84a:	0115      	.short	0x0115
 800c84c:	00d600f6 	.word	0x00d600f6
 800c850:	009000b9 	.word	0x009000b9
 800c854:	0030004d 	.word	0x0030004d
 800c858:	0008      	.short	0x0008
 800c85a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800c85e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800c862:	4299      	cmp	r1, r3
 800c864:	f000 814a 	beq.w	800cafc <uxr_read_framed_msg+0x2dc>
 800c868:	18e2      	adds	r2, r4, r3
 800c86a:	7892      	ldrb	r2, [r2, #2]
 800c86c:	2a7d      	cmp	r2, #125	@ 0x7d
 800c86e:	f000 8199 	beq.w	800cba4 <uxr_read_framed_msg+0x384>
 800c872:	3301      	adds	r3, #1
 800c874:	0858      	lsrs	r0, r3, #1
 800c876:	fba5 1000 	umull	r1, r0, r5, r0
 800c87a:	0880      	lsrs	r0, r0, #2
 800c87c:	212a      	movs	r1, #42	@ 0x2a
 800c87e:	fb01 3310 	mls	r3, r1, r0, r3
 800c882:	2a7e      	cmp	r2, #126	@ 0x7e
 800c884:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800c888:	f000 8252 	beq.w	800cd30 <uxr_read_framed_msg+0x510>
 800c88c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800c88e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800c890:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c894:	b29b      	uxth	r3, r3
 800c896:	2200      	movs	r2, #0
 800c898:	4299      	cmp	r1, r3
 800c89a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800c89c:	7022      	strb	r2, [r4, #0]
 800c89e:	f000 8179 	beq.w	800cb94 <uxr_read_framed_msg+0x374>
 800c8a2:	2000      	movs	r0, #0
 800c8a4:	b003      	add	sp, #12
 800c8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8aa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800c8ae:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800c8b2:	4299      	cmp	r1, r3
 800c8b4:	f000 8131 	beq.w	800cb1a <uxr_read_framed_msg+0x2fa>
 800c8b8:	18e2      	adds	r2, r4, r3
 800c8ba:	7890      	ldrb	r0, [r2, #2]
 800c8bc:	287d      	cmp	r0, #125	@ 0x7d
 800c8be:	f000 8190 	beq.w	800cbe2 <uxr_read_framed_msg+0x3c2>
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	085a      	lsrs	r2, r3, #1
 800c8c6:	fba5 1202 	umull	r1, r2, r5, r2
 800c8ca:	0892      	lsrs	r2, r2, #2
 800c8cc:	212a      	movs	r1, #42	@ 0x2a
 800c8ce:	fb01 3312 	mls	r3, r1, r2, r3
 800c8d2:	287e      	cmp	r0, #126	@ 0x7e
 800c8d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800c8d8:	f000 821a 	beq.w	800cd10 <uxr_read_framed_msg+0x4f0>
 800c8dc:	2307      	movs	r3, #7
 800c8de:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800c8e0:	7023      	strb	r3, [r4, #0]
 800c8e2:	e7ae      	b.n	800c842 <uxr_read_framed_msg+0x22>
 800c8e4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800c8e6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800c8ea:	459e      	cmp	lr, r3
 800c8ec:	d938      	bls.n	800c960 <uxr_read_framed_msg+0x140>
 800c8ee:	ee07 8a90 	vmov	s15, r8
 800c8f2:	212a      	movs	r1, #42	@ 0x2a
 800c8f4:	e020      	b.n	800c938 <uxr_read_framed_msg+0x118>
 800c8f6:	f89b c002 	ldrb.w	ip, [fp, #2]
 800c8fa:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800c8fe:	f000 80d4 	beq.w	800caaa <uxr_read_framed_msg+0x28a>
 800c902:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800c906:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800c90a:	f000 8219 	beq.w	800cd40 <uxr_read_framed_msg+0x520>
 800c90e:	f806 c003 	strb.w	ip, [r6, r3]
 800c912:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800c916:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800c918:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800c91c:	ea8a 000c 	eor.w	r0, sl, ip
 800c920:	b2c0      	uxtb	r0, r0
 800c922:	3301      	adds	r3, #1
 800c924:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800c928:	b29b      	uxth	r3, r3
 800c92a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800c92e:	4573      	cmp	r3, lr
 800c930:	8663      	strh	r3, [r4, #50]	@ 0x32
 800c932:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800c934:	f080 8120 	bcs.w	800cb78 <uxr_read_framed_msg+0x358>
 800c938:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800c93c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800c940:	f100 0c01 	add.w	ip, r0, #1
 800c944:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800c948:	fba5 8202 	umull	r8, r2, r5, r2
 800c94c:	0892      	lsrs	r2, r2, #2
 800c94e:	4582      	cmp	sl, r0
 800c950:	eb04 0b00 	add.w	fp, r4, r0
 800c954:	fb01 c212 	mls	r2, r1, r2, ip
 800c958:	d1cd      	bne.n	800c8f6 <uxr_read_framed_msg+0xd6>
 800c95a:	ee17 8a90 	vmov	r8, s15
 800c95e:	459e      	cmp	lr, r3
 800c960:	f040 8111 	bne.w	800cb86 <uxr_read_framed_msg+0x366>
 800c964:	2306      	movs	r3, #6
 800c966:	7023      	strb	r3, [r4, #0]
 800c968:	e76b      	b.n	800c842 <uxr_read_framed_msg+0x22>
 800c96a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800c96e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800c972:	4298      	cmp	r0, r3
 800c974:	f000 80c2 	beq.w	800cafc <uxr_read_framed_msg+0x2dc>
 800c978:	18e2      	adds	r2, r4, r3
 800c97a:	7891      	ldrb	r1, [r2, #2]
 800c97c:	297d      	cmp	r1, #125	@ 0x7d
 800c97e:	f000 814c 	beq.w	800cc1a <uxr_read_framed_msg+0x3fa>
 800c982:	3301      	adds	r3, #1
 800c984:	085a      	lsrs	r2, r3, #1
 800c986:	fba5 0202 	umull	r0, r2, r5, r2
 800c98a:	0892      	lsrs	r2, r2, #2
 800c98c:	202a      	movs	r0, #42	@ 0x2a
 800c98e:	fb00 3312 	mls	r3, r0, r2, r3
 800c992:	297e      	cmp	r1, #126	@ 0x7e
 800c994:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800c998:	f000 81ca 	beq.w	800cd30 <uxr_read_framed_msg+0x510>
 800c99c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800c99e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800c9a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	428b      	cmp	r3, r1
 800c9aa:	8623      	strh	r3, [r4, #48]	@ 0x30
 800c9ac:	8660      	strh	r0, [r4, #50]	@ 0x32
 800c9ae:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800c9b0:	f240 80df 	bls.w	800cb72 <uxr_read_framed_msg+0x352>
 800c9b4:	7020      	strb	r0, [r4, #0]
 800c9b6:	b003      	add	sp, #12
 800c9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9bc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800c9c0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800c9c4:	4299      	cmp	r1, r3
 800c9c6:	f000 80a8 	beq.w	800cb1a <uxr_read_framed_msg+0x2fa>
 800c9ca:	18e2      	adds	r2, r4, r3
 800c9cc:	7890      	ldrb	r0, [r2, #2]
 800c9ce:	287d      	cmp	r0, #125	@ 0x7d
 800c9d0:	f000 8164 	beq.w	800cc9c <uxr_read_framed_msg+0x47c>
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	085a      	lsrs	r2, r3, #1
 800c9d8:	fba5 1202 	umull	r1, r2, r5, r2
 800c9dc:	0892      	lsrs	r2, r2, #2
 800c9de:	212a      	movs	r1, #42	@ 0x2a
 800c9e0:	fb01 3312 	mls	r3, r1, r2, r3
 800c9e4:	287e      	cmp	r0, #126	@ 0x7e
 800c9e6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800c9ea:	f000 8191 	beq.w	800cd10 <uxr_read_framed_msg+0x4f0>
 800c9ee:	2304      	movs	r3, #4
 800c9f0:	8620      	strh	r0, [r4, #48]	@ 0x30
 800c9f2:	7023      	strb	r3, [r4, #0]
 800c9f4:	e725      	b.n	800c842 <uxr_read_framed_msg+0x22>
 800c9f6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800c9fa:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800c9fe:	4290      	cmp	r0, r2
 800ca00:	f000 80b3 	beq.w	800cb6a <uxr_read_framed_msg+0x34a>
 800ca04:	18a3      	adds	r3, r4, r2
 800ca06:	7899      	ldrb	r1, [r3, #2]
 800ca08:	297d      	cmp	r1, #125	@ 0x7d
 800ca0a:	f000 8164 	beq.w	800ccd6 <uxr_read_framed_msg+0x4b6>
 800ca0e:	3201      	adds	r2, #1
 800ca10:	0850      	lsrs	r0, r2, #1
 800ca12:	fba5 3000 	umull	r3, r0, r5, r0
 800ca16:	0880      	lsrs	r0, r0, #2
 800ca18:	232a      	movs	r3, #42	@ 0x2a
 800ca1a:	fb03 2210 	mls	r2, r3, r0, r2
 800ca1e:	297e      	cmp	r1, #126	@ 0x7e
 800ca20:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ca24:	f000 8188 	beq.w	800cd38 <uxr_read_framed_msg+0x518>
 800ca28:	7863      	ldrb	r3, [r4, #1]
 800ca2a:	428b      	cmp	r3, r1
 800ca2c:	bf0c      	ite	eq
 800ca2e:	2303      	moveq	r3, #3
 800ca30:	2300      	movne	r3, #0
 800ca32:	7023      	strb	r3, [r4, #0]
 800ca34:	e705      	b.n	800c842 <uxr_read_framed_msg+0x22>
 800ca36:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ca3a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ca3e:	2200      	movs	r2, #0
 800ca40:	4299      	cmp	r1, r3
 800ca42:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800ca46:	d06c      	beq.n	800cb22 <uxr_read_framed_msg+0x302>
 800ca48:	18e2      	adds	r2, r4, r3
 800ca4a:	7890      	ldrb	r0, [r2, #2]
 800ca4c:	287d      	cmp	r0, #125	@ 0x7d
 800ca4e:	f000 8101 	beq.w	800cc54 <uxr_read_framed_msg+0x434>
 800ca52:	3301      	adds	r3, #1
 800ca54:	085a      	lsrs	r2, r3, #1
 800ca56:	fba5 1202 	umull	r1, r2, r5, r2
 800ca5a:	0892      	lsrs	r2, r2, #2
 800ca5c:	212a      	movs	r1, #42	@ 0x2a
 800ca5e:	fb01 3312 	mls	r3, r1, r2, r3
 800ca62:	287e      	cmp	r0, #126	@ 0x7e
 800ca64:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800ca68:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ca6c:	d059      	beq.n	800cb22 <uxr_read_framed_msg+0x302>
 800ca6e:	2302      	movs	r3, #2
 800ca70:	7023      	strb	r3, [r4, #0]
 800ca72:	e6e6      	b.n	800c842 <uxr_read_framed_msg+0x22>
 800ca74:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800ca78:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ca7c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800ca80:	1c51      	adds	r1, r2, #1
 800ca82:	084b      	lsrs	r3, r1, #1
 800ca84:	fba5 c303 	umull	ip, r3, r5, r3
 800ca88:	089b      	lsrs	r3, r3, #2
 800ca8a:	fb0e 1313 	mls	r3, lr, r3, r1
 800ca8e:	4592      	cmp	sl, r2
 800ca90:	eb04 0002 	add.w	r0, r4, r2
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	f43f af04 	beq.w	800c8a2 <uxr_read_framed_msg+0x82>
 800ca9a:	7883      	ldrb	r3, [r0, #2]
 800ca9c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800caa0:	2b7e      	cmp	r3, #126	@ 0x7e
 800caa2:	d1ed      	bne.n	800ca80 <uxr_read_framed_msg+0x260>
 800caa4:	2301      	movs	r3, #1
 800caa6:	7023      	strb	r3, [r4, #0]
 800caa8:	e6cb      	b.n	800c842 <uxr_read_framed_msg+0x22>
 800caaa:	f100 0c01 	add.w	ip, r0, #1
 800caae:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800cab2:	fba5 8202 	umull	r8, r2, r5, r2
 800cab6:	0892      	lsrs	r2, r2, #2
 800cab8:	fb01 c212 	mls	r2, r1, r2, ip
 800cabc:	eb04 0c02 	add.w	ip, r4, r2
 800cac0:	b2d2      	uxtb	r2, r2
 800cac2:	4592      	cmp	sl, r2
 800cac4:	f100 0002 	add.w	r0, r0, #2
 800cac8:	f43f af47 	beq.w	800c95a <uxr_read_framed_msg+0x13a>
 800cacc:	0842      	lsrs	r2, r0, #1
 800cace:	f89c a002 	ldrb.w	sl, [ip, #2]
 800cad2:	fba5 8202 	umull	r8, r2, r5, r2
 800cad6:	0892      	lsrs	r2, r2, #2
 800cad8:	fb01 0012 	mls	r0, r1, r2, r0
 800cadc:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800cae0:	f08a 0c20 	eor.w	ip, sl, #32
 800cae4:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800cae8:	f47f af11 	bne.w	800c90e <uxr_read_framed_msg+0xee>
 800caec:	459e      	cmp	lr, r3
 800caee:	ee17 8a90 	vmov	r8, s15
 800caf2:	f43f af37 	beq.w	800c964 <uxr_read_framed_msg+0x144>
 800caf6:	2301      	movs	r3, #1
 800caf8:	7023      	strb	r3, [r4, #0]
 800cafa:	e6a2      	b.n	800c842 <uxr_read_framed_msg+0x22>
 800cafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	2301      	movs	r3, #1
 800cb02:	9301      	str	r3, [sp, #4]
 800cb04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb06:	464a      	mov	r2, r9
 800cb08:	4641      	mov	r1, r8
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f7ff fe06 	bl	800c71c <uxr_framing_read_transport>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	f43f aec6 	beq.w	800c8a2 <uxr_read_framed_msg+0x82>
 800cb16:	7823      	ldrb	r3, [r4, #0]
 800cb18:	e693      	b.n	800c842 <uxr_read_framed_msg+0x22>
 800cb1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb1c:	9300      	str	r3, [sp, #0]
 800cb1e:	2302      	movs	r3, #2
 800cb20:	e7ef      	b.n	800cb02 <uxr_read_framed_msg+0x2e2>
 800cb22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	2304      	movs	r3, #4
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	464a      	mov	r2, r9
 800cb2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb2e:	4641      	mov	r1, r8
 800cb30:	4620      	mov	r0, r4
 800cb32:	f7ff fdf3 	bl	800c71c <uxr_framing_read_transport>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d1ed      	bne.n	800cb16 <uxr_read_framed_msg+0x2f6>
 800cb3a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800cb3e:	2b7e      	cmp	r3, #126	@ 0x7e
 800cb40:	d0e9      	beq.n	800cb16 <uxr_read_framed_msg+0x2f6>
 800cb42:	e6ae      	b.n	800c8a2 <uxr_read_framed_msg+0x82>
 800cb44:	30c30c31 	.word	0x30c30c31
 800cb48:	08012a80 	.word	0x08012a80
 800cb4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	2305      	movs	r3, #5
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb56:	f7ff fde1 	bl	800c71c <uxr_framing_read_transport>
 800cb5a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800cb5e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800cb62:	429a      	cmp	r2, r3
 800cb64:	f43f ae9d 	beq.w	800c8a2 <uxr_read_framed_msg+0x82>
 800cb68:	e668      	b.n	800c83c <uxr_read_framed_msg+0x1c>
 800cb6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	2303      	movs	r3, #3
 800cb70:	e7c7      	b.n	800cb02 <uxr_read_framed_msg+0x2e2>
 800cb72:	2305      	movs	r3, #5
 800cb74:	7023      	strb	r3, [r4, #0]
 800cb76:	e664      	b.n	800c842 <uxr_read_framed_msg+0x22>
 800cb78:	ee17 8a90 	vmov	r8, s15
 800cb7c:	f43f aef2 	beq.w	800c964 <uxr_read_framed_msg+0x144>
 800cb80:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800cb84:	d08e      	beq.n	800caa4 <uxr_read_framed_msg+0x284>
 800cb86:	ebae 0303 	sub.w	r3, lr, r3
 800cb8a:	3302      	adds	r3, #2
 800cb8c:	9301      	str	r3, [sp, #4]
 800cb8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	e7b7      	b.n	800cb04 <uxr_read_framed_msg+0x2e4>
 800cb94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb96:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800cb9a:	7013      	strb	r3, [r2, #0]
 800cb9c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800cb9e:	b003      	add	sp, #12
 800cba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba4:	f103 0c01 	add.w	ip, r3, #1
 800cba8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800cbac:	fba5 0202 	umull	r0, r2, r5, r2
 800cbb0:	0892      	lsrs	r2, r2, #2
 800cbb2:	202a      	movs	r0, #42	@ 0x2a
 800cbb4:	fb00 c212 	mls	r2, r0, r2, ip
 800cbb8:	fa5f fc82 	uxtb.w	ip, r2
 800cbbc:	4561      	cmp	r1, ip
 800cbbe:	d09d      	beq.n	800cafc <uxr_read_framed_msg+0x2dc>
 800cbc0:	3302      	adds	r3, #2
 800cbc2:	4422      	add	r2, r4
 800cbc4:	0859      	lsrs	r1, r3, #1
 800cbc6:	7892      	ldrb	r2, [r2, #2]
 800cbc8:	fba5 c101 	umull	ip, r1, r5, r1
 800cbcc:	0889      	lsrs	r1, r1, #2
 800cbce:	fb00 3311 	mls	r3, r0, r1, r3
 800cbd2:	2a7e      	cmp	r2, #126	@ 0x7e
 800cbd4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800cbd8:	f000 80aa 	beq.w	800cd30 <uxr_read_framed_msg+0x510>
 800cbdc:	f082 0220 	eor.w	r2, r2, #32
 800cbe0:	e654      	b.n	800c88c <uxr_read_framed_msg+0x6c>
 800cbe2:	1c58      	adds	r0, r3, #1
 800cbe4:	0842      	lsrs	r2, r0, #1
 800cbe6:	fba5 c202 	umull	ip, r2, r5, r2
 800cbea:	0892      	lsrs	r2, r2, #2
 800cbec:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800cbf0:	fb0c 0212 	mls	r2, ip, r2, r0
 800cbf4:	b2d0      	uxtb	r0, r2
 800cbf6:	4281      	cmp	r1, r0
 800cbf8:	d08f      	beq.n	800cb1a <uxr_read_framed_msg+0x2fa>
 800cbfa:	4422      	add	r2, r4
 800cbfc:	3302      	adds	r3, #2
 800cbfe:	7890      	ldrb	r0, [r2, #2]
 800cc00:	085a      	lsrs	r2, r3, #1
 800cc02:	fba5 1202 	umull	r1, r2, r5, r2
 800cc06:	0892      	lsrs	r2, r2, #2
 800cc08:	fb0c 3312 	mls	r3, ip, r2, r3
 800cc0c:	287e      	cmp	r0, #126	@ 0x7e
 800cc0e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800cc12:	d07d      	beq.n	800cd10 <uxr_read_framed_msg+0x4f0>
 800cc14:	f080 0020 	eor.w	r0, r0, #32
 800cc18:	e660      	b.n	800c8dc <uxr_read_framed_msg+0xbc>
 800cc1a:	1c59      	adds	r1, r3, #1
 800cc1c:	084a      	lsrs	r2, r1, #1
 800cc1e:	fba5 c202 	umull	ip, r2, r5, r2
 800cc22:	0892      	lsrs	r2, r2, #2
 800cc24:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800cc28:	fb0c 1212 	mls	r2, ip, r2, r1
 800cc2c:	b2d1      	uxtb	r1, r2
 800cc2e:	4288      	cmp	r0, r1
 800cc30:	f43f af64 	beq.w	800cafc <uxr_read_framed_msg+0x2dc>
 800cc34:	4422      	add	r2, r4
 800cc36:	3302      	adds	r3, #2
 800cc38:	7891      	ldrb	r1, [r2, #2]
 800cc3a:	085a      	lsrs	r2, r3, #1
 800cc3c:	fba5 0202 	umull	r0, r2, r5, r2
 800cc40:	0892      	lsrs	r2, r2, #2
 800cc42:	fb0c 3312 	mls	r3, ip, r2, r3
 800cc46:	297e      	cmp	r1, #126	@ 0x7e
 800cc48:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800cc4c:	d070      	beq.n	800cd30 <uxr_read_framed_msg+0x510>
 800cc4e:	f081 0120 	eor.w	r1, r1, #32
 800cc52:	e6a3      	b.n	800c99c <uxr_read_framed_msg+0x17c>
 800cc54:	f103 0c01 	add.w	ip, r3, #1
 800cc58:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800cc5c:	fba5 0202 	umull	r0, r2, r5, r2
 800cc60:	0892      	lsrs	r2, r2, #2
 800cc62:	202a      	movs	r0, #42	@ 0x2a
 800cc64:	fb00 c212 	mls	r2, r0, r2, ip
 800cc68:	fa5f fc82 	uxtb.w	ip, r2
 800cc6c:	4561      	cmp	r1, ip
 800cc6e:	f43f af58 	beq.w	800cb22 <uxr_read_framed_msg+0x302>
 800cc72:	4422      	add	r2, r4
 800cc74:	3302      	adds	r3, #2
 800cc76:	7891      	ldrb	r1, [r2, #2]
 800cc78:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800cc7c:	085a      	lsrs	r2, r3, #1
 800cc7e:	fba5 c202 	umull	ip, r2, r5, r2
 800cc82:	0892      	lsrs	r2, r2, #2
 800cc84:	fb00 3312 	mls	r3, r0, r2, r3
 800cc88:	297e      	cmp	r1, #126	@ 0x7e
 800cc8a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800cc8e:	f43f af48 	beq.w	800cb22 <uxr_read_framed_msg+0x302>
 800cc92:	f081 0120 	eor.w	r1, r1, #32
 800cc96:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800cc9a:	e6e8      	b.n	800ca6e <uxr_read_framed_msg+0x24e>
 800cc9c:	1c58      	adds	r0, r3, #1
 800cc9e:	0842      	lsrs	r2, r0, #1
 800cca0:	fba5 c202 	umull	ip, r2, r5, r2
 800cca4:	0892      	lsrs	r2, r2, #2
 800cca6:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ccaa:	fb0c 0212 	mls	r2, ip, r2, r0
 800ccae:	b2d0      	uxtb	r0, r2
 800ccb0:	4281      	cmp	r1, r0
 800ccb2:	f43f af32 	beq.w	800cb1a <uxr_read_framed_msg+0x2fa>
 800ccb6:	4422      	add	r2, r4
 800ccb8:	3302      	adds	r3, #2
 800ccba:	7890      	ldrb	r0, [r2, #2]
 800ccbc:	085a      	lsrs	r2, r3, #1
 800ccbe:	fba5 1202 	umull	r1, r2, r5, r2
 800ccc2:	0892      	lsrs	r2, r2, #2
 800ccc4:	fb0c 3312 	mls	r3, ip, r2, r3
 800ccc8:	287e      	cmp	r0, #126	@ 0x7e
 800ccca:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ccce:	d01f      	beq.n	800cd10 <uxr_read_framed_msg+0x4f0>
 800ccd0:	f080 0020 	eor.w	r0, r0, #32
 800ccd4:	e68b      	b.n	800c9ee <uxr_read_framed_msg+0x1ce>
 800ccd6:	1c51      	adds	r1, r2, #1
 800ccd8:	084b      	lsrs	r3, r1, #1
 800ccda:	fba5 c303 	umull	ip, r3, r5, r3
 800ccde:	089b      	lsrs	r3, r3, #2
 800cce0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800cce4:	fb0c 1313 	mls	r3, ip, r3, r1
 800cce8:	b2d9      	uxtb	r1, r3
 800ccea:	4288      	cmp	r0, r1
 800ccec:	f43f af3d 	beq.w	800cb6a <uxr_read_framed_msg+0x34a>
 800ccf0:	3202      	adds	r2, #2
 800ccf2:	4423      	add	r3, r4
 800ccf4:	0850      	lsrs	r0, r2, #1
 800ccf6:	789b      	ldrb	r3, [r3, #2]
 800ccf8:	fba5 1000 	umull	r1, r0, r5, r0
 800ccfc:	0880      	lsrs	r0, r0, #2
 800ccfe:	fb0c 2210 	mls	r2, ip, r0, r2
 800cd02:	2b7e      	cmp	r3, #126	@ 0x7e
 800cd04:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800cd08:	d016      	beq.n	800cd38 <uxr_read_framed_msg+0x518>
 800cd0a:	f083 0120 	eor.w	r1, r3, #32
 800cd0e:	e68b      	b.n	800ca28 <uxr_read_framed_msg+0x208>
 800cd10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	2302      	movs	r3, #2
 800cd16:	9301      	str	r3, [sp, #4]
 800cd18:	464a      	mov	r2, r9
 800cd1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd1c:	4641      	mov	r1, r8
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f7ff fcfc 	bl	800c71c <uxr_framing_read_transport>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	f47f aef6 	bne.w	800cb16 <uxr_read_framed_msg+0x2f6>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	7023      	strb	r3, [r4, #0]
 800cd2e:	e588      	b.n	800c842 <uxr_read_framed_msg+0x22>
 800cd30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	2301      	movs	r3, #1
 800cd36:	e7ee      	b.n	800cd16 <uxr_read_framed_msg+0x4f6>
 800cd38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	e7ea      	b.n	800cd16 <uxr_read_framed_msg+0x4f6>
 800cd40:	ee17 8a90 	vmov	r8, s15
 800cd44:	e6ae      	b.n	800caa4 <uxr_read_framed_msg+0x284>
 800cd46:	bf00      	nop

0800cd48 <uxr_stream_id>:
 800cd48:	2901      	cmp	r1, #1
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	d01d      	beq.n	800cd8a <uxr_stream_id+0x42>
 800cd4e:	2902      	cmp	r1, #2
 800cd50:	f04f 0c00 	mov.w	ip, #0
 800cd54:	d01e      	beq.n	800cd94 <uxr_stream_id+0x4c>
 800cd56:	2300      	movs	r3, #0
 800cd58:	f36c 0307 	bfi	r3, ip, #0, #8
 800cd5c:	f360 230f 	bfi	r3, r0, #8, #8
 800cd60:	f361 4317 	bfi	r3, r1, #16, #8
 800cd64:	f362 631f 	bfi	r3, r2, #24, #8
 800cd68:	b2da      	uxtb	r2, r3
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	f362 0007 	bfi	r0, r2, #0, #8
 800cd70:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cd74:	f362 200f 	bfi	r0, r2, #8, #8
 800cd78:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800cd7c:	f362 4017 	bfi	r0, r2, #16, #8
 800cd80:	0e1b      	lsrs	r3, r3, #24
 800cd82:	f363 601f 	bfi	r0, r3, #24, #8
 800cd86:	b002      	add	sp, #8
 800cd88:	4770      	bx	lr
 800cd8a:	f100 0c01 	add.w	ip, r0, #1
 800cd8e:	fa5f fc8c 	uxtb.w	ip, ip
 800cd92:	e7e0      	b.n	800cd56 <uxr_stream_id+0xe>
 800cd94:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800cd98:	e7dd      	b.n	800cd56 <uxr_stream_id+0xe>
 800cd9a:	bf00      	nop

0800cd9c <uxr_stream_id_from_raw>:
 800cd9c:	b082      	sub	sp, #8
 800cd9e:	b130      	cbz	r0, 800cdae <uxr_stream_id_from_raw+0x12>
 800cda0:	0603      	lsls	r3, r0, #24
 800cda2:	d420      	bmi.n	800cde6 <uxr_stream_id_from_raw+0x4a>
 800cda4:	1e42      	subs	r2, r0, #1
 800cda6:	b2d2      	uxtb	r2, r2
 800cda8:	f04f 0c01 	mov.w	ip, #1
 800cdac:	e001      	b.n	800cdb2 <uxr_stream_id_from_raw+0x16>
 800cdae:	4684      	mov	ip, r0
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	f360 0307 	bfi	r3, r0, #0, #8
 800cdb8:	f362 230f 	bfi	r3, r2, #8, #8
 800cdbc:	f36c 4317 	bfi	r3, ip, #16, #8
 800cdc0:	f361 631f 	bfi	r3, r1, #24, #8
 800cdc4:	b2da      	uxtb	r2, r3
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	f362 0007 	bfi	r0, r2, #0, #8
 800cdcc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cdd0:	f362 200f 	bfi	r0, r2, #8, #8
 800cdd4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800cdd8:	f362 4017 	bfi	r0, r2, #16, #8
 800cddc:	0e1b      	lsrs	r3, r3, #24
 800cdde:	f363 601f 	bfi	r0, r3, #24, #8
 800cde2:	b002      	add	sp, #8
 800cde4:	4770      	bx	lr
 800cde6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800cdea:	f04f 0c02 	mov.w	ip, #2
 800cdee:	e7e0      	b.n	800cdb2 <uxr_stream_id_from_raw+0x16>

0800cdf0 <uxr_init_stream_storage>:
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	7403      	strb	r3, [r0, #16]
 800cdf4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800cdf8:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800cdfc:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop

0800ce04 <uxr_reset_stream_storage>:
 800ce04:	b570      	push	{r4, r5, r6, lr}
 800ce06:	7c03      	ldrb	r3, [r0, #16]
 800ce08:	4604      	mov	r4, r0
 800ce0a:	b153      	cbz	r3, 800ce22 <uxr_reset_stream_storage+0x1e>
 800ce0c:	4606      	mov	r6, r0
 800ce0e:	2500      	movs	r5, #0
 800ce10:	4630      	mov	r0, r6
 800ce12:	f003 fa5d 	bl	80102d0 <uxr_reset_output_best_effort_stream>
 800ce16:	7c23      	ldrb	r3, [r4, #16]
 800ce18:	3501      	adds	r5, #1
 800ce1a:	42ab      	cmp	r3, r5
 800ce1c:	f106 0610 	add.w	r6, r6, #16
 800ce20:	d8f6      	bhi.n	800ce10 <uxr_reset_stream_storage+0xc>
 800ce22:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ce26:	b163      	cbz	r3, 800ce42 <uxr_reset_stream_storage+0x3e>
 800ce28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce2c:	2500      	movs	r5, #0
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f003 f850 	bl	800fed4 <uxr_reset_input_best_effort_stream>
 800ce34:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ce38:	3501      	adds	r5, #1
 800ce3a:	42ab      	cmp	r3, r5
 800ce3c:	f106 0602 	add.w	r6, r6, #2
 800ce40:	d8f5      	bhi.n	800ce2e <uxr_reset_stream_storage+0x2a>
 800ce42:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ce46:	b163      	cbz	r3, 800ce62 <uxr_reset_stream_storage+0x5e>
 800ce48:	f104 0618 	add.w	r6, r4, #24
 800ce4c:	2500      	movs	r5, #0
 800ce4e:	4630      	mov	r0, r6
 800ce50:	f003 faea 	bl	8010428 <uxr_reset_output_reliable_stream>
 800ce54:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ce58:	3501      	adds	r5, #1
 800ce5a:	42ab      	cmp	r3, r5
 800ce5c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800ce60:	d8f5      	bhi.n	800ce4e <uxr_reset_stream_storage+0x4a>
 800ce62:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ce66:	b163      	cbz	r3, 800ce82 <uxr_reset_stream_storage+0x7e>
 800ce68:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ce6c:	2500      	movs	r5, #0
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f003 f8a4 	bl	800ffbc <uxr_reset_input_reliable_stream>
 800ce74:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ce78:	3501      	adds	r5, #1
 800ce7a:	42ab      	cmp	r3, r5
 800ce7c:	f106 0618 	add.w	r6, r6, #24
 800ce80:	d8f5      	bhi.n	800ce6e <uxr_reset_stream_storage+0x6a>
 800ce82:	bd70      	pop	{r4, r5, r6, pc}

0800ce84 <uxr_add_output_best_effort_buffer>:
 800ce84:	b510      	push	{r4, lr}
 800ce86:	7c04      	ldrb	r4, [r0, #16]
 800ce88:	f104 0c01 	add.w	ip, r4, #1
 800ce8c:	b082      	sub	sp, #8
 800ce8e:	f880 c010 	strb.w	ip, [r0, #16]
 800ce92:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ce96:	f003 fa11 	bl	80102bc <uxr_init_output_best_effort_stream>
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	4611      	mov	r1, r2
 800ce9e:	4620      	mov	r0, r4
 800cea0:	b002      	add	sp, #8
 800cea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cea6:	f7ff bf4f 	b.w	800cd48 <uxr_stream_id>
 800ceaa:	bf00      	nop

0800ceac <uxr_add_output_reliable_buffer>:
 800ceac:	b510      	push	{r4, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	4684      	mov	ip, r0
 800ceb2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ceb6:	9000      	str	r0, [sp, #0]
 800ceb8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800cebc:	2028      	movs	r0, #40	@ 0x28
 800cebe:	fb00 c004 	mla	r0, r0, r4, ip
 800cec2:	f104 0e01 	add.w	lr, r4, #1
 800cec6:	3018      	adds	r0, #24
 800cec8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800cecc:	f003 fa74 	bl	80103b8 <uxr_init_output_reliable_stream>
 800ced0:	2201      	movs	r2, #1
 800ced2:	2102      	movs	r1, #2
 800ced4:	4620      	mov	r0, r4
 800ced6:	b004      	add	sp, #16
 800ced8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cedc:	f7ff bf34 	b.w	800cd48 <uxr_stream_id>

0800cee0 <uxr_add_input_best_effort_buffer>:
 800cee0:	b510      	push	{r4, lr}
 800cee2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800cee6:	4603      	mov	r3, r0
 800cee8:	1c62      	adds	r2, r4, #1
 800ceea:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ceee:	b082      	sub	sp, #8
 800cef0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800cef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cef8:	f002 ffe8 	bl	800fecc <uxr_init_input_best_effort_stream>
 800cefc:	2200      	movs	r2, #0
 800cefe:	2101      	movs	r1, #1
 800cf00:	4620      	mov	r0, r4
 800cf02:	b002      	add	sp, #8
 800cf04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf08:	f7ff bf1e 	b.w	800cd48 <uxr_stream_id>

0800cf0c <uxr_add_input_reliable_buffer>:
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	4684      	mov	ip, r0
 800cf12:	9806      	ldr	r0, [sp, #24]
 800cf14:	9000      	str	r0, [sp, #0]
 800cf16:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800cf1a:	2018      	movs	r0, #24
 800cf1c:	fb00 c004 	mla	r0, r0, r4, ip
 800cf20:	f104 0e01 	add.w	lr, r4, #1
 800cf24:	3048      	adds	r0, #72	@ 0x48
 800cf26:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800cf2a:	f003 f81b 	bl	800ff64 <uxr_init_input_reliable_stream>
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2102      	movs	r1, #2
 800cf32:	4620      	mov	r0, r4
 800cf34:	b004      	add	sp, #16
 800cf36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf3a:	f7ff bf05 	b.w	800cd48 <uxr_stream_id>
 800cf3e:	bf00      	nop

0800cf40 <uxr_get_output_best_effort_stream>:
 800cf40:	7c03      	ldrb	r3, [r0, #16]
 800cf42:	428b      	cmp	r3, r1
 800cf44:	bf8c      	ite	hi
 800cf46:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800cf4a:	2000      	movls	r0, #0
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop

0800cf50 <uxr_get_output_reliable_stream>:
 800cf50:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cf54:	428b      	cmp	r3, r1
 800cf56:	bf83      	ittte	hi
 800cf58:	2328      	movhi	r3, #40	@ 0x28
 800cf5a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800cf5e:	3018      	addhi	r0, #24
 800cf60:	2000      	movls	r0, #0
 800cf62:	4770      	bx	lr

0800cf64 <uxr_get_input_best_effort_stream>:
 800cf64:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cf68:	428b      	cmp	r3, r1
 800cf6a:	bf86      	itte	hi
 800cf6c:	3121      	addhi	r1, #33	@ 0x21
 800cf6e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800cf72:	2000      	movls	r0, #0
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop

0800cf78 <uxr_get_input_reliable_stream>:
 800cf78:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800cf7c:	428b      	cmp	r3, r1
 800cf7e:	bf83      	ittte	hi
 800cf80:	2318      	movhi	r3, #24
 800cf82:	fb03 0001 	mlahi	r0, r3, r1, r0
 800cf86:	3048      	addhi	r0, #72	@ 0x48
 800cf88:	2000      	movls	r0, #0
 800cf8a:	4770      	bx	lr

0800cf8c <uxr_output_streams_confirmed>:
 800cf8c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cf90:	b183      	cbz	r3, 800cfb4 <uxr_output_streams_confirmed+0x28>
 800cf92:	b570      	push	{r4, r5, r6, lr}
 800cf94:	4606      	mov	r6, r0
 800cf96:	f100 0518 	add.w	r5, r0, #24
 800cf9a:	2400      	movs	r4, #0
 800cf9c:	e001      	b.n	800cfa2 <uxr_output_streams_confirmed+0x16>
 800cf9e:	3528      	adds	r5, #40	@ 0x28
 800cfa0:	b138      	cbz	r0, 800cfb2 <uxr_output_streams_confirmed+0x26>
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	f003 fcb0 	bl	8010908 <uxr_is_output_up_to_date>
 800cfa8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800cfac:	3401      	adds	r4, #1
 800cfae:	42a3      	cmp	r3, r4
 800cfb0:	d8f5      	bhi.n	800cf9e <uxr_output_streams_confirmed+0x12>
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}
 800cfb4:	2001      	movs	r0, #1
 800cfb6:	4770      	bx	lr

0800cfb8 <uxr_buffer_submessage_header>:
 800cfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfba:	4604      	mov	r4, r0
 800cfbc:	460e      	mov	r6, r1
 800cfbe:	2104      	movs	r1, #4
 800cfc0:	4615      	mov	r5, r2
 800cfc2:	461f      	mov	r7, r3
 800cfc4:	f7fd fe3e 	bl	800ac44 <ucdr_align_to>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	ea47 0203 	orr.w	r2, r7, r3
 800cfce:	4631      	mov	r1, r6
 800cfd0:	7523      	strb	r3, [r4, #20]
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	462b      	mov	r3, r5
 800cfd6:	f000 fa27 	bl	800d428 <uxr_serialize_submessage_header>
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f7fd fe48 	bl	800ac70 <ucdr_buffer_remaining>
 800cfe0:	42a8      	cmp	r0, r5
 800cfe2:	bf34      	ite	cc
 800cfe4:	2000      	movcc	r0, #0
 800cfe6:	2001      	movcs	r0, #1
 800cfe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfea:	bf00      	nop

0800cfec <uxr_read_submessage_header>:
 800cfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff0:	4604      	mov	r4, r0
 800cff2:	460d      	mov	r5, r1
 800cff4:	2104      	movs	r1, #4
 800cff6:	4616      	mov	r6, r2
 800cff8:	4698      	mov	r8, r3
 800cffa:	f7fd fe23 	bl	800ac44 <ucdr_align_to>
 800cffe:	4620      	mov	r0, r4
 800d000:	f7fd fe36 	bl	800ac70 <ucdr_buffer_remaining>
 800d004:	2803      	cmp	r0, #3
 800d006:	bf8c      	ite	hi
 800d008:	2701      	movhi	r7, #1
 800d00a:	2700      	movls	r7, #0
 800d00c:	d802      	bhi.n	800d014 <uxr_read_submessage_header+0x28>
 800d00e:	4638      	mov	r0, r7
 800d010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d014:	4633      	mov	r3, r6
 800d016:	4642      	mov	r2, r8
 800d018:	4620      	mov	r0, r4
 800d01a:	4629      	mov	r1, r5
 800d01c:	f000 fa18 	bl	800d450 <uxr_deserialize_submessage_header>
 800d020:	f898 3000 	ldrb.w	r3, [r8]
 800d024:	f003 0201 	and.w	r2, r3, #1
 800d028:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800d02c:	f888 3000 	strb.w	r3, [r8]
 800d030:	7522      	strb	r2, [r4, #20]
 800d032:	4638      	mov	r0, r7
 800d034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d038 <uxr_submessage_padding>:
 800d038:	f010 0003 	ands.w	r0, r0, #3
 800d03c:	bf18      	it	ne
 800d03e:	f1c0 0004 	rsbne	r0, r0, #4
 800d042:	4770      	bx	lr

0800d044 <uxr_millis>:
 800d044:	b510      	push	{r4, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	4669      	mov	r1, sp
 800d04a:	2001      	movs	r0, #1
 800d04c:	f7f4 f8cc 	bl	80011e8 <clock_gettime>
 800d050:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800d054:	4906      	ldr	r1, [pc, #24]	@ (800d070 <uxr_millis+0x2c>)
 800d056:	fba0 0301 	umull	r0, r3, r0, r1
 800d05a:	1900      	adds	r0, r0, r4
 800d05c:	fb01 3102 	mla	r1, r1, r2, r3
 800d060:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800d064:	4a03      	ldr	r2, [pc, #12]	@ (800d074 <uxr_millis+0x30>)
 800d066:	2300      	movs	r3, #0
 800d068:	f7f3 f942 	bl	80002f0 <__aeabi_ldivmod>
 800d06c:	b004      	add	sp, #16
 800d06e:	bd10      	pop	{r4, pc}
 800d070:	3b9aca00 	.word	0x3b9aca00
 800d074:	000f4240 	.word	0x000f4240

0800d078 <uxr_nanos>:
 800d078:	b510      	push	{r4, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	4669      	mov	r1, sp
 800d07e:	2001      	movs	r0, #1
 800d080:	f7f4 f8b2 	bl	80011e8 <clock_gettime>
 800d084:	4a06      	ldr	r2, [pc, #24]	@ (800d0a0 <uxr_nanos+0x28>)
 800d086:	9800      	ldr	r0, [sp, #0]
 800d088:	9902      	ldr	r1, [sp, #8]
 800d08a:	9c01      	ldr	r4, [sp, #4]
 800d08c:	fba0 0302 	umull	r0, r3, r0, r2
 800d090:	1840      	adds	r0, r0, r1
 800d092:	fb02 3304 	mla	r3, r2, r4, r3
 800d096:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800d09a:	b004      	add	sp, #16
 800d09c:	bd10      	pop	{r4, pc}
 800d09e:	bf00      	nop
 800d0a0:	3b9aca00 	.word	0x3b9aca00

0800d0a4 <on_full_output_buffer_fragmented>:
 800d0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a8:	460c      	mov	r4, r1
 800d0aa:	b08a      	sub	sp, #40	@ 0x28
 800d0ac:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800d0b0:	4606      	mov	r6, r0
 800d0b2:	f104 0008 	add.w	r0, r4, #8
 800d0b6:	f7ff ff4b 	bl	800cf50 <uxr_get_output_reliable_stream>
 800d0ba:	4605      	mov	r5, r0
 800d0bc:	f003 fc2e 	bl	801091c <get_available_free_slots>
 800d0c0:	b968      	cbnz	r0, 800d0de <on_full_output_buffer_fragmented+0x3a>
 800d0c2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	4798      	blx	r3
 800d0ca:	b918      	cbnz	r0, 800d0d4 <on_full_output_buffer_fragmented+0x30>
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	b00a      	add	sp, #40	@ 0x28
 800d0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f003 fc21 	bl	801091c <get_available_free_slots>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	d0f6      	beq.n	800d0cc <on_full_output_buffer_fragmented+0x28>
 800d0de:	8929      	ldrh	r1, [r5, #8]
 800d0e0:	89eb      	ldrh	r3, [r5, #14]
 800d0e2:	7b28      	ldrb	r0, [r5, #12]
 800d0e4:	686a      	ldr	r2, [r5, #4]
 800d0e6:	fbb2 f8f1 	udiv	r8, r2, r1
 800d0ea:	fbb3 f2f1 	udiv	r2, r3, r1
 800d0ee:	fb01 3112 	mls	r1, r1, r2, r3
 800d0f2:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800d0f6:	b289      	uxth	r1, r1
 800d0f8:	fb08 f101 	mul.w	r1, r8, r1
 800d0fc:	30fc      	adds	r0, #252	@ 0xfc
 800d0fe:	f1a8 0804 	sub.w	r8, r8, #4
 800d102:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800d106:	4440      	add	r0, r8
 800d108:	b287      	uxth	r7, r0
 800d10a:	1bdb      	subs	r3, r3, r7
 800d10c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	3104      	adds	r1, #4
 800d114:	4419      	add	r1, r3
 800d116:	4642      	mov	r2, r8
 800d118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	a802      	add	r0, sp, #8
 800d120:	2300      	movs	r3, #0
 800d122:	f7fd fd63 	bl	800abec <ucdr_init_buffer_origin_offset>
 800d126:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800d12a:	f102 0308 	add.w	r3, r2, #8
 800d12e:	4543      	cmp	r3, r8
 800d130:	d928      	bls.n	800d184 <on_full_output_buffer_fragmented+0xe0>
 800d132:	463a      	mov	r2, r7
 800d134:	2300      	movs	r3, #0
 800d136:	210d      	movs	r1, #13
 800d138:	a802      	add	r0, sp, #8
 800d13a:	f7ff ff3d 	bl	800cfb8 <uxr_buffer_submessage_header>
 800d13e:	8929      	ldrh	r1, [r5, #8]
 800d140:	89eb      	ldrh	r3, [r5, #14]
 800d142:	fbb3 f2f1 	udiv	r2, r3, r1
 800d146:	fb01 3312 	mls	r3, r1, r2, r3
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	686a      	ldr	r2, [r5, #4]
 800d14e:	fbb2 f2f1 	udiv	r2, r2, r1
 800d152:	fb02 f303 	mul.w	r3, r2, r3
 800d156:	682a      	ldr	r2, [r5, #0]
 800d158:	f842 8003 	str.w	r8, [r2, r3]
 800d15c:	89e8      	ldrh	r0, [r5, #14]
 800d15e:	2101      	movs	r1, #1
 800d160:	f003 fbfc 	bl	801095c <uxr_seq_num_add>
 800d164:	9904      	ldr	r1, [sp, #16]
 800d166:	9a03      	ldr	r2, [sp, #12]
 800d168:	81e8      	strh	r0, [r5, #14]
 800d16a:	1a52      	subs	r2, r2, r1
 800d16c:	4630      	mov	r0, r6
 800d16e:	f7fd fd4f 	bl	800ac10 <ucdr_init_buffer>
 800d172:	4630      	mov	r0, r6
 800d174:	490f      	ldr	r1, [pc, #60]	@ (800d1b4 <on_full_output_buffer_fragmented+0x110>)
 800d176:	4622      	mov	r2, r4
 800d178:	f7fd fd1e 	bl	800abb8 <ucdr_set_on_full_buffer_callback>
 800d17c:	2000      	movs	r0, #0
 800d17e:	b00a      	add	sp, #40	@ 0x28
 800d180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d184:	b292      	uxth	r2, r2
 800d186:	2302      	movs	r3, #2
 800d188:	210d      	movs	r1, #13
 800d18a:	a802      	add	r0, sp, #8
 800d18c:	f7ff ff14 	bl	800cfb8 <uxr_buffer_submessage_header>
 800d190:	8928      	ldrh	r0, [r5, #8]
 800d192:	89eb      	ldrh	r3, [r5, #14]
 800d194:	fbb3 f1f0 	udiv	r1, r3, r0
 800d198:	fb00 3311 	mls	r3, r0, r1, r3
 800d19c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800d1a0:	6869      	ldr	r1, [r5, #4]
 800d1a2:	fbb1 f1f0 	udiv	r1, r1, r0
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	fb01 f303 	mul.w	r3, r1, r3
 800d1ac:	6829      	ldr	r1, [r5, #0]
 800d1ae:	3208      	adds	r2, #8
 800d1b0:	50ca      	str	r2, [r1, r3]
 800d1b2:	e7d3      	b.n	800d15c <on_full_output_buffer_fragmented+0xb8>
 800d1b4:	0800d0a5 	.word	0x0800d0a5

0800d1b8 <uxr_prepare_output_stream>:
 800d1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	2707      	movs	r7, #7
 800d1be:	9202      	str	r2, [sp, #8]
 800d1c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d1c2:	9103      	str	r1, [sp, #12]
 800d1c4:	2500      	movs	r5, #0
 800d1c6:	3204      	adds	r2, #4
 800d1c8:	e9cd 7500 	strd	r7, r5, [sp]
 800d1cc:	461c      	mov	r4, r3
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	f7fe ffc2 	bl	800c158 <uxr_prepare_stream_to_write_submessage>
 800d1d4:	f080 0201 	eor.w	r2, r0, #1
 800d1d8:	b2d2      	uxtb	r2, r2
 800d1da:	75a2      	strb	r2, [r4, #22]
 800d1dc:	b112      	cbz	r2, 800d1e4 <uxr_prepare_output_stream+0x2c>
 800d1de:	4628      	mov	r0, r5
 800d1e0:	b007      	add	sp, #28
 800d1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1e4:	aa05      	add	r2, sp, #20
 800d1e6:	9902      	ldr	r1, [sp, #8]
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f7ff f8eb 	bl	800c3c4 <uxr_init_base_object_request>
 800d1ee:	a905      	add	r1, sp, #20
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f000 ffa0 	bl	800e138 <uxr_serialize_WRITE_DATA_Payload_Data>
 800d1f8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800d1fc:	69a6      	ldr	r6, [r4, #24]
 800d1fe:	69e7      	ldr	r7, [r4, #28]
 800d200:	1a52      	subs	r2, r2, r1
 800d202:	4620      	mov	r0, r4
 800d204:	f7fd fd04 	bl	800ac10 <ucdr_init_buffer>
 800d208:	4620      	mov	r0, r4
 800d20a:	463a      	mov	r2, r7
 800d20c:	4631      	mov	r1, r6
 800d20e:	f7fd fcd3 	bl	800abb8 <ucdr_set_on_full_buffer_callback>
 800d212:	4628      	mov	r0, r5
 800d214:	b007      	add	sp, #28
 800d216:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d218 <uxr_prepare_output_stream_fragmented>:
 800d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21c:	b091      	sub	sp, #68	@ 0x44
 800d21e:	4605      	mov	r5, r0
 800d220:	9105      	str	r1, [sp, #20]
 800d222:	3008      	adds	r0, #8
 800d224:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800d228:	461e      	mov	r6, r3
 800d22a:	9204      	str	r2, [sp, #16]
 800d22c:	f7ff fe90 	bl	800cf50 <uxr_get_output_reliable_stream>
 800d230:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d234:	2b01      	cmp	r3, #1
 800d236:	f000 8091 	beq.w	800d35c <uxr_prepare_output_stream_fragmented+0x144>
 800d23a:	4604      	mov	r4, r0
 800d23c:	2800      	cmp	r0, #0
 800d23e:	f000 808d 	beq.w	800d35c <uxr_prepare_output_stream_fragmented+0x144>
 800d242:	f003 fb6b 	bl	801091c <get_available_free_slots>
 800d246:	2800      	cmp	r0, #0
 800d248:	f000 8083 	beq.w	800d352 <uxr_prepare_output_stream_fragmented+0x13a>
 800d24c:	8922      	ldrh	r2, [r4, #8]
 800d24e:	89e7      	ldrh	r7, [r4, #14]
 800d250:	fbb7 f9f2 	udiv	r9, r7, r2
 800d254:	fb02 7919 	mls	r9, r2, r9, r7
 800d258:	fa1f f989 	uxth.w	r9, r9
 800d25c:	6863      	ldr	r3, [r4, #4]
 800d25e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	9203      	str	r2, [sp, #12]
 800d266:	fb02 f909 	mul.w	r9, r2, r9
 800d26a:	f109 0904 	add.w	r9, r9, #4
 800d26e:	4499      	add	r9, r3
 800d270:	7b23      	ldrb	r3, [r4, #12]
 800d272:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800d276:	4543      	cmp	r3, r8
 800d278:	f1a2 0b04 	sub.w	fp, r2, #4
 800d27c:	d37a      	bcc.n	800d374 <uxr_prepare_output_stream_fragmented+0x15c>
 800d27e:	f1ab 0a04 	sub.w	sl, fp, #4
 800d282:	ebaa 0a03 	sub.w	sl, sl, r3
 800d286:	465a      	mov	r2, fp
 800d288:	2300      	movs	r3, #0
 800d28a:	4649      	mov	r1, r9
 800d28c:	a808      	add	r0, sp, #32
 800d28e:	f8cd 8000 	str.w	r8, [sp]
 800d292:	f7fd fcab 	bl	800abec <ucdr_init_buffer_origin_offset>
 800d296:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d298:	fa1f fa8a 	uxth.w	sl, sl
 800d29c:	4652      	mov	r2, sl
 800d29e:	f103 0a08 	add.w	sl, r3, #8
 800d2a2:	45da      	cmp	sl, fp
 800d2a4:	bf34      	ite	cc
 800d2a6:	2302      	movcc	r3, #2
 800d2a8:	2300      	movcs	r3, #0
 800d2aa:	210d      	movs	r1, #13
 800d2ac:	a808      	add	r0, sp, #32
 800d2ae:	f7ff fe83 	bl	800cfb8 <uxr_buffer_submessage_header>
 800d2b2:	8921      	ldrh	r1, [r4, #8]
 800d2b4:	fbb7 f2f1 	udiv	r2, r7, r1
 800d2b8:	fb01 7212 	mls	r2, r1, r2, r7
 800d2bc:	b292      	uxth	r2, r2
 800d2be:	6863      	ldr	r3, [r4, #4]
 800d2c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d2c4:	fb02 f303 	mul.w	r3, r2, r3
 800d2c8:	6822      	ldr	r2, [r4, #0]
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	f842 b003 	str.w	fp, [r2, r3]
 800d2d0:	2101      	movs	r1, #1
 800d2d2:	f003 fb43 	bl	801095c <uxr_seq_num_add>
 800d2d6:	9b03      	ldr	r3, [sp, #12]
 800d2d8:	f108 0104 	add.w	r1, r8, #4
 800d2dc:	f1a3 0208 	sub.w	r2, r3, #8
 800d2e0:	eba2 0208 	sub.w	r2, r2, r8
 800d2e4:	4449      	add	r1, r9
 800d2e6:	4607      	mov	r7, r0
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	f7fd fc91 	bl	800ac10 <ucdr_init_buffer>
 800d2ee:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d2f0:	81e7      	strh	r7, [r4, #14]
 800d2f2:	1d1a      	adds	r2, r3, #4
 800d2f4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800d2f8:	bf28      	it	cs
 800d2fa:	2200      	movcs	r2, #0
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	b292      	uxth	r2, r2
 800d300:	2107      	movs	r1, #7
 800d302:	4630      	mov	r0, r6
 800d304:	f7ff fe58 	bl	800cfb8 <uxr_buffer_submessage_header>
 800d308:	9904      	ldr	r1, [sp, #16]
 800d30a:	aa07      	add	r2, sp, #28
 800d30c:	4628      	mov	r0, r5
 800d30e:	f7ff f859 	bl	800c3c4 <uxr_init_base_object_request>
 800d312:	4604      	mov	r4, r0
 800d314:	b318      	cbz	r0, 800d35e <uxr_prepare_output_stream_fragmented+0x146>
 800d316:	a907      	add	r1, sp, #28
 800d318:	4630      	mov	r0, r6
 800d31a:	f000 ff0d 	bl	800e138 <uxr_serialize_WRITE_DATA_Payload_Data>
 800d31e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800d322:	4630      	mov	r0, r6
 800d324:	1a52      	subs	r2, r2, r1
 800d326:	f7fd fc73 	bl	800ac10 <ucdr_init_buffer>
 800d32a:	9b05      	ldr	r3, [sp, #20]
 800d32c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800d330:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d332:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800d336:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800d338:	491b      	ldr	r1, [pc, #108]	@ (800d3a8 <uxr_prepare_output_stream_fragmented+0x190>)
 800d33a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800d33e:	4630      	mov	r0, r6
 800d340:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800d344:	462a      	mov	r2, r5
 800d346:	f7fd fc37 	bl	800abb8 <ucdr_set_on_full_buffer_callback>
 800d34a:	4620      	mov	r0, r4
 800d34c:	b011      	add	sp, #68	@ 0x44
 800d34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d352:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800d354:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d356:	4628      	mov	r0, r5
 800d358:	4798      	blx	r3
 800d35a:	b920      	cbnz	r0, 800d366 <uxr_prepare_output_stream_fragmented+0x14e>
 800d35c:	2400      	movs	r4, #0
 800d35e:	4620      	mov	r0, r4
 800d360:	b011      	add	sp, #68	@ 0x44
 800d362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d366:	4620      	mov	r0, r4
 800d368:	f003 fad8 	bl	801091c <get_available_free_slots>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	f47f af6d 	bne.w	800d24c <uxr_prepare_output_stream_fragmented+0x34>
 800d372:	e7f3      	b.n	800d35c <uxr_prepare_output_stream_fragmented+0x144>
 800d374:	4638      	mov	r0, r7
 800d376:	2101      	movs	r1, #1
 800d378:	f003 faf0 	bl	801095c <uxr_seq_num_add>
 800d37c:	8921      	ldrh	r1, [r4, #8]
 800d37e:	fbb0 f2f1 	udiv	r2, r0, r1
 800d382:	fb01 0912 	mls	r9, r1, r2, r0
 800d386:	fa1f f289 	uxth.w	r2, r9
 800d38a:	6863      	ldr	r3, [r4, #4]
 800d38c:	fbb3 f9f1 	udiv	r9, r3, r1
 800d390:	6823      	ldr	r3, [r4, #0]
 800d392:	fb02 f909 	mul.w	r9, r2, r9
 800d396:	f109 0904 	add.w	r9, r9, #4
 800d39a:	4499      	add	r9, r3
 800d39c:	4607      	mov	r7, r0
 800d39e:	7b23      	ldrb	r3, [r4, #12]
 800d3a0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800d3a4:	e76b      	b.n	800d27e <uxr_prepare_output_stream_fragmented+0x66>
 800d3a6:	bf00      	nop
 800d3a8:	0800d0a5 	.word	0x0800d0a5

0800d3ac <uxr_serialize_message_header>:
 800d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	4616      	mov	r6, r2
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	9301      	str	r3, [sp, #4]
 800d3b6:	460d      	mov	r5, r1
 800d3b8:	9f08      	ldr	r7, [sp, #32]
 800d3ba:	f7fc fc7d 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800d3be:	4631      	mov	r1, r6
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f7fc fc79 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800d3c6:	9a01      	ldr	r2, [sp, #4]
 800d3c8:	2101      	movs	r1, #1
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f7fc fd20 	bl	8009e10 <ucdr_serialize_endian_uint16_t>
 800d3d0:	062b      	lsls	r3, r5, #24
 800d3d2:	d501      	bpl.n	800d3d8 <uxr_serialize_message_header+0x2c>
 800d3d4:	b003      	add	sp, #12
 800d3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3d8:	2204      	movs	r2, #4
 800d3da:	4639      	mov	r1, r7
 800d3dc:	4620      	mov	r0, r4
 800d3de:	b003      	add	sp, #12
 800d3e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d3e4:	f002 bc3a 	b.w	800fc5c <ucdr_serialize_array_uint8_t>

0800d3e8 <uxr_deserialize_message_header>:
 800d3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	4616      	mov	r6, r2
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	9301      	str	r3, [sp, #4]
 800d3f2:	460d      	mov	r5, r1
 800d3f4:	9f08      	ldr	r7, [sp, #32]
 800d3f6:	f7fc fc75 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800d3fa:	4631      	mov	r1, r6
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f7fc fc71 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800d402:	9a01      	ldr	r2, [sp, #4]
 800d404:	2101      	movs	r1, #1
 800d406:	4620      	mov	r0, r4
 800d408:	f7fc fdf6 	bl	8009ff8 <ucdr_deserialize_endian_uint16_t>
 800d40c:	f995 3000 	ldrsb.w	r3, [r5]
 800d410:	2b00      	cmp	r3, #0
 800d412:	da01      	bge.n	800d418 <uxr_deserialize_message_header+0x30>
 800d414:	b003      	add	sp, #12
 800d416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d418:	2204      	movs	r2, #4
 800d41a:	4639      	mov	r1, r7
 800d41c:	4620      	mov	r0, r4
 800d41e:	b003      	add	sp, #12
 800d420:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d424:	f002 bc7e 	b.w	800fd24 <ucdr_deserialize_array_uint8_t>

0800d428 <uxr_serialize_submessage_header>:
 800d428:	b530      	push	{r4, r5, lr}
 800d42a:	b083      	sub	sp, #12
 800d42c:	4615      	mov	r5, r2
 800d42e:	4604      	mov	r4, r0
 800d430:	9301      	str	r3, [sp, #4]
 800d432:	f7fc fc41 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800d436:	4629      	mov	r1, r5
 800d438:	4620      	mov	r0, r4
 800d43a:	f7fc fc3d 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800d43e:	9a01      	ldr	r2, [sp, #4]
 800d440:	2101      	movs	r1, #1
 800d442:	4620      	mov	r0, r4
 800d444:	b003      	add	sp, #12
 800d446:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d44a:	f7fc bce1 	b.w	8009e10 <ucdr_serialize_endian_uint16_t>
 800d44e:	bf00      	nop

0800d450 <uxr_deserialize_submessage_header>:
 800d450:	b530      	push	{r4, r5, lr}
 800d452:	b083      	sub	sp, #12
 800d454:	4615      	mov	r5, r2
 800d456:	4604      	mov	r4, r0
 800d458:	9301      	str	r3, [sp, #4]
 800d45a:	f7fc fc43 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800d45e:	4629      	mov	r1, r5
 800d460:	4620      	mov	r0, r4
 800d462:	f7fc fc3f 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800d466:	9a01      	ldr	r2, [sp, #4]
 800d468:	2101      	movs	r1, #1
 800d46a:	4620      	mov	r0, r4
 800d46c:	b003      	add	sp, #12
 800d46e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d472:	f7fc bdc1 	b.w	8009ff8 <ucdr_deserialize_endian_uint16_t>
 800d476:	bf00      	nop

0800d478 <uxr_serialize_CLIENT_Representation>:
 800d478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d47c:	2204      	movs	r2, #4
 800d47e:	460e      	mov	r6, r1
 800d480:	4605      	mov	r5, r0
 800d482:	f002 fbeb 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800d486:	2202      	movs	r2, #2
 800d488:	4607      	mov	r7, r0
 800d48a:	1d31      	adds	r1, r6, #4
 800d48c:	4628      	mov	r0, r5
 800d48e:	f002 fbe5 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800d492:	4038      	ands	r0, r7
 800d494:	2202      	movs	r2, #2
 800d496:	1db1      	adds	r1, r6, #6
 800d498:	b2c7      	uxtb	r7, r0
 800d49a:	4628      	mov	r0, r5
 800d49c:	f002 fbde 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800d4a0:	2204      	movs	r2, #4
 800d4a2:	4007      	ands	r7, r0
 800d4a4:	f106 0108 	add.w	r1, r6, #8
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	f002 fbd7 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800d4ae:	7b31      	ldrb	r1, [r6, #12]
 800d4b0:	4007      	ands	r7, r0
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	f7fc fc00 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800d4b8:	7b71      	ldrb	r1, [r6, #13]
 800d4ba:	4007      	ands	r7, r0
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f7fc fbcd 	bl	8009c5c <ucdr_serialize_bool>
 800d4c2:	7b73      	ldrb	r3, [r6, #13]
 800d4c4:	ea07 0800 	and.w	r8, r7, r0
 800d4c8:	b93b      	cbnz	r3, 800d4da <uxr_serialize_CLIENT_Representation+0x62>
 800d4ca:	8bb1      	ldrh	r1, [r6, #28]
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	f7fc fc1f 	bl	8009d10 <ucdr_serialize_uint16_t>
 800d4d2:	ea08 0000 	and.w	r0, r8, r0
 800d4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4da:	6931      	ldr	r1, [r6, #16]
 800d4dc:	4628      	mov	r0, r5
 800d4de:	f7fc fe01 	bl	800a0e4 <ucdr_serialize_uint32_t>
 800d4e2:	6933      	ldr	r3, [r6, #16]
 800d4e4:	b1e3      	cbz	r3, 800d520 <uxr_serialize_CLIENT_Representation+0xa8>
 800d4e6:	b1c0      	cbz	r0, 800d51a <uxr_serialize_CLIENT_Representation+0xa2>
 800d4e8:	4637      	mov	r7, r6
 800d4ea:	f04f 0900 	mov.w	r9, #0
 800d4ee:	e001      	b.n	800d4f4 <uxr_serialize_CLIENT_Representation+0x7c>
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	b194      	cbz	r4, 800d51a <uxr_serialize_CLIENT_Representation+0xa2>
 800d4f4:	6979      	ldr	r1, [r7, #20]
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	f002 fcd0 	bl	800fe9c <ucdr_serialize_string>
 800d4fc:	69b9      	ldr	r1, [r7, #24]
 800d4fe:	4604      	mov	r4, r0
 800d500:	4628      	mov	r0, r5
 800d502:	f002 fccb 	bl	800fe9c <ucdr_serialize_string>
 800d506:	6933      	ldr	r3, [r6, #16]
 800d508:	f109 0901 	add.w	r9, r9, #1
 800d50c:	4004      	ands	r4, r0
 800d50e:	4599      	cmp	r9, r3
 800d510:	b2e4      	uxtb	r4, r4
 800d512:	d3ed      	bcc.n	800d4f0 <uxr_serialize_CLIENT_Representation+0x78>
 800d514:	ea08 0804 	and.w	r8, r8, r4
 800d518:	e7d7      	b.n	800d4ca <uxr_serialize_CLIENT_Representation+0x52>
 800d51a:	f04f 0800 	mov.w	r8, #0
 800d51e:	e7d4      	b.n	800d4ca <uxr_serialize_CLIENT_Representation+0x52>
 800d520:	ea08 0800 	and.w	r8, r8, r0
 800d524:	e7d1      	b.n	800d4ca <uxr_serialize_CLIENT_Representation+0x52>
 800d526:	bf00      	nop

0800d528 <uxr_deserialize_CLIENT_Representation>:
 800d528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d52c:	2204      	movs	r2, #4
 800d52e:	460c      	mov	r4, r1
 800d530:	4605      	mov	r5, r0
 800d532:	f002 fbf7 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800d536:	2202      	movs	r2, #2
 800d538:	4607      	mov	r7, r0
 800d53a:	1d21      	adds	r1, r4, #4
 800d53c:	4628      	mov	r0, r5
 800d53e:	f002 fbf1 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800d542:	4038      	ands	r0, r7
 800d544:	2202      	movs	r2, #2
 800d546:	1da1      	adds	r1, r4, #6
 800d548:	b2c6      	uxtb	r6, r0
 800d54a:	4628      	mov	r0, r5
 800d54c:	f002 fbea 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800d550:	2204      	movs	r2, #4
 800d552:	4006      	ands	r6, r0
 800d554:	f104 0108 	add.w	r1, r4, #8
 800d558:	4628      	mov	r0, r5
 800d55a:	f002 fbe3 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800d55e:	f104 010c 	add.w	r1, r4, #12
 800d562:	4006      	ands	r6, r0
 800d564:	4628      	mov	r0, r5
 800d566:	f7fc fbbd 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800d56a:	f104 010d 	add.w	r1, r4, #13
 800d56e:	ea06 0700 	and.w	r7, r6, r0
 800d572:	4628      	mov	r0, r5
 800d574:	f7fc fb88 	bl	8009c88 <ucdr_deserialize_bool>
 800d578:	7b63      	ldrb	r3, [r4, #13]
 800d57a:	4007      	ands	r7, r0
 800d57c:	b93b      	cbnz	r3, 800d58e <uxr_deserialize_CLIENT_Representation+0x66>
 800d57e:	f104 011c 	add.w	r1, r4, #28
 800d582:	4628      	mov	r0, r5
 800d584:	f7fc fcc4 	bl	8009f10 <ucdr_deserialize_uint16_t>
 800d588:	4038      	ands	r0, r7
 800d58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d58e:	f104 0110 	add.w	r1, r4, #16
 800d592:	4628      	mov	r0, r5
 800d594:	f7fc fed6 	bl	800a344 <ucdr_deserialize_uint32_t>
 800d598:	6923      	ldr	r3, [r4, #16]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d903      	bls.n	800d5a6 <uxr_deserialize_CLIENT_Representation+0x7e>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	75ab      	strb	r3, [r5, #22]
 800d5a2:	2700      	movs	r7, #0
 800d5a4:	e7eb      	b.n	800d57e <uxr_deserialize_CLIENT_Representation+0x56>
 800d5a6:	b30b      	cbz	r3, 800d5ec <uxr_deserialize_CLIENT_Representation+0xc4>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	d0fa      	beq.n	800d5a2 <uxr_deserialize_CLIENT_Representation+0x7a>
 800d5ac:	46a0      	mov	r8, r4
 800d5ae:	f04f 0900 	mov.w	r9, #0
 800d5b2:	e001      	b.n	800d5b8 <uxr_deserialize_CLIENT_Representation+0x90>
 800d5b4:	2e00      	cmp	r6, #0
 800d5b6:	d0f4      	beq.n	800d5a2 <uxr_deserialize_CLIENT_Representation+0x7a>
 800d5b8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d5bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	f002 fc7b 	bl	800febc <ucdr_deserialize_string>
 800d5c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	f002 fc73 	bl	800febc <ucdr_deserialize_string>
 800d5d6:	6923      	ldr	r3, [r4, #16]
 800d5d8:	f109 0901 	add.w	r9, r9, #1
 800d5dc:	4006      	ands	r6, r0
 800d5de:	4599      	cmp	r9, r3
 800d5e0:	f108 0808 	add.w	r8, r8, #8
 800d5e4:	b2f6      	uxtb	r6, r6
 800d5e6:	d3e5      	bcc.n	800d5b4 <uxr_deserialize_CLIENT_Representation+0x8c>
 800d5e8:	4037      	ands	r7, r6
 800d5ea:	e7c8      	b.n	800d57e <uxr_deserialize_CLIENT_Representation+0x56>
 800d5ec:	4007      	ands	r7, r0
 800d5ee:	e7c6      	b.n	800d57e <uxr_deserialize_CLIENT_Representation+0x56>

0800d5f0 <uxr_serialize_AGENT_Representation>:
 800d5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5f4:	2204      	movs	r2, #4
 800d5f6:	460f      	mov	r7, r1
 800d5f8:	4605      	mov	r5, r0
 800d5fa:	f002 fb2f 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800d5fe:	2202      	movs	r2, #2
 800d600:	4604      	mov	r4, r0
 800d602:	1d39      	adds	r1, r7, #4
 800d604:	4628      	mov	r0, r5
 800d606:	f002 fb29 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800d60a:	4020      	ands	r0, r4
 800d60c:	2202      	movs	r2, #2
 800d60e:	1db9      	adds	r1, r7, #6
 800d610:	b2c4      	uxtb	r4, r0
 800d612:	4628      	mov	r0, r5
 800d614:	f002 fb22 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800d618:	7a39      	ldrb	r1, [r7, #8]
 800d61a:	4004      	ands	r4, r0
 800d61c:	4628      	mov	r0, r5
 800d61e:	f7fc fb1d 	bl	8009c5c <ucdr_serialize_bool>
 800d622:	7a3b      	ldrb	r3, [r7, #8]
 800d624:	ea00 0804 	and.w	r8, r0, r4
 800d628:	b913      	cbnz	r3, 800d630 <uxr_serialize_AGENT_Representation+0x40>
 800d62a:	4640      	mov	r0, r8
 800d62c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d630:	68f9      	ldr	r1, [r7, #12]
 800d632:	4628      	mov	r0, r5
 800d634:	f7fc fd56 	bl	800a0e4 <ucdr_serialize_uint32_t>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	b303      	cbz	r3, 800d67e <uxr_serialize_AGENT_Representation+0x8e>
 800d63c:	b1d0      	cbz	r0, 800d674 <uxr_serialize_AGENT_Representation+0x84>
 800d63e:	463e      	mov	r6, r7
 800d640:	f04f 0900 	mov.w	r9, #0
 800d644:	e001      	b.n	800d64a <uxr_serialize_AGENT_Representation+0x5a>
 800d646:	3608      	adds	r6, #8
 800d648:	b1a4      	cbz	r4, 800d674 <uxr_serialize_AGENT_Representation+0x84>
 800d64a:	6931      	ldr	r1, [r6, #16]
 800d64c:	4628      	mov	r0, r5
 800d64e:	f002 fc25 	bl	800fe9c <ucdr_serialize_string>
 800d652:	6971      	ldr	r1, [r6, #20]
 800d654:	4604      	mov	r4, r0
 800d656:	4628      	mov	r0, r5
 800d658:	f002 fc20 	bl	800fe9c <ucdr_serialize_string>
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f109 0901 	add.w	r9, r9, #1
 800d662:	4004      	ands	r4, r0
 800d664:	4599      	cmp	r9, r3
 800d666:	b2e4      	uxtb	r4, r4
 800d668:	d3ed      	bcc.n	800d646 <uxr_serialize_AGENT_Representation+0x56>
 800d66a:	ea08 0804 	and.w	r8, r8, r4
 800d66e:	4640      	mov	r0, r8
 800d670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d674:	f04f 0800 	mov.w	r8, #0
 800d678:	4640      	mov	r0, r8
 800d67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d67e:	ea08 0800 	and.w	r8, r8, r0
 800d682:	e7d2      	b.n	800d62a <uxr_serialize_AGENT_Representation+0x3a>

0800d684 <uxr_serialize_DATAWRITER_Representation>:
 800d684:	b570      	push	{r4, r5, r6, lr}
 800d686:	460d      	mov	r5, r1
 800d688:	7809      	ldrb	r1, [r1, #0]
 800d68a:	4606      	mov	r6, r0
 800d68c:	f7fc fb14 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800d690:	4604      	mov	r4, r0
 800d692:	b130      	cbz	r0, 800d6a2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d694:	782b      	ldrb	r3, [r5, #0]
 800d696:	2b02      	cmp	r3, #2
 800d698:	d00c      	beq.n	800d6b4 <uxr_serialize_DATAWRITER_Representation+0x30>
 800d69a:	2b03      	cmp	r3, #3
 800d69c:	d010      	beq.n	800d6c0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d008      	beq.n	800d6b4 <uxr_serialize_DATAWRITER_Representation+0x30>
 800d6a2:	2202      	movs	r2, #2
 800d6a4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f002 fad7 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800d6ae:	4020      	ands	r0, r4
 800d6b0:	b2c0      	uxtb	r0, r0
 800d6b2:	bd70      	pop	{r4, r5, r6, pc}
 800d6b4:	6869      	ldr	r1, [r5, #4]
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f002 fbf0 	bl	800fe9c <ucdr_serialize_string>
 800d6bc:	4604      	mov	r4, r0
 800d6be:	e7f0      	b.n	800d6a2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800d6c8:	3104      	adds	r1, #4
 800d6ca:	f002 fbbb 	bl	800fe44 <ucdr_serialize_sequence_uint8_t>
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	e7e7      	b.n	800d6a2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d6d2:	bf00      	nop

0800d6d4 <uxr_serialize_ObjectVariant.part.0>:
 800d6d4:	b570      	push	{r4, r5, r6, lr}
 800d6d6:	780b      	ldrb	r3, [r1, #0]
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	460c      	mov	r4, r1
 800d6dc:	4605      	mov	r5, r0
 800d6de:	2b0d      	cmp	r3, #13
 800d6e0:	d854      	bhi.n	800d78c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d6e2:	e8df f003 	tbb	[pc, r3]
 800d6e6:	0730      	.short	0x0730
 800d6e8:	07071b1b 	.word	0x07071b1b
 800d6ec:	0c530707 	.word	0x0c530707
 800d6f0:	494e0c0c 	.word	0x494e0c0c
 800d6f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6f8:	3104      	adds	r1, #4
 800d6fa:	f7ff bfc3 	b.w	800d684 <uxr_serialize_DATAWRITER_Representation>
 800d6fe:	7909      	ldrb	r1, [r1, #4]
 800d700:	f7fc fada 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800d704:	b1e8      	cbz	r0, 800d742 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800d706:	7923      	ldrb	r3, [r4, #4]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d001      	beq.n	800d710 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d13d      	bne.n	800d78c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d710:	68a1      	ldr	r1, [r4, #8]
 800d712:	4628      	mov	r0, r5
 800d714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d718:	f002 bbc0 	b.w	800fe9c <ucdr_serialize_string>
 800d71c:	7909      	ldrb	r1, [r1, #4]
 800d71e:	f7fc facb 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800d722:	4606      	mov	r6, r0
 800d724:	b120      	cbz	r0, 800d730 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d726:	7923      	ldrb	r3, [r4, #4]
 800d728:	2b02      	cmp	r3, #2
 800d72a:	d039      	beq.n	800d7a0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800d72c:	2b03      	cmp	r3, #3
 800d72e:	d02f      	beq.n	800d790 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800d730:	2202      	movs	r2, #2
 800d732:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800d736:	4628      	mov	r0, r5
 800d738:	f002 fa90 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800d73c:	4030      	ands	r0, r6
 800d73e:	b2c0      	uxtb	r0, r0
 800d740:	bd70      	pop	{r4, r5, r6, pc}
 800d742:	2000      	movs	r0, #0
 800d744:	bd70      	pop	{r4, r5, r6, pc}
 800d746:	7909      	ldrb	r1, [r1, #4]
 800d748:	f7fc fab6 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800d74c:	4606      	mov	r6, r0
 800d74e:	b158      	cbz	r0, 800d768 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d750:	7923      	ldrb	r3, [r4, #4]
 800d752:	2b02      	cmp	r3, #2
 800d754:	d003      	beq.n	800d75e <uxr_serialize_ObjectVariant.part.0+0x8a>
 800d756:	2b03      	cmp	r3, #3
 800d758:	d028      	beq.n	800d7ac <uxr_serialize_ObjectVariant.part.0+0xd8>
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d104      	bne.n	800d768 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d75e:	68a1      	ldr	r1, [r4, #8]
 800d760:	4628      	mov	r0, r5
 800d762:	f002 fb9b 	bl	800fe9c <ucdr_serialize_string>
 800d766:	4606      	mov	r6, r0
 800d768:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800d76c:	4628      	mov	r0, r5
 800d76e:	f7fc ffdf 	bl	800a730 <ucdr_serialize_int16_t>
 800d772:	4030      	ands	r0, r6
 800d774:	b2c0      	uxtb	r0, r0
 800d776:	bd70      	pop	{r4, r5, r6, pc}
 800d778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d77c:	3104      	adds	r1, #4
 800d77e:	f7ff be7b 	b.w	800d478 <uxr_serialize_CLIENT_Representation>
 800d782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d786:	3104      	adds	r1, #4
 800d788:	f7ff bf32 	b.w	800d5f0 <uxr_serialize_AGENT_Representation>
 800d78c:	2001      	movs	r0, #1
 800d78e:	bd70      	pop	{r4, r5, r6, pc}
 800d790:	68a2      	ldr	r2, [r4, #8]
 800d792:	f104 010c 	add.w	r1, r4, #12
 800d796:	4628      	mov	r0, r5
 800d798:	f002 fb54 	bl	800fe44 <ucdr_serialize_sequence_uint8_t>
 800d79c:	4606      	mov	r6, r0
 800d79e:	e7c7      	b.n	800d730 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d7a0:	68a1      	ldr	r1, [r4, #8]
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	f002 fb7a 	bl	800fe9c <ucdr_serialize_string>
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	e7c1      	b.n	800d730 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d7ac:	68a2      	ldr	r2, [r4, #8]
 800d7ae:	f104 010c 	add.w	r1, r4, #12
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	f002 fb46 	bl	800fe44 <ucdr_serialize_sequence_uint8_t>
 800d7b8:	4606      	mov	r6, r0
 800d7ba:	e7d5      	b.n	800d768 <uxr_serialize_ObjectVariant.part.0+0x94>

0800d7bc <uxr_deserialize_DATAWRITER_Representation>:
 800d7bc:	b570      	push	{r4, r5, r6, lr}
 800d7be:	4606      	mov	r6, r0
 800d7c0:	460d      	mov	r5, r1
 800d7c2:	f7fc fa8f 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	b130      	cbz	r0, 800d7d8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d7ca:	782b      	ldrb	r3, [r5, #0]
 800d7cc:	2b02      	cmp	r3, #2
 800d7ce:	d00c      	beq.n	800d7ea <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d7d0:	2b03      	cmp	r3, #3
 800d7d2:	d012      	beq.n	800d7fa <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d008      	beq.n	800d7ea <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d7d8:	2202      	movs	r2, #2
 800d7da:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f002 faa0 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800d7e4:	4020      	ands	r0, r4
 800d7e6:	b2c0      	uxtb	r0, r0
 800d7e8:	bd70      	pop	{r4, r5, r6, pc}
 800d7ea:	6869      	ldr	r1, [r5, #4]
 800d7ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f002 fb63 	bl	800febc <ucdr_deserialize_string>
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	e7ee      	b.n	800d7d8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d7fa:	1d2b      	adds	r3, r5, #4
 800d7fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d800:	f105 0108 	add.w	r1, r5, #8
 800d804:	4630      	mov	r0, r6
 800d806:	f002 fb2f 	bl	800fe68 <ucdr_deserialize_sequence_uint8_t>
 800d80a:	4604      	mov	r4, r0
 800d80c:	e7e4      	b.n	800d7d8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d80e:	bf00      	nop

0800d810 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800d810:	b570      	push	{r4, r5, r6, lr}
 800d812:	460d      	mov	r5, r1
 800d814:	7809      	ldrb	r1, [r1, #0]
 800d816:	4606      	mov	r6, r0
 800d818:	f7fc fa20 	bl	8009c5c <ucdr_serialize_bool>
 800d81c:	782b      	ldrb	r3, [r5, #0]
 800d81e:	4604      	mov	r4, r0
 800d820:	b94b      	cbnz	r3, 800d836 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800d822:	7a29      	ldrb	r1, [r5, #8]
 800d824:	4630      	mov	r0, r6
 800d826:	f7fc fa19 	bl	8009c5c <ucdr_serialize_bool>
 800d82a:	7a2b      	ldrb	r3, [r5, #8]
 800d82c:	4004      	ands	r4, r0
 800d82e:	b2e4      	uxtb	r4, r4
 800d830:	b943      	cbnz	r3, 800d844 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800d832:	4620      	mov	r0, r4
 800d834:	bd70      	pop	{r4, r5, r6, pc}
 800d836:	6869      	ldr	r1, [r5, #4]
 800d838:	4630      	mov	r0, r6
 800d83a:	f002 fb2f 	bl	800fe9c <ucdr_serialize_string>
 800d83e:	4004      	ands	r4, r0
 800d840:	b2e4      	uxtb	r4, r4
 800d842:	e7ee      	b.n	800d822 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800d844:	68e9      	ldr	r1, [r5, #12]
 800d846:	4630      	mov	r0, r6
 800d848:	f002 fb28 	bl	800fe9c <ucdr_serialize_string>
 800d84c:	4004      	ands	r4, r0
 800d84e:	4620      	mov	r0, r4
 800d850:	bd70      	pop	{r4, r5, r6, pc}
 800d852:	bf00      	nop

0800d854 <uxr_serialize_OBJK_Topic_Binary>:
 800d854:	b570      	push	{r4, r5, r6, lr}
 800d856:	460d      	mov	r5, r1
 800d858:	6809      	ldr	r1, [r1, #0]
 800d85a:	4606      	mov	r6, r0
 800d85c:	f002 fb1e 	bl	800fe9c <ucdr_serialize_string>
 800d860:	7929      	ldrb	r1, [r5, #4]
 800d862:	4604      	mov	r4, r0
 800d864:	4630      	mov	r0, r6
 800d866:	f7fc f9f9 	bl	8009c5c <ucdr_serialize_bool>
 800d86a:	792b      	ldrb	r3, [r5, #4]
 800d86c:	4004      	ands	r4, r0
 800d86e:	b2e4      	uxtb	r4, r4
 800d870:	b943      	cbnz	r3, 800d884 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800d872:	7b29      	ldrb	r1, [r5, #12]
 800d874:	4630      	mov	r0, r6
 800d876:	f7fc f9f1 	bl	8009c5c <ucdr_serialize_bool>
 800d87a:	7b2b      	ldrb	r3, [r5, #12]
 800d87c:	4004      	ands	r4, r0
 800d87e:	b93b      	cbnz	r3, 800d890 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800d880:	4620      	mov	r0, r4
 800d882:	bd70      	pop	{r4, r5, r6, pc}
 800d884:	68a9      	ldr	r1, [r5, #8]
 800d886:	4630      	mov	r0, r6
 800d888:	f002 fb08 	bl	800fe9c <ucdr_serialize_string>
 800d88c:	4004      	ands	r4, r0
 800d88e:	e7f0      	b.n	800d872 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800d890:	6929      	ldr	r1, [r5, #16]
 800d892:	4630      	mov	r0, r6
 800d894:	f002 fb02 	bl	800fe9c <ucdr_serialize_string>
 800d898:	4004      	ands	r4, r0
 800d89a:	b2e4      	uxtb	r4, r4
 800d89c:	4620      	mov	r0, r4
 800d89e:	bd70      	pop	{r4, r5, r6, pc}

0800d8a0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800d8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a4:	460c      	mov	r4, r1
 800d8a6:	7809      	ldrb	r1, [r1, #0]
 800d8a8:	4606      	mov	r6, r0
 800d8aa:	f7fc f9d7 	bl	8009c5c <ucdr_serialize_bool>
 800d8ae:	7823      	ldrb	r3, [r4, #0]
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	b96b      	cbnz	r3, 800d8d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800d8b4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	f7fc f9cf 	bl	8009c5c <ucdr_serialize_bool>
 800d8be:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d8c2:	4005      	ands	r5, r0
 800d8c4:	b2ed      	uxtb	r5, r5
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d169      	bne.n	800d99e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d0:	6861      	ldr	r1, [r4, #4]
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f7fc fc06 	bl	800a0e4 <ucdr_serialize_uint32_t>
 800d8d8:	6863      	ldr	r3, [r4, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d06b      	beq.n	800d9b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d067      	beq.n	800d9b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d8e2:	68a1      	ldr	r1, [r4, #8]
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f002 fad9 	bl	800fe9c <ucdr_serialize_string>
 800d8ea:	6863      	ldr	r3, [r4, #4]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d953      	bls.n	800d998 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	d05e      	beq.n	800d9b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d8f4:	68e1      	ldr	r1, [r4, #12]
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f002 fad0 	bl	800fe9c <ucdr_serialize_string>
 800d8fc:	6863      	ldr	r3, [r4, #4]
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	d94a      	bls.n	800d998 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d902:	2800      	cmp	r0, #0
 800d904:	d055      	beq.n	800d9b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d906:	6921      	ldr	r1, [r4, #16]
 800d908:	4630      	mov	r0, r6
 800d90a:	f002 fac7 	bl	800fe9c <ucdr_serialize_string>
 800d90e:	6863      	ldr	r3, [r4, #4]
 800d910:	2b03      	cmp	r3, #3
 800d912:	d941      	bls.n	800d998 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d914:	2800      	cmp	r0, #0
 800d916:	d04c      	beq.n	800d9b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d918:	6961      	ldr	r1, [r4, #20]
 800d91a:	4630      	mov	r0, r6
 800d91c:	f002 fabe 	bl	800fe9c <ucdr_serialize_string>
 800d920:	6863      	ldr	r3, [r4, #4]
 800d922:	2b04      	cmp	r3, #4
 800d924:	d938      	bls.n	800d998 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d926:	2800      	cmp	r0, #0
 800d928:	d043      	beq.n	800d9b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d92a:	69a1      	ldr	r1, [r4, #24]
 800d92c:	4630      	mov	r0, r6
 800d92e:	f002 fab5 	bl	800fe9c <ucdr_serialize_string>
 800d932:	6863      	ldr	r3, [r4, #4]
 800d934:	2b05      	cmp	r3, #5
 800d936:	d92f      	bls.n	800d998 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d938:	2800      	cmp	r0, #0
 800d93a:	d03a      	beq.n	800d9b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d93c:	69e1      	ldr	r1, [r4, #28]
 800d93e:	4630      	mov	r0, r6
 800d940:	f002 faac 	bl	800fe9c <ucdr_serialize_string>
 800d944:	6863      	ldr	r3, [r4, #4]
 800d946:	2b06      	cmp	r3, #6
 800d948:	d926      	bls.n	800d998 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d94a:	b390      	cbz	r0, 800d9b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d94c:	6a21      	ldr	r1, [r4, #32]
 800d94e:	4630      	mov	r0, r6
 800d950:	f002 faa4 	bl	800fe9c <ucdr_serialize_string>
 800d954:	6863      	ldr	r3, [r4, #4]
 800d956:	2b07      	cmp	r3, #7
 800d958:	d91e      	bls.n	800d998 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d95a:	b350      	cbz	r0, 800d9b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d95c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d95e:	4630      	mov	r0, r6
 800d960:	f002 fa9c 	bl	800fe9c <ucdr_serialize_string>
 800d964:	6863      	ldr	r3, [r4, #4]
 800d966:	2b08      	cmp	r3, #8
 800d968:	d916      	bls.n	800d998 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d96a:	b310      	cbz	r0, 800d9b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d96c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d96e:	4630      	mov	r0, r6
 800d970:	f002 fa94 	bl	800fe9c <ucdr_serialize_string>
 800d974:	6863      	ldr	r3, [r4, #4]
 800d976:	2b09      	cmp	r3, #9
 800d978:	d90e      	bls.n	800d998 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d97a:	b1d0      	cbz	r0, 800d9b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d97c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800d980:	2709      	movs	r7, #9
 800d982:	e000      	b.n	800d986 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800d984:	b1a8      	cbz	r0, 800d9b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d986:	f858 1b04 	ldr.w	r1, [r8], #4
 800d98a:	4630      	mov	r0, r6
 800d98c:	f002 fa86 	bl	800fe9c <ucdr_serialize_string>
 800d990:	6862      	ldr	r2, [r4, #4]
 800d992:	3701      	adds	r7, #1
 800d994:	4297      	cmp	r7, r2
 800d996:	d3f5      	bcc.n	800d984 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800d998:	4005      	ands	r5, r0
 800d99a:	b2ed      	uxtb	r5, r5
 800d99c:	e78a      	b.n	800d8b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d99e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d9a0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	f002 fa4d 	bl	800fe44 <ucdr_serialize_sequence_uint8_t>
 800d9aa:	4005      	ands	r5, r0
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b2:	2500      	movs	r5, #0
 800d9b4:	e77e      	b.n	800d8b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d9b6:	4028      	ands	r0, r5
 800d9b8:	b2c5      	uxtb	r5, r0
 800d9ba:	e77b      	b.n	800d8b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800d9bc <uxr_serialize_OBJK_Publisher_Binary>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	460d      	mov	r5, r1
 800d9c0:	7809      	ldrb	r1, [r1, #0]
 800d9c2:	4606      	mov	r6, r0
 800d9c4:	f7fc f94a 	bl	8009c5c <ucdr_serialize_bool>
 800d9c8:	782b      	ldrb	r3, [r5, #0]
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	b94b      	cbnz	r3, 800d9e2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800d9ce:	7a29      	ldrb	r1, [r5, #8]
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	f7fc f943 	bl	8009c5c <ucdr_serialize_bool>
 800d9d6:	7a2b      	ldrb	r3, [r5, #8]
 800d9d8:	4004      	ands	r4, r0
 800d9da:	b2e4      	uxtb	r4, r4
 800d9dc:	b943      	cbnz	r3, 800d9f0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800d9de:	4620      	mov	r0, r4
 800d9e0:	bd70      	pop	{r4, r5, r6, pc}
 800d9e2:	6869      	ldr	r1, [r5, #4]
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f002 fa59 	bl	800fe9c <ucdr_serialize_string>
 800d9ea:	4004      	ands	r4, r0
 800d9ec:	b2e4      	uxtb	r4, r4
 800d9ee:	e7ee      	b.n	800d9ce <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800d9f0:	f105 010c 	add.w	r1, r5, #12
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	f7ff ff53 	bl	800d8a0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800d9fa:	4004      	ands	r4, r0
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}

0800da00 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800da00:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800da04:	4688      	mov	r8, r1
 800da06:	8809      	ldrh	r1, [r1, #0]
 800da08:	4681      	mov	r9, r0
 800da0a:	f7fc f981 	bl	8009d10 <ucdr_serialize_uint16_t>
 800da0e:	f898 1002 	ldrb.w	r1, [r8, #2]
 800da12:	4606      	mov	r6, r0
 800da14:	4648      	mov	r0, r9
 800da16:	f7fc f921 	bl	8009c5c <ucdr_serialize_bool>
 800da1a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800da1e:	4006      	ands	r6, r0
 800da20:	b2f5      	uxtb	r5, r6
 800da22:	b9eb      	cbnz	r3, 800da60 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800da24:	f898 1006 	ldrb.w	r1, [r8, #6]
 800da28:	4648      	mov	r0, r9
 800da2a:	f7fc f917 	bl	8009c5c <ucdr_serialize_bool>
 800da2e:	f898 3006 	ldrb.w	r3, [r8, #6]
 800da32:	4005      	ands	r5, r0
 800da34:	bb7b      	cbnz	r3, 800da96 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800da36:	f898 100c 	ldrb.w	r1, [r8, #12]
 800da3a:	4648      	mov	r0, r9
 800da3c:	f7fc f90e 	bl	8009c5c <ucdr_serialize_bool>
 800da40:	f898 300c 	ldrb.w	r3, [r8, #12]
 800da44:	4005      	ands	r5, r0
 800da46:	b9f3      	cbnz	r3, 800da86 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800da48:	f898 1014 	ldrb.w	r1, [r8, #20]
 800da4c:	4648      	mov	r0, r9
 800da4e:	f7fc f905 	bl	8009c5c <ucdr_serialize_bool>
 800da52:	f898 3014 	ldrb.w	r3, [r8, #20]
 800da56:	4005      	ands	r5, r0
 800da58:	b94b      	cbnz	r3, 800da6e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800da5a:	4628      	mov	r0, r5
 800da5c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800da60:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800da64:	4648      	mov	r0, r9
 800da66:	f7fc f953 	bl	8009d10 <ucdr_serialize_uint16_t>
 800da6a:	4005      	ands	r5, r0
 800da6c:	e7da      	b.n	800da24 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800da6e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800da72:	f108 011c 	add.w	r1, r8, #28
 800da76:	4648      	mov	r0, r9
 800da78:	f002 f9e4 	bl	800fe44 <ucdr_serialize_sequence_uint8_t>
 800da7c:	4028      	ands	r0, r5
 800da7e:	b2c5      	uxtb	r5, r0
 800da80:	4628      	mov	r0, r5
 800da82:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800da86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800da8a:	4648      	mov	r0, r9
 800da8c:	f7fc fb2a 	bl	800a0e4 <ucdr_serialize_uint32_t>
 800da90:	4028      	ands	r0, r5
 800da92:	b2c5      	uxtb	r5, r0
 800da94:	e7d8      	b.n	800da48 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800da96:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800da9a:	4648      	mov	r0, r9
 800da9c:	f7fc fb22 	bl	800a0e4 <ucdr_serialize_uint32_t>
 800daa0:	4028      	ands	r0, r5
 800daa2:	b2c5      	uxtb	r5, r0
 800daa4:	e7c7      	b.n	800da36 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800daa6:	bf00      	nop

0800daa8 <uxr_serialize_OBJK_DataWriter_Binary>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	2202      	movs	r2, #2
 800daac:	460d      	mov	r5, r1
 800daae:	4606      	mov	r6, r0
 800dab0:	f002 f8d4 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800dab4:	78a9      	ldrb	r1, [r5, #2]
 800dab6:	4604      	mov	r4, r0
 800dab8:	4630      	mov	r0, r6
 800daba:	f7fc f8cf 	bl	8009c5c <ucdr_serialize_bool>
 800dabe:	78ab      	ldrb	r3, [r5, #2]
 800dac0:	4004      	ands	r4, r0
 800dac2:	b2e4      	uxtb	r4, r4
 800dac4:	b90b      	cbnz	r3, 800daca <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800dac6:	4620      	mov	r0, r4
 800dac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daca:	f105 0108 	add.w	r1, r5, #8
 800dace:	4630      	mov	r0, r6
 800dad0:	f7ff ff96 	bl	800da00 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800dad4:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800dad8:	4607      	mov	r7, r0
 800dada:	4630      	mov	r0, r6
 800dadc:	f7fc f8be 	bl	8009c5c <ucdr_serialize_bool>
 800dae0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800dae4:	4038      	ands	r0, r7
 800dae6:	b2c7      	uxtb	r7, r0
 800dae8:	b913      	cbnz	r3, 800daf0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800daea:	403c      	ands	r4, r7
 800daec:	4620      	mov	r0, r4
 800daee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daf0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800daf4:	4630      	mov	r0, r6
 800daf6:	f7fc fd4b 	bl	800a590 <ucdr_serialize_uint64_t>
 800dafa:	4007      	ands	r7, r0
 800dafc:	e7f5      	b.n	800daea <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800dafe:	bf00      	nop

0800db00 <uxr_deserialize_ObjectVariant>:
 800db00:	b570      	push	{r4, r5, r6, lr}
 800db02:	4605      	mov	r5, r0
 800db04:	460e      	mov	r6, r1
 800db06:	f7fc f8ed 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800db0a:	b168      	cbz	r0, 800db28 <uxr_deserialize_ObjectVariant+0x28>
 800db0c:	7833      	ldrb	r3, [r6, #0]
 800db0e:	3b01      	subs	r3, #1
 800db10:	4604      	mov	r4, r0
 800db12:	2b0d      	cmp	r3, #13
 800db14:	d809      	bhi.n	800db2a <uxr_deserialize_ObjectVariant+0x2a>
 800db16:	e8df f003 	tbb	[pc, r3]
 800db1a:	0a41      	.short	0x0a41
 800db1c:	0a0a2323 	.word	0x0a0a2323
 800db20:	10080a0a 	.word	0x10080a0a
 800db24:	565c1010 	.word	0x565c1010
 800db28:	2400      	movs	r4, #0
 800db2a:	4620      	mov	r0, r4
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
 800db2e:	1d31      	adds	r1, r6, #4
 800db30:	4628      	mov	r0, r5
 800db32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db36:	f7ff be41 	b.w	800d7bc <uxr_deserialize_DATAWRITER_Representation>
 800db3a:	1d31      	adds	r1, r6, #4
 800db3c:	4628      	mov	r0, r5
 800db3e:	f7fc f8d1 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800db42:	2800      	cmp	r0, #0
 800db44:	d0f0      	beq.n	800db28 <uxr_deserialize_ObjectVariant+0x28>
 800db46:	7933      	ldrb	r3, [r6, #4]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d001      	beq.n	800db50 <uxr_deserialize_ObjectVariant+0x50>
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d1ec      	bne.n	800db2a <uxr_deserialize_ObjectVariant+0x2a>
 800db50:	68b1      	ldr	r1, [r6, #8]
 800db52:	4628      	mov	r0, r5
 800db54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db5c:	f002 b9ae 	b.w	800febc <ucdr_deserialize_string>
 800db60:	1d31      	adds	r1, r6, #4
 800db62:	4628      	mov	r0, r5
 800db64:	f7fc f8be 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800db68:	4604      	mov	r4, r0
 800db6a:	b170      	cbz	r0, 800db8a <uxr_deserialize_ObjectVariant+0x8a>
 800db6c:	7933      	ldrb	r3, [r6, #4]
 800db6e:	2b02      	cmp	r3, #2
 800db70:	d04c      	beq.n	800dc0c <uxr_deserialize_ObjectVariant+0x10c>
 800db72:	2b03      	cmp	r3, #3
 800db74:	d109      	bne.n	800db8a <uxr_deserialize_ObjectVariant+0x8a>
 800db76:	f106 0308 	add.w	r3, r6, #8
 800db7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db7e:	f106 010c 	add.w	r1, r6, #12
 800db82:	4628      	mov	r0, r5
 800db84:	f002 f970 	bl	800fe68 <ucdr_deserialize_sequence_uint8_t>
 800db88:	4604      	mov	r4, r0
 800db8a:	2202      	movs	r2, #2
 800db8c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800db90:	4628      	mov	r0, r5
 800db92:	f002 f8c7 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800db96:	4020      	ands	r0, r4
 800db98:	b2c4      	uxtb	r4, r0
 800db9a:	e7c6      	b.n	800db2a <uxr_deserialize_ObjectVariant+0x2a>
 800db9c:	1d31      	adds	r1, r6, #4
 800db9e:	4628      	mov	r0, r5
 800dba0:	f7fc f8a0 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800dba4:	4604      	mov	r4, r0
 800dba6:	b130      	cbz	r0, 800dbb6 <uxr_deserialize_ObjectVariant+0xb6>
 800dba8:	7933      	ldrb	r3, [r6, #4]
 800dbaa:	2b02      	cmp	r3, #2
 800dbac:	d036      	beq.n	800dc1c <uxr_deserialize_ObjectVariant+0x11c>
 800dbae:	2b03      	cmp	r3, #3
 800dbb0:	d03c      	beq.n	800dc2c <uxr_deserialize_ObjectVariant+0x12c>
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d032      	beq.n	800dc1c <uxr_deserialize_ObjectVariant+0x11c>
 800dbb6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800dbba:	4628      	mov	r0, r5
 800dbbc:	f7fc fe38 	bl	800a830 <ucdr_deserialize_int16_t>
 800dbc0:	4020      	ands	r0, r4
 800dbc2:	b2c4      	uxtb	r4, r0
 800dbc4:	e7b1      	b.n	800db2a <uxr_deserialize_ObjectVariant+0x2a>
 800dbc6:	1d31      	adds	r1, r6, #4
 800dbc8:	4628      	mov	r0, r5
 800dbca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbce:	f7ff bcab 	b.w	800d528 <uxr_deserialize_CLIENT_Representation>
 800dbd2:	2204      	movs	r2, #4
 800dbd4:	18b1      	adds	r1, r6, r2
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	f002 f8a4 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800dbdc:	2202      	movs	r2, #2
 800dbde:	f106 0108 	add.w	r1, r6, #8
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f002 f89d 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800dbea:	2202      	movs	r2, #2
 800dbec:	4004      	ands	r4, r0
 800dbee:	f106 010a 	add.w	r1, r6, #10
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	f002 f896 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800dbf8:	b2e4      	uxtb	r4, r4
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	f106 010c 	add.w	r1, r6, #12
 800dc00:	4628      	mov	r0, r5
 800dc02:	401c      	ands	r4, r3
 800dc04:	f7fc f840 	bl	8009c88 <ucdr_deserialize_bool>
 800dc08:	4004      	ands	r4, r0
 800dc0a:	e78e      	b.n	800db2a <uxr_deserialize_ObjectVariant+0x2a>
 800dc0c:	68b1      	ldr	r1, [r6, #8]
 800dc0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc12:	4628      	mov	r0, r5
 800dc14:	f002 f952 	bl	800febc <ucdr_deserialize_string>
 800dc18:	4604      	mov	r4, r0
 800dc1a:	e7b6      	b.n	800db8a <uxr_deserialize_ObjectVariant+0x8a>
 800dc1c:	68b1      	ldr	r1, [r6, #8]
 800dc1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc22:	4628      	mov	r0, r5
 800dc24:	f002 f94a 	bl	800febc <ucdr_deserialize_string>
 800dc28:	4604      	mov	r4, r0
 800dc2a:	e7c4      	b.n	800dbb6 <uxr_deserialize_ObjectVariant+0xb6>
 800dc2c:	f106 0308 	add.w	r3, r6, #8
 800dc30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc34:	f106 010c 	add.w	r1, r6, #12
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f002 f915 	bl	800fe68 <ucdr_deserialize_sequence_uint8_t>
 800dc3e:	4604      	mov	r4, r0
 800dc40:	e7b9      	b.n	800dbb6 <uxr_deserialize_ObjectVariant+0xb6>
 800dc42:	bf00      	nop

0800dc44 <uxr_deserialize_BaseObjectRequest>:
 800dc44:	b570      	push	{r4, r5, r6, lr}
 800dc46:	2202      	movs	r2, #2
 800dc48:	4605      	mov	r5, r0
 800dc4a:	460e      	mov	r6, r1
 800dc4c:	f002 f86a 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800dc50:	2202      	movs	r2, #2
 800dc52:	4604      	mov	r4, r0
 800dc54:	18b1      	adds	r1, r6, r2
 800dc56:	4628      	mov	r0, r5
 800dc58:	f002 f864 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800dc5c:	4020      	ands	r0, r4
 800dc5e:	b2c0      	uxtb	r0, r0
 800dc60:	bd70      	pop	{r4, r5, r6, pc}
 800dc62:	bf00      	nop

0800dc64 <uxr_serialize_ActivityInfoVariant>:
 800dc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc68:	460d      	mov	r5, r1
 800dc6a:	7809      	ldrb	r1, [r1, #0]
 800dc6c:	4607      	mov	r7, r0
 800dc6e:	f7fc f823 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800dc72:	4681      	mov	r9, r0
 800dc74:	b138      	cbz	r0, 800dc86 <uxr_serialize_ActivityInfoVariant+0x22>
 800dc76:	782b      	ldrb	r3, [r5, #0]
 800dc78:	2b06      	cmp	r3, #6
 800dc7a:	f000 8082 	beq.w	800dd82 <uxr_serialize_ActivityInfoVariant+0x11e>
 800dc7e:	2b0d      	cmp	r3, #13
 800dc80:	d016      	beq.n	800dcb0 <uxr_serialize_ActivityInfoVariant+0x4c>
 800dc82:	2b05      	cmp	r3, #5
 800dc84:	d002      	beq.n	800dc8c <uxr_serialize_ActivityInfoVariant+0x28>
 800dc86:	4648      	mov	r0, r9
 800dc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc8c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800dc90:	4638      	mov	r0, r7
 800dc92:	f7fc fd4d 	bl	800a730 <ucdr_serialize_int16_t>
 800dc96:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800dc9a:	4681      	mov	r9, r0
 800dc9c:	4638      	mov	r0, r7
 800dc9e:	f7fc fc77 	bl	800a590 <ucdr_serialize_uint64_t>
 800dca2:	ea09 0000 	and.w	r0, r9, r0
 800dca6:	fa5f f980 	uxtb.w	r9, r0
 800dcaa:	4648      	mov	r0, r9
 800dcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcb0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800dcb4:	4638      	mov	r0, r7
 800dcb6:	f7fc fd3b 	bl	800a730 <ucdr_serialize_int16_t>
 800dcba:	68e9      	ldr	r1, [r5, #12]
 800dcbc:	4681      	mov	r9, r0
 800dcbe:	4638      	mov	r0, r7
 800dcc0:	f7fc fa10 	bl	800a0e4 <ucdr_serialize_uint32_t>
 800dcc4:	68eb      	ldr	r3, [r5, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d0eb      	beq.n	800dca2 <uxr_serialize_ActivityInfoVariant+0x3e>
 800dcca:	b320      	cbz	r0, 800dd16 <uxr_serialize_ActivityInfoVariant+0xb2>
 800dccc:	f105 080c 	add.w	r8, r5, #12
 800dcd0:	2600      	movs	r6, #0
 800dcd2:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800dcd6:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800dcda:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800dcde:	4638      	mov	r0, r7
 800dce0:	f7fb ffea 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	d053      	beq.n	800dd90 <uxr_serialize_ActivityInfoVariant+0x12c>
 800dce8:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800dcec:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800dcf0:	0074      	lsls	r4, r6, #1
 800dcf2:	00c9      	lsls	r1, r1, #3
 800dcf4:	2b03      	cmp	r3, #3
 800dcf6:	d854      	bhi.n	800dda2 <uxr_serialize_ActivityInfoVariant+0x13e>
 800dcf8:	e8df f003 	tbb	[pc, r3]
 800dcfc:	02102132 	.word	0x02102132
 800dd00:	4441      	add	r1, r8
 800dd02:	4638      	mov	r0, r7
 800dd04:	6889      	ldr	r1, [r1, #8]
 800dd06:	f002 f8c9 	bl	800fe9c <ucdr_serialize_string>
 800dd0a:	68ea      	ldr	r2, [r5, #12]
 800dd0c:	3601      	adds	r6, #1
 800dd0e:	4296      	cmp	r6, r2
 800dd10:	d242      	bcs.n	800dd98 <uxr_serialize_ActivityInfoVariant+0x134>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d1dd      	bne.n	800dcd2 <uxr_serialize_ActivityInfoVariant+0x6e>
 800dd16:	f04f 0900 	mov.w	r9, #0
 800dd1a:	e7b4      	b.n	800dc86 <uxr_serialize_ActivityInfoVariant+0x22>
 800dd1c:	3108      	adds	r1, #8
 800dd1e:	4441      	add	r1, r8
 800dd20:	2210      	movs	r2, #16
 800dd22:	4638      	mov	r0, r7
 800dd24:	f001 ff9a 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800dd28:	4434      	add	r4, r6
 800dd2a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800dd2e:	4604      	mov	r4, r0
 800dd30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800dd32:	4638      	mov	r0, r7
 800dd34:	f7fc f9d6 	bl	800a0e4 <ucdr_serialize_uint32_t>
 800dd38:	4020      	ands	r0, r4
 800dd3a:	b2c0      	uxtb	r0, r0
 800dd3c:	e7e5      	b.n	800dd0a <uxr_serialize_ActivityInfoVariant+0xa6>
 800dd3e:	3108      	adds	r1, #8
 800dd40:	4441      	add	r1, r8
 800dd42:	2204      	movs	r2, #4
 800dd44:	4638      	mov	r0, r7
 800dd46:	f001 ff89 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800dd4a:	4434      	add	r4, r6
 800dd4c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800dd50:	4604      	mov	r4, r0
 800dd52:	8b19      	ldrh	r1, [r3, #24]
 800dd54:	4638      	mov	r0, r7
 800dd56:	f7fb ffdb 	bl	8009d10 <ucdr_serialize_uint16_t>
 800dd5a:	4020      	ands	r0, r4
 800dd5c:	b2c0      	uxtb	r0, r0
 800dd5e:	e7d4      	b.n	800dd0a <uxr_serialize_ActivityInfoVariant+0xa6>
 800dd60:	3108      	adds	r1, #8
 800dd62:	4441      	add	r1, r8
 800dd64:	2202      	movs	r2, #2
 800dd66:	4638      	mov	r0, r7
 800dd68:	f001 ff78 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800dd6c:	4434      	add	r4, r6
 800dd6e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800dd72:	4604      	mov	r4, r0
 800dd74:	7d99      	ldrb	r1, [r3, #22]
 800dd76:	4638      	mov	r0, r7
 800dd78:	f7fb ff9e 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800dd7c:	4020      	ands	r0, r4
 800dd7e:	b2c0      	uxtb	r0, r0
 800dd80:	e7c3      	b.n	800dd0a <uxr_serialize_ActivityInfoVariant+0xa6>
 800dd82:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800dd86:	4638      	mov	r0, r7
 800dd88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd8c:	f7fc bcd0 	b.w	800a730 <ucdr_serialize_int16_t>
 800dd90:	68ea      	ldr	r2, [r5, #12]
 800dd92:	3601      	adds	r6, #1
 800dd94:	42b2      	cmp	r2, r6
 800dd96:	d8be      	bhi.n	800dd16 <uxr_serialize_ActivityInfoVariant+0xb2>
 800dd98:	ea09 0900 	and.w	r9, r9, r0
 800dd9c:	fa5f f989 	uxtb.w	r9, r9
 800dda0:	e771      	b.n	800dc86 <uxr_serialize_ActivityInfoVariant+0x22>
 800dda2:	68eb      	ldr	r3, [r5, #12]
 800dda4:	3601      	adds	r6, #1
 800dda6:	429e      	cmp	r6, r3
 800dda8:	f10a 0a18 	add.w	sl, sl, #24
 800ddac:	d395      	bcc.n	800dcda <uxr_serialize_ActivityInfoVariant+0x76>
 800ddae:	e76a      	b.n	800dc86 <uxr_serialize_ActivityInfoVariant+0x22>

0800ddb0 <uxr_deserialize_BaseObjectReply>:
 800ddb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb4:	2202      	movs	r2, #2
 800ddb6:	4606      	mov	r6, r0
 800ddb8:	460f      	mov	r7, r1
 800ddba:	f001 ffb3 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800ddbe:	2202      	movs	r2, #2
 800ddc0:	18b9      	adds	r1, r7, r2
 800ddc2:	4605      	mov	r5, r0
 800ddc4:	4630      	mov	r0, r6
 800ddc6:	f001 ffad 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800ddca:	1d39      	adds	r1, r7, #4
 800ddcc:	4680      	mov	r8, r0
 800ddce:	4630      	mov	r0, r6
 800ddd0:	f7fb ff88 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800ddd4:	1d79      	adds	r1, r7, #5
 800ddd6:	4604      	mov	r4, r0
 800ddd8:	4630      	mov	r0, r6
 800ddda:	f7fb ff83 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800ddde:	ea05 0508 	and.w	r5, r5, r8
 800dde2:	402c      	ands	r4, r5
 800dde4:	4020      	ands	r0, r4
 800dde6:	b2c0      	uxtb	r0, r0
 800dde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ddec <uxr_serialize_ReadSpecification>:
 800ddec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf0:	460e      	mov	r6, r1
 800ddf2:	7809      	ldrb	r1, [r1, #0]
 800ddf4:	4607      	mov	r7, r0
 800ddf6:	f7fb ff5f 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800ddfa:	7871      	ldrb	r1, [r6, #1]
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	4638      	mov	r0, r7
 800de00:	f7fb ff5a 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800de04:	78b1      	ldrb	r1, [r6, #2]
 800de06:	4004      	ands	r4, r0
 800de08:	4638      	mov	r0, r7
 800de0a:	f7fb ff27 	bl	8009c5c <ucdr_serialize_bool>
 800de0e:	78b3      	ldrb	r3, [r6, #2]
 800de10:	b2e4      	uxtb	r4, r4
 800de12:	4004      	ands	r4, r0
 800de14:	b94b      	cbnz	r3, 800de2a <uxr_serialize_ReadSpecification+0x3e>
 800de16:	7a31      	ldrb	r1, [r6, #8]
 800de18:	4638      	mov	r0, r7
 800de1a:	f7fb ff1f 	bl	8009c5c <ucdr_serialize_bool>
 800de1e:	7a33      	ldrb	r3, [r6, #8]
 800de20:	4004      	ands	r4, r0
 800de22:	b943      	cbnz	r3, 800de36 <uxr_serialize_ReadSpecification+0x4a>
 800de24:	4620      	mov	r0, r4
 800de26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de2a:	6871      	ldr	r1, [r6, #4]
 800de2c:	4638      	mov	r0, r7
 800de2e:	f002 f835 	bl	800fe9c <ucdr_serialize_string>
 800de32:	4004      	ands	r4, r0
 800de34:	e7ef      	b.n	800de16 <uxr_serialize_ReadSpecification+0x2a>
 800de36:	8971      	ldrh	r1, [r6, #10]
 800de38:	4638      	mov	r0, r7
 800de3a:	f7fb ff69 	bl	8009d10 <ucdr_serialize_uint16_t>
 800de3e:	89b1      	ldrh	r1, [r6, #12]
 800de40:	4605      	mov	r5, r0
 800de42:	4638      	mov	r0, r7
 800de44:	f7fb ff64 	bl	8009d10 <ucdr_serialize_uint16_t>
 800de48:	89f1      	ldrh	r1, [r6, #14]
 800de4a:	4005      	ands	r5, r0
 800de4c:	4638      	mov	r0, r7
 800de4e:	f7fb ff5f 	bl	8009d10 <ucdr_serialize_uint16_t>
 800de52:	8a31      	ldrh	r1, [r6, #16]
 800de54:	4680      	mov	r8, r0
 800de56:	4638      	mov	r0, r7
 800de58:	f7fb ff5a 	bl	8009d10 <ucdr_serialize_uint16_t>
 800de5c:	b2ed      	uxtb	r5, r5
 800de5e:	4025      	ands	r5, r4
 800de60:	ea08 0505 	and.w	r5, r8, r5
 800de64:	ea00 0405 	and.w	r4, r0, r5
 800de68:	4620      	mov	r0, r4
 800de6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de6e:	bf00      	nop

0800de70 <uxr_serialize_CREATE_CLIENT_Payload>:
 800de70:	f7ff bb02 	b.w	800d478 <uxr_serialize_CLIENT_Representation>

0800de74 <uxr_serialize_CREATE_Payload>:
 800de74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de76:	2202      	movs	r2, #2
 800de78:	4607      	mov	r7, r0
 800de7a:	460e      	mov	r6, r1
 800de7c:	f001 feee 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800de80:	2202      	movs	r2, #2
 800de82:	18b1      	adds	r1, r6, r2
 800de84:	4605      	mov	r5, r0
 800de86:	4638      	mov	r0, r7
 800de88:	f001 fee8 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800de8c:	7931      	ldrb	r1, [r6, #4]
 800de8e:	4604      	mov	r4, r0
 800de90:	4638      	mov	r0, r7
 800de92:	f7fb ff11 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800de96:	b170      	cbz	r0, 800deb6 <uxr_serialize_CREATE_Payload+0x42>
 800de98:	7933      	ldrb	r3, [r6, #4]
 800de9a:	402c      	ands	r4, r5
 800de9c:	3b01      	subs	r3, #1
 800de9e:	b2e4      	uxtb	r4, r4
 800dea0:	2b0d      	cmp	r3, #13
 800dea2:	d809      	bhi.n	800deb8 <uxr_serialize_CREATE_Payload+0x44>
 800dea4:	e8df f003 	tbb	[pc, r3]
 800dea8:	23230a4c 	.word	0x23230a4c
 800deac:	0a0a0a0a 	.word	0x0a0a0a0a
 800deb0:	12121208 	.word	0x12121208
 800deb4:	3e45      	.short	0x3e45
 800deb6:	2400      	movs	r4, #0
 800deb8:	4620      	mov	r0, r4
 800deba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800debc:	f106 0108 	add.w	r1, r6, #8
 800dec0:	4638      	mov	r0, r7
 800dec2:	f7ff fbdf 	bl	800d684 <uxr_serialize_DATAWRITER_Representation>
 800dec6:	4004      	ands	r4, r0
 800dec8:	4620      	mov	r0, r4
 800deca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800decc:	7a31      	ldrb	r1, [r6, #8]
 800dece:	4638      	mov	r0, r7
 800ded0:	f7fb fef2 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800ded4:	2800      	cmp	r0, #0
 800ded6:	d0ee      	beq.n	800deb6 <uxr_serialize_CREATE_Payload+0x42>
 800ded8:	7a33      	ldrb	r3, [r6, #8]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d001      	beq.n	800dee2 <uxr_serialize_CREATE_Payload+0x6e>
 800dede:	2b02      	cmp	r3, #2
 800dee0:	d1ea      	bne.n	800deb8 <uxr_serialize_CREATE_Payload+0x44>
 800dee2:	68f1      	ldr	r1, [r6, #12]
 800dee4:	4638      	mov	r0, r7
 800dee6:	f001 ffd9 	bl	800fe9c <ucdr_serialize_string>
 800deea:	4004      	ands	r4, r0
 800deec:	e7e4      	b.n	800deb8 <uxr_serialize_CREATE_Payload+0x44>
 800deee:	7a31      	ldrb	r1, [r6, #8]
 800def0:	4638      	mov	r0, r7
 800def2:	f7fb fee1 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800def6:	4605      	mov	r5, r0
 800def8:	b158      	cbz	r0, 800df12 <uxr_serialize_CREATE_Payload+0x9e>
 800defa:	7a33      	ldrb	r3, [r6, #8]
 800defc:	2b02      	cmp	r3, #2
 800defe:	d034      	beq.n	800df6a <uxr_serialize_CREATE_Payload+0xf6>
 800df00:	2b03      	cmp	r3, #3
 800df02:	d106      	bne.n	800df12 <uxr_serialize_CREATE_Payload+0x9e>
 800df04:	68f2      	ldr	r2, [r6, #12]
 800df06:	f106 0110 	add.w	r1, r6, #16
 800df0a:	4638      	mov	r0, r7
 800df0c:	f001 ff9a 	bl	800fe44 <ucdr_serialize_sequence_uint8_t>
 800df10:	4605      	mov	r5, r0
 800df12:	2202      	movs	r2, #2
 800df14:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800df18:	4638      	mov	r0, r7
 800df1a:	f001 fe9f 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800df1e:	4028      	ands	r0, r5
 800df20:	4004      	ands	r4, r0
 800df22:	e7c9      	b.n	800deb8 <uxr_serialize_CREATE_Payload+0x44>
 800df24:	f106 0108 	add.w	r1, r6, #8
 800df28:	4638      	mov	r0, r7
 800df2a:	f7ff faa5 	bl	800d478 <uxr_serialize_CLIENT_Representation>
 800df2e:	4004      	ands	r4, r0
 800df30:	e7c2      	b.n	800deb8 <uxr_serialize_CREATE_Payload+0x44>
 800df32:	f106 0108 	add.w	r1, r6, #8
 800df36:	4638      	mov	r0, r7
 800df38:	f7ff fb5a 	bl	800d5f0 <uxr_serialize_AGENT_Representation>
 800df3c:	4004      	ands	r4, r0
 800df3e:	e7bb      	b.n	800deb8 <uxr_serialize_CREATE_Payload+0x44>
 800df40:	7a31      	ldrb	r1, [r6, #8]
 800df42:	4638      	mov	r0, r7
 800df44:	f7fb feb8 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800df48:	4605      	mov	r5, r0
 800df4a:	b130      	cbz	r0, 800df5a <uxr_serialize_CREATE_Payload+0xe6>
 800df4c:	7a33      	ldrb	r3, [r6, #8]
 800df4e:	2b02      	cmp	r3, #2
 800df50:	d011      	beq.n	800df76 <uxr_serialize_CREATE_Payload+0x102>
 800df52:	2b03      	cmp	r3, #3
 800df54:	d015      	beq.n	800df82 <uxr_serialize_CREATE_Payload+0x10e>
 800df56:	2b01      	cmp	r3, #1
 800df58:	d00d      	beq.n	800df76 <uxr_serialize_CREATE_Payload+0x102>
 800df5a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800df5e:	4638      	mov	r0, r7
 800df60:	f7fc fbe6 	bl	800a730 <ucdr_serialize_int16_t>
 800df64:	4028      	ands	r0, r5
 800df66:	4004      	ands	r4, r0
 800df68:	e7a6      	b.n	800deb8 <uxr_serialize_CREATE_Payload+0x44>
 800df6a:	68f1      	ldr	r1, [r6, #12]
 800df6c:	4638      	mov	r0, r7
 800df6e:	f001 ff95 	bl	800fe9c <ucdr_serialize_string>
 800df72:	4605      	mov	r5, r0
 800df74:	e7cd      	b.n	800df12 <uxr_serialize_CREATE_Payload+0x9e>
 800df76:	68f1      	ldr	r1, [r6, #12]
 800df78:	4638      	mov	r0, r7
 800df7a:	f001 ff8f 	bl	800fe9c <ucdr_serialize_string>
 800df7e:	4605      	mov	r5, r0
 800df80:	e7eb      	b.n	800df5a <uxr_serialize_CREATE_Payload+0xe6>
 800df82:	68f2      	ldr	r2, [r6, #12]
 800df84:	f106 0110 	add.w	r1, r6, #16
 800df88:	4638      	mov	r0, r7
 800df8a:	f001 ff5b 	bl	800fe44 <ucdr_serialize_sequence_uint8_t>
 800df8e:	4605      	mov	r5, r0
 800df90:	e7e3      	b.n	800df5a <uxr_serialize_CREATE_Payload+0xe6>
 800df92:	bf00      	nop

0800df94 <uxr_deserialize_GET_INFO_Payload>:
 800df94:	b570      	push	{r4, r5, r6, lr}
 800df96:	2202      	movs	r2, #2
 800df98:	4605      	mov	r5, r0
 800df9a:	460e      	mov	r6, r1
 800df9c:	f001 fec2 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800dfa0:	2202      	movs	r2, #2
 800dfa2:	18b1      	adds	r1, r6, r2
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	f001 febc 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800dfac:	1d31      	adds	r1, r6, #4
 800dfae:	4004      	ands	r4, r0
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	f7fc f9c7 	bl	800a344 <ucdr_deserialize_uint32_t>
 800dfb6:	b2e4      	uxtb	r4, r4
 800dfb8:	4020      	ands	r0, r4
 800dfba:	bd70      	pop	{r4, r5, r6, pc}

0800dfbc <uxr_serialize_DELETE_Payload>:
 800dfbc:	b570      	push	{r4, r5, r6, lr}
 800dfbe:	2202      	movs	r2, #2
 800dfc0:	4605      	mov	r5, r0
 800dfc2:	460e      	mov	r6, r1
 800dfc4:	f001 fe4a 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800dfc8:	2202      	movs	r2, #2
 800dfca:	4604      	mov	r4, r0
 800dfcc:	18b1      	adds	r1, r6, r2
 800dfce:	4628      	mov	r0, r5
 800dfd0:	f001 fe44 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800dfd4:	4020      	ands	r0, r4
 800dfd6:	b2c0      	uxtb	r0, r0
 800dfd8:	bd70      	pop	{r4, r5, r6, pc}
 800dfda:	bf00      	nop

0800dfdc <uxr_deserialize_STATUS_AGENT_Payload>:
 800dfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe0:	4605      	mov	r5, r0
 800dfe2:	460e      	mov	r6, r1
 800dfe4:	f7fb fe7e 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800dfe8:	1c71      	adds	r1, r6, #1
 800dfea:	4604      	mov	r4, r0
 800dfec:	4628      	mov	r0, r5
 800dfee:	f7fb fe79 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800dff2:	2204      	movs	r2, #4
 800dff4:	18b1      	adds	r1, r6, r2
 800dff6:	4680      	mov	r8, r0
 800dff8:	4628      	mov	r0, r5
 800dffa:	f001 fe93 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800dffe:	f106 0108 	add.w	r1, r6, #8
 800e002:	4607      	mov	r7, r0
 800e004:	2202      	movs	r2, #2
 800e006:	4628      	mov	r0, r5
 800e008:	f001 fe8c 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800e00c:	ea04 0308 	and.w	r3, r4, r8
 800e010:	b2db      	uxtb	r3, r3
 800e012:	ea03 0407 	and.w	r4, r3, r7
 800e016:	2202      	movs	r2, #2
 800e018:	4607      	mov	r7, r0
 800e01a:	f106 010a 	add.w	r1, r6, #10
 800e01e:	4628      	mov	r0, r5
 800e020:	f001 fe80 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800e024:	f106 010c 	add.w	r1, r6, #12
 800e028:	4603      	mov	r3, r0
 800e02a:	4628      	mov	r0, r5
 800e02c:	461d      	mov	r5, r3
 800e02e:	f7fb fe2b 	bl	8009c88 <ucdr_deserialize_bool>
 800e032:	403c      	ands	r4, r7
 800e034:	4025      	ands	r5, r4
 800e036:	4028      	ands	r0, r5
 800e038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e03c <uxr_deserialize_STATUS_Payload>:
 800e03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e040:	2202      	movs	r2, #2
 800e042:	4606      	mov	r6, r0
 800e044:	460f      	mov	r7, r1
 800e046:	f001 fe6d 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800e04a:	2202      	movs	r2, #2
 800e04c:	18b9      	adds	r1, r7, r2
 800e04e:	4605      	mov	r5, r0
 800e050:	4630      	mov	r0, r6
 800e052:	f001 fe67 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800e056:	1d39      	adds	r1, r7, #4
 800e058:	4680      	mov	r8, r0
 800e05a:	4630      	mov	r0, r6
 800e05c:	f7fb fe42 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800e060:	1d79      	adds	r1, r7, #5
 800e062:	4604      	mov	r4, r0
 800e064:	4630      	mov	r0, r6
 800e066:	f7fb fe3d 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800e06a:	ea05 0508 	and.w	r5, r5, r8
 800e06e:	402c      	ands	r4, r5
 800e070:	4020      	ands	r0, r4
 800e072:	b2c0      	uxtb	r0, r0
 800e074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e078 <uxr_serialize_INFO_Payload>:
 800e078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e07c:	2202      	movs	r2, #2
 800e07e:	460c      	mov	r4, r1
 800e080:	4605      	mov	r5, r0
 800e082:	f001 fdeb 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800e086:	2202      	movs	r2, #2
 800e088:	18a1      	adds	r1, r4, r2
 800e08a:	4680      	mov	r8, r0
 800e08c:	4628      	mov	r0, r5
 800e08e:	f001 fde5 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800e092:	7921      	ldrb	r1, [r4, #4]
 800e094:	4607      	mov	r7, r0
 800e096:	4628      	mov	r0, r5
 800e098:	f7fb fe0e 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800e09c:	7961      	ldrb	r1, [r4, #5]
 800e09e:	4606      	mov	r6, r0
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	f7fb fe09 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800e0a6:	ea08 0807 	and.w	r8, r8, r7
 800e0aa:	ea06 0608 	and.w	r6, r6, r8
 800e0ae:	4006      	ands	r6, r0
 800e0b0:	7a21      	ldrb	r1, [r4, #8]
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	f7fb fdd2 	bl	8009c5c <ucdr_serialize_bool>
 800e0b8:	7a23      	ldrb	r3, [r4, #8]
 800e0ba:	b2f7      	uxtb	r7, r6
 800e0bc:	4606      	mov	r6, r0
 800e0be:	b96b      	cbnz	r3, 800e0dc <uxr_serialize_INFO_Payload+0x64>
 800e0c0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	f7fb fdc9 	bl	8009c5c <ucdr_serialize_bool>
 800e0ca:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800e0ce:	4030      	ands	r0, r6
 800e0d0:	b2c6      	uxtb	r6, r0
 800e0d2:	b983      	cbnz	r3, 800e0f6 <uxr_serialize_INFO_Payload+0x7e>
 800e0d4:	ea06 0007 	and.w	r0, r6, r7
 800e0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0dc:	7b21      	ldrb	r1, [r4, #12]
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f7fb fdea 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800e0e4:	b188      	cbz	r0, 800e10a <uxr_serialize_INFO_Payload+0x92>
 800e0e6:	f104 010c 	add.w	r1, r4, #12
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f7ff faf2 	bl	800d6d4 <uxr_serialize_ObjectVariant.part.0>
 800e0f0:	4030      	ands	r0, r6
 800e0f2:	b2c6      	uxtb	r6, r0
 800e0f4:	e7e4      	b.n	800e0c0 <uxr_serialize_INFO_Payload+0x48>
 800e0f6:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	f7ff fdb2 	bl	800dc64 <uxr_serialize_ActivityInfoVariant>
 800e100:	4006      	ands	r6, r0
 800e102:	ea06 0007 	and.w	r0, r6, r7
 800e106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e10a:	4606      	mov	r6, r0
 800e10c:	e7d8      	b.n	800e0c0 <uxr_serialize_INFO_Payload+0x48>
 800e10e:	bf00      	nop

0800e110 <uxr_serialize_READ_DATA_Payload>:
 800e110:	b570      	push	{r4, r5, r6, lr}
 800e112:	2202      	movs	r2, #2
 800e114:	4605      	mov	r5, r0
 800e116:	460e      	mov	r6, r1
 800e118:	f001 fda0 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800e11c:	2202      	movs	r2, #2
 800e11e:	18b1      	adds	r1, r6, r2
 800e120:	4604      	mov	r4, r0
 800e122:	4628      	mov	r0, r5
 800e124:	f001 fd9a 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800e128:	1d31      	adds	r1, r6, #4
 800e12a:	4004      	ands	r4, r0
 800e12c:	4628      	mov	r0, r5
 800e12e:	f7ff fe5d 	bl	800ddec <uxr_serialize_ReadSpecification>
 800e132:	b2e4      	uxtb	r4, r4
 800e134:	4020      	ands	r0, r4
 800e136:	bd70      	pop	{r4, r5, r6, pc}

0800e138 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800e138:	b570      	push	{r4, r5, r6, lr}
 800e13a:	2202      	movs	r2, #2
 800e13c:	4605      	mov	r5, r0
 800e13e:	460e      	mov	r6, r1
 800e140:	f001 fd8c 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800e144:	2202      	movs	r2, #2
 800e146:	4604      	mov	r4, r0
 800e148:	18b1      	adds	r1, r6, r2
 800e14a:	4628      	mov	r0, r5
 800e14c:	f001 fd86 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800e150:	4020      	ands	r0, r4
 800e152:	b2c0      	uxtb	r0, r0
 800e154:	bd70      	pop	{r4, r5, r6, pc}
 800e156:	bf00      	nop

0800e158 <uxr_serialize_ACKNACK_Payload>:
 800e158:	b570      	push	{r4, r5, r6, lr}
 800e15a:	460c      	mov	r4, r1
 800e15c:	460e      	mov	r6, r1
 800e15e:	f834 1b02 	ldrh.w	r1, [r4], #2
 800e162:	4605      	mov	r5, r0
 800e164:	f7fb fdd4 	bl	8009d10 <ucdr_serialize_uint16_t>
 800e168:	2202      	movs	r2, #2
 800e16a:	4621      	mov	r1, r4
 800e16c:	4604      	mov	r4, r0
 800e16e:	4628      	mov	r0, r5
 800e170:	f001 fd74 	bl	800fc5c <ucdr_serialize_array_uint8_t>
 800e174:	7931      	ldrb	r1, [r6, #4]
 800e176:	4004      	ands	r4, r0
 800e178:	4628      	mov	r0, r5
 800e17a:	f7fb fd9d 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800e17e:	b2e4      	uxtb	r4, r4
 800e180:	4020      	ands	r0, r4
 800e182:	bd70      	pop	{r4, r5, r6, pc}

0800e184 <uxr_deserialize_ACKNACK_Payload>:
 800e184:	b570      	push	{r4, r5, r6, lr}
 800e186:	4605      	mov	r5, r0
 800e188:	460e      	mov	r6, r1
 800e18a:	f7fb fec1 	bl	8009f10 <ucdr_deserialize_uint16_t>
 800e18e:	2202      	movs	r2, #2
 800e190:	18b1      	adds	r1, r6, r2
 800e192:	4604      	mov	r4, r0
 800e194:	4628      	mov	r0, r5
 800e196:	f001 fdc5 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800e19a:	1d31      	adds	r1, r6, #4
 800e19c:	4004      	ands	r4, r0
 800e19e:	4628      	mov	r0, r5
 800e1a0:	f7fb fda0 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800e1a4:	b2e4      	uxtb	r4, r4
 800e1a6:	4020      	ands	r0, r4
 800e1a8:	bd70      	pop	{r4, r5, r6, pc}
 800e1aa:	bf00      	nop

0800e1ac <uxr_serialize_HEARTBEAT_Payload>:
 800e1ac:	b570      	push	{r4, r5, r6, lr}
 800e1ae:	460d      	mov	r5, r1
 800e1b0:	8809      	ldrh	r1, [r1, #0]
 800e1b2:	4606      	mov	r6, r0
 800e1b4:	f7fb fdac 	bl	8009d10 <ucdr_serialize_uint16_t>
 800e1b8:	8869      	ldrh	r1, [r5, #2]
 800e1ba:	4604      	mov	r4, r0
 800e1bc:	4630      	mov	r0, r6
 800e1be:	f7fb fda7 	bl	8009d10 <ucdr_serialize_uint16_t>
 800e1c2:	7929      	ldrb	r1, [r5, #4]
 800e1c4:	4004      	ands	r4, r0
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f7fb fd76 	bl	8009cb8 <ucdr_serialize_uint8_t>
 800e1cc:	b2e4      	uxtb	r4, r4
 800e1ce:	4020      	ands	r0, r4
 800e1d0:	bd70      	pop	{r4, r5, r6, pc}
 800e1d2:	bf00      	nop

0800e1d4 <uxr_deserialize_HEARTBEAT_Payload>:
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	4605      	mov	r5, r0
 800e1d8:	460e      	mov	r6, r1
 800e1da:	f7fb fe99 	bl	8009f10 <ucdr_deserialize_uint16_t>
 800e1de:	1cb1      	adds	r1, r6, #2
 800e1e0:	4604      	mov	r4, r0
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f7fb fe94 	bl	8009f10 <ucdr_deserialize_uint16_t>
 800e1e8:	1d31      	adds	r1, r6, #4
 800e1ea:	4004      	ands	r4, r0
 800e1ec:	4628      	mov	r0, r5
 800e1ee:	f7fb fd79 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800e1f2:	b2e4      	uxtb	r4, r4
 800e1f4:	4020      	ands	r0, r4
 800e1f6:	bd70      	pop	{r4, r5, r6, pc}

0800e1f8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800e1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1fc:	4605      	mov	r5, r0
 800e1fe:	460e      	mov	r6, r1
 800e200:	f7fc fc22 	bl	800aa48 <ucdr_deserialize_int32_t>
 800e204:	1d31      	adds	r1, r6, #4
 800e206:	4607      	mov	r7, r0
 800e208:	4628      	mov	r0, r5
 800e20a:	f7fc f89b 	bl	800a344 <ucdr_deserialize_uint32_t>
 800e20e:	f106 0108 	add.w	r1, r6, #8
 800e212:	4680      	mov	r8, r0
 800e214:	4628      	mov	r0, r5
 800e216:	f7fc fc17 	bl	800aa48 <ucdr_deserialize_int32_t>
 800e21a:	f106 010c 	add.w	r1, r6, #12
 800e21e:	4604      	mov	r4, r0
 800e220:	4628      	mov	r0, r5
 800e222:	f7fc f88f 	bl	800a344 <ucdr_deserialize_uint32_t>
 800e226:	ea07 0708 	and.w	r7, r7, r8
 800e22a:	403c      	ands	r4, r7
 800e22c:	f106 0110 	add.w	r1, r6, #16
 800e230:	4004      	ands	r4, r0
 800e232:	4628      	mov	r0, r5
 800e234:	f7fc fc08 	bl	800aa48 <ucdr_deserialize_int32_t>
 800e238:	f106 0114 	add.w	r1, r6, #20
 800e23c:	4607      	mov	r7, r0
 800e23e:	4628      	mov	r0, r5
 800e240:	f7fc f880 	bl	800a344 <ucdr_deserialize_uint32_t>
 800e244:	b2e4      	uxtb	r4, r4
 800e246:	403c      	ands	r4, r7
 800e248:	4020      	ands	r0, r4
 800e24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24e:	bf00      	nop

0800e250 <uxr_deserialize_SampleIdentity>:
 800e250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e254:	220c      	movs	r2, #12
 800e256:	4604      	mov	r4, r0
 800e258:	460d      	mov	r5, r1
 800e25a:	f001 fd63 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800e25e:	2203      	movs	r2, #3
 800e260:	f105 010c 	add.w	r1, r5, #12
 800e264:	4607      	mov	r7, r0
 800e266:	4620      	mov	r0, r4
 800e268:	f001 fd5c 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800e26c:	f105 010f 	add.w	r1, r5, #15
 800e270:	4680      	mov	r8, r0
 800e272:	4620      	mov	r0, r4
 800e274:	f7fb fd36 	bl	8009ce4 <ucdr_deserialize_uint8_t>
 800e278:	f105 0110 	add.w	r1, r5, #16
 800e27c:	4606      	mov	r6, r0
 800e27e:	4620      	mov	r0, r4
 800e280:	f7fc fbe2 	bl	800aa48 <ucdr_deserialize_int32_t>
 800e284:	f105 0114 	add.w	r1, r5, #20
 800e288:	4603      	mov	r3, r0
 800e28a:	4620      	mov	r0, r4
 800e28c:	ea07 0708 	and.w	r7, r7, r8
 800e290:	461c      	mov	r4, r3
 800e292:	f7fc f857 	bl	800a344 <ucdr_deserialize_uint32_t>
 800e296:	403e      	ands	r6, r7
 800e298:	4034      	ands	r4, r6
 800e29a:	4020      	ands	r0, r4
 800e29c:	b2c0      	uxtb	r0, r0
 800e29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a2:	bf00      	nop

0800e2a4 <rcl_convert_rmw_ret_to_rcl_ret>:
 800e2a4:	280b      	cmp	r0, #11
 800e2a6:	dc0d      	bgt.n	800e2c4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	db09      	blt.n	800e2c0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e2ac:	280b      	cmp	r0, #11
 800e2ae:	d807      	bhi.n	800e2c0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e2b0:	e8df f000 	tbb	[pc, r0]
 800e2b4:	07060607 	.word	0x07060607
 800e2b8:	06060606 	.word	0x06060606
 800e2bc:	07070606 	.word	0x07070606
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	4770      	bx	lr
 800e2c4:	28cb      	cmp	r0, #203	@ 0xcb
 800e2c6:	bf18      	it	ne
 800e2c8:	2001      	movne	r0, #1
 800e2ca:	4770      	bx	lr

0800e2cc <rcl_get_zero_initialized_context>:
 800e2cc:	4a03      	ldr	r2, [pc, #12]	@ (800e2dc <rcl_get_zero_initialized_context+0x10>)
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	4770      	bx	lr
 800e2dc:	08012c80 	.word	0x08012c80

0800e2e0 <rcl_context_is_valid>:
 800e2e0:	b118      	cbz	r0, 800e2ea <rcl_context_is_valid+0xa>
 800e2e2:	6840      	ldr	r0, [r0, #4]
 800e2e4:	3800      	subs	r0, #0
 800e2e6:	bf18      	it	ne
 800e2e8:	2001      	movne	r0, #1
 800e2ea:	4770      	bx	lr

0800e2ec <__cleanup_context>:
 800e2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	6800      	ldr	r0, [r0, #0]
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	6073      	str	r3, [r6, #4]
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d049      	beq.n	800e390 <__cleanup_context+0xa4>
 800e2fc:	6947      	ldr	r7, [r0, #20]
 800e2fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e302:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e306:	b137      	cbz	r7, 800e316 <__cleanup_context+0x2a>
 800e308:	3014      	adds	r0, #20
 800e30a:	f7fa f8cd 	bl	80084a8 <rcl_init_options_fini>
 800e30e:	4607      	mov	r7, r0
 800e310:	2800      	cmp	r0, #0
 800e312:	d144      	bne.n	800e39e <__cleanup_context+0xb2>
 800e314:	6830      	ldr	r0, [r6, #0]
 800e316:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e318:	b143      	cbz	r3, 800e32c <__cleanup_context+0x40>
 800e31a:	3028      	adds	r0, #40	@ 0x28
 800e31c:	f7fa fdd4 	bl	8008ec8 <rmw_context_fini>
 800e320:	b118      	cbz	r0, 800e32a <__cleanup_context+0x3e>
 800e322:	2f00      	cmp	r7, #0
 800e324:	d03e      	beq.n	800e3a4 <__cleanup_context+0xb8>
 800e326:	f7fa fb57 	bl	80089d8 <rcutils_reset_error>
 800e32a:	6830      	ldr	r0, [r6, #0]
 800e32c:	6a03      	ldr	r3, [r0, #32]
 800e32e:	b1db      	cbz	r3, 800e368 <__cleanup_context+0x7c>
 800e330:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e334:	2a01      	cmp	r2, #1
 800e336:	f17c 0100 	sbcs.w	r1, ip, #0
 800e33a:	db11      	blt.n	800e360 <__cleanup_context+0x74>
 800e33c:	2400      	movs	r4, #0
 800e33e:	4625      	mov	r5, r4
 800e340:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e344:	4649      	mov	r1, r9
 800e346:	b1b8      	cbz	r0, 800e378 <__cleanup_context+0x8c>
 800e348:	47c0      	blx	r8
 800e34a:	6833      	ldr	r3, [r6, #0]
 800e34c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e350:	3401      	adds	r4, #1
 800e352:	f145 0500 	adc.w	r5, r5, #0
 800e356:	4294      	cmp	r4, r2
 800e358:	eb75 010c 	sbcs.w	r1, r5, ip
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	dbef      	blt.n	800e340 <__cleanup_context+0x54>
 800e360:	4618      	mov	r0, r3
 800e362:	4649      	mov	r1, r9
 800e364:	47c0      	blx	r8
 800e366:	6830      	ldr	r0, [r6, #0]
 800e368:	4649      	mov	r1, r9
 800e36a:	47c0      	blx	r8
 800e36c:	2300      	movs	r3, #0
 800e36e:	e9c6 3300 	strd	r3, r3, [r6]
 800e372:	4638      	mov	r0, r7
 800e374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e378:	3401      	adds	r4, #1
 800e37a:	f145 0500 	adc.w	r5, r5, #0
 800e37e:	4294      	cmp	r4, r2
 800e380:	eb75 010c 	sbcs.w	r1, r5, ip
 800e384:	dbdc      	blt.n	800e340 <__cleanup_context+0x54>
 800e386:	4618      	mov	r0, r3
 800e388:	4649      	mov	r1, r9
 800e38a:	47c0      	blx	r8
 800e38c:	6830      	ldr	r0, [r6, #0]
 800e38e:	e7eb      	b.n	800e368 <__cleanup_context+0x7c>
 800e390:	4607      	mov	r7, r0
 800e392:	2300      	movs	r3, #0
 800e394:	e9c6 3300 	strd	r3, r3, [r6]
 800e398:	4638      	mov	r0, r7
 800e39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e39e:	f7fa fb1b 	bl	80089d8 <rcutils_reset_error>
 800e3a2:	e7b7      	b.n	800e314 <__cleanup_context+0x28>
 800e3a4:	f7ff ff7e 	bl	800e2a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800e3a8:	4607      	mov	r7, r0
 800e3aa:	e7bc      	b.n	800e326 <__cleanup_context+0x3a>

0800e3ac <rcl_init>:
 800e3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b0:	1e05      	subs	r5, r0, #0
 800e3b2:	b09e      	sub	sp, #120	@ 0x78
 800e3b4:	460e      	mov	r6, r1
 800e3b6:	4690      	mov	r8, r2
 800e3b8:	461f      	mov	r7, r3
 800e3ba:	f340 809c 	ble.w	800e4f6 <rcl_init+0x14a>
 800e3be:	2900      	cmp	r1, #0
 800e3c0:	f000 809c 	beq.w	800e4fc <rcl_init+0x150>
 800e3c4:	f1a1 0e04 	sub.w	lr, r1, #4
 800e3c8:	f04f 0c00 	mov.w	ip, #0
 800e3cc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800e3d0:	f10c 0c01 	add.w	ip, ip, #1
 800e3d4:	2c00      	cmp	r4, #0
 800e3d6:	f000 8091 	beq.w	800e4fc <rcl_init+0x150>
 800e3da:	4565      	cmp	r5, ip
 800e3dc:	d1f6      	bne.n	800e3cc <rcl_init+0x20>
 800e3de:	f1b8 0f00 	cmp.w	r8, #0
 800e3e2:	f000 808b 	beq.w	800e4fc <rcl_init+0x150>
 800e3e6:	f8d8 4000 	ldr.w	r4, [r8]
 800e3ea:	2c00      	cmp	r4, #0
 800e3ec:	f000 8086 	beq.w	800e4fc <rcl_init+0x150>
 800e3f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3f2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800e3f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3fa:	6823      	ldr	r3, [r4, #0]
 800e3fc:	f8cc 3000 	str.w	r3, [ip]
 800e400:	a819      	add	r0, sp, #100	@ 0x64
 800e402:	f7fa fac3 	bl	800898c <rcutils_allocator_is_valid>
 800e406:	2800      	cmp	r0, #0
 800e408:	d078      	beq.n	800e4fc <rcl_init+0x150>
 800e40a:	2f00      	cmp	r7, #0
 800e40c:	d076      	beq.n	800e4fc <rcl_init+0x150>
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d178      	bne.n	800e506 <rcl_init+0x15a>
 800e414:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800e418:	2178      	movs	r1, #120	@ 0x78
 800e41a:	2001      	movs	r0, #1
 800e41c:	4798      	blx	r3
 800e41e:	4604      	mov	r4, r0
 800e420:	6038      	str	r0, [r7, #0]
 800e422:	2800      	cmp	r0, #0
 800e424:	f000 80b6 	beq.w	800e594 <rcl_init+0x1e8>
 800e428:	a802      	add	r0, sp, #8
 800e42a:	f001 f859 	bl	800f4e0 <rmw_get_zero_initialized_context>
 800e42e:	a902      	add	r1, sp, #8
 800e430:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e434:	2250      	movs	r2, #80	@ 0x50
 800e436:	ac19      	add	r4, sp, #100	@ 0x64
 800e438:	f003 fa77 	bl	801192a <memcpy>
 800e43c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e43e:	f8d7 e000 	ldr.w	lr, [r7]
 800e442:	46f4      	mov	ip, lr
 800e444:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e448:	6823      	ldr	r3, [r4, #0]
 800e44a:	f8cc 3000 	str.w	r3, [ip]
 800e44e:	f10e 0114 	add.w	r1, lr, #20
 800e452:	4640      	mov	r0, r8
 800e454:	f7fa f852 	bl	80084fc <rcl_init_options_copy>
 800e458:	4604      	mov	r4, r0
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d144      	bne.n	800e4e8 <rcl_init+0x13c>
 800e45e:	f8d7 9000 	ldr.w	r9, [r7]
 800e462:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800e466:	f8c9 0020 	str.w	r0, [r9, #32]
 800e46a:	f8c9 5018 	str.w	r5, [r9, #24]
 800e46e:	f8c9 801c 	str.w	r8, [r9, #28]
 800e472:	2d00      	cmp	r5, #0
 800e474:	d04e      	beq.n	800e514 <rcl_init+0x168>
 800e476:	2e00      	cmp	r6, #0
 800e478:	d04c      	beq.n	800e514 <rcl_init+0x168>
 800e47a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800e47e:	2104      	movs	r1, #4
 800e480:	4628      	mov	r0, r5
 800e482:	4798      	blx	r3
 800e484:	f8c9 0020 	str.w	r0, [r9, #32]
 800e488:	f8d7 9000 	ldr.w	r9, [r7]
 800e48c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800e490:	46ca      	mov	sl, r9
 800e492:	b343      	cbz	r3, 800e4e6 <rcl_init+0x13a>
 800e494:	2d01      	cmp	r5, #1
 800e496:	f178 0300 	sbcs.w	r3, r8, #0
 800e49a:	db3b      	blt.n	800e514 <rcl_init+0x168>
 800e49c:	2400      	movs	r4, #0
 800e49e:	3e04      	subs	r6, #4
 800e4a0:	46a1      	mov	r9, r4
 800e4a2:	e00b      	b.n	800e4bc <rcl_init+0x110>
 800e4a4:	6831      	ldr	r1, [r6, #0]
 800e4a6:	f003 fa40 	bl	801192a <memcpy>
 800e4aa:	3401      	adds	r4, #1
 800e4ac:	f149 0900 	adc.w	r9, r9, #0
 800e4b0:	45c8      	cmp	r8, r9
 800e4b2:	bf08      	it	eq
 800e4b4:	42a5      	cmpeq	r5, r4
 800e4b6:	d02b      	beq.n	800e510 <rcl_init+0x164>
 800e4b8:	f8d7 a000 	ldr.w	sl, [r7]
 800e4bc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800e4c0:	f7f1 feb8 	bl	8000234 <strlen>
 800e4c4:	1c42      	adds	r2, r0, #1
 800e4c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4c8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800e4ca:	f8da a020 	ldr.w	sl, [sl, #32]
 800e4ce:	9201      	str	r2, [sp, #4]
 800e4d0:	4610      	mov	r0, r2
 800e4d2:	4798      	blx	r3
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800e4da:	6a1b      	ldr	r3, [r3, #32]
 800e4dc:	9a01      	ldr	r2, [sp, #4]
 800e4de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d1de      	bne.n	800e4a4 <rcl_init+0xf8>
 800e4e6:	240a      	movs	r4, #10
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	f7ff feff 	bl	800e2ec <__cleanup_context>
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	b01e      	add	sp, #120	@ 0x78
 800e4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f6:	2900      	cmp	r1, #0
 800e4f8:	f43f af71 	beq.w	800e3de <rcl_init+0x32>
 800e4fc:	240b      	movs	r4, #11
 800e4fe:	4620      	mov	r0, r4
 800e500:	b01e      	add	sp, #120	@ 0x78
 800e502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e506:	2464      	movs	r4, #100	@ 0x64
 800e508:	4620      	mov	r0, r4
 800e50a:	b01e      	add	sp, #120	@ 0x78
 800e50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e510:	f8d7 9000 	ldr.w	r9, [r7]
 800e514:	4926      	ldr	r1, [pc, #152]	@ (800e5b0 <rcl_init+0x204>)
 800e516:	680b      	ldr	r3, [r1, #0]
 800e518:	3301      	adds	r3, #1
 800e51a:	d036      	beq.n	800e58a <rcl_init+0x1de>
 800e51c:	600b      	str	r3, [r1, #0]
 800e51e:	461a      	mov	r2, r3
 800e520:	2400      	movs	r4, #0
 800e522:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800e526:	607b      	str	r3, [r7, #4]
 800e528:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e52a:	3301      	adds	r3, #1
 800e52c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800e530:	d034      	beq.n	800e59c <rcl_init+0x1f0>
 800e532:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800e536:	b93b      	cbnz	r3, 800e548 <rcl_init+0x19c>
 800e538:	3030      	adds	r0, #48	@ 0x30
 800e53a:	f000 f83b 	bl	800e5b4 <rcl_get_localhost_only>
 800e53e:	4604      	mov	r4, r0
 800e540:	2800      	cmp	r0, #0
 800e542:	d1d1      	bne.n	800e4e8 <rcl_init+0x13c>
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	6958      	ldr	r0, [r3, #20]
 800e548:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800e54a:	aa18      	add	r2, sp, #96	@ 0x60
 800e54c:	a917      	add	r1, sp, #92	@ 0x5c
 800e54e:	f000 fc83 	bl	800ee58 <rcl_validate_enclave_name>
 800e552:	4604      	mov	r4, r0
 800e554:	2800      	cmp	r0, #0
 800e556:	d1c7      	bne.n	800e4e8 <rcl_init+0x13c>
 800e558:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e55a:	b9eb      	cbnz	r3, 800e598 <rcl_init+0x1ec>
 800e55c:	6839      	ldr	r1, [r7, #0]
 800e55e:	694b      	ldr	r3, [r1, #20]
 800e560:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800e562:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800e566:	f000 fb3f 	bl	800ebe8 <rcl_get_security_options_from_environment>
 800e56a:	4604      	mov	r4, r0
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d1bb      	bne.n	800e4e8 <rcl_init+0x13c>
 800e570:	6839      	ldr	r1, [r7, #0]
 800e572:	6948      	ldr	r0, [r1, #20]
 800e574:	3128      	adds	r1, #40	@ 0x28
 800e576:	3018      	adds	r0, #24
 800e578:	f7fa fb70 	bl	8008c5c <rmw_init>
 800e57c:	4604      	mov	r4, r0
 800e57e:	2800      	cmp	r0, #0
 800e580:	d0bd      	beq.n	800e4fe <rcl_init+0x152>
 800e582:	f7ff fe8f 	bl	800e2a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800e586:	4604      	mov	r4, r0
 800e588:	e7ae      	b.n	800e4e8 <rcl_init+0x13c>
 800e58a:	2201      	movs	r2, #1
 800e58c:	461c      	mov	r4, r3
 800e58e:	600a      	str	r2, [r1, #0]
 800e590:	4613      	mov	r3, r2
 800e592:	e7c6      	b.n	800e522 <rcl_init+0x176>
 800e594:	240a      	movs	r4, #10
 800e596:	e7b2      	b.n	800e4fe <rcl_init+0x152>
 800e598:	2401      	movs	r4, #1
 800e59a:	e7a5      	b.n	800e4e8 <rcl_init+0x13c>
 800e59c:	3024      	adds	r0, #36	@ 0x24
 800e59e:	f002 f9fd 	bl	801099c <rcl_get_default_domain_id>
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	d19f      	bne.n	800e4e8 <rcl_init+0x13c>
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	6958      	ldr	r0, [r3, #20]
 800e5ac:	e7c1      	b.n	800e532 <rcl_init+0x186>
 800e5ae:	bf00      	nop
 800e5b0:	2000aa28 	.word	0x2000aa28

0800e5b4 <rcl_get_localhost_only>:
 800e5b4:	b510      	push	{r4, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	9301      	str	r3, [sp, #4]
 800e5bc:	b1b8      	cbz	r0, 800e5ee <rcl_get_localhost_only+0x3a>
 800e5be:	4604      	mov	r4, r0
 800e5c0:	a901      	add	r1, sp, #4
 800e5c2:	480c      	ldr	r0, [pc, #48]	@ (800e5f4 <rcl_get_localhost_only+0x40>)
 800e5c4:	f000 fc90 	bl	800eee8 <rcutils_get_env>
 800e5c8:	b110      	cbz	r0, 800e5d0 <rcl_get_localhost_only+0x1c>
 800e5ca:	2001      	movs	r0, #1
 800e5cc:	b002      	add	sp, #8
 800e5ce:	bd10      	pop	{r4, pc}
 800e5d0:	9b01      	ldr	r3, [sp, #4]
 800e5d2:	b113      	cbz	r3, 800e5da <rcl_get_localhost_only+0x26>
 800e5d4:	781a      	ldrb	r2, [r3, #0]
 800e5d6:	2a31      	cmp	r2, #49	@ 0x31
 800e5d8:	d004      	beq.n	800e5e4 <rcl_get_localhost_only+0x30>
 800e5da:	2302      	movs	r3, #2
 800e5dc:	2000      	movs	r0, #0
 800e5de:	7023      	strb	r3, [r4, #0]
 800e5e0:	b002      	add	sp, #8
 800e5e2:	bd10      	pop	{r4, pc}
 800e5e4:	785b      	ldrb	r3, [r3, #1]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1f7      	bne.n	800e5da <rcl_get_localhost_only+0x26>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e7f6      	b.n	800e5dc <rcl_get_localhost_only+0x28>
 800e5ee:	200b      	movs	r0, #11
 800e5f0:	b002      	add	sp, #8
 800e5f2:	bd10      	pop	{r4, pc}
 800e5f4:	08012c88 	.word	0x08012c88

0800e5f8 <rcl_get_zero_initialized_node>:
 800e5f8:	4a03      	ldr	r2, [pc, #12]	@ (800e608 <rcl_get_zero_initialized_node+0x10>)
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e600:	e883 0003 	stmia.w	r3, {r0, r1}
 800e604:	4618      	mov	r0, r3
 800e606:	4770      	bx	lr
 800e608:	08012ca4 	.word	0x08012ca4

0800e60c <rcl_node_init>:
 800e60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e610:	b0a9      	sub	sp, #164	@ 0xa4
 800e612:	4604      	mov	r4, r0
 800e614:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800e618:	a823      	add	r0, sp, #140	@ 0x8c
 800e61a:	460e      	mov	r6, r1
 800e61c:	4615      	mov	r5, r2
 800e61e:	461f      	mov	r7, r3
 800e620:	f002 fbe4 	bl	8010dec <rcl_guard_condition_get_default_options>
 800e624:	f1b8 0f00 	cmp.w	r8, #0
 800e628:	f000 80e6 	beq.w	800e7f8 <rcl_node_init+0x1ec>
 800e62c:	4640      	mov	r0, r8
 800e62e:	f7fa f9ad 	bl	800898c <rcutils_allocator_is_valid>
 800e632:	2800      	cmp	r0, #0
 800e634:	f000 80e0 	beq.w	800e7f8 <rcl_node_init+0x1ec>
 800e638:	2e00      	cmp	r6, #0
 800e63a:	f000 80dd 	beq.w	800e7f8 <rcl_node_init+0x1ec>
 800e63e:	2d00      	cmp	r5, #0
 800e640:	f000 80da 	beq.w	800e7f8 <rcl_node_init+0x1ec>
 800e644:	2c00      	cmp	r4, #0
 800e646:	f000 80d7 	beq.w	800e7f8 <rcl_node_init+0x1ec>
 800e64a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e64e:	f1b9 0f00 	cmp.w	r9, #0
 800e652:	f040 80fd 	bne.w	800e850 <rcl_node_init+0x244>
 800e656:	2f00      	cmp	r7, #0
 800e658:	f000 80ce 	beq.w	800e7f8 <rcl_node_init+0x1ec>
 800e65c:	4638      	mov	r0, r7
 800e65e:	f7ff fe3f 	bl	800e2e0 <rcl_context_is_valid>
 800e662:	4682      	mov	sl, r0
 800e664:	2800      	cmp	r0, #0
 800e666:	f000 80cd 	beq.w	800e804 <rcl_node_init+0x1f8>
 800e66a:	464a      	mov	r2, r9
 800e66c:	a922      	add	r1, sp, #136	@ 0x88
 800e66e:	4630      	mov	r0, r6
 800e670:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800e674:	f001 f826 	bl	800f6c4 <rmw_validate_node_name>
 800e678:	4681      	mov	r9, r0
 800e67a:	2800      	cmp	r0, #0
 800e67c:	f040 80be 	bne.w	800e7fc <rcl_node_init+0x1f0>
 800e680:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800e682:	2800      	cmp	r0, #0
 800e684:	f040 80f0 	bne.w	800e868 <rcl_node_init+0x25c>
 800e688:	4628      	mov	r0, r5
 800e68a:	f7f1 fdd3 	bl	8000234 <strlen>
 800e68e:	2800      	cmp	r0, #0
 800e690:	f040 80bb 	bne.w	800e80a <rcl_node_init+0x1fe>
 800e694:	4d7c      	ldr	r5, [pc, #496]	@ (800e888 <rcl_node_init+0x27c>)
 800e696:	a922      	add	r1, sp, #136	@ 0x88
 800e698:	2200      	movs	r2, #0
 800e69a:	4628      	mov	r0, r5
 800e69c:	f000 fff4 	bl	800f688 <rmw_validate_namespace>
 800e6a0:	4681      	mov	r9, r0
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	f040 80aa 	bne.w	800e7fc <rcl_node_init+0x1f0>
 800e6a8:	4682      	mov	sl, r0
 800e6aa:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	f040 80e0 	bne.w	800e872 <rcl_node_init+0x266>
 800e6b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e6b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e6ba:	2078      	movs	r0, #120	@ 0x78
 800e6bc:	4798      	blx	r3
 800e6be:	4681      	mov	r9, r0
 800e6c0:	6060      	str	r0, [r4, #4]
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	f000 80ca 	beq.w	800e85c <rcl_node_init+0x250>
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800e6d0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800e6d4:	a808      	add	r0, sp, #32
 800e6d6:	f000 f907 	bl	800e8e8 <rcl_node_get_default_options>
 800e6da:	a908      	add	r1, sp, #32
 800e6dc:	4648      	mov	r0, r9
 800e6de:	2268      	movs	r2, #104	@ 0x68
 800e6e0:	f003 f923 	bl	801192a <memcpy>
 800e6e4:	6861      	ldr	r1, [r4, #4]
 800e6e6:	6027      	str	r7, [r4, #0]
 800e6e8:	4640      	mov	r0, r8
 800e6ea:	f000 f90b 	bl	800e904 <rcl_node_options_copy>
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	d158      	bne.n	800e7a4 <rcl_node_init+0x198>
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	f7f1 fd9e 	bl	8000234 <strlen>
 800e6f8:	4428      	add	r0, r5
 800e6fa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800e6fe:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800e702:	2b2f      	cmp	r3, #47	@ 0x2f
 800e704:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e708:	9300      	str	r3, [sp, #0]
 800e70a:	bf0c      	ite	eq
 800e70c:	4b5f      	ldreq	r3, [pc, #380]	@ (800e88c <rcl_node_init+0x280>)
 800e70e:	4b60      	ldrne	r3, [pc, #384]	@ (800e890 <rcl_node_init+0x284>)
 800e710:	9302      	str	r3, [sp, #8]
 800e712:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e716:	9301      	str	r3, [sp, #4]
 800e718:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e71c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e720:	f000 fc0a 	bl	800ef38 <rcutils_format_string_limit>
 800e724:	6823      	ldr	r3, [r4, #0]
 800e726:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800e72a:	6818      	ldr	r0, [r3, #0]
 800e72c:	4631      	mov	r1, r6
 800e72e:	3028      	adds	r0, #40	@ 0x28
 800e730:	462a      	mov	r2, r5
 800e732:	6866      	ldr	r6, [r4, #4]
 800e734:	f7fa fc74 	bl	8009020 <rmw_create_node>
 800e738:	6863      	ldr	r3, [r4, #4]
 800e73a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800e73c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800e73e:	2800      	cmp	r0, #0
 800e740:	d032      	beq.n	800e7a8 <rcl_node_init+0x19c>
 800e742:	f7fa fd01 	bl	8009148 <rmw_node_get_graph_guard_condition>
 800e746:	4681      	mov	r9, r0
 800e748:	b360      	cbz	r0, 800e7a4 <rcl_node_init+0x198>
 800e74a:	f8d8 3000 	ldr.w	r3, [r8]
 800e74e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e752:	6866      	ldr	r6, [r4, #4]
 800e754:	2008      	movs	r0, #8
 800e756:	4798      	blx	r3
 800e758:	6863      	ldr	r3, [r4, #4]
 800e75a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800e75c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800e760:	f1bb 0f00 	cmp.w	fp, #0
 800e764:	d020      	beq.n	800e7a8 <rcl_node_init+0x19c>
 800e766:	a806      	add	r0, sp, #24
 800e768:	f002 fab0 	bl	8010ccc <rcl_get_zero_initialized_guard_condition>
 800e76c:	a806      	add	r0, sp, #24
 800e76e:	c803      	ldmia	r0, {r0, r1}
 800e770:	6863      	ldr	r3, [r4, #4]
 800e772:	46c4      	mov	ip, r8
 800e774:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800e778:	e88b 0003 	stmia.w	fp, {r0, r1}
 800e77c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e780:	ae23      	add	r6, sp, #140	@ 0x8c
 800e782:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e784:	f8dc 3000 	ldr.w	r3, [ip]
 800e788:	6033      	str	r3, [r6, #0]
 800e78a:	ab28      	add	r3, sp, #160	@ 0xa0
 800e78c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800e790:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e794:	4649      	mov	r1, r9
 800e796:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e798:	463a      	mov	r2, r7
 800e79a:	4670      	mov	r0, lr
 800e79c:	f002 faa0 	bl	8010ce0 <rcl_guard_condition_init_from_rmw>
 800e7a0:	4681      	mov	r9, r0
 800e7a2:	b328      	cbz	r0, 800e7f0 <rcl_node_init+0x1e4>
 800e7a4:	6863      	ldr	r3, [r4, #4]
 800e7a6:	b1f3      	cbz	r3, 800e7e6 <rcl_node_init+0x1da>
 800e7a8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800e7aa:	b128      	cbz	r0, 800e7b8 <rcl_node_init+0x1ac>
 800e7ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e7b0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e7b4:	4798      	blx	r3
 800e7b6:	6863      	ldr	r3, [r4, #4]
 800e7b8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800e7ba:	b110      	cbz	r0, 800e7c2 <rcl_node_init+0x1b6>
 800e7bc:	f7fa fc48 	bl	8009050 <rmw_destroy_node>
 800e7c0:	6863      	ldr	r3, [r4, #4]
 800e7c2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e7c4:	b148      	cbz	r0, 800e7da <rcl_node_init+0x1ce>
 800e7c6:	f002 faeb 	bl	8010da0 <rcl_guard_condition_fini>
 800e7ca:	6863      	ldr	r3, [r4, #4]
 800e7cc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e7d0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e7d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e7d6:	4798      	blx	r3
 800e7d8:	6863      	ldr	r3, [r4, #4]
 800e7da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e7e4:	4798      	blx	r3
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	e9c4 3300 	strd	r3, r3, [r4]
 800e7ec:	f04f 0901 	mov.w	r9, #1
 800e7f0:	f1ba 0f00 	cmp.w	sl, #0
 800e7f4:	d125      	bne.n	800e842 <rcl_node_init+0x236>
 800e7f6:	e001      	b.n	800e7fc <rcl_node_init+0x1f0>
 800e7f8:	f04f 090b 	mov.w	r9, #11
 800e7fc:	4648      	mov	r0, r9
 800e7fe:	b029      	add	sp, #164	@ 0xa4
 800e800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e804:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800e808:	e7f8      	b.n	800e7fc <rcl_node_init+0x1f0>
 800e80a:	782b      	ldrb	r3, [r5, #0]
 800e80c:	2b2f      	cmp	r3, #47	@ 0x2f
 800e80e:	f43f af42 	beq.w	800e696 <rcl_node_init+0x8a>
 800e812:	9503      	str	r5, [sp, #12]
 800e814:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	4b1e      	ldr	r3, [pc, #120]	@ (800e894 <rcl_node_init+0x288>)
 800e81c:	9302      	str	r3, [sp, #8]
 800e81e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e822:	9301      	str	r3, [sp, #4]
 800e824:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e828:	f000 fb86 	bl	800ef38 <rcutils_format_string_limit>
 800e82c:	4605      	mov	r5, r0
 800e82e:	b340      	cbz	r0, 800e882 <rcl_node_init+0x276>
 800e830:	2200      	movs	r2, #0
 800e832:	a922      	add	r1, sp, #136	@ 0x88
 800e834:	9222      	str	r2, [sp, #136]	@ 0x88
 800e836:	f000 ff27 	bl	800f688 <rmw_validate_namespace>
 800e83a:	4681      	mov	r9, r0
 800e83c:	2800      	cmp	r0, #0
 800e83e:	f43f af34 	beq.w	800e6aa <rcl_node_init+0x9e>
 800e842:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e846:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e84a:	4628      	mov	r0, r5
 800e84c:	4798      	blx	r3
 800e84e:	e7d5      	b.n	800e7fc <rcl_node_init+0x1f0>
 800e850:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800e854:	4648      	mov	r0, r9
 800e856:	b029      	add	sp, #164	@ 0xa4
 800e858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e85c:	f04f 090a 	mov.w	r9, #10
 800e860:	f1ba 0f00 	cmp.w	sl, #0
 800e864:	d1ed      	bne.n	800e842 <rcl_node_init+0x236>
 800e866:	e7c9      	b.n	800e7fc <rcl_node_init+0x1f0>
 800e868:	f000 ff7e 	bl	800f768 <rmw_node_name_validation_result_string>
 800e86c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800e870:	e7c4      	b.n	800e7fc <rcl_node_init+0x1f0>
 800e872:	f000 ff1b 	bl	800f6ac <rmw_namespace_validation_result_string>
 800e876:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800e87a:	f1ba 0f00 	cmp.w	sl, #0
 800e87e:	d1e0      	bne.n	800e842 <rcl_node_init+0x236>
 800e880:	e7bc      	b.n	800e7fc <rcl_node_init+0x1f0>
 800e882:	f04f 090a 	mov.w	r9, #10
 800e886:	e7b9      	b.n	800e7fc <rcl_node_init+0x1f0>
 800e888:	080128d8 	.word	0x080128d8
 800e88c:	08012924 	.word	0x08012924
 800e890:	080128dc 	.word	0x080128dc
 800e894:	08012ca0 	.word	0x08012ca0

0800e898 <rcl_node_is_valid>:
 800e898:	b130      	cbz	r0, 800e8a8 <rcl_node_is_valid+0x10>
 800e89a:	6843      	ldr	r3, [r0, #4]
 800e89c:	b123      	cbz	r3, 800e8a8 <rcl_node_is_valid+0x10>
 800e89e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e8a0:	b113      	cbz	r3, 800e8a8 <rcl_node_is_valid+0x10>
 800e8a2:	6800      	ldr	r0, [r0, #0]
 800e8a4:	f7ff bd1c 	b.w	800e2e0 <rcl_context_is_valid>
 800e8a8:	2000      	movs	r0, #0
 800e8aa:	4770      	bx	lr

0800e8ac <rcl_node_get_name>:
 800e8ac:	b120      	cbz	r0, 800e8b8 <rcl_node_get_name+0xc>
 800e8ae:	6840      	ldr	r0, [r0, #4]
 800e8b0:	b110      	cbz	r0, 800e8b8 <rcl_node_get_name+0xc>
 800e8b2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e8b4:	b100      	cbz	r0, 800e8b8 <rcl_node_get_name+0xc>
 800e8b6:	6880      	ldr	r0, [r0, #8]
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop

0800e8bc <rcl_node_get_namespace>:
 800e8bc:	b120      	cbz	r0, 800e8c8 <rcl_node_get_namespace+0xc>
 800e8be:	6840      	ldr	r0, [r0, #4]
 800e8c0:	b110      	cbz	r0, 800e8c8 <rcl_node_get_namespace+0xc>
 800e8c2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e8c4:	b100      	cbz	r0, 800e8c8 <rcl_node_get_namespace+0xc>
 800e8c6:	68c0      	ldr	r0, [r0, #12]
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop

0800e8cc <rcl_node_get_options>:
 800e8cc:	b128      	cbz	r0, 800e8da <rcl_node_get_options+0xe>
 800e8ce:	6840      	ldr	r0, [r0, #4]
 800e8d0:	b118      	cbz	r0, 800e8da <rcl_node_get_options+0xe>
 800e8d2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	bf08      	it	eq
 800e8d8:	2000      	moveq	r0, #0
 800e8da:	4770      	bx	lr

0800e8dc <rcl_node_get_rmw_handle>:
 800e8dc:	b110      	cbz	r0, 800e8e4 <rcl_node_get_rmw_handle+0x8>
 800e8de:	6840      	ldr	r0, [r0, #4]
 800e8e0:	b100      	cbz	r0, 800e8e4 <rcl_node_get_rmw_handle+0x8>
 800e8e2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop

0800e8e8 <rcl_node_get_default_options>:
 800e8e8:	b510      	push	{r4, lr}
 800e8ea:	2268      	movs	r2, #104	@ 0x68
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	f002 ff52 	bl	8011798 <memset>
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f7fa f83b 	bl	8008970 <rcutils_get_default_allocator>
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	7523      	strb	r3, [r4, #20]
 800e8fe:	4620      	mov	r0, r4
 800e900:	bd10      	pop	{r4, pc}
 800e902:	bf00      	nop

0800e904 <rcl_node_options_copy>:
 800e904:	b1d0      	cbz	r0, 800e93c <rcl_node_options_copy+0x38>
 800e906:	b570      	push	{r4, r5, r6, lr}
 800e908:	460c      	mov	r4, r1
 800e90a:	b1a9      	cbz	r1, 800e938 <rcl_node_options_copy+0x34>
 800e90c:	4288      	cmp	r0, r1
 800e90e:	4684      	mov	ip, r0
 800e910:	d012      	beq.n	800e938 <rcl_node_options_copy+0x34>
 800e912:	4605      	mov	r5, r0
 800e914:	8a86      	ldrh	r6, [r0, #20]
 800e916:	468e      	mov	lr, r1
 800e918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e91a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e91e:	682b      	ldr	r3, [r5, #0]
 800e920:	f8ce 3000 	str.w	r3, [lr]
 800e924:	f10c 0118 	add.w	r1, ip, #24
 800e928:	2250      	movs	r2, #80	@ 0x50
 800e92a:	82a6      	strh	r6, [r4, #20]
 800e92c:	f104 0018 	add.w	r0, r4, #24
 800e930:	f002 fffb 	bl	801192a <memcpy>
 800e934:	2000      	movs	r0, #0
 800e936:	bd70      	pop	{r4, r5, r6, pc}
 800e938:	200b      	movs	r0, #11
 800e93a:	bd70      	pop	{r4, r5, r6, pc}
 800e93c:	200b      	movs	r0, #11
 800e93e:	4770      	bx	lr

0800e940 <rcl_node_resolve_name>:
 800e940:	b082      	sub	sp, #8
 800e942:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e946:	b091      	sub	sp, #68	@ 0x44
 800e948:	ac1a      	add	r4, sp, #104	@ 0x68
 800e94a:	e884 000c 	stmia.w	r4, {r2, r3}
 800e94e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800e952:	2800      	cmp	r0, #0
 800e954:	d03b      	beq.n	800e9ce <rcl_node_resolve_name+0x8e>
 800e956:	460c      	mov	r4, r1
 800e958:	4605      	mov	r5, r0
 800e95a:	f7ff ffb7 	bl	800e8cc <rcl_node_get_options>
 800e95e:	2800      	cmp	r0, #0
 800e960:	d037      	beq.n	800e9d2 <rcl_node_resolve_name+0x92>
 800e962:	4628      	mov	r0, r5
 800e964:	f7ff ffa2 	bl	800e8ac <rcl_node_get_name>
 800e968:	4606      	mov	r6, r0
 800e96a:	4628      	mov	r0, r5
 800e96c:	f7ff ffa6 	bl	800e8bc <rcl_node_get_namespace>
 800e970:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800e974:	4681      	mov	r9, r0
 800e976:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e97a:	ad0b      	add	r5, sp, #44	@ 0x2c
 800e97c:	46ac      	mov	ip, r5
 800e97e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e982:	f8de 3000 	ldr.w	r3, [lr]
 800e986:	f8cc 3000 	str.w	r3, [ip]
 800e98a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e98c:	b1fb      	cbz	r3, 800e9ce <rcl_node_resolve_name+0x8e>
 800e98e:	468a      	mov	sl, r1
 800e990:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800e994:	f000 fc28 	bl	800f1e8 <rcutils_get_zero_initialized_string_map>
 800e998:	ab10      	add	r3, sp, #64	@ 0x40
 800e99a:	9008      	str	r0, [sp, #32]
 800e99c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e9a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	e895 000c 	ldmia.w	r5, {r2, r3}
 800e9aa:	a808      	add	r0, sp, #32
 800e9ac:	f000 fc94 	bl	800f2d8 <rcutils_string_map_init>
 800e9b0:	4607      	mov	r7, r0
 800e9b2:	b180      	cbz	r0, 800e9d6 <rcl_node_resolve_name+0x96>
 800e9b4:	f7f9 fff8 	bl	80089a8 <rcutils_get_error_string>
 800e9b8:	f7fa f80e 	bl	80089d8 <rcutils_reset_error>
 800e9bc:	2f0a      	cmp	r7, #10
 800e9be:	bf18      	it	ne
 800e9c0:	2701      	movne	r7, #1
 800e9c2:	4638      	mov	r0, r7
 800e9c4:	b011      	add	sp, #68	@ 0x44
 800e9c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ca:	b002      	add	sp, #8
 800e9cc:	4770      	bx	lr
 800e9ce:	270b      	movs	r7, #11
 800e9d0:	e7f7      	b.n	800e9c2 <rcl_node_resolve_name+0x82>
 800e9d2:	2701      	movs	r7, #1
 800e9d4:	e7f5      	b.n	800e9c2 <rcl_node_resolve_name+0x82>
 800e9d6:	9009      	str	r0, [sp, #36]	@ 0x24
 800e9d8:	9007      	str	r0, [sp, #28]
 800e9da:	a808      	add	r0, sp, #32
 800e9dc:	f002 f970 	bl	8010cc0 <rcl_get_default_topic_name_substitutions>
 800e9e0:	4607      	mov	r7, r0
 800e9e2:	b1a8      	cbz	r0, 800ea10 <rcl_node_resolve_name+0xd0>
 800e9e4:	280a      	cmp	r0, #10
 800e9e6:	9c07      	ldr	r4, [sp, #28]
 800e9e8:	d000      	beq.n	800e9ec <rcl_node_resolve_name+0xac>
 800e9ea:	2701      	movs	r7, #1
 800e9ec:	a808      	add	r0, sp, #32
 800e9ee:	f000 fcb3 	bl	800f358 <rcutils_string_map_fini>
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d13d      	bne.n	800ea72 <rcl_node_resolve_name+0x132>
 800e9f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9f8:	4659      	mov	r1, fp
 800e9fa:	47d0      	blx	sl
 800e9fc:	4659      	mov	r1, fp
 800e9fe:	4620      	mov	r0, r4
 800ea00:	47d0      	blx	sl
 800ea02:	f1b8 0f00 	cmp.w	r8, #0
 800ea06:	d0dc      	beq.n	800e9c2 <rcl_node_resolve_name+0x82>
 800ea08:	2f67      	cmp	r7, #103	@ 0x67
 800ea0a:	bf08      	it	eq
 800ea0c:	2768      	moveq	r7, #104	@ 0x68
 800ea0e:	e7d8      	b.n	800e9c2 <rcl_node_resolve_name+0x82>
 800ea10:	ab09      	add	r3, sp, #36	@ 0x24
 800ea12:	9305      	str	r3, [sp, #20]
 800ea14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea16:	46ec      	mov	ip, sp
 800ea18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea1c:	682b      	ldr	r3, [r5, #0]
 800ea1e:	f8cc 3000 	str.w	r3, [ip]
 800ea22:	464a      	mov	r2, r9
 800ea24:	4631      	mov	r1, r6
 800ea26:	4620      	mov	r0, r4
 800ea28:	ab08      	add	r3, sp, #32
 800ea2a:	f001 ffeb 	bl	8010a04 <rcl_expand_topic_name>
 800ea2e:	4607      	mov	r7, r0
 800ea30:	b9b8      	cbnz	r0, 800ea62 <rcl_node_resolve_name+0x122>
 800ea32:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ea34:	9009      	str	r0, [sp, #36]	@ 0x24
 800ea36:	4602      	mov	r2, r0
 800ea38:	a90a      	add	r1, sp, #40	@ 0x28
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f000 fd60 	bl	800f500 <rmw_validate_full_topic_name>
 800ea40:	b988      	cbnz	r0, 800ea66 <rcl_node_resolve_name+0x126>
 800ea42:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ea44:	b9d5      	cbnz	r5, 800ea7c <rcl_node_resolve_name+0x13c>
 800ea46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea48:	a808      	add	r0, sp, #32
 800ea4a:	601c      	str	r4, [r3, #0]
 800ea4c:	f000 fc84 	bl	800f358 <rcutils_string_map_fini>
 800ea50:	4607      	mov	r7, r0
 800ea52:	b1a8      	cbz	r0, 800ea80 <rcl_node_resolve_name+0x140>
 800ea54:	f7f9 ffa8 	bl	80089a8 <rcutils_get_error_string>
 800ea58:	462c      	mov	r4, r5
 800ea5a:	f7f9 ffbd 	bl	80089d8 <rcutils_reset_error>
 800ea5e:	2701      	movs	r7, #1
 800ea60:	e7c9      	b.n	800e9f6 <rcl_node_resolve_name+0xb6>
 800ea62:	9c07      	ldr	r4, [sp, #28]
 800ea64:	e7c2      	b.n	800e9ec <rcl_node_resolve_name+0xac>
 800ea66:	f7f9 ff9f 	bl	80089a8 <rcutils_get_error_string>
 800ea6a:	2701      	movs	r7, #1
 800ea6c:	f7f9 ffb4 	bl	80089d8 <rcutils_reset_error>
 800ea70:	e7bc      	b.n	800e9ec <rcl_node_resolve_name+0xac>
 800ea72:	f7f9 ff99 	bl	80089a8 <rcutils_get_error_string>
 800ea76:	f7f9 ffaf 	bl	80089d8 <rcutils_reset_error>
 800ea7a:	e7bc      	b.n	800e9f6 <rcl_node_resolve_name+0xb6>
 800ea7c:	2767      	movs	r7, #103	@ 0x67
 800ea7e:	e7b5      	b.n	800e9ec <rcl_node_resolve_name+0xac>
 800ea80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea82:	4659      	mov	r1, fp
 800ea84:	47d0      	blx	sl
 800ea86:	4659      	mov	r1, fp
 800ea88:	4638      	mov	r0, r7
 800ea8a:	47d0      	blx	sl
 800ea8c:	e799      	b.n	800e9c2 <rcl_node_resolve_name+0x82>
 800ea8e:	bf00      	nop

0800ea90 <exact_match_lookup>:
 800ea90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea92:	f102 0708 	add.w	r7, r2, #8
 800ea96:	460b      	mov	r3, r1
 800ea98:	4614      	mov	r4, r2
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800eaa0:	b085      	sub	sp, #20
 800eaa2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	4919      	ldr	r1, [pc, #100]	@ (800eb10 <exact_match_lookup+0x80>)
 800eaaa:	e894 000c 	ldmia.w	r4, {r2, r3}
 800eaae:	f000 fa35 	bl	800ef1c <rcutils_join_path>
 800eab2:	7833      	ldrb	r3, [r6, #0]
 800eab4:	2b2f      	cmp	r3, #47	@ 0x2f
 800eab6:	4605      	mov	r5, r0
 800eab8:	d023      	beq.n	800eb02 <exact_match_lookup+0x72>
 800eaba:	f104 030c 	add.w	r3, r4, #12
 800eabe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eac2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eac6:	1c70      	adds	r0, r6, #1
 800eac8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800eacc:	f000 fa2c 	bl	800ef28 <rcutils_to_native_path>
 800ead0:	4606      	mov	r6, r0
 800ead2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ead6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eada:	4631      	mov	r1, r6
 800eadc:	e894 000c 	ldmia.w	r4, {r2, r3}
 800eae0:	4628      	mov	r0, r5
 800eae2:	f000 fa1b 	bl	800ef1c <rcutils_join_path>
 800eae6:	6862      	ldr	r2, [r4, #4]
 800eae8:	6921      	ldr	r1, [r4, #16]
 800eaea:	4603      	mov	r3, r0
 800eaec:	4630      	mov	r0, r6
 800eaee:	461e      	mov	r6, r3
 800eaf0:	4790      	blx	r2
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	6863      	ldr	r3, [r4, #4]
 800eaf6:	6921      	ldr	r1, [r4, #16]
 800eaf8:	4798      	blx	r3
 800eafa:	4635      	mov	r5, r6
 800eafc:	4628      	mov	r0, r5
 800eafe:	b005      	add	sp, #20
 800eb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb02:	7873      	ldrb	r3, [r6, #1]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d1d8      	bne.n	800eaba <exact_match_lookup+0x2a>
 800eb08:	4628      	mov	r0, r5
 800eb0a:	b005      	add	sp, #20
 800eb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	08012ce8 	.word	0x08012ce8

0800eb14 <rcl_get_secure_root>:
 800eb14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb18:	b085      	sub	sp, #20
 800eb1a:	b168      	cbz	r0, 800eb38 <rcl_get_secure_root+0x24>
 800eb1c:	4607      	mov	r7, r0
 800eb1e:	4608      	mov	r0, r1
 800eb20:	460c      	mov	r4, r1
 800eb22:	f7f9 ff33 	bl	800898c <rcutils_allocator_is_valid>
 800eb26:	b138      	cbz	r0, 800eb38 <rcl_get_secure_root+0x24>
 800eb28:	2300      	movs	r3, #0
 800eb2a:	482d      	ldr	r0, [pc, #180]	@ (800ebe0 <rcl_get_secure_root+0xcc>)
 800eb2c:	9303      	str	r3, [sp, #12]
 800eb2e:	a903      	add	r1, sp, #12
 800eb30:	f000 f9da 	bl	800eee8 <rcutils_get_env>
 800eb34:	4605      	mov	r5, r0
 800eb36:	b120      	cbz	r0, 800eb42 <rcl_get_secure_root+0x2e>
 800eb38:	2500      	movs	r5, #0
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	b005      	add	sp, #20
 800eb3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb42:	9b03      	ldr	r3, [sp, #12]
 800eb44:	781a      	ldrb	r2, [r3, #0]
 800eb46:	2a00      	cmp	r2, #0
 800eb48:	d0f6      	beq.n	800eb38 <rcl_get_secure_root+0x24>
 800eb4a:	f104 090c 	add.w	r9, r4, #12
 800eb4e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800eb52:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eb56:	4618      	mov	r0, r3
 800eb58:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800eb5c:	f000 fb06 	bl	800f16c <rcutils_strdup>
 800eb60:	4680      	mov	r8, r0
 800eb62:	2800      	cmp	r0, #0
 800eb64:	d0e8      	beq.n	800eb38 <rcl_get_secure_root+0x24>
 800eb66:	481f      	ldr	r0, [pc, #124]	@ (800ebe4 <rcl_get_secure_root+0xd0>)
 800eb68:	9503      	str	r5, [sp, #12]
 800eb6a:	a903      	add	r1, sp, #12
 800eb6c:	f000 f9bc 	bl	800eee8 <rcutils_get_env>
 800eb70:	b160      	cbz	r0, 800eb8c <rcl_get_secure_root+0x78>
 800eb72:	2600      	movs	r6, #0
 800eb74:	6863      	ldr	r3, [r4, #4]
 800eb76:	6921      	ldr	r1, [r4, #16]
 800eb78:	4630      	mov	r0, r6
 800eb7a:	4798      	blx	r3
 800eb7c:	4640      	mov	r0, r8
 800eb7e:	6863      	ldr	r3, [r4, #4]
 800eb80:	6921      	ldr	r1, [r4, #16]
 800eb82:	4798      	blx	r3
 800eb84:	4628      	mov	r0, r5
 800eb86:	b005      	add	sp, #20
 800eb88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb8c:	9b03      	ldr	r3, [sp, #12]
 800eb8e:	781e      	ldrb	r6, [r3, #0]
 800eb90:	b1f6      	cbz	r6, 800ebd0 <rcl_get_secure_root+0xbc>
 800eb92:	e899 0003 	ldmia.w	r9, {r0, r1}
 800eb96:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800eba0:	f000 fae4 	bl	800f16c <rcutils_strdup>
 800eba4:	4606      	mov	r6, r0
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d0e3      	beq.n	800eb72 <rcl_get_secure_root+0x5e>
 800ebaa:	4622      	mov	r2, r4
 800ebac:	4641      	mov	r1, r8
 800ebae:	f7ff ff6f 	bl	800ea90 <exact_match_lookup>
 800ebb2:	4605      	mov	r5, r0
 800ebb4:	2d00      	cmp	r5, #0
 800ebb6:	d0dd      	beq.n	800eb74 <rcl_get_secure_root+0x60>
 800ebb8:	4628      	mov	r0, r5
 800ebba:	f000 f9ad 	bl	800ef18 <rcutils_is_directory>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d1d7      	bne.n	800eb74 <rcl_get_secure_root+0x60>
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	6921      	ldr	r1, [r4, #16]
 800ebc8:	461d      	mov	r5, r3
 800ebca:	6863      	ldr	r3, [r4, #4]
 800ebcc:	4798      	blx	r3
 800ebce:	e7d1      	b.n	800eb74 <rcl_get_secure_root+0x60>
 800ebd0:	4622      	mov	r2, r4
 800ebd2:	4638      	mov	r0, r7
 800ebd4:	4641      	mov	r1, r8
 800ebd6:	f7ff ff5b 	bl	800ea90 <exact_match_lookup>
 800ebda:	4605      	mov	r5, r0
 800ebdc:	e7ea      	b.n	800ebb4 <rcl_get_secure_root+0xa0>
 800ebde:	bf00      	nop
 800ebe0:	08012cf4 	.word	0x08012cf4
 800ebe4:	08012d0c 	.word	0x08012d0c

0800ebe8 <rcl_get_security_options_from_environment>:
 800ebe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebec:	b082      	sub	sp, #8
 800ebee:	2300      	movs	r3, #0
 800ebf0:	4606      	mov	r6, r0
 800ebf2:	460f      	mov	r7, r1
 800ebf4:	4820      	ldr	r0, [pc, #128]	@ (800ec78 <rcl_get_security_options_from_environment+0x90>)
 800ebf6:	9301      	str	r3, [sp, #4]
 800ebf8:	a901      	add	r1, sp, #4
 800ebfa:	4690      	mov	r8, r2
 800ebfc:	f000 f974 	bl	800eee8 <rcutils_get_env>
 800ec00:	b120      	cbz	r0, 800ec0c <rcl_get_security_options_from_environment+0x24>
 800ec02:	2501      	movs	r5, #1
 800ec04:	4628      	mov	r0, r5
 800ec06:	b002      	add	sp, #8
 800ec08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec0c:	491b      	ldr	r1, [pc, #108]	@ (800ec7c <rcl_get_security_options_from_environment+0x94>)
 800ec0e:	4604      	mov	r4, r0
 800ec10:	9801      	ldr	r0, [sp, #4]
 800ec12:	f7f1 fb05 	bl	8000220 <strcmp>
 800ec16:	4605      	mov	r5, r0
 800ec18:	b9e8      	cbnz	r0, 800ec56 <rcl_get_security_options_from_environment+0x6e>
 800ec1a:	9001      	str	r0, [sp, #4]
 800ec1c:	f1b8 0f00 	cmp.w	r8, #0
 800ec20:	d020      	beq.n	800ec64 <rcl_get_security_options_from_environment+0x7c>
 800ec22:	4817      	ldr	r0, [pc, #92]	@ (800ec80 <rcl_get_security_options_from_environment+0x98>)
 800ec24:	a901      	add	r1, sp, #4
 800ec26:	f000 f95f 	bl	800eee8 <rcutils_get_env>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	d1e9      	bne.n	800ec02 <rcl_get_security_options_from_environment+0x1a>
 800ec2e:	4915      	ldr	r1, [pc, #84]	@ (800ec84 <rcl_get_security_options_from_environment+0x9c>)
 800ec30:	9801      	ldr	r0, [sp, #4]
 800ec32:	f7f1 faf5 	bl	8000220 <strcmp>
 800ec36:	fab0 f080 	clz	r0, r0
 800ec3a:	0940      	lsrs	r0, r0, #5
 800ec3c:	f888 0000 	strb.w	r0, [r8]
 800ec40:	4639      	mov	r1, r7
 800ec42:	4630      	mov	r0, r6
 800ec44:	f7ff ff66 	bl	800eb14 <rcl_get_secure_root>
 800ec48:	b170      	cbz	r0, 800ec68 <rcl_get_security_options_from_environment+0x80>
 800ec4a:	f8c8 0004 	str.w	r0, [r8, #4]
 800ec4e:	4628      	mov	r0, r5
 800ec50:	b002      	add	sp, #8
 800ec52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec56:	4625      	mov	r5, r4
 800ec58:	4628      	mov	r0, r5
 800ec5a:	f888 4000 	strb.w	r4, [r8]
 800ec5e:	b002      	add	sp, #8
 800ec60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec64:	250b      	movs	r5, #11
 800ec66:	e7cd      	b.n	800ec04 <rcl_get_security_options_from_environment+0x1c>
 800ec68:	f898 5000 	ldrb.w	r5, [r8]
 800ec6c:	f1a5 0501 	sub.w	r5, r5, #1
 800ec70:	fab5 f585 	clz	r5, r5
 800ec74:	096d      	lsrs	r5, r5, #5
 800ec76:	e7c5      	b.n	800ec04 <rcl_get_security_options_from_environment+0x1c>
 800ec78:	08012cac 	.word	0x08012cac
 800ec7c:	08012cc0 	.word	0x08012cc0
 800ec80:	08012cc8 	.word	0x08012cc8
 800ec84:	08012ce0 	.word	0x08012ce0

0800ec88 <rcl_get_system_time>:
 800ec88:	4608      	mov	r0, r1
 800ec8a:	f000 bbd9 	b.w	800f440 <rcutils_system_time_now>
 800ec8e:	bf00      	nop

0800ec90 <rcl_get_steady_time>:
 800ec90:	4608      	mov	r0, r1
 800ec92:	f000 bbfd 	b.w	800f490 <rcutils_steady_time_now>
 800ec96:	bf00      	nop

0800ec98 <rcl_get_ros_time>:
 800ec98:	7a03      	ldrb	r3, [r0, #8]
 800ec9a:	b510      	push	{r4, lr}
 800ec9c:	460c      	mov	r4, r1
 800ec9e:	b133      	cbz	r3, 800ecae <rcl_get_ros_time+0x16>
 800eca0:	2105      	movs	r1, #5
 800eca2:	f000 f8eb 	bl	800ee7c <__atomic_load_8>
 800eca6:	e9c4 0100 	strd	r0, r1, [r4]
 800ecaa:	2000      	movs	r0, #0
 800ecac:	bd10      	pop	{r4, pc}
 800ecae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecb2:	4608      	mov	r0, r1
 800ecb4:	f000 bbc4 	b.w	800f440 <rcutils_system_time_now>

0800ecb8 <rcl_clock_init>:
 800ecb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecba:	4605      	mov	r5, r0
 800ecbc:	4610      	mov	r0, r2
 800ecbe:	4614      	mov	r4, r2
 800ecc0:	460e      	mov	r6, r1
 800ecc2:	f7f9 fe63 	bl	800898c <rcutils_allocator_is_valid>
 800ecc6:	b128      	cbz	r0, 800ecd4 <rcl_clock_init+0x1c>
 800ecc8:	2d03      	cmp	r5, #3
 800ecca:	d803      	bhi.n	800ecd4 <rcl_clock_init+0x1c>
 800eccc:	e8df f005 	tbb	[pc, r5]
 800ecd0:	06532e1d 	.word	0x06532e1d
 800ecd4:	f04f 0c0b 	mov.w	ip, #11
 800ecd8:	4660      	mov	r0, ip
 800ecda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecdc:	2e00      	cmp	r6, #0
 800ecde:	d0f9      	beq.n	800ecd4 <rcl_clock_init+0x1c>
 800ece0:	2c00      	cmp	r4, #0
 800ece2:	d0f7      	beq.n	800ecd4 <rcl_clock_init+0x1c>
 800ece4:	2300      	movs	r3, #0
 800ece6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800ecea:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800eda0 <rcl_clock_init+0xe8>
 800ecee:	6133      	str	r3, [r6, #16]
 800ecf0:	f106 0514 	add.w	r5, r6, #20
 800ecf4:	469c      	mov	ip, r3
 800ecf6:	2703      	movs	r7, #3
 800ecf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ecfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ecfc:	6823      	ldr	r3, [r4, #0]
 800ecfe:	602b      	str	r3, [r5, #0]
 800ed00:	7037      	strb	r7, [r6, #0]
 800ed02:	f8c6 e00c 	str.w	lr, [r6, #12]
 800ed06:	4660      	mov	r0, ip
 800ed08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed0a:	2e00      	cmp	r6, #0
 800ed0c:	d0e2      	beq.n	800ecd4 <rcl_clock_init+0x1c>
 800ed0e:	2300      	movs	r3, #0
 800ed10:	7033      	strb	r3, [r6, #0]
 800ed12:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800ed16:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800ed1a:	469c      	mov	ip, r3
 800ed1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed1e:	f106 0514 	add.w	r5, r6, #20
 800ed22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed24:	6823      	ldr	r3, [r4, #0]
 800ed26:	602b      	str	r3, [r5, #0]
 800ed28:	4660      	mov	r0, ip
 800ed2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed2c:	2e00      	cmp	r6, #0
 800ed2e:	d0d1      	beq.n	800ecd4 <rcl_clock_init+0x1c>
 800ed30:	2c00      	cmp	r4, #0
 800ed32:	d0cf      	beq.n	800ecd4 <rcl_clock_init+0x1c>
 800ed34:	2700      	movs	r7, #0
 800ed36:	7037      	strb	r7, [r6, #0]
 800ed38:	46a4      	mov	ip, r4
 800ed3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ed3e:	f106 0514 	add.w	r5, r6, #20
 800ed42:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800ed46:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800ed4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed4c:	f8dc 3000 	ldr.w	r3, [ip]
 800ed50:	602b      	str	r3, [r5, #0]
 800ed52:	6921      	ldr	r1, [r4, #16]
 800ed54:	6823      	ldr	r3, [r4, #0]
 800ed56:	2010      	movs	r0, #16
 800ed58:	4798      	blx	r3
 800ed5a:	6130      	str	r0, [r6, #16]
 800ed5c:	b1d0      	cbz	r0, 800ed94 <rcl_clock_init+0xdc>
 800ed5e:	2200      	movs	r2, #0
 800ed60:	2300      	movs	r3, #0
 800ed62:	e9c0 2300 	strd	r2, r3, [r0]
 800ed66:	2301      	movs	r3, #1
 800ed68:	7207      	strb	r7, [r0, #8]
 800ed6a:	4a0c      	ldr	r2, [pc, #48]	@ (800ed9c <rcl_clock_init+0xe4>)
 800ed6c:	7033      	strb	r3, [r6, #0]
 800ed6e:	46bc      	mov	ip, r7
 800ed70:	60f2      	str	r2, [r6, #12]
 800ed72:	4660      	mov	r0, ip
 800ed74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed76:	2e00      	cmp	r6, #0
 800ed78:	d0ac      	beq.n	800ecd4 <rcl_clock_init+0x1c>
 800ed7a:	2c00      	cmp	r4, #0
 800ed7c:	d0aa      	beq.n	800ecd4 <rcl_clock_init+0x1c>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800ed84:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800eda4 <rcl_clock_init+0xec>
 800ed88:	6133      	str	r3, [r6, #16]
 800ed8a:	f106 0514 	add.w	r5, r6, #20
 800ed8e:	469c      	mov	ip, r3
 800ed90:	2702      	movs	r7, #2
 800ed92:	e7b1      	b.n	800ecf8 <rcl_clock_init+0x40>
 800ed94:	f04f 0c0a 	mov.w	ip, #10
 800ed98:	e79e      	b.n	800ecd8 <rcl_clock_init+0x20>
 800ed9a:	bf00      	nop
 800ed9c:	0800ec99 	.word	0x0800ec99
 800eda0:	0800ec91 	.word	0x0800ec91
 800eda4:	0800ec89 	.word	0x0800ec89

0800eda8 <rcl_validate_enclave_name_with_size>:
 800eda8:	b378      	cbz	r0, 800ee0a <rcl_validate_enclave_name_with_size+0x62>
 800edaa:	b570      	push	{r4, r5, r6, lr}
 800edac:	4615      	mov	r5, r2
 800edae:	b0c2      	sub	sp, #264	@ 0x108
 800edb0:	b302      	cbz	r2, 800edf4 <rcl_validate_enclave_name_with_size+0x4c>
 800edb2:	461e      	mov	r6, r3
 800edb4:	466a      	mov	r2, sp
 800edb6:	ab01      	add	r3, sp, #4
 800edb8:	460c      	mov	r4, r1
 800edba:	f000 fc17 	bl	800f5ec <rmw_validate_namespace_with_size>
 800edbe:	4684      	mov	ip, r0
 800edc0:	b9e8      	cbnz	r0, 800edfe <rcl_validate_enclave_name_with_size+0x56>
 800edc2:	9b00      	ldr	r3, [sp, #0]
 800edc4:	b923      	cbnz	r3, 800edd0 <rcl_validate_enclave_name_with_size+0x28>
 800edc6:	2300      	movs	r3, #0
 800edc8:	602b      	str	r3, [r5, #0]
 800edca:	4660      	mov	r0, ip
 800edcc:	b042      	add	sp, #264	@ 0x108
 800edce:	bd70      	pop	{r4, r5, r6, pc}
 800edd0:	2b07      	cmp	r3, #7
 800edd2:	d007      	beq.n	800ede4 <rcl_validate_enclave_name_with_size+0x3c>
 800edd4:	1e5a      	subs	r2, r3, #1
 800edd6:	2a05      	cmp	r2, #5
 800edd8:	d833      	bhi.n	800ee42 <rcl_validate_enclave_name_with_size+0x9a>
 800edda:	e8df f002 	tbb	[pc, r2]
 800edde:	2c2f      	.short	0x2c2f
 800ede0:	1a232629 	.word	0x1a232629
 800ede4:	2cff      	cmp	r4, #255	@ 0xff
 800ede6:	d9ee      	bls.n	800edc6 <rcl_validate_enclave_name_with_size+0x1e>
 800ede8:	602b      	str	r3, [r5, #0]
 800edea:	2e00      	cmp	r6, #0
 800edec:	d0ed      	beq.n	800edca <rcl_validate_enclave_name_with_size+0x22>
 800edee:	23fe      	movs	r3, #254	@ 0xfe
 800edf0:	6033      	str	r3, [r6, #0]
 800edf2:	e7ea      	b.n	800edca <rcl_validate_enclave_name_with_size+0x22>
 800edf4:	f04f 0c0b 	mov.w	ip, #11
 800edf8:	4660      	mov	r0, ip
 800edfa:	b042      	add	sp, #264	@ 0x108
 800edfc:	bd70      	pop	{r4, r5, r6, pc}
 800edfe:	f7ff fa51 	bl	800e2a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800ee02:	4684      	mov	ip, r0
 800ee04:	4660      	mov	r0, ip
 800ee06:	b042      	add	sp, #264	@ 0x108
 800ee08:	bd70      	pop	{r4, r5, r6, pc}
 800ee0a:	f04f 0c0b 	mov.w	ip, #11
 800ee0e:	4660      	mov	r0, ip
 800ee10:	4770      	bx	lr
 800ee12:	2306      	movs	r3, #6
 800ee14:	602b      	str	r3, [r5, #0]
 800ee16:	2e00      	cmp	r6, #0
 800ee18:	d0d7      	beq.n	800edca <rcl_validate_enclave_name_with_size+0x22>
 800ee1a:	9b01      	ldr	r3, [sp, #4]
 800ee1c:	6033      	str	r3, [r6, #0]
 800ee1e:	4660      	mov	r0, ip
 800ee20:	b042      	add	sp, #264	@ 0x108
 800ee22:	bd70      	pop	{r4, r5, r6, pc}
 800ee24:	2305      	movs	r3, #5
 800ee26:	602b      	str	r3, [r5, #0]
 800ee28:	e7f5      	b.n	800ee16 <rcl_validate_enclave_name_with_size+0x6e>
 800ee2a:	2304      	movs	r3, #4
 800ee2c:	602b      	str	r3, [r5, #0]
 800ee2e:	e7f2      	b.n	800ee16 <rcl_validate_enclave_name_with_size+0x6e>
 800ee30:	2303      	movs	r3, #3
 800ee32:	602b      	str	r3, [r5, #0]
 800ee34:	e7ef      	b.n	800ee16 <rcl_validate_enclave_name_with_size+0x6e>
 800ee36:	2302      	movs	r3, #2
 800ee38:	602b      	str	r3, [r5, #0]
 800ee3a:	e7ec      	b.n	800ee16 <rcl_validate_enclave_name_with_size+0x6e>
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	602b      	str	r3, [r5, #0]
 800ee40:	e7e9      	b.n	800ee16 <rcl_validate_enclave_name_with_size+0x6e>
 800ee42:	4a04      	ldr	r2, [pc, #16]	@ (800ee54 <rcl_validate_enclave_name_with_size+0xac>)
 800ee44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ee48:	a802      	add	r0, sp, #8
 800ee4a:	f000 f963 	bl	800f114 <rcutils_snprintf>
 800ee4e:	f04f 0c01 	mov.w	ip, #1
 800ee52:	e7ba      	b.n	800edca <rcl_validate_enclave_name_with_size+0x22>
 800ee54:	08012d2c 	.word	0x08012d2c

0800ee58 <rcl_validate_enclave_name>:
 800ee58:	b168      	cbz	r0, 800ee76 <rcl_validate_enclave_name+0x1e>
 800ee5a:	b570      	push	{r4, r5, r6, lr}
 800ee5c:	460d      	mov	r5, r1
 800ee5e:	4616      	mov	r6, r2
 800ee60:	4604      	mov	r4, r0
 800ee62:	f7f1 f9e7 	bl	8000234 <strlen>
 800ee66:	4633      	mov	r3, r6
 800ee68:	4601      	mov	r1, r0
 800ee6a:	462a      	mov	r2, r5
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee72:	f7ff bf99 	b.w	800eda8 <rcl_validate_enclave_name_with_size>
 800ee76:	200b      	movs	r0, #11
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop

0800ee7c <__atomic_load_8>:
 800ee7c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800ee80:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800ee84:	4a15      	ldr	r2, [pc, #84]	@ (800eedc <__atomic_load_8+0x60>)
 800ee86:	4b16      	ldr	r3, [pc, #88]	@ (800eee0 <__atomic_load_8+0x64>)
 800ee88:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800ee8c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800ee90:	fb02 f101 	mul.w	r1, r2, r1
 800ee94:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800ee98:	fba3 2301 	umull	r2, r3, r3, r1
 800ee9c:	091b      	lsrs	r3, r3, #4
 800ee9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800eea2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800eea6:	b4d0      	push	{r4, r6, r7}
 800eea8:	4c0e      	ldr	r4, [pc, #56]	@ (800eee4 <__atomic_load_8+0x68>)
 800eeaa:	1ac9      	subs	r1, r1, r3
 800eeac:	1862      	adds	r2, r4, r1
 800eeae:	f04f 0c01 	mov.w	ip, #1
 800eeb2:	e8d2 3f4f 	ldrexb	r3, [r2]
 800eeb6:	e8c2 cf46 	strexb	r6, ip, [r2]
 800eeba:	2e00      	cmp	r6, #0
 800eebc:	d1f9      	bne.n	800eeb2 <__atomic_load_8+0x36>
 800eebe:	f3bf 8f5b 	dmb	ish
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d1f4      	bne.n	800eeb2 <__atomic_load_8+0x36>
 800eec8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800eecc:	f3bf 8f5b 	dmb	ish
 800eed0:	5463      	strb	r3, [r4, r1]
 800eed2:	4630      	mov	r0, r6
 800eed4:	4639      	mov	r1, r7
 800eed6:	bcd0      	pop	{r4, r6, r7}
 800eed8:	4770      	bx	lr
 800eeda:	bf00      	nop
 800eedc:	27d4eb2d 	.word	0x27d4eb2d
 800eee0:	b21642c9 	.word	0xb21642c9
 800eee4:	2000aa2c 	.word	0x2000aa2c

0800eee8 <rcutils_get_env>:
 800eee8:	b168      	cbz	r0, 800ef06 <rcutils_get_env+0x1e>
 800eeea:	b510      	push	{r4, lr}
 800eeec:	460c      	mov	r4, r1
 800eeee:	b129      	cbz	r1, 800eefc <rcutils_get_env+0x14>
 800eef0:	f002 f8ae 	bl	8011050 <getenv>
 800eef4:	b120      	cbz	r0, 800ef00 <rcutils_get_env+0x18>
 800eef6:	6020      	str	r0, [r4, #0]
 800eef8:	2000      	movs	r0, #0
 800eefa:	bd10      	pop	{r4, pc}
 800eefc:	4803      	ldr	r0, [pc, #12]	@ (800ef0c <rcutils_get_env+0x24>)
 800eefe:	bd10      	pop	{r4, pc}
 800ef00:	4b03      	ldr	r3, [pc, #12]	@ (800ef10 <rcutils_get_env+0x28>)
 800ef02:	6023      	str	r3, [r4, #0]
 800ef04:	bd10      	pop	{r4, pc}
 800ef06:	4803      	ldr	r0, [pc, #12]	@ (800ef14 <rcutils_get_env+0x2c>)
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	08012da8 	.word	0x08012da8
 800ef10:	08012ecc 	.word	0x08012ecc
 800ef14:	08012d8c 	.word	0x08012d8c

0800ef18 <rcutils_is_directory>:
 800ef18:	2000      	movs	r0, #0
 800ef1a:	4770      	bx	lr

0800ef1c <rcutils_join_path>:
 800ef1c:	b082      	sub	sp, #8
 800ef1e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800ef22:	2000      	movs	r0, #0
 800ef24:	b002      	add	sp, #8
 800ef26:	4770      	bx	lr

0800ef28 <rcutils_to_native_path>:
 800ef28:	b084      	sub	sp, #16
 800ef2a:	a801      	add	r0, sp, #4
 800ef2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800ef30:	b004      	add	sp, #16
 800ef32:	2000      	movs	r0, #0
 800ef34:	4770      	bx	lr
 800ef36:	bf00      	nop

0800ef38 <rcutils_format_string_limit>:
 800ef38:	b40f      	push	{r0, r1, r2, r3}
 800ef3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef3c:	b083      	sub	sp, #12
 800ef3e:	ac08      	add	r4, sp, #32
 800ef40:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ef42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ef46:	b34e      	cbz	r6, 800ef9c <rcutils_format_string_limit+0x64>
 800ef48:	a808      	add	r0, sp, #32
 800ef4a:	f7f9 fd1f 	bl	800898c <rcutils_allocator_is_valid>
 800ef4e:	b328      	cbz	r0, 800ef9c <rcutils_format_string_limit+0x64>
 800ef50:	2100      	movs	r1, #0
 800ef52:	ab0f      	add	r3, sp, #60	@ 0x3c
 800ef54:	4632      	mov	r2, r6
 800ef56:	4608      	mov	r0, r1
 800ef58:	e9cd 3300 	strd	r3, r3, [sp]
 800ef5c:	f000 f8f4 	bl	800f148 <rcutils_vsnprintf>
 800ef60:	1c43      	adds	r3, r0, #1
 800ef62:	4605      	mov	r5, r0
 800ef64:	d01a      	beq.n	800ef9c <rcutils_format_string_limit+0x64>
 800ef66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ef6a:	1c47      	adds	r7, r0, #1
 800ef6c:	429f      	cmp	r7, r3
 800ef6e:	bf84      	itt	hi
 800ef70:	461f      	movhi	r7, r3
 800ef72:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800ef76:	4638      	mov	r0, r7
 800ef78:	9b08      	ldr	r3, [sp, #32]
 800ef7a:	4798      	blx	r3
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	b168      	cbz	r0, 800ef9c <rcutils_format_string_limit+0x64>
 800ef80:	9b01      	ldr	r3, [sp, #4]
 800ef82:	4632      	mov	r2, r6
 800ef84:	4639      	mov	r1, r7
 800ef86:	f000 f8df 	bl	800f148 <rcutils_vsnprintf>
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	db02      	blt.n	800ef94 <rcutils_format_string_limit+0x5c>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	5563      	strb	r3, [r4, r5]
 800ef92:	e004      	b.n	800ef9e <rcutils_format_string_limit+0x66>
 800ef94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef96:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ef98:	4620      	mov	r0, r4
 800ef9a:	4798      	blx	r3
 800ef9c:	2400      	movs	r4, #0
 800ef9e:	4620      	mov	r0, r4
 800efa0:	b003      	add	sp, #12
 800efa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800efa6:	b004      	add	sp, #16
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop

0800efac <rcutils_repl_str>:
 800efac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb0:	ed2d 8b02 	vpush	{d8}
 800efb4:	b087      	sub	sp, #28
 800efb6:	4680      	mov	r8, r0
 800efb8:	4608      	mov	r0, r1
 800efba:	f8cd 8004 	str.w	r8, [sp, #4]
 800efbe:	ee08 2a10 	vmov	s16, r2
 800efc2:	468a      	mov	sl, r1
 800efc4:	4699      	mov	r9, r3
 800efc6:	f7f1 f935 	bl	8000234 <strlen>
 800efca:	2600      	movs	r6, #0
 800efcc:	4647      	mov	r7, r8
 800efce:	9002      	str	r0, [sp, #8]
 800efd0:	46b3      	mov	fp, r6
 800efd2:	2510      	movs	r5, #16
 800efd4:	46b0      	mov	r8, r6
 800efd6:	e01d      	b.n	800f014 <rcutils_repl_str+0x68>
 800efd8:	f10b 0b01 	add.w	fp, fp, #1
 800efdc:	455e      	cmp	r6, fp
 800efde:	d211      	bcs.n	800f004 <rcutils_repl_str+0x58>
 800efe0:	442e      	add	r6, r5
 800efe2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800efe6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800efea:	00b1      	lsls	r1, r6, #2
 800efec:	4798      	blx	r3
 800efee:	2800      	cmp	r0, #0
 800eff0:	f000 8088 	beq.w	800f104 <rcutils_repl_str+0x158>
 800eff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eff8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800effc:	4680      	mov	r8, r0
 800effe:	bf28      	it	cs
 800f000:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800f004:	9a01      	ldr	r2, [sp, #4]
 800f006:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800f00a:	1aa2      	subs	r2, r4, r2
 800f00c:	f843 2c04 	str.w	r2, [r3, #-4]
 800f010:	9b02      	ldr	r3, [sp, #8]
 800f012:	18e7      	adds	r7, r4, r3
 800f014:	4651      	mov	r1, sl
 800f016:	4638      	mov	r0, r7
 800f018:	f002 fbe5 	bl	80117e6 <strstr>
 800f01c:	4604      	mov	r4, r0
 800f01e:	4640      	mov	r0, r8
 800f020:	2c00      	cmp	r4, #0
 800f022:	d1d9      	bne.n	800efd8 <rcutils_repl_str+0x2c>
 800f024:	46b8      	mov	r8, r7
 800f026:	4607      	mov	r7, r0
 800f028:	4640      	mov	r0, r8
 800f02a:	f7f1 f903 	bl	8000234 <strlen>
 800f02e:	9b01      	ldr	r3, [sp, #4]
 800f030:	eba8 0303 	sub.w	r3, r8, r3
 800f034:	181c      	adds	r4, r3, r0
 800f036:	9404      	str	r4, [sp, #16]
 800f038:	f1bb 0f00 	cmp.w	fp, #0
 800f03c:	d04a      	beq.n	800f0d4 <rcutils_repl_str+0x128>
 800f03e:	ee18 0a10 	vmov	r0, s16
 800f042:	f7f1 f8f7 	bl	8000234 <strlen>
 800f046:	9b02      	ldr	r3, [sp, #8]
 800f048:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f04c:	1ac3      	subs	r3, r0, r3
 800f04e:	fb0b 4303 	mla	r3, fp, r3, r4
 800f052:	461a      	mov	r2, r3
 800f054:	9305      	str	r3, [sp, #20]
 800f056:	4606      	mov	r6, r0
 800f058:	f8d9 3000 	ldr.w	r3, [r9]
 800f05c:	1c50      	adds	r0, r2, #1
 800f05e:	4798      	blx	r3
 800f060:	9003      	str	r0, [sp, #12]
 800f062:	2800      	cmp	r0, #0
 800f064:	d04f      	beq.n	800f106 <rcutils_repl_str+0x15a>
 800f066:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f06a:	683a      	ldr	r2, [r7, #0]
 800f06c:	4641      	mov	r1, r8
 800f06e:	f002 fc5c 	bl	801192a <memcpy>
 800f072:	683d      	ldr	r5, [r7, #0]
 800f074:	9b03      	ldr	r3, [sp, #12]
 800f076:	9701      	str	r7, [sp, #4]
 800f078:	46ba      	mov	sl, r7
 800f07a:	441d      	add	r5, r3
 800f07c:	9f02      	ldr	r7, [sp, #8]
 800f07e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f082:	2401      	movs	r4, #1
 800f084:	46d1      	mov	r9, sl
 800f086:	ee18 aa10 	vmov	sl, s16
 800f08a:	e00a      	b.n	800f0a2 <rcutils_repl_str+0xf6>
 800f08c:	f8d9 5000 	ldr.w	r5, [r9]
 800f090:	1aaa      	subs	r2, r5, r2
 800f092:	1885      	adds	r5, r0, r2
 800f094:	f002 fc49 	bl	801192a <memcpy>
 800f098:	45a3      	cmp	fp, r4
 800f09a:	f104 0201 	add.w	r2, r4, #1
 800f09e:	d935      	bls.n	800f10c <rcutils_repl_str+0x160>
 800f0a0:	4614      	mov	r4, r2
 800f0a2:	4632      	mov	r2, r6
 800f0a4:	4651      	mov	r1, sl
 800f0a6:	4628      	mov	r0, r5
 800f0a8:	f002 fc3f 	bl	801192a <memcpy>
 800f0ac:	f859 2b04 	ldr.w	r2, [r9], #4
 800f0b0:	45a3      	cmp	fp, r4
 800f0b2:	443a      	add	r2, r7
 800f0b4:	eb05 0006 	add.w	r0, r5, r6
 800f0b8:	eb08 0102 	add.w	r1, r8, r2
 800f0bc:	d1e6      	bne.n	800f08c <rcutils_repl_str+0xe0>
 800f0be:	9b04      	ldr	r3, [sp, #16]
 800f0c0:	1a9a      	subs	r2, r3, r2
 800f0c2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800f0c6:	f002 fc30 	bl	801192a <memcpy>
 800f0ca:	9a03      	ldr	r2, [sp, #12]
 800f0cc:	9905      	ldr	r1, [sp, #20]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	5453      	strb	r3, [r2, r1]
 800f0d2:	e00b      	b.n	800f0ec <rcutils_repl_str+0x140>
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	f8d9 3000 	ldr.w	r3, [r9]
 800f0da:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f0de:	3001      	adds	r0, #1
 800f0e0:	4798      	blx	r3
 800f0e2:	9003      	str	r0, [sp, #12]
 800f0e4:	b110      	cbz	r0, 800f0ec <rcutils_repl_str+0x140>
 800f0e6:	9901      	ldr	r1, [sp, #4]
 800f0e8:	f002 fc17 	bl	801191a <strcpy>
 800f0ec:	4638      	mov	r0, r7
 800f0ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f0f2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f0f6:	4798      	blx	r3
 800f0f8:	9803      	ldr	r0, [sp, #12]
 800f0fa:	b007      	add	sp, #28
 800f0fc:	ecbd 8b02 	vpop	{d8}
 800f100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f104:	4647      	mov	r7, r8
 800f106:	2300      	movs	r3, #0
 800f108:	9303      	str	r3, [sp, #12]
 800f10a:	e7ef      	b.n	800f0ec <rcutils_repl_str+0x140>
 800f10c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800f110:	e7db      	b.n	800f0ca <rcutils_repl_str+0x11e>
 800f112:	bf00      	nop

0800f114 <rcutils_snprintf>:
 800f114:	b40c      	push	{r2, r3}
 800f116:	b530      	push	{r4, r5, lr}
 800f118:	b083      	sub	sp, #12
 800f11a:	ab06      	add	r3, sp, #24
 800f11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	b152      	cbz	r2, 800f13a <rcutils_snprintf+0x26>
 800f124:	b138      	cbz	r0, 800f136 <rcutils_snprintf+0x22>
 800f126:	b141      	cbz	r1, 800f13a <rcutils_snprintf+0x26>
 800f128:	f002 fb28 	bl	801177c <vsniprintf>
 800f12c:	b003      	add	sp, #12
 800f12e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f132:	b002      	add	sp, #8
 800f134:	4770      	bx	lr
 800f136:	2900      	cmp	r1, #0
 800f138:	d0f6      	beq.n	800f128 <rcutils_snprintf+0x14>
 800f13a:	f002 fbc1 	bl	80118c0 <__errno>
 800f13e:	2316      	movs	r3, #22
 800f140:	6003      	str	r3, [r0, #0]
 800f142:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f146:	e7f1      	b.n	800f12c <rcutils_snprintf+0x18>

0800f148 <rcutils_vsnprintf>:
 800f148:	b570      	push	{r4, r5, r6, lr}
 800f14a:	b13a      	cbz	r2, 800f15c <rcutils_vsnprintf+0x14>
 800f14c:	b120      	cbz	r0, 800f158 <rcutils_vsnprintf+0x10>
 800f14e:	b129      	cbz	r1, 800f15c <rcutils_vsnprintf+0x14>
 800f150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f154:	f002 bb12 	b.w	801177c <vsniprintf>
 800f158:	2900      	cmp	r1, #0
 800f15a:	d0f9      	beq.n	800f150 <rcutils_vsnprintf+0x8>
 800f15c:	f002 fbb0 	bl	80118c0 <__errno>
 800f160:	2316      	movs	r3, #22
 800f162:	6003      	str	r3, [r0, #0]
 800f164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f168:	bd70      	pop	{r4, r5, r6, pc}
 800f16a:	bf00      	nop

0800f16c <rcutils_strdup>:
 800f16c:	b084      	sub	sp, #16
 800f16e:	b570      	push	{r4, r5, r6, lr}
 800f170:	b082      	sub	sp, #8
 800f172:	ac07      	add	r4, sp, #28
 800f174:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800f178:	4605      	mov	r5, r0
 800f17a:	b1b0      	cbz	r0, 800f1aa <rcutils_strdup+0x3e>
 800f17c:	f7f1 f85a 	bl	8000234 <strlen>
 800f180:	1c42      	adds	r2, r0, #1
 800f182:	9b07      	ldr	r3, [sp, #28]
 800f184:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f186:	9201      	str	r2, [sp, #4]
 800f188:	4606      	mov	r6, r0
 800f18a:	4610      	mov	r0, r2
 800f18c:	4798      	blx	r3
 800f18e:	4604      	mov	r4, r0
 800f190:	b128      	cbz	r0, 800f19e <rcutils_strdup+0x32>
 800f192:	9a01      	ldr	r2, [sp, #4]
 800f194:	4629      	mov	r1, r5
 800f196:	f002 fbc8 	bl	801192a <memcpy>
 800f19a:	2300      	movs	r3, #0
 800f19c:	55a3      	strb	r3, [r4, r6]
 800f19e:	4620      	mov	r0, r4
 800f1a0:	b002      	add	sp, #8
 800f1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1a6:	b004      	add	sp, #16
 800f1a8:	4770      	bx	lr
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	e7f7      	b.n	800f19e <rcutils_strdup+0x32>
 800f1ae:	bf00      	nop

0800f1b0 <rcutils_strndup>:
 800f1b0:	b082      	sub	sp, #8
 800f1b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b4:	ac06      	add	r4, sp, #24
 800f1b6:	e884 000c 	stmia.w	r4, {r2, r3}
 800f1ba:	4605      	mov	r5, r0
 800f1bc:	b188      	cbz	r0, 800f1e2 <rcutils_strndup+0x32>
 800f1be:	1c4f      	adds	r7, r1, #1
 800f1c0:	460e      	mov	r6, r1
 800f1c2:	4638      	mov	r0, r7
 800f1c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f1c6:	4790      	blx	r2
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	b128      	cbz	r0, 800f1d8 <rcutils_strndup+0x28>
 800f1cc:	463a      	mov	r2, r7
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	f002 fbab 	bl	801192a <memcpy>
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	55a3      	strb	r3, [r4, r6]
 800f1d8:	4620      	mov	r0, r4
 800f1da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f1de:	b002      	add	sp, #8
 800f1e0:	4770      	bx	lr
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	e7f8      	b.n	800f1d8 <rcutils_strndup+0x28>
 800f1e6:	bf00      	nop

0800f1e8 <rcutils_get_zero_initialized_string_map>:
 800f1e8:	4b01      	ldr	r3, [pc, #4]	@ (800f1f0 <rcutils_get_zero_initialized_string_map+0x8>)
 800f1ea:	2000      	movs	r0, #0
 800f1ec:	6018      	str	r0, [r3, #0]
 800f1ee:	4770      	bx	lr
 800f1f0:	2000aa44 	.word	0x2000aa44

0800f1f4 <rcutils_string_map_reserve>:
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d05f      	beq.n	800f2b8 <rcutils_string_map_reserve+0xc4>
 800f1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1fc:	460c      	mov	r4, r1
 800f1fe:	6801      	ldr	r1, [r0, #0]
 800f200:	b082      	sub	sp, #8
 800f202:	4605      	mov	r5, r0
 800f204:	b129      	cbz	r1, 800f212 <rcutils_string_map_reserve+0x1e>
 800f206:	68cb      	ldr	r3, [r1, #12]
 800f208:	42a3      	cmp	r3, r4
 800f20a:	d906      	bls.n	800f21a <rcutils_string_map_reserve+0x26>
 800f20c:	461c      	mov	r4, r3
 800f20e:	2900      	cmp	r1, #0
 800f210:	d1f9      	bne.n	800f206 <rcutils_string_map_reserve+0x12>
 800f212:	201f      	movs	r0, #31
 800f214:	b002      	add	sp, #8
 800f216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f21a:	688b      	ldr	r3, [r1, #8]
 800f21c:	42a3      	cmp	r3, r4
 800f21e:	d047      	beq.n	800f2b0 <rcutils_string_map_reserve+0xbc>
 800f220:	6a0e      	ldr	r6, [r1, #32]
 800f222:	2c00      	cmp	r4, #0
 800f224:	d034      	beq.n	800f290 <rcutils_string_map_reserve+0x9c>
 800f226:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f22a:	d243      	bcs.n	800f2b4 <rcutils_string_map_reserve+0xc0>
 800f22c:	00a7      	lsls	r7, r4, #2
 800f22e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800f232:	6808      	ldr	r0, [r1, #0]
 800f234:	4632      	mov	r2, r6
 800f236:	4639      	mov	r1, r7
 800f238:	47c0      	blx	r8
 800f23a:	2800      	cmp	r0, #0
 800f23c:	d03a      	beq.n	800f2b4 <rcutils_string_map_reserve+0xc0>
 800f23e:	682b      	ldr	r3, [r5, #0]
 800f240:	4632      	mov	r2, r6
 800f242:	6018      	str	r0, [r3, #0]
 800f244:	4639      	mov	r1, r7
 800f246:	6858      	ldr	r0, [r3, #4]
 800f248:	47c0      	blx	r8
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d032      	beq.n	800f2b4 <rcutils_string_map_reserve+0xc0>
 800f24e:	682d      	ldr	r5, [r5, #0]
 800f250:	68ab      	ldr	r3, [r5, #8]
 800f252:	6068      	str	r0, [r5, #4]
 800f254:	42a3      	cmp	r3, r4
 800f256:	d226      	bcs.n	800f2a6 <rcutils_string_map_reserve+0xb2>
 800f258:	682a      	ldr	r2, [r5, #0]
 800f25a:	eb00 0c07 	add.w	ip, r0, r7
 800f25e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800f262:	45e6      	cmp	lr, ip
 800f264:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800f268:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f26c:	d203      	bcs.n	800f276 <rcutils_string_map_reserve+0x82>
 800f26e:	eb02 0c07 	add.w	ip, r2, r7
 800f272:	4566      	cmp	r6, ip
 800f274:	d322      	bcc.n	800f2bc <rcutils_string_map_reserve+0xc8>
 800f276:	1ae3      	subs	r3, r4, r3
 800f278:	009a      	lsls	r2, r3, #2
 800f27a:	4670      	mov	r0, lr
 800f27c:	2100      	movs	r1, #0
 800f27e:	9201      	str	r2, [sp, #4]
 800f280:	f002 fa8a 	bl	8011798 <memset>
 800f284:	9a01      	ldr	r2, [sp, #4]
 800f286:	2100      	movs	r1, #0
 800f288:	4630      	mov	r0, r6
 800f28a:	f002 fa85 	bl	8011798 <memset>
 800f28e:	e00a      	b.n	800f2a6 <rcutils_string_map_reserve+0xb2>
 800f290:	694f      	ldr	r7, [r1, #20]
 800f292:	6808      	ldr	r0, [r1, #0]
 800f294:	4631      	mov	r1, r6
 800f296:	47b8      	blx	r7
 800f298:	682b      	ldr	r3, [r5, #0]
 800f29a:	4631      	mov	r1, r6
 800f29c:	6858      	ldr	r0, [r3, #4]
 800f29e:	601c      	str	r4, [r3, #0]
 800f2a0:	47b8      	blx	r7
 800f2a2:	682d      	ldr	r5, [r5, #0]
 800f2a4:	606c      	str	r4, [r5, #4]
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	60ac      	str	r4, [r5, #8]
 800f2aa:	b002      	add	sp, #8
 800f2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	e7af      	b.n	800f214 <rcutils_string_map_reserve+0x20>
 800f2b4:	200a      	movs	r0, #10
 800f2b6:	e7ad      	b.n	800f214 <rcutils_string_map_reserve+0x20>
 800f2b8:	200b      	movs	r0, #11
 800f2ba:	4770      	bx	lr
 800f2bc:	1f0b      	subs	r3, r1, #4
 800f2be:	4418      	add	r0, r3
 800f2c0:	4413      	add	r3, r2
 800f2c2:	3a04      	subs	r2, #4
 800f2c4:	4417      	add	r7, r2
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f843 2f04 	str.w	r2, [r3, #4]!
 800f2cc:	42bb      	cmp	r3, r7
 800f2ce:	f840 2f04 	str.w	r2, [r0, #4]!
 800f2d2:	d1f9      	bne.n	800f2c8 <rcutils_string_map_reserve+0xd4>
 800f2d4:	e7e7      	b.n	800f2a6 <rcutils_string_map_reserve+0xb2>
 800f2d6:	bf00      	nop

0800f2d8 <rcutils_string_map_init>:
 800f2d8:	b082      	sub	sp, #8
 800f2da:	b570      	push	{r4, r5, r6, lr}
 800f2dc:	ac04      	add	r4, sp, #16
 800f2de:	e884 000c 	stmia.w	r4, {r2, r3}
 800f2e2:	b380      	cbz	r0, 800f346 <rcutils_string_map_init+0x6e>
 800f2e4:	6806      	ldr	r6, [r0, #0]
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	b12e      	cbz	r6, 800f2f6 <rcutils_string_map_init+0x1e>
 800f2ea:	251e      	movs	r5, #30
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2f2:	b002      	add	sp, #8
 800f2f4:	4770      	bx	lr
 800f2f6:	a804      	add	r0, sp, #16
 800f2f8:	460d      	mov	r5, r1
 800f2fa:	f7f9 fb47 	bl	800898c <rcutils_allocator_is_valid>
 800f2fe:	b310      	cbz	r0, 800f346 <rcutils_string_map_init+0x6e>
 800f300:	9b04      	ldr	r3, [sp, #16]
 800f302:	9908      	ldr	r1, [sp, #32]
 800f304:	2024      	movs	r0, #36	@ 0x24
 800f306:	4798      	blx	r3
 800f308:	6020      	str	r0, [r4, #0]
 800f30a:	b310      	cbz	r0, 800f352 <rcutils_string_map_init+0x7a>
 800f30c:	f10d 0e10 	add.w	lr, sp, #16
 800f310:	e9c0 6600 	strd	r6, r6, [r0]
 800f314:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800f318:	f100 0c10 	add.w	ip, r0, #16
 800f31c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f320:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f324:	f8de 3000 	ldr.w	r3, [lr]
 800f328:	f8cc 3000 	str.w	r3, [ip]
 800f32c:	4629      	mov	r1, r5
 800f32e:	4620      	mov	r0, r4
 800f330:	f7ff ff60 	bl	800f1f4 <rcutils_string_map_reserve>
 800f334:	4605      	mov	r5, r0
 800f336:	2800      	cmp	r0, #0
 800f338:	d0d8      	beq.n	800f2ec <rcutils_string_map_init+0x14>
 800f33a:	9b05      	ldr	r3, [sp, #20]
 800f33c:	9908      	ldr	r1, [sp, #32]
 800f33e:	6820      	ldr	r0, [r4, #0]
 800f340:	4798      	blx	r3
 800f342:	6026      	str	r6, [r4, #0]
 800f344:	e7d2      	b.n	800f2ec <rcutils_string_map_init+0x14>
 800f346:	250b      	movs	r5, #11
 800f348:	4628      	mov	r0, r5
 800f34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f34e:	b002      	add	sp, #8
 800f350:	4770      	bx	lr
 800f352:	250a      	movs	r5, #10
 800f354:	e7ca      	b.n	800f2ec <rcutils_string_map_init+0x14>
 800f356:	bf00      	nop

0800f358 <rcutils_string_map_fini>:
 800f358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f35c:	b082      	sub	sp, #8
 800f35e:	2800      	cmp	r0, #0
 800f360:	d03a      	beq.n	800f3d8 <rcutils_string_map_fini+0x80>
 800f362:	6804      	ldr	r4, [r0, #0]
 800f364:	4606      	mov	r6, r0
 800f366:	2c00      	cmp	r4, #0
 800f368:	d032      	beq.n	800f3d0 <rcutils_string_map_fini+0x78>
 800f36a:	68a3      	ldr	r3, [r4, #8]
 800f36c:	b32b      	cbz	r3, 800f3ba <rcutils_string_map_fini+0x62>
 800f36e:	2500      	movs	r5, #0
 800f370:	6822      	ldr	r2, [r4, #0]
 800f372:	462f      	mov	r7, r5
 800f374:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f378:	b1e0      	cbz	r0, 800f3b4 <rcutils_string_map_fini+0x5c>
 800f37a:	6a21      	ldr	r1, [r4, #32]
 800f37c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800f380:	9101      	str	r1, [sp, #4]
 800f382:	47c0      	blx	r8
 800f384:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f388:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800f38c:	9901      	ldr	r1, [sp, #4]
 800f38e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f392:	47c0      	blx	r8
 800f394:	68e3      	ldr	r3, [r4, #12]
 800f396:	6862      	ldr	r2, [r4, #4]
 800f398:	3b01      	subs	r3, #1
 800f39a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800f39e:	60e3      	str	r3, [r4, #12]
 800f3a0:	6834      	ldr	r4, [r6, #0]
 800f3a2:	68a3      	ldr	r3, [r4, #8]
 800f3a4:	3501      	adds	r5, #1
 800f3a6:	429d      	cmp	r5, r3
 800f3a8:	d207      	bcs.n	800f3ba <rcutils_string_map_fini+0x62>
 800f3aa:	6822      	ldr	r2, [r4, #0]
 800f3ac:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d1e2      	bne.n	800f37a <rcutils_string_map_fini+0x22>
 800f3b4:	3501      	adds	r5, #1
 800f3b6:	429d      	cmp	r5, r3
 800f3b8:	d3dc      	bcc.n	800f374 <rcutils_string_map_fini+0x1c>
 800f3ba:	2100      	movs	r1, #0
 800f3bc:	4630      	mov	r0, r6
 800f3be:	f7ff ff19 	bl	800f1f4 <rcutils_string_map_reserve>
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	b920      	cbnz	r0, 800f3d0 <rcutils_string_map_fini+0x78>
 800f3c6:	6830      	ldr	r0, [r6, #0]
 800f3c8:	6943      	ldr	r3, [r0, #20]
 800f3ca:	6a01      	ldr	r1, [r0, #32]
 800f3cc:	4798      	blx	r3
 800f3ce:	6034      	str	r4, [r6, #0]
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	b002      	add	sp, #8
 800f3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3d8:	240b      	movs	r4, #11
 800f3da:	4620      	mov	r0, r4
 800f3dc:	b002      	add	sp, #8
 800f3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e2:	bf00      	nop

0800f3e4 <rcutils_string_map_getn>:
 800f3e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e8:	b300      	cbz	r0, 800f42c <rcutils_string_map_getn+0x48>
 800f3ea:	6807      	ldr	r7, [r0, #0]
 800f3ec:	b1ff      	cbz	r7, 800f42e <rcutils_string_map_getn+0x4a>
 800f3ee:	4688      	mov	r8, r1
 800f3f0:	b1e1      	cbz	r1, 800f42c <rcutils_string_map_getn+0x48>
 800f3f2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800f3f6:	683e      	ldr	r6, [r7, #0]
 800f3f8:	f1ba 0f00 	cmp.w	sl, #0
 800f3fc:	d016      	beq.n	800f42c <rcutils_string_map_getn+0x48>
 800f3fe:	4691      	mov	r9, r2
 800f400:	3e04      	subs	r6, #4
 800f402:	2400      	movs	r4, #0
 800f404:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800f408:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f40c:	4628      	mov	r0, r5
 800f40e:	3401      	adds	r4, #1
 800f410:	b155      	cbz	r5, 800f428 <rcutils_string_map_getn+0x44>
 800f412:	f7f0 ff0f 	bl	8000234 <strlen>
 800f416:	4548      	cmp	r0, r9
 800f418:	4602      	mov	r2, r0
 800f41a:	4629      	mov	r1, r5
 800f41c:	bf38      	it	cc
 800f41e:	464a      	movcc	r2, r9
 800f420:	4640      	mov	r0, r8
 800f422:	f002 f9ce 	bl	80117c2 <strncmp>
 800f426:	b128      	cbz	r0, 800f434 <rcutils_string_map_getn+0x50>
 800f428:	45a2      	cmp	sl, r4
 800f42a:	d1eb      	bne.n	800f404 <rcutils_string_map_getn+0x20>
 800f42c:	2700      	movs	r7, #0
 800f42e:	4638      	mov	r0, r7
 800f430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f853 700b 	ldr.w	r7, [r3, fp]
 800f43a:	4638      	mov	r0, r7
 800f43c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f440 <rcutils_system_time_now>:
 800f440:	b308      	cbz	r0, 800f486 <rcutils_system_time_now+0x46>
 800f442:	b570      	push	{r4, r5, r6, lr}
 800f444:	b084      	sub	sp, #16
 800f446:	4604      	mov	r4, r0
 800f448:	4669      	mov	r1, sp
 800f44a:	2001      	movs	r0, #1
 800f44c:	f7f1 fecc 	bl	80011e8 <clock_gettime>
 800f450:	e9dd 3500 	ldrd	r3, r5, [sp]
 800f454:	2d00      	cmp	r5, #0
 800f456:	db13      	blt.n	800f480 <rcutils_system_time_now+0x40>
 800f458:	9902      	ldr	r1, [sp, #8]
 800f45a:	2900      	cmp	r1, #0
 800f45c:	db0d      	blt.n	800f47a <rcutils_system_time_now+0x3a>
 800f45e:	4e0b      	ldr	r6, [pc, #44]	@ (800f48c <rcutils_system_time_now+0x4c>)
 800f460:	fba3 3206 	umull	r3, r2, r3, r6
 800f464:	185b      	adds	r3, r3, r1
 800f466:	fb06 2205 	mla	r2, r6, r5, r2
 800f46a:	f04f 0000 	mov.w	r0, #0
 800f46e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800f472:	e9c4 3200 	strd	r3, r2, [r4]
 800f476:	b004      	add	sp, #16
 800f478:	bd70      	pop	{r4, r5, r6, pc}
 800f47a:	ea53 0205 	orrs.w	r2, r3, r5
 800f47e:	d1ee      	bne.n	800f45e <rcutils_system_time_now+0x1e>
 800f480:	2002      	movs	r0, #2
 800f482:	b004      	add	sp, #16
 800f484:	bd70      	pop	{r4, r5, r6, pc}
 800f486:	200b      	movs	r0, #11
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	3b9aca00 	.word	0x3b9aca00

0800f490 <rcutils_steady_time_now>:
 800f490:	b308      	cbz	r0, 800f4d6 <rcutils_steady_time_now+0x46>
 800f492:	b570      	push	{r4, r5, r6, lr}
 800f494:	b084      	sub	sp, #16
 800f496:	4604      	mov	r4, r0
 800f498:	4669      	mov	r1, sp
 800f49a:	2000      	movs	r0, #0
 800f49c:	f7f1 fea4 	bl	80011e8 <clock_gettime>
 800f4a0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800f4a4:	2d00      	cmp	r5, #0
 800f4a6:	db13      	blt.n	800f4d0 <rcutils_steady_time_now+0x40>
 800f4a8:	9902      	ldr	r1, [sp, #8]
 800f4aa:	2900      	cmp	r1, #0
 800f4ac:	db0d      	blt.n	800f4ca <rcutils_steady_time_now+0x3a>
 800f4ae:	4e0b      	ldr	r6, [pc, #44]	@ (800f4dc <rcutils_steady_time_now+0x4c>)
 800f4b0:	fba3 3206 	umull	r3, r2, r3, r6
 800f4b4:	185b      	adds	r3, r3, r1
 800f4b6:	fb06 2205 	mla	r2, r6, r5, r2
 800f4ba:	f04f 0000 	mov.w	r0, #0
 800f4be:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800f4c2:	e9c4 3200 	strd	r3, r2, [r4]
 800f4c6:	b004      	add	sp, #16
 800f4c8:	bd70      	pop	{r4, r5, r6, pc}
 800f4ca:	ea53 0205 	orrs.w	r2, r3, r5
 800f4ce:	d1ee      	bne.n	800f4ae <rcutils_steady_time_now+0x1e>
 800f4d0:	2002      	movs	r0, #2
 800f4d2:	b004      	add	sp, #16
 800f4d4:	bd70      	pop	{r4, r5, r6, pc}
 800f4d6:	200b      	movs	r0, #11
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop
 800f4dc:	3b9aca00 	.word	0x3b9aca00

0800f4e0 <rmw_get_zero_initialized_context>:
 800f4e0:	b510      	push	{r4, lr}
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	3010      	adds	r0, #16
 800f4e6:	f7f9 fa93 	bl	8008a10 <rmw_get_zero_initialized_init_options>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	2100      	movs	r1, #0
 800f4f0:	e9c4 0100 	strd	r0, r1, [r4]
 800f4f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800f4f8:	60a3      	str	r3, [r4, #8]
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	bd10      	pop	{r4, pc}
 800f4fe:	bf00      	nop

0800f500 <rmw_validate_full_topic_name>:
 800f500:	2800      	cmp	r0, #0
 800f502:	d057      	beq.n	800f5b4 <rmw_validate_full_topic_name+0xb4>
 800f504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f508:	460d      	mov	r5, r1
 800f50a:	2900      	cmp	r1, #0
 800f50c:	d054      	beq.n	800f5b8 <rmw_validate_full_topic_name+0xb8>
 800f50e:	4616      	mov	r6, r2
 800f510:	4604      	mov	r4, r0
 800f512:	f7f0 fe8f 	bl	8000234 <strlen>
 800f516:	b148      	cbz	r0, 800f52c <rmw_validate_full_topic_name+0x2c>
 800f518:	7823      	ldrb	r3, [r4, #0]
 800f51a:	2b2f      	cmp	r3, #47	@ 0x2f
 800f51c:	d00d      	beq.n	800f53a <rmw_validate_full_topic_name+0x3a>
 800f51e:	2302      	movs	r3, #2
 800f520:	602b      	str	r3, [r5, #0]
 800f522:	b13e      	cbz	r6, 800f534 <rmw_validate_full_topic_name+0x34>
 800f524:	2000      	movs	r0, #0
 800f526:	6030      	str	r0, [r6, #0]
 800f528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f52c:	2301      	movs	r3, #1
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	2e00      	cmp	r6, #0
 800f532:	d1f7      	bne.n	800f524 <rmw_validate_full_topic_name+0x24>
 800f534:	2000      	movs	r0, #0
 800f536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f53a:	1e43      	subs	r3, r0, #1
 800f53c:	5ce2      	ldrb	r2, [r4, r3]
 800f53e:	2a2f      	cmp	r2, #47	@ 0x2f
 800f540:	d03c      	beq.n	800f5bc <rmw_validate_full_topic_name+0xbc>
 800f542:	1e63      	subs	r3, r4, #1
 800f544:	eb03 0800 	add.w	r8, r3, r0
 800f548:	f1c4 0e01 	rsb	lr, r4, #1
 800f54c:	eb0e 0703 	add.w	r7, lr, r3
 800f550:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f554:	f021 0220 	bic.w	r2, r1, #32
 800f558:	3a41      	subs	r2, #65	@ 0x41
 800f55a:	2a19      	cmp	r2, #25
 800f55c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800f560:	d90b      	bls.n	800f57a <rmw_validate_full_topic_name+0x7a>
 800f562:	295f      	cmp	r1, #95	@ 0x5f
 800f564:	d009      	beq.n	800f57a <rmw_validate_full_topic_name+0x7a>
 800f566:	f1bc 0f0a 	cmp.w	ip, #10
 800f56a:	d906      	bls.n	800f57a <rmw_validate_full_topic_name+0x7a>
 800f56c:	2304      	movs	r3, #4
 800f56e:	602b      	str	r3, [r5, #0]
 800f570:	2e00      	cmp	r6, #0
 800f572:	d0df      	beq.n	800f534 <rmw_validate_full_topic_name+0x34>
 800f574:	6037      	str	r7, [r6, #0]
 800f576:	2000      	movs	r0, #0
 800f578:	e7d6      	b.n	800f528 <rmw_validate_full_topic_name+0x28>
 800f57a:	4543      	cmp	r3, r8
 800f57c:	d1e6      	bne.n	800f54c <rmw_validate_full_topic_name+0x4c>
 800f57e:	4f1a      	ldr	r7, [pc, #104]	@ (800f5e8 <rmw_validate_full_topic_name+0xe8>)
 800f580:	2301      	movs	r3, #1
 800f582:	e004      	b.n	800f58e <rmw_validate_full_topic_name+0x8e>
 800f584:	4298      	cmp	r0, r3
 800f586:	f104 0401 	add.w	r4, r4, #1
 800f58a:	d91c      	bls.n	800f5c6 <rmw_validate_full_topic_name+0xc6>
 800f58c:	4613      	mov	r3, r2
 800f58e:	4298      	cmp	r0, r3
 800f590:	f103 0201 	add.w	r2, r3, #1
 800f594:	d0f6      	beq.n	800f584 <rmw_validate_full_topic_name+0x84>
 800f596:	7821      	ldrb	r1, [r4, #0]
 800f598:	292f      	cmp	r1, #47	@ 0x2f
 800f59a:	d1f3      	bne.n	800f584 <rmw_validate_full_topic_name+0x84>
 800f59c:	7861      	ldrb	r1, [r4, #1]
 800f59e:	292f      	cmp	r1, #47	@ 0x2f
 800f5a0:	d01c      	beq.n	800f5dc <rmw_validate_full_topic_name+0xdc>
 800f5a2:	5dc9      	ldrb	r1, [r1, r7]
 800f5a4:	0749      	lsls	r1, r1, #29
 800f5a6:	d5ed      	bpl.n	800f584 <rmw_validate_full_topic_name+0x84>
 800f5a8:	2206      	movs	r2, #6
 800f5aa:	602a      	str	r2, [r5, #0]
 800f5ac:	2e00      	cmp	r6, #0
 800f5ae:	d0c1      	beq.n	800f534 <rmw_validate_full_topic_name+0x34>
 800f5b0:	6033      	str	r3, [r6, #0]
 800f5b2:	e7bf      	b.n	800f534 <rmw_validate_full_topic_name+0x34>
 800f5b4:	200b      	movs	r0, #11
 800f5b6:	4770      	bx	lr
 800f5b8:	200b      	movs	r0, #11
 800f5ba:	e7b5      	b.n	800f528 <rmw_validate_full_topic_name+0x28>
 800f5bc:	2203      	movs	r2, #3
 800f5be:	602a      	str	r2, [r5, #0]
 800f5c0:	2e00      	cmp	r6, #0
 800f5c2:	d1f5      	bne.n	800f5b0 <rmw_validate_full_topic_name+0xb0>
 800f5c4:	e7b6      	b.n	800f534 <rmw_validate_full_topic_name+0x34>
 800f5c6:	28f7      	cmp	r0, #247	@ 0xf7
 800f5c8:	d802      	bhi.n	800f5d0 <rmw_validate_full_topic_name+0xd0>
 800f5ca:	2000      	movs	r0, #0
 800f5cc:	6028      	str	r0, [r5, #0]
 800f5ce:	e7ab      	b.n	800f528 <rmw_validate_full_topic_name+0x28>
 800f5d0:	2307      	movs	r3, #7
 800f5d2:	602b      	str	r3, [r5, #0]
 800f5d4:	2e00      	cmp	r6, #0
 800f5d6:	d0ad      	beq.n	800f534 <rmw_validate_full_topic_name+0x34>
 800f5d8:	23f6      	movs	r3, #246	@ 0xf6
 800f5da:	e7e9      	b.n	800f5b0 <rmw_validate_full_topic_name+0xb0>
 800f5dc:	2205      	movs	r2, #5
 800f5de:	602a      	str	r2, [r5, #0]
 800f5e0:	2e00      	cmp	r6, #0
 800f5e2:	d1e5      	bne.n	800f5b0 <rmw_validate_full_topic_name+0xb0>
 800f5e4:	e7a6      	b.n	800f534 <rmw_validate_full_topic_name+0x34>
 800f5e6:	bf00      	nop
 800f5e8:	080131bc 	.word	0x080131bc

0800f5ec <rmw_validate_namespace_with_size>:
 800f5ec:	b340      	cbz	r0, 800f640 <rmw_validate_namespace_with_size+0x54>
 800f5ee:	b570      	push	{r4, r5, r6, lr}
 800f5f0:	4614      	mov	r4, r2
 800f5f2:	b0c2      	sub	sp, #264	@ 0x108
 800f5f4:	b332      	cbz	r2, 800f644 <rmw_validate_namespace_with_size+0x58>
 800f5f6:	2901      	cmp	r1, #1
 800f5f8:	460d      	mov	r5, r1
 800f5fa:	461e      	mov	r6, r3
 800f5fc:	d102      	bne.n	800f604 <rmw_validate_namespace_with_size+0x18>
 800f5fe:	7803      	ldrb	r3, [r0, #0]
 800f600:	2b2f      	cmp	r3, #47	@ 0x2f
 800f602:	d012      	beq.n	800f62a <rmw_validate_namespace_with_size+0x3e>
 800f604:	aa01      	add	r2, sp, #4
 800f606:	4669      	mov	r1, sp
 800f608:	f7ff ff7a 	bl	800f500 <rmw_validate_full_topic_name>
 800f60c:	b978      	cbnz	r0, 800f62e <rmw_validate_namespace_with_size+0x42>
 800f60e:	9b00      	ldr	r3, [sp, #0]
 800f610:	b14b      	cbz	r3, 800f626 <rmw_validate_namespace_with_size+0x3a>
 800f612:	2b07      	cmp	r3, #7
 800f614:	d007      	beq.n	800f626 <rmw_validate_namespace_with_size+0x3a>
 800f616:	1e5a      	subs	r2, r3, #1
 800f618:	2a05      	cmp	r2, #5
 800f61a:	d82b      	bhi.n	800f674 <rmw_validate_namespace_with_size+0x88>
 800f61c:	e8df f002 	tbb	[pc, r2]
 800f620:	1e212427 	.word	0x1e212427
 800f624:	141b      	.short	0x141b
 800f626:	2df5      	cmp	r5, #245	@ 0xf5
 800f628:	d803      	bhi.n	800f632 <rmw_validate_namespace_with_size+0x46>
 800f62a:	2000      	movs	r0, #0
 800f62c:	6020      	str	r0, [r4, #0]
 800f62e:	b042      	add	sp, #264	@ 0x108
 800f630:	bd70      	pop	{r4, r5, r6, pc}
 800f632:	2307      	movs	r3, #7
 800f634:	6023      	str	r3, [r4, #0]
 800f636:	2e00      	cmp	r6, #0
 800f638:	d0f9      	beq.n	800f62e <rmw_validate_namespace_with_size+0x42>
 800f63a:	23f4      	movs	r3, #244	@ 0xf4
 800f63c:	6033      	str	r3, [r6, #0]
 800f63e:	e7f6      	b.n	800f62e <rmw_validate_namespace_with_size+0x42>
 800f640:	200b      	movs	r0, #11
 800f642:	4770      	bx	lr
 800f644:	200b      	movs	r0, #11
 800f646:	e7f2      	b.n	800f62e <rmw_validate_namespace_with_size+0x42>
 800f648:	2306      	movs	r3, #6
 800f64a:	6023      	str	r3, [r4, #0]
 800f64c:	2e00      	cmp	r6, #0
 800f64e:	d0ee      	beq.n	800f62e <rmw_validate_namespace_with_size+0x42>
 800f650:	9b01      	ldr	r3, [sp, #4]
 800f652:	6033      	str	r3, [r6, #0]
 800f654:	e7eb      	b.n	800f62e <rmw_validate_namespace_with_size+0x42>
 800f656:	2305      	movs	r3, #5
 800f658:	6023      	str	r3, [r4, #0]
 800f65a:	e7f7      	b.n	800f64c <rmw_validate_namespace_with_size+0x60>
 800f65c:	2304      	movs	r3, #4
 800f65e:	6023      	str	r3, [r4, #0]
 800f660:	e7f4      	b.n	800f64c <rmw_validate_namespace_with_size+0x60>
 800f662:	2303      	movs	r3, #3
 800f664:	6023      	str	r3, [r4, #0]
 800f666:	e7f1      	b.n	800f64c <rmw_validate_namespace_with_size+0x60>
 800f668:	2302      	movs	r3, #2
 800f66a:	6023      	str	r3, [r4, #0]
 800f66c:	e7ee      	b.n	800f64c <rmw_validate_namespace_with_size+0x60>
 800f66e:	2301      	movs	r3, #1
 800f670:	6023      	str	r3, [r4, #0]
 800f672:	e7eb      	b.n	800f64c <rmw_validate_namespace_with_size+0x60>
 800f674:	4a03      	ldr	r2, [pc, #12]	@ (800f684 <rmw_validate_namespace_with_size+0x98>)
 800f676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f67a:	a802      	add	r0, sp, #8
 800f67c:	f7ff fd4a 	bl	800f114 <rcutils_snprintf>
 800f680:	2001      	movs	r0, #1
 800f682:	e7d4      	b.n	800f62e <rmw_validate_namespace_with_size+0x42>
 800f684:	08012dc4 	.word	0x08012dc4

0800f688 <rmw_validate_namespace>:
 800f688:	b168      	cbz	r0, 800f6a6 <rmw_validate_namespace+0x1e>
 800f68a:	b570      	push	{r4, r5, r6, lr}
 800f68c:	460d      	mov	r5, r1
 800f68e:	4616      	mov	r6, r2
 800f690:	4604      	mov	r4, r0
 800f692:	f7f0 fdcf 	bl	8000234 <strlen>
 800f696:	4633      	mov	r3, r6
 800f698:	4601      	mov	r1, r0
 800f69a:	462a      	mov	r2, r5
 800f69c:	4620      	mov	r0, r4
 800f69e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6a2:	f7ff bfa3 	b.w	800f5ec <rmw_validate_namespace_with_size>
 800f6a6:	200b      	movs	r0, #11
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop

0800f6ac <rmw_namespace_validation_result_string>:
 800f6ac:	2807      	cmp	r0, #7
 800f6ae:	bf9a      	itte	ls
 800f6b0:	4b02      	ldrls	r3, [pc, #8]	@ (800f6bc <rmw_namespace_validation_result_string+0x10>)
 800f6b2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f6b6:	4802      	ldrhi	r0, [pc, #8]	@ (800f6c0 <rmw_namespace_validation_result_string+0x14>)
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop
 800f6bc:	08012fbc 	.word	0x08012fbc
 800f6c0:	08012e14 	.word	0x08012e14

0800f6c4 <rmw_validate_node_name>:
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	d03b      	beq.n	800f740 <rmw_validate_node_name+0x7c>
 800f6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6cc:	460d      	mov	r5, r1
 800f6ce:	2900      	cmp	r1, #0
 800f6d0:	d038      	beq.n	800f744 <rmw_validate_node_name+0x80>
 800f6d2:	4616      	mov	r6, r2
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	f7f0 fdad 	bl	8000234 <strlen>
 800f6da:	b1e0      	cbz	r0, 800f716 <rmw_validate_node_name+0x52>
 800f6dc:	1e63      	subs	r3, r4, #1
 800f6de:	eb03 0800 	add.w	r8, r3, r0
 800f6e2:	f1c4 0101 	rsb	r1, r4, #1
 800f6e6:	18cf      	adds	r7, r1, r3
 800f6e8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800f6ec:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800f6f0:	f02e 0c20 	bic.w	ip, lr, #32
 800f6f4:	2a09      	cmp	r2, #9
 800f6f6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800f6fa:	d914      	bls.n	800f726 <rmw_validate_node_name+0x62>
 800f6fc:	f1bc 0f19 	cmp.w	ip, #25
 800f700:	d911      	bls.n	800f726 <rmw_validate_node_name+0x62>
 800f702:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800f706:	d00e      	beq.n	800f726 <rmw_validate_node_name+0x62>
 800f708:	2302      	movs	r3, #2
 800f70a:	602b      	str	r3, [r5, #0]
 800f70c:	b106      	cbz	r6, 800f710 <rmw_validate_node_name+0x4c>
 800f70e:	6037      	str	r7, [r6, #0]
 800f710:	2000      	movs	r0, #0
 800f712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f716:	2301      	movs	r3, #1
 800f718:	602b      	str	r3, [r5, #0]
 800f71a:	2e00      	cmp	r6, #0
 800f71c:	d0f8      	beq.n	800f710 <rmw_validate_node_name+0x4c>
 800f71e:	2000      	movs	r0, #0
 800f720:	6030      	str	r0, [r6, #0]
 800f722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f726:	4543      	cmp	r3, r8
 800f728:	d1dd      	bne.n	800f6e6 <rmw_validate_node_name+0x22>
 800f72a:	7822      	ldrb	r2, [r4, #0]
 800f72c:	4b0d      	ldr	r3, [pc, #52]	@ (800f764 <rmw_validate_node_name+0xa0>)
 800f72e:	5cd3      	ldrb	r3, [r2, r3]
 800f730:	f013 0304 	ands.w	r3, r3, #4
 800f734:	d110      	bne.n	800f758 <rmw_validate_node_name+0x94>
 800f736:	28ff      	cmp	r0, #255	@ 0xff
 800f738:	d806      	bhi.n	800f748 <rmw_validate_node_name+0x84>
 800f73a:	602b      	str	r3, [r5, #0]
 800f73c:	4618      	mov	r0, r3
 800f73e:	e7e8      	b.n	800f712 <rmw_validate_node_name+0x4e>
 800f740:	200b      	movs	r0, #11
 800f742:	4770      	bx	lr
 800f744:	200b      	movs	r0, #11
 800f746:	e7e4      	b.n	800f712 <rmw_validate_node_name+0x4e>
 800f748:	2204      	movs	r2, #4
 800f74a:	602a      	str	r2, [r5, #0]
 800f74c:	2e00      	cmp	r6, #0
 800f74e:	d0df      	beq.n	800f710 <rmw_validate_node_name+0x4c>
 800f750:	22fe      	movs	r2, #254	@ 0xfe
 800f752:	6032      	str	r2, [r6, #0]
 800f754:	4618      	mov	r0, r3
 800f756:	e7dc      	b.n	800f712 <rmw_validate_node_name+0x4e>
 800f758:	2303      	movs	r3, #3
 800f75a:	602b      	str	r3, [r5, #0]
 800f75c:	2e00      	cmp	r6, #0
 800f75e:	d1de      	bne.n	800f71e <rmw_validate_node_name+0x5a>
 800f760:	e7d6      	b.n	800f710 <rmw_validate_node_name+0x4c>
 800f762:	bf00      	nop
 800f764:	080131bc 	.word	0x080131bc

0800f768 <rmw_node_name_validation_result_string>:
 800f768:	2804      	cmp	r0, #4
 800f76a:	bf9a      	itte	ls
 800f76c:	4b02      	ldrls	r3, [pc, #8]	@ (800f778 <rmw_node_name_validation_result_string+0x10>)
 800f76e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f772:	4802      	ldrhi	r0, [pc, #8]	@ (800f77c <rmw_node_name_validation_result_string+0x14>)
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop
 800f778:	080130c8 	.word	0x080130c8
 800f77c:	08012fdc 	.word	0x08012fdc

0800f780 <on_status>:
 800f780:	b082      	sub	sp, #8
 800f782:	b002      	add	sp, #8
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop

0800f788 <on_topic>:
 800f788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f78c:	4a22      	ldr	r2, [pc, #136]	@ (800f818 <on_topic+0x90>)
 800f78e:	b094      	sub	sp, #80	@ 0x50
 800f790:	6812      	ldr	r2, [r2, #0]
 800f792:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800f794:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800f798:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 800f79c:	b3c2      	cbz	r2, 800f810 <on_topic+0x88>
 800f79e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 800f7a2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 800f7a6:	e001      	b.n	800f7ac <on_topic+0x24>
 800f7a8:	6852      	ldr	r2, [r2, #4]
 800f7aa:	b38a      	cbz	r2, 800f810 <on_topic+0x88>
 800f7ac:	6894      	ldr	r4, [r2, #8]
 800f7ae:	8aa3      	ldrh	r3, [r4, #20]
 800f7b0:	428b      	cmp	r3, r1
 800f7b2:	d1f9      	bne.n	800f7a8 <on_topic+0x20>
 800f7b4:	7da3      	ldrb	r3, [r4, #22]
 800f7b6:	4283      	cmp	r3, r0
 800f7b8:	d1f6      	bne.n	800f7a8 <on_topic+0x20>
 800f7ba:	2248      	movs	r2, #72	@ 0x48
 800f7bc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f7c0:	4668      	mov	r0, sp
 800f7c2:	f002 f8b2 	bl	801192a <memcpy>
 800f7c6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800f7ca:	cb0c      	ldmia	r3, {r2, r3}
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f7fa f903 	bl	80099d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 800f7d2:	4607      	mov	r7, r0
 800f7d4:	b1e0      	cbz	r0, 800f810 <on_topic+0x88>
 800f7d6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800f7da:	4632      	mov	r2, r6
 800f7dc:	4628      	mov	r0, r5
 800f7de:	f108 0110 	add.w	r1, r8, #16
 800f7e2:	f000 fa9f 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800f7e6:	b930      	cbnz	r0, 800f7f6 <on_topic+0x6e>
 800f7e8:	480c      	ldr	r0, [pc, #48]	@ (800f81c <on_topic+0x94>)
 800f7ea:	4639      	mov	r1, r7
 800f7ec:	b014      	add	sp, #80	@ 0x50
 800f7ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f2:	f000 b8bd 	b.w	800f970 <put_memory>
 800f7f6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 800f7fa:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 800f7fe:	f000 f987 	bl	800fb10 <rmw_uros_epoch_nanos>
 800f802:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 800f806:	2305      	movs	r3, #5
 800f808:	e942 0102 	strd	r0, r1, [r2, #-8]
 800f80c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 800f810:	b014      	add	sp, #80	@ 0x50
 800f812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f816:	bf00      	nop
 800f818:	2000a9f4 	.word	0x2000a9f4
 800f81c:	2000a9e4 	.word	0x2000a9e4

0800f820 <on_request>:
 800f820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f824:	4823      	ldr	r0, [pc, #140]	@ (800f8b4 <on_request+0x94>)
 800f826:	b094      	sub	sp, #80	@ 0x50
 800f828:	6800      	ldr	r0, [r0, #0]
 800f82a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800f82c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800f830:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f832:	2800      	cmp	r0, #0
 800f834:	d03b      	beq.n	800f8ae <on_request+0x8e>
 800f836:	461d      	mov	r5, r3
 800f838:	e001      	b.n	800f83e <on_request+0x1e>
 800f83a:	6840      	ldr	r0, [r0, #4]
 800f83c:	b3b8      	cbz	r0, 800f8ae <on_request+0x8e>
 800f83e:	6884      	ldr	r4, [r0, #8]
 800f840:	8b21      	ldrh	r1, [r4, #24]
 800f842:	4291      	cmp	r1, r2
 800f844:	d1f9      	bne.n	800f83a <on_request+0x1a>
 800f846:	2248      	movs	r2, #72	@ 0x48
 800f848:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800f84c:	4668      	mov	r0, sp
 800f84e:	f002 f86c 	bl	801192a <memcpy>
 800f852:	f104 0320 	add.w	r3, r4, #32
 800f856:	cb0c      	ldmia	r3, {r2, r3}
 800f858:	4620      	mov	r0, r4
 800f85a:	f7fa f8bd 	bl	80099d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 800f85e:	4680      	mov	r8, r0
 800f860:	b328      	cbz	r0, 800f8ae <on_request+0x8e>
 800f862:	4638      	mov	r0, r7
 800f864:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800f868:	4632      	mov	r2, r6
 800f86a:	f107 0110 	add.w	r1, r7, #16
 800f86e:	f000 fa59 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800f872:	b930      	cbnz	r0, 800f882 <on_request+0x62>
 800f874:	4810      	ldr	r0, [pc, #64]	@ (800f8b8 <on_request+0x98>)
 800f876:	4641      	mov	r1, r8
 800f878:	b014      	add	sp, #80	@ 0x50
 800f87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f87e:	f000 b877 	b.w	800f970 <put_memory>
 800f882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f884:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 800f888:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 800f88c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 800f890:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f894:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f898:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f89c:	f000 f938 	bl	800fb10 <rmw_uros_epoch_nanos>
 800f8a0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800f8a4:	2303      	movs	r3, #3
 800f8a6:	e942 0102 	strd	r0, r1, [r2, #-8]
 800f8aa:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 800f8ae:	b014      	add	sp, #80	@ 0x50
 800f8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b4:	2000a9c4 	.word	0x2000a9c4
 800f8b8:	2000a9e4 	.word	0x2000a9e4

0800f8bc <on_reply>:
 800f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	4821      	ldr	r0, [pc, #132]	@ (800f948 <on_reply+0x8c>)
 800f8c2:	b094      	sub	sp, #80	@ 0x50
 800f8c4:	6800      	ldr	r0, [r0, #0]
 800f8c6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800f8c8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800f8cc:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f8ce:	b3b8      	cbz	r0, 800f940 <on_reply+0x84>
 800f8d0:	461d      	mov	r5, r3
 800f8d2:	e001      	b.n	800f8d8 <on_reply+0x1c>
 800f8d4:	6840      	ldr	r0, [r0, #4]
 800f8d6:	b398      	cbz	r0, 800f940 <on_reply+0x84>
 800f8d8:	6884      	ldr	r4, [r0, #8]
 800f8da:	8b21      	ldrh	r1, [r4, #24]
 800f8dc:	4291      	cmp	r1, r2
 800f8de:	d1f9      	bne.n	800f8d4 <on_reply+0x18>
 800f8e0:	2248      	movs	r2, #72	@ 0x48
 800f8e2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800f8e6:	4668      	mov	r0, sp
 800f8e8:	f002 f81f 	bl	801192a <memcpy>
 800f8ec:	f104 0320 	add.w	r3, r4, #32
 800f8f0:	cb0c      	ldmia	r3, {r2, r3}
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f7fa f870 	bl	80099d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 800f8f8:	4680      	mov	r8, r0
 800f8fa:	b308      	cbz	r0, 800f940 <on_reply+0x84>
 800f8fc:	4638      	mov	r0, r7
 800f8fe:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800f902:	4632      	mov	r2, r6
 800f904:	f107 0110 	add.w	r1, r7, #16
 800f908:	f000 fa0c 	bl	800fd24 <ucdr_deserialize_array_uint8_t>
 800f90c:	b930      	cbnz	r0, 800f91c <on_reply+0x60>
 800f90e:	480f      	ldr	r0, [pc, #60]	@ (800f94c <on_reply+0x90>)
 800f910:	4641      	mov	r1, r8
 800f912:	b014      	add	sp, #80	@ 0x50
 800f914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f918:	f000 b82a 	b.w	800f970 <put_memory>
 800f91c:	2200      	movs	r2, #0
 800f91e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 800f922:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 800f926:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 800f92a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 800f92e:	f000 f8ef 	bl	800fb10 <rmw_uros_epoch_nanos>
 800f932:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800f936:	2304      	movs	r3, #4
 800f938:	e942 0102 	strd	r0, r1, [r2, #-8]
 800f93c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 800f940:	b014      	add	sp, #80	@ 0x50
 800f942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f946:	bf00      	nop
 800f948:	200060d4 	.word	0x200060d4
 800f94c:	2000a9e4 	.word	0x2000a9e4

0800f950 <get_memory>:
 800f950:	4603      	mov	r3, r0
 800f952:	6840      	ldr	r0, [r0, #4]
 800f954:	b158      	cbz	r0, 800f96e <get_memory+0x1e>
 800f956:	6842      	ldr	r2, [r0, #4]
 800f958:	605a      	str	r2, [r3, #4]
 800f95a:	b10a      	cbz	r2, 800f960 <get_memory+0x10>
 800f95c:	2100      	movs	r1, #0
 800f95e:	6011      	str	r1, [r2, #0]
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	6042      	str	r2, [r0, #4]
 800f964:	b102      	cbz	r2, 800f968 <get_memory+0x18>
 800f966:	6010      	str	r0, [r2, #0]
 800f968:	2200      	movs	r2, #0
 800f96a:	6002      	str	r2, [r0, #0]
 800f96c:	6018      	str	r0, [r3, #0]
 800f96e:	4770      	bx	lr

0800f970 <put_memory>:
 800f970:	680b      	ldr	r3, [r1, #0]
 800f972:	b10b      	cbz	r3, 800f978 <put_memory+0x8>
 800f974:	684a      	ldr	r2, [r1, #4]
 800f976:	605a      	str	r2, [r3, #4]
 800f978:	684a      	ldr	r2, [r1, #4]
 800f97a:	b102      	cbz	r2, 800f97e <put_memory+0xe>
 800f97c:	6013      	str	r3, [r2, #0]
 800f97e:	6803      	ldr	r3, [r0, #0]
 800f980:	428b      	cmp	r3, r1
 800f982:	6843      	ldr	r3, [r0, #4]
 800f984:	bf08      	it	eq
 800f986:	6002      	streq	r2, [r0, #0]
 800f988:	604b      	str	r3, [r1, #4]
 800f98a:	b103      	cbz	r3, 800f98e <put_memory+0x1e>
 800f98c:	6019      	str	r1, [r3, #0]
 800f98e:	2300      	movs	r3, #0
 800f990:	600b      	str	r3, [r1, #0]
 800f992:	6041      	str	r1, [r0, #4]
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop

0800f998 <rmw_destroy_client>:
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	b128      	cbz	r0, 800f9a8 <rmw_destroy_client+0x10>
 800f99c:	4604      	mov	r4, r0
 800f99e:	6800      	ldr	r0, [r0, #0]
 800f9a0:	460d      	mov	r5, r1
 800f9a2:	f7fa f8e9 	bl	8009b78 <is_uxrce_rmw_identifier_valid>
 800f9a6:	b910      	cbnz	r0, 800f9ae <rmw_destroy_client+0x16>
 800f9a8:	2401      	movs	r4, #1
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	bd70      	pop	{r4, r5, r6, pc}
 800f9ae:	6863      	ldr	r3, [r4, #4]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d0f9      	beq.n	800f9a8 <rmw_destroy_client+0x10>
 800f9b4:	2d00      	cmp	r5, #0
 800f9b6:	d0f7      	beq.n	800f9a8 <rmw_destroy_client+0x10>
 800f9b8:	6828      	ldr	r0, [r5, #0]
 800f9ba:	f7fa f8dd 	bl	8009b78 <is_uxrce_rmw_identifier_valid>
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	d0f2      	beq.n	800f9a8 <rmw_destroy_client+0x10>
 800f9c2:	686e      	ldr	r6, [r5, #4]
 800f9c4:	2e00      	cmp	r6, #0
 800f9c6:	d0ef      	beq.n	800f9a8 <rmw_destroy_client+0x10>
 800f9c8:	6864      	ldr	r4, [r4, #4]
 800f9ca:	6932      	ldr	r2, [r6, #16]
 800f9cc:	6920      	ldr	r0, [r4, #16]
 800f9ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f9d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f9d6:	6819      	ldr	r1, [r3, #0]
 800f9d8:	f7fb fbd6 	bl	800b188 <uxr_buffer_cancel_data>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	6920      	ldr	r0, [r4, #16]
 800f9e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f9e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f9e8:	f7fa f846 	bl	8009a78 <run_xrce_session>
 800f9ec:	6920      	ldr	r0, [r4, #16]
 800f9ee:	6932      	ldr	r2, [r6, #16]
 800f9f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f9f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f9f8:	6819      	ldr	r1, [r3, #0]
 800f9fa:	f7fb f979 	bl	800acf0 <uxr_buffer_delete_entity>
 800f9fe:	4602      	mov	r2, r0
 800fa00:	6920      	ldr	r0, [r4, #16]
 800fa02:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa06:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa0a:	f7fa f835 	bl	8009a78 <run_xrce_session>
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	4628      	mov	r0, r5
 800fa12:	bf14      	ite	ne
 800fa14:	2400      	movne	r4, #0
 800fa16:	2402      	moveq	r4, #2
 800fa18:	f7f9 ffbc 	bl	8009994 <rmw_uxrce_fini_client_memory>
 800fa1c:	e7c5      	b.n	800f9aa <rmw_destroy_client+0x12>
 800fa1e:	bf00      	nop

0800fa20 <rmw_get_implementation_identifier>:
 800fa20:	4b01      	ldr	r3, [pc, #4]	@ (800fa28 <rmw_get_implementation_identifier+0x8>)
 800fa22:	6818      	ldr	r0, [r3, #0]
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop
 800fa28:	080130f4 	.word	0x080130f4

0800fa2c <create_topic>:
 800fa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa30:	4605      	mov	r5, r0
 800fa32:	b084      	sub	sp, #16
 800fa34:	4822      	ldr	r0, [pc, #136]	@ (800fac0 <create_topic+0x94>)
 800fa36:	460f      	mov	r7, r1
 800fa38:	4616      	mov	r6, r2
 800fa3a:	f7ff ff89 	bl	800f950 <get_memory>
 800fa3e:	4604      	mov	r4, r0
 800fa40:	2800      	cmp	r0, #0
 800fa42:	d039      	beq.n	800fab8 <create_topic+0x8c>
 800fa44:	692b      	ldr	r3, [r5, #16]
 800fa46:	6884      	ldr	r4, [r0, #8]
 800fa48:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 800fac8 <create_topic+0x9c>
 800fa4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa50:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800fa54:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 800fa58:	1c42      	adds	r2, r0, #1
 800fa5a:	2102      	movs	r1, #2
 800fa5c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 800fa60:	f7fb fb62 	bl	800b128 <uxr_object_id>
 800fa64:	223c      	movs	r2, #60	@ 0x3c
 800fa66:	6120      	str	r0, [r4, #16]
 800fa68:	4641      	mov	r1, r8
 800fa6a:	4638      	mov	r0, r7
 800fa6c:	f7fa f86a 	bl	8009b44 <generate_topic_name>
 800fa70:	b1f0      	cbz	r0, 800fab0 <create_topic+0x84>
 800fa72:	4f14      	ldr	r7, [pc, #80]	@ (800fac4 <create_topic+0x98>)
 800fa74:	4630      	mov	r0, r6
 800fa76:	2264      	movs	r2, #100	@ 0x64
 800fa78:	4639      	mov	r1, r7
 800fa7a:	f7fa f833 	bl	8009ae4 <generate_type_name>
 800fa7e:	b1b8      	cbz	r0, 800fab0 <create_topic+0x84>
 800fa80:	6928      	ldr	r0, [r5, #16]
 800fa82:	2306      	movs	r3, #6
 800fa84:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800fa88:	f8cd 8000 	str.w	r8, [sp]
 800fa8c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800fa90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa94:	6811      	ldr	r1, [r2, #0]
 800fa96:	696b      	ldr	r3, [r5, #20]
 800fa98:	6922      	ldr	r2, [r4, #16]
 800fa9a:	f7fb f9a7 	bl	800adec <uxr_buffer_create_topic_bin>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	6928      	ldr	r0, [r5, #16]
 800faa2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800faa6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800faaa:	f7f9 ffe5 	bl	8009a78 <run_xrce_session>
 800faae:	b918      	cbnz	r0, 800fab8 <create_topic+0x8c>
 800fab0:	4620      	mov	r0, r4
 800fab2:	f7f9 ff85 	bl	80099c0 <rmw_uxrce_fini_topic_memory>
 800fab6:	2400      	movs	r4, #0
 800fab8:	4620      	mov	r0, r4
 800faba:	b004      	add	sp, #16
 800fabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fac0:	2000aa04 	.word	0x2000aa04
 800fac4:	2000aa84 	.word	0x2000aa84
 800fac8:	2000aa48 	.word	0x2000aa48

0800facc <destroy_topic>:
 800facc:	b538      	push	{r3, r4, r5, lr}
 800face:	6985      	ldr	r5, [r0, #24]
 800fad0:	b1d5      	cbz	r5, 800fb08 <destroy_topic+0x3c>
 800fad2:	4604      	mov	r4, r0
 800fad4:	6928      	ldr	r0, [r5, #16]
 800fad6:	6922      	ldr	r2, [r4, #16]
 800fad8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fadc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fae0:	6819      	ldr	r1, [r3, #0]
 800fae2:	f7fb f905 	bl	800acf0 <uxr_buffer_delete_entity>
 800fae6:	4602      	mov	r2, r0
 800fae8:	6928      	ldr	r0, [r5, #16]
 800faea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800faee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800faf2:	f7f9 ffc1 	bl	8009a78 <run_xrce_session>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	4620      	mov	r0, r4
 800fafa:	bf14      	ite	ne
 800fafc:	2400      	movne	r4, #0
 800fafe:	2402      	moveq	r4, #2
 800fb00:	f7f9 ff5e 	bl	80099c0 <rmw_uxrce_fini_topic_memory>
 800fb04:	4620      	mov	r0, r4
 800fb06:	bd38      	pop	{r3, r4, r5, pc}
 800fb08:	2401      	movs	r4, #1
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	bd38      	pop	{r3, r4, r5, pc}
 800fb0e:	bf00      	nop

0800fb10 <rmw_uros_epoch_nanos>:
 800fb10:	4b05      	ldr	r3, [pc, #20]	@ (800fb28 <rmw_uros_epoch_nanos+0x18>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	b123      	cbz	r3, 800fb20 <rmw_uros_epoch_nanos+0x10>
 800fb16:	6898      	ldr	r0, [r3, #8]
 800fb18:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb1c:	f7fb bd3e 	b.w	800b59c <uxr_epoch_nanos>
 800fb20:	2000      	movs	r0, #0
 800fb22:	2100      	movs	r1, #0
 800fb24:	4770      	bx	lr
 800fb26:	bf00      	nop
 800fb28:	2000a9d4 	.word	0x2000a9d4

0800fb2c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800fb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb30:	6805      	ldr	r5, [r0, #0]
 800fb32:	4604      	mov	r4, r0
 800fb34:	4628      	mov	r0, r5
 800fb36:	460e      	mov	r6, r1
 800fb38:	f7f0 fb72 	bl	8000220 <strcmp>
 800fb3c:	b1c8      	cbz	r0, 800fb72 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800fb3e:	4b11      	ldr	r3, [pc, #68]	@ (800fb84 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	429d      	cmp	r5, r3
 800fb44:	d112      	bne.n	800fb6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800fb46:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800fb4a:	f8d8 4000 	ldr.w	r4, [r8]
 800fb4e:	b16c      	cbz	r4, 800fb6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800fb50:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fb54:	2700      	movs	r7, #0
 800fb56:	3d04      	subs	r5, #4
 800fb58:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800fb5c:	4631      	mov	r1, r6
 800fb5e:	f7f0 fb5f 	bl	8000220 <strcmp>
 800fb62:	00bb      	lsls	r3, r7, #2
 800fb64:	b140      	cbz	r0, 800fb78 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800fb66:	3701      	adds	r7, #1
 800fb68:	42bc      	cmp	r4, r7
 800fb6a:	d1f5      	bne.n	800fb58 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb72:	4620      	mov	r0, r4
 800fb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb78:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fb7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb80:	58d3      	ldr	r3, [r2, r3]
 800fb82:	4718      	bx	r3
 800fb84:	200000ac 	.word	0x200000ac

0800fb88 <std_msgs__msg__Int32__init>:
 800fb88:	3800      	subs	r0, #0
 800fb8a:	bf18      	it	ne
 800fb8c:	2001      	movne	r0, #1
 800fb8e:	4770      	bx	lr

0800fb90 <std_msgs__msg__Int32__fini>:
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop

0800fb94 <ucdr_serialize_endian_array_char>:
 800fb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb98:	4619      	mov	r1, r3
 800fb9a:	461f      	mov	r7, r3
 800fb9c:	4605      	mov	r5, r0
 800fb9e:	4690      	mov	r8, r2
 800fba0:	f7fa ffe2 	bl	800ab68 <ucdr_check_buffer_available_for>
 800fba4:	b9e0      	cbnz	r0, 800fbe0 <ucdr_serialize_endian_array_char+0x4c>
 800fba6:	463e      	mov	r6, r7
 800fba8:	e009      	b.n	800fbbe <ucdr_serialize_endian_array_char+0x2a>
 800fbaa:	68a8      	ldr	r0, [r5, #8]
 800fbac:	f001 febd 	bl	801192a <memcpy>
 800fbb0:	68ab      	ldr	r3, [r5, #8]
 800fbb2:	6928      	ldr	r0, [r5, #16]
 800fbb4:	4423      	add	r3, r4
 800fbb6:	4420      	add	r0, r4
 800fbb8:	1b36      	subs	r6, r6, r4
 800fbba:	60ab      	str	r3, [r5, #8]
 800fbbc:	6128      	str	r0, [r5, #16]
 800fbbe:	4631      	mov	r1, r6
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f7fb f858 	bl	800ac78 <ucdr_check_final_buffer_behavior_array>
 800fbc8:	1bb9      	subs	r1, r7, r6
 800fbca:	4441      	add	r1, r8
 800fbcc:	4604      	mov	r4, r0
 800fbce:	4602      	mov	r2, r0
 800fbd0:	2800      	cmp	r0, #0
 800fbd2:	d1ea      	bne.n	800fbaa <ucdr_serialize_endian_array_char+0x16>
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	7da8      	ldrb	r0, [r5, #22]
 800fbd8:	756b      	strb	r3, [r5, #21]
 800fbda:	4058      	eors	r0, r3
 800fbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbe0:	463a      	mov	r2, r7
 800fbe2:	68a8      	ldr	r0, [r5, #8]
 800fbe4:	4641      	mov	r1, r8
 800fbe6:	f001 fea0 	bl	801192a <memcpy>
 800fbea:	68aa      	ldr	r2, [r5, #8]
 800fbec:	692b      	ldr	r3, [r5, #16]
 800fbee:	443a      	add	r2, r7
 800fbf0:	443b      	add	r3, r7
 800fbf2:	60aa      	str	r2, [r5, #8]
 800fbf4:	612b      	str	r3, [r5, #16]
 800fbf6:	e7ed      	b.n	800fbd4 <ucdr_serialize_endian_array_char+0x40>

0800fbf8 <ucdr_deserialize_endian_array_char>:
 800fbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	461f      	mov	r7, r3
 800fc00:	4605      	mov	r5, r0
 800fc02:	4690      	mov	r8, r2
 800fc04:	f7fa ffb0 	bl	800ab68 <ucdr_check_buffer_available_for>
 800fc08:	b9e0      	cbnz	r0, 800fc44 <ucdr_deserialize_endian_array_char+0x4c>
 800fc0a:	463e      	mov	r6, r7
 800fc0c:	e009      	b.n	800fc22 <ucdr_deserialize_endian_array_char+0x2a>
 800fc0e:	68a9      	ldr	r1, [r5, #8]
 800fc10:	f001 fe8b 	bl	801192a <memcpy>
 800fc14:	68ab      	ldr	r3, [r5, #8]
 800fc16:	6928      	ldr	r0, [r5, #16]
 800fc18:	4423      	add	r3, r4
 800fc1a:	4420      	add	r0, r4
 800fc1c:	1b36      	subs	r6, r6, r4
 800fc1e:	60ab      	str	r3, [r5, #8]
 800fc20:	6128      	str	r0, [r5, #16]
 800fc22:	2201      	movs	r2, #1
 800fc24:	4631      	mov	r1, r6
 800fc26:	4628      	mov	r0, r5
 800fc28:	f7fb f826 	bl	800ac78 <ucdr_check_final_buffer_behavior_array>
 800fc2c:	4604      	mov	r4, r0
 800fc2e:	1bb8      	subs	r0, r7, r6
 800fc30:	4440      	add	r0, r8
 800fc32:	4622      	mov	r2, r4
 800fc34:	2c00      	cmp	r4, #0
 800fc36:	d1ea      	bne.n	800fc0e <ucdr_deserialize_endian_array_char+0x16>
 800fc38:	2301      	movs	r3, #1
 800fc3a:	7da8      	ldrb	r0, [r5, #22]
 800fc3c:	756b      	strb	r3, [r5, #21]
 800fc3e:	4058      	eors	r0, r3
 800fc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc44:	463a      	mov	r2, r7
 800fc46:	68a9      	ldr	r1, [r5, #8]
 800fc48:	4640      	mov	r0, r8
 800fc4a:	f001 fe6e 	bl	801192a <memcpy>
 800fc4e:	68aa      	ldr	r2, [r5, #8]
 800fc50:	692b      	ldr	r3, [r5, #16]
 800fc52:	443a      	add	r2, r7
 800fc54:	443b      	add	r3, r7
 800fc56:	60aa      	str	r2, [r5, #8]
 800fc58:	612b      	str	r3, [r5, #16]
 800fc5a:	e7ed      	b.n	800fc38 <ucdr_deserialize_endian_array_char+0x40>

0800fc5c <ucdr_serialize_array_uint8_t>:
 800fc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc60:	4688      	mov	r8, r1
 800fc62:	4611      	mov	r1, r2
 800fc64:	4617      	mov	r7, r2
 800fc66:	4605      	mov	r5, r0
 800fc68:	f7fa ff7e 	bl	800ab68 <ucdr_check_buffer_available_for>
 800fc6c:	b9e0      	cbnz	r0, 800fca8 <ucdr_serialize_array_uint8_t+0x4c>
 800fc6e:	463e      	mov	r6, r7
 800fc70:	e009      	b.n	800fc86 <ucdr_serialize_array_uint8_t+0x2a>
 800fc72:	68a8      	ldr	r0, [r5, #8]
 800fc74:	f001 fe59 	bl	801192a <memcpy>
 800fc78:	68aa      	ldr	r2, [r5, #8]
 800fc7a:	692b      	ldr	r3, [r5, #16]
 800fc7c:	4422      	add	r2, r4
 800fc7e:	4423      	add	r3, r4
 800fc80:	1b36      	subs	r6, r6, r4
 800fc82:	60aa      	str	r2, [r5, #8]
 800fc84:	612b      	str	r3, [r5, #16]
 800fc86:	4631      	mov	r1, r6
 800fc88:	2201      	movs	r2, #1
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	f7fa fff4 	bl	800ac78 <ucdr_check_final_buffer_behavior_array>
 800fc90:	1bb9      	subs	r1, r7, r6
 800fc92:	4441      	add	r1, r8
 800fc94:	4604      	mov	r4, r0
 800fc96:	4602      	mov	r2, r0
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	d1ea      	bne.n	800fc72 <ucdr_serialize_array_uint8_t+0x16>
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	7da8      	ldrb	r0, [r5, #22]
 800fca0:	756b      	strb	r3, [r5, #21]
 800fca2:	4058      	eors	r0, r3
 800fca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fca8:	463a      	mov	r2, r7
 800fcaa:	68a8      	ldr	r0, [r5, #8]
 800fcac:	4641      	mov	r1, r8
 800fcae:	f001 fe3c 	bl	801192a <memcpy>
 800fcb2:	68aa      	ldr	r2, [r5, #8]
 800fcb4:	692b      	ldr	r3, [r5, #16]
 800fcb6:	443a      	add	r2, r7
 800fcb8:	443b      	add	r3, r7
 800fcba:	60aa      	str	r2, [r5, #8]
 800fcbc:	612b      	str	r3, [r5, #16]
 800fcbe:	e7ed      	b.n	800fc9c <ucdr_serialize_array_uint8_t+0x40>

0800fcc0 <ucdr_serialize_endian_array_uint8_t>:
 800fcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	461f      	mov	r7, r3
 800fcc8:	4605      	mov	r5, r0
 800fcca:	4690      	mov	r8, r2
 800fccc:	f7fa ff4c 	bl	800ab68 <ucdr_check_buffer_available_for>
 800fcd0:	b9e0      	cbnz	r0, 800fd0c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800fcd2:	463e      	mov	r6, r7
 800fcd4:	e009      	b.n	800fcea <ucdr_serialize_endian_array_uint8_t+0x2a>
 800fcd6:	68a8      	ldr	r0, [r5, #8]
 800fcd8:	f001 fe27 	bl	801192a <memcpy>
 800fcdc:	68ab      	ldr	r3, [r5, #8]
 800fcde:	6928      	ldr	r0, [r5, #16]
 800fce0:	4423      	add	r3, r4
 800fce2:	4420      	add	r0, r4
 800fce4:	1b36      	subs	r6, r6, r4
 800fce6:	60ab      	str	r3, [r5, #8]
 800fce8:	6128      	str	r0, [r5, #16]
 800fcea:	4631      	mov	r1, r6
 800fcec:	2201      	movs	r2, #1
 800fcee:	4628      	mov	r0, r5
 800fcf0:	f7fa ffc2 	bl	800ac78 <ucdr_check_final_buffer_behavior_array>
 800fcf4:	1bb9      	subs	r1, r7, r6
 800fcf6:	4441      	add	r1, r8
 800fcf8:	4604      	mov	r4, r0
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	d1ea      	bne.n	800fcd6 <ucdr_serialize_endian_array_uint8_t+0x16>
 800fd00:	2301      	movs	r3, #1
 800fd02:	7da8      	ldrb	r0, [r5, #22]
 800fd04:	756b      	strb	r3, [r5, #21]
 800fd06:	4058      	eors	r0, r3
 800fd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0c:	463a      	mov	r2, r7
 800fd0e:	68a8      	ldr	r0, [r5, #8]
 800fd10:	4641      	mov	r1, r8
 800fd12:	f001 fe0a 	bl	801192a <memcpy>
 800fd16:	68aa      	ldr	r2, [r5, #8]
 800fd18:	692b      	ldr	r3, [r5, #16]
 800fd1a:	443a      	add	r2, r7
 800fd1c:	443b      	add	r3, r7
 800fd1e:	60aa      	str	r2, [r5, #8]
 800fd20:	612b      	str	r3, [r5, #16]
 800fd22:	e7ed      	b.n	800fd00 <ucdr_serialize_endian_array_uint8_t+0x40>

0800fd24 <ucdr_deserialize_array_uint8_t>:
 800fd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd28:	4688      	mov	r8, r1
 800fd2a:	4611      	mov	r1, r2
 800fd2c:	4617      	mov	r7, r2
 800fd2e:	4605      	mov	r5, r0
 800fd30:	f7fa ff1a 	bl	800ab68 <ucdr_check_buffer_available_for>
 800fd34:	b9e0      	cbnz	r0, 800fd70 <ucdr_deserialize_array_uint8_t+0x4c>
 800fd36:	463e      	mov	r6, r7
 800fd38:	e009      	b.n	800fd4e <ucdr_deserialize_array_uint8_t+0x2a>
 800fd3a:	68a9      	ldr	r1, [r5, #8]
 800fd3c:	f001 fdf5 	bl	801192a <memcpy>
 800fd40:	68aa      	ldr	r2, [r5, #8]
 800fd42:	692b      	ldr	r3, [r5, #16]
 800fd44:	4422      	add	r2, r4
 800fd46:	4423      	add	r3, r4
 800fd48:	1b36      	subs	r6, r6, r4
 800fd4a:	60aa      	str	r2, [r5, #8]
 800fd4c:	612b      	str	r3, [r5, #16]
 800fd4e:	2201      	movs	r2, #1
 800fd50:	4631      	mov	r1, r6
 800fd52:	4628      	mov	r0, r5
 800fd54:	f7fa ff90 	bl	800ac78 <ucdr_check_final_buffer_behavior_array>
 800fd58:	4604      	mov	r4, r0
 800fd5a:	1bb8      	subs	r0, r7, r6
 800fd5c:	4440      	add	r0, r8
 800fd5e:	4622      	mov	r2, r4
 800fd60:	2c00      	cmp	r4, #0
 800fd62:	d1ea      	bne.n	800fd3a <ucdr_deserialize_array_uint8_t+0x16>
 800fd64:	2301      	movs	r3, #1
 800fd66:	7da8      	ldrb	r0, [r5, #22]
 800fd68:	756b      	strb	r3, [r5, #21]
 800fd6a:	4058      	eors	r0, r3
 800fd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd70:	463a      	mov	r2, r7
 800fd72:	68a9      	ldr	r1, [r5, #8]
 800fd74:	4640      	mov	r0, r8
 800fd76:	f001 fdd8 	bl	801192a <memcpy>
 800fd7a:	68aa      	ldr	r2, [r5, #8]
 800fd7c:	692b      	ldr	r3, [r5, #16]
 800fd7e:	443a      	add	r2, r7
 800fd80:	443b      	add	r3, r7
 800fd82:	60aa      	str	r2, [r5, #8]
 800fd84:	612b      	str	r3, [r5, #16]
 800fd86:	e7ed      	b.n	800fd64 <ucdr_deserialize_array_uint8_t+0x40>

0800fd88 <ucdr_deserialize_endian_array_uint8_t>:
 800fd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	461f      	mov	r7, r3
 800fd90:	4605      	mov	r5, r0
 800fd92:	4690      	mov	r8, r2
 800fd94:	f7fa fee8 	bl	800ab68 <ucdr_check_buffer_available_for>
 800fd98:	b9e0      	cbnz	r0, 800fdd4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800fd9a:	463e      	mov	r6, r7
 800fd9c:	e009      	b.n	800fdb2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800fd9e:	68a9      	ldr	r1, [r5, #8]
 800fda0:	f001 fdc3 	bl	801192a <memcpy>
 800fda4:	68ab      	ldr	r3, [r5, #8]
 800fda6:	6928      	ldr	r0, [r5, #16]
 800fda8:	4423      	add	r3, r4
 800fdaa:	4420      	add	r0, r4
 800fdac:	1b36      	subs	r6, r6, r4
 800fdae:	60ab      	str	r3, [r5, #8]
 800fdb0:	6128      	str	r0, [r5, #16]
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	4631      	mov	r1, r6
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	f7fa ff5e 	bl	800ac78 <ucdr_check_final_buffer_behavior_array>
 800fdbc:	4604      	mov	r4, r0
 800fdbe:	1bb8      	subs	r0, r7, r6
 800fdc0:	4440      	add	r0, r8
 800fdc2:	4622      	mov	r2, r4
 800fdc4:	2c00      	cmp	r4, #0
 800fdc6:	d1ea      	bne.n	800fd9e <ucdr_deserialize_endian_array_uint8_t+0x16>
 800fdc8:	2301      	movs	r3, #1
 800fdca:	7da8      	ldrb	r0, [r5, #22]
 800fdcc:	756b      	strb	r3, [r5, #21]
 800fdce:	4058      	eors	r0, r3
 800fdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd4:	463a      	mov	r2, r7
 800fdd6:	68a9      	ldr	r1, [r5, #8]
 800fdd8:	4640      	mov	r0, r8
 800fdda:	f001 fda6 	bl	801192a <memcpy>
 800fdde:	68aa      	ldr	r2, [r5, #8]
 800fde0:	692b      	ldr	r3, [r5, #16]
 800fde2:	443a      	add	r2, r7
 800fde4:	443b      	add	r3, r7
 800fde6:	60aa      	str	r2, [r5, #8]
 800fde8:	612b      	str	r3, [r5, #16]
 800fdea:	e7ed      	b.n	800fdc8 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800fdec <ucdr_serialize_sequence_char>:
 800fdec:	b570      	push	{r4, r5, r6, lr}
 800fdee:	4615      	mov	r5, r2
 800fdf0:	460e      	mov	r6, r1
 800fdf2:	7d01      	ldrb	r1, [r0, #20]
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	f7fa fa0d 	bl	800a214 <ucdr_serialize_endian_uint32_t>
 800fdfa:	b90d      	cbnz	r5, 800fe00 <ucdr_serialize_sequence_char+0x14>
 800fdfc:	2001      	movs	r0, #1
 800fdfe:	bd70      	pop	{r4, r5, r6, pc}
 800fe00:	7d21      	ldrb	r1, [r4, #20]
 800fe02:	462b      	mov	r3, r5
 800fe04:	4632      	mov	r2, r6
 800fe06:	4620      	mov	r0, r4
 800fe08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe0c:	f7ff bec2 	b.w	800fb94 <ucdr_serialize_endian_array_char>

0800fe10 <ucdr_deserialize_sequence_char>:
 800fe10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe14:	461d      	mov	r5, r3
 800fe16:	4616      	mov	r6, r2
 800fe18:	460f      	mov	r7, r1
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	7d01      	ldrb	r1, [r0, #20]
 800fe1e:	4604      	mov	r4, r0
 800fe20:	f7fa fb20 	bl	800a464 <ucdr_deserialize_endian_uint32_t>
 800fe24:	682b      	ldr	r3, [r5, #0]
 800fe26:	429e      	cmp	r6, r3
 800fe28:	bf3c      	itt	cc
 800fe2a:	2201      	movcc	r2, #1
 800fe2c:	75a2      	strbcc	r2, [r4, #22]
 800fe2e:	b913      	cbnz	r3, 800fe36 <ucdr_deserialize_sequence_char+0x26>
 800fe30:	2001      	movs	r0, #1
 800fe32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe36:	7d21      	ldrb	r1, [r4, #20]
 800fe38:	463a      	mov	r2, r7
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe40:	f7ff beda 	b.w	800fbf8 <ucdr_deserialize_endian_array_char>

0800fe44 <ucdr_serialize_sequence_uint8_t>:
 800fe44:	b570      	push	{r4, r5, r6, lr}
 800fe46:	4615      	mov	r5, r2
 800fe48:	460e      	mov	r6, r1
 800fe4a:	7d01      	ldrb	r1, [r0, #20]
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	f7fa f9e1 	bl	800a214 <ucdr_serialize_endian_uint32_t>
 800fe52:	b90d      	cbnz	r5, 800fe58 <ucdr_serialize_sequence_uint8_t+0x14>
 800fe54:	2001      	movs	r0, #1
 800fe56:	bd70      	pop	{r4, r5, r6, pc}
 800fe58:	7d21      	ldrb	r1, [r4, #20]
 800fe5a:	462b      	mov	r3, r5
 800fe5c:	4632      	mov	r2, r6
 800fe5e:	4620      	mov	r0, r4
 800fe60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe64:	f7ff bf2c 	b.w	800fcc0 <ucdr_serialize_endian_array_uint8_t>

0800fe68 <ucdr_deserialize_sequence_uint8_t>:
 800fe68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe6c:	461d      	mov	r5, r3
 800fe6e:	4616      	mov	r6, r2
 800fe70:	460f      	mov	r7, r1
 800fe72:	461a      	mov	r2, r3
 800fe74:	7d01      	ldrb	r1, [r0, #20]
 800fe76:	4604      	mov	r4, r0
 800fe78:	f7fa faf4 	bl	800a464 <ucdr_deserialize_endian_uint32_t>
 800fe7c:	682b      	ldr	r3, [r5, #0]
 800fe7e:	429e      	cmp	r6, r3
 800fe80:	bf3c      	itt	cc
 800fe82:	2201      	movcc	r2, #1
 800fe84:	75a2      	strbcc	r2, [r4, #22]
 800fe86:	b913      	cbnz	r3, 800fe8e <ucdr_deserialize_sequence_uint8_t+0x26>
 800fe88:	2001      	movs	r0, #1
 800fe8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe8e:	7d21      	ldrb	r1, [r4, #20]
 800fe90:	463a      	mov	r2, r7
 800fe92:	4620      	mov	r0, r4
 800fe94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe98:	f7ff bf76 	b.w	800fd88 <ucdr_deserialize_endian_array_uint8_t>

0800fe9c <ucdr_serialize_string>:
 800fe9c:	b510      	push	{r4, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	4604      	mov	r4, r0
 800fea2:	4608      	mov	r0, r1
 800fea4:	9101      	str	r1, [sp, #4]
 800fea6:	f7f0 f9c5 	bl	8000234 <strlen>
 800feaa:	9901      	ldr	r1, [sp, #4]
 800feac:	1c42      	adds	r2, r0, #1
 800feae:	4620      	mov	r0, r4
 800feb0:	b002      	add	sp, #8
 800feb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feb6:	f7ff bf99 	b.w	800fdec <ucdr_serialize_sequence_char>
 800feba:	bf00      	nop

0800febc <ucdr_deserialize_string>:
 800febc:	b500      	push	{lr}
 800febe:	b083      	sub	sp, #12
 800fec0:	ab01      	add	r3, sp, #4
 800fec2:	f7ff ffa5 	bl	800fe10 <ucdr_deserialize_sequence_char>
 800fec6:	b003      	add	sp, #12
 800fec8:	f85d fb04 	ldr.w	pc, [sp], #4

0800fecc <uxr_init_input_best_effort_stream>:
 800fecc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fed0:	8003      	strh	r3, [r0, #0]
 800fed2:	4770      	bx	lr

0800fed4 <uxr_reset_input_best_effort_stream>:
 800fed4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fed8:	8003      	strh	r3, [r0, #0]
 800feda:	4770      	bx	lr

0800fedc <uxr_receive_best_effort_message>:
 800fedc:	b538      	push	{r3, r4, r5, lr}
 800fede:	4604      	mov	r4, r0
 800fee0:	8800      	ldrh	r0, [r0, #0]
 800fee2:	460d      	mov	r5, r1
 800fee4:	f000 fd42 	bl	801096c <uxr_seq_num_cmp>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800fef0:	bfb8      	it	lt
 800fef2:	8025      	strhlt	r5, [r4, #0]
 800fef4:	bd38      	pop	{r3, r4, r5, pc}
 800fef6:	bf00      	nop

0800fef8 <on_full_input_buffer>:
 800fef8:	b570      	push	{r4, r5, r6, lr}
 800fefa:	4605      	mov	r5, r0
 800fefc:	460c      	mov	r4, r1
 800fefe:	682b      	ldr	r3, [r5, #0]
 800ff00:	6809      	ldr	r1, [r1, #0]
 800ff02:	8920      	ldrh	r0, [r4, #8]
 800ff04:	6862      	ldr	r2, [r4, #4]
 800ff06:	fbb2 f2f0 	udiv	r2, r2, r0
 800ff0a:	eba3 0c01 	sub.w	ip, r3, r1
 800ff0e:	fbbc fcf2 	udiv	ip, ip, r2
 800ff12:	f10c 0c01 	add.w	ip, ip, #1
 800ff16:	fa1f f38c 	uxth.w	r3, ip
 800ff1a:	fbb3 f6f0 	udiv	r6, r3, r0
 800ff1e:	fb00 3316 	mls	r3, r0, r6, r3
 800ff22:	b29b      	uxth	r3, r3
 800ff24:	fb02 f303 	mul.w	r3, r2, r3
 800ff28:	1d18      	adds	r0, r3, #4
 800ff2a:	4408      	add	r0, r1
 800ff2c:	7d26      	ldrb	r6, [r4, #20]
 800ff2e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ff32:	b116      	cbz	r6, 800ff3a <on_full_input_buffer+0x42>
 800ff34:	2600      	movs	r6, #0
 800ff36:	f840 6c04 	str.w	r6, [r0, #-4]
 800ff3a:	2a03      	cmp	r2, #3
 800ff3c:	d801      	bhi.n	800ff42 <on_full_input_buffer+0x4a>
 800ff3e:	2001      	movs	r0, #1
 800ff40:	bd70      	pop	{r4, r5, r6, pc}
 800ff42:	3308      	adds	r3, #8
 800ff44:	4419      	add	r1, r3
 800ff46:	4628      	mov	r0, r5
 800ff48:	692b      	ldr	r3, [r5, #16]
 800ff4a:	3a04      	subs	r2, #4
 800ff4c:	f7fa fe58 	bl	800ac00 <ucdr_init_buffer_origin>
 800ff50:	4628      	mov	r0, r5
 800ff52:	4903      	ldr	r1, [pc, #12]	@ (800ff60 <on_full_input_buffer+0x68>)
 800ff54:	4622      	mov	r2, r4
 800ff56:	f7fa fe2f 	bl	800abb8 <ucdr_set_on_full_buffer_callback>
 800ff5a:	2000      	movs	r0, #0
 800ff5c:	bd70      	pop	{r4, r5, r6, pc}
 800ff5e:	bf00      	nop
 800ff60:	0800fef9 	.word	0x0800fef9

0800ff64 <uxr_init_input_reliable_stream>:
 800ff64:	b500      	push	{lr}
 800ff66:	e9c0 1200 	strd	r1, r2, [r0]
 800ff6a:	f04f 0e00 	mov.w	lr, #0
 800ff6e:	9a01      	ldr	r2, [sp, #4]
 800ff70:	8103      	strh	r3, [r0, #8]
 800ff72:	6102      	str	r2, [r0, #16]
 800ff74:	f880 e014 	strb.w	lr, [r0, #20]
 800ff78:	b1d3      	cbz	r3, 800ffb0 <uxr_init_input_reliable_stream+0x4c>
 800ff7a:	f8c1 e000 	str.w	lr, [r1]
 800ff7e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800ff82:	f1bc 0f01 	cmp.w	ip, #1
 800ff86:	d913      	bls.n	800ffb0 <uxr_init_input_reliable_stream+0x4c>
 800ff88:	2301      	movs	r3, #1
 800ff8a:	fbb3 f1fc 	udiv	r1, r3, ip
 800ff8e:	fb0c 3111 	mls	r1, ip, r1, r3
 800ff92:	b289      	uxth	r1, r1
 800ff94:	6842      	ldr	r2, [r0, #4]
 800ff96:	fbb2 f2fc 	udiv	r2, r2, ip
 800ff9a:	fb01 f202 	mul.w	r2, r1, r2
 800ff9e:	6801      	ldr	r1, [r0, #0]
 800ffa0:	f841 e002 	str.w	lr, [r1, r2]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	459c      	cmp	ip, r3
 800ffae:	d8ec      	bhi.n	800ff8a <uxr_init_input_reliable_stream+0x26>
 800ffb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ffb4:	60c3      	str	r3, [r0, #12]
 800ffb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffba:	bf00      	nop

0800ffbc <uxr_reset_input_reliable_stream>:
 800ffbc:	8901      	ldrh	r1, [r0, #8]
 800ffbe:	b1e9      	cbz	r1, 800fffc <uxr_reset_input_reliable_stream+0x40>
 800ffc0:	f04f 0c00 	mov.w	ip, #0
 800ffc4:	b500      	push	{lr}
 800ffc6:	4663      	mov	r3, ip
 800ffc8:	46e6      	mov	lr, ip
 800ffca:	fbb3 f2f1 	udiv	r2, r3, r1
 800ffce:	fb01 3312 	mls	r3, r1, r2, r3
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	6842      	ldr	r2, [r0, #4]
 800ffd6:	fbb2 f2f1 	udiv	r2, r2, r1
 800ffda:	fb02 f303 	mul.w	r3, r2, r3
 800ffde:	6802      	ldr	r2, [r0, #0]
 800ffe0:	f842 e003 	str.w	lr, [r2, r3]
 800ffe4:	f10c 0c01 	add.w	ip, ip, #1
 800ffe8:	8901      	ldrh	r1, [r0, #8]
 800ffea:	fa1f f38c 	uxth.w	r3, ip
 800ffee:	4299      	cmp	r1, r3
 800fff0:	d8eb      	bhi.n	800ffca <uxr_reset_input_reliable_stream+0xe>
 800fff2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fff6:	60c3      	str	r3, [r0, #12]
 800fff8:	f85d fb04 	ldr.w	pc, [sp], #4
 800fffc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010000:	60c3      	str	r3, [r0, #12]
 8010002:	4770      	bx	lr

08010004 <uxr_receive_reliable_message>:
 8010004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010008:	4604      	mov	r4, r0
 801000a:	460d      	mov	r5, r1
 801000c:	8901      	ldrh	r1, [r0, #8]
 801000e:	8980      	ldrh	r0, [r0, #12]
 8010010:	4690      	mov	r8, r2
 8010012:	461f      	mov	r7, r3
 8010014:	f000 fca2 	bl	801095c <uxr_seq_num_add>
 8010018:	4629      	mov	r1, r5
 801001a:	4606      	mov	r6, r0
 801001c:	89a0      	ldrh	r0, [r4, #12]
 801001e:	f000 fca5 	bl	801096c <uxr_seq_num_cmp>
 8010022:	2800      	cmp	r0, #0
 8010024:	db0a      	blt.n	801003c <uxr_receive_reliable_message+0x38>
 8010026:	2600      	movs	r6, #0
 8010028:	89e0      	ldrh	r0, [r4, #14]
 801002a:	4629      	mov	r1, r5
 801002c:	f000 fc9e 	bl	801096c <uxr_seq_num_cmp>
 8010030:	2800      	cmp	r0, #0
 8010032:	da00      	bge.n	8010036 <uxr_receive_reliable_message+0x32>
 8010034:	81e5      	strh	r5, [r4, #14]
 8010036:	4630      	mov	r0, r6
 8010038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801003c:	4630      	mov	r0, r6
 801003e:	4629      	mov	r1, r5
 8010040:	f000 fc94 	bl	801096c <uxr_seq_num_cmp>
 8010044:	2800      	cmp	r0, #0
 8010046:	dbee      	blt.n	8010026 <uxr_receive_reliable_message+0x22>
 8010048:	6923      	ldr	r3, [r4, #16]
 801004a:	4640      	mov	r0, r8
 801004c:	4798      	blx	r3
 801004e:	2101      	movs	r1, #1
 8010050:	4681      	mov	r9, r0
 8010052:	89a0      	ldrh	r0, [r4, #12]
 8010054:	f000 fc82 	bl	801095c <uxr_seq_num_add>
 8010058:	f1b9 0f00 	cmp.w	r9, #0
 801005c:	d101      	bne.n	8010062 <uxr_receive_reliable_message+0x5e>
 801005e:	4285      	cmp	r5, r0
 8010060:	d047      	beq.n	80100f2 <uxr_receive_reliable_message+0xee>
 8010062:	8922      	ldrh	r2, [r4, #8]
 8010064:	fbb5 f0f2 	udiv	r0, r5, r2
 8010068:	fb02 5010 	mls	r0, r2, r0, r5
 801006c:	b280      	uxth	r0, r0
 801006e:	6863      	ldr	r3, [r4, #4]
 8010070:	fbb3 f3f2 	udiv	r3, r3, r2
 8010074:	fb00 f303 	mul.w	r3, r0, r3
 8010078:	6820      	ldr	r0, [r4, #0]
 801007a:	3304      	adds	r3, #4
 801007c:	4418      	add	r0, r3
 801007e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d1cf      	bne.n	8010026 <uxr_receive_reliable_message+0x22>
 8010086:	4641      	mov	r1, r8
 8010088:	463a      	mov	r2, r7
 801008a:	f001 fc4e 	bl	801192a <memcpy>
 801008e:	8921      	ldrh	r1, [r4, #8]
 8010090:	fbb5 f2f1 	udiv	r2, r5, r1
 8010094:	fb01 5212 	mls	r2, r1, r2, r5
 8010098:	b292      	uxth	r2, r2
 801009a:	6863      	ldr	r3, [r4, #4]
 801009c:	fbb3 f3f1 	udiv	r3, r3, r1
 80100a0:	fb02 f303 	mul.w	r3, r2, r3
 80100a4:	6822      	ldr	r2, [r4, #0]
 80100a6:	50d7      	str	r7, [r2, r3]
 80100a8:	9a08      	ldr	r2, [sp, #32]
 80100aa:	2301      	movs	r3, #1
 80100ac:	7013      	strb	r3, [r2, #0]
 80100ae:	f1b9 0f00 	cmp.w	r9, #0
 80100b2:	d0b8      	beq.n	8010026 <uxr_receive_reliable_message+0x22>
 80100b4:	89a6      	ldrh	r6, [r4, #12]
 80100b6:	4630      	mov	r0, r6
 80100b8:	2101      	movs	r1, #1
 80100ba:	f000 fc4f 	bl	801095c <uxr_seq_num_add>
 80100be:	8922      	ldrh	r2, [r4, #8]
 80100c0:	6863      	ldr	r3, [r4, #4]
 80100c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80100c6:	4606      	mov	r6, r0
 80100c8:	fbb0 f0f2 	udiv	r0, r0, r2
 80100cc:	fb02 6010 	mls	r0, r2, r0, r6
 80100d0:	b280      	uxth	r0, r0
 80100d2:	fb00 f303 	mul.w	r3, r0, r3
 80100d6:	6820      	ldr	r0, [r4, #0]
 80100d8:	3304      	adds	r3, #4
 80100da:	4418      	add	r0, r3
 80100dc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d0a0      	beq.n	8010026 <uxr_receive_reliable_message+0x22>
 80100e4:	6923      	ldr	r3, [r4, #16]
 80100e6:	4798      	blx	r3
 80100e8:	2802      	cmp	r0, #2
 80100ea:	d008      	beq.n	80100fe <uxr_receive_reliable_message+0xfa>
 80100ec:	2801      	cmp	r0, #1
 80100ee:	d0e2      	beq.n	80100b6 <uxr_receive_reliable_message+0xb2>
 80100f0:	e799      	b.n	8010026 <uxr_receive_reliable_message+0x22>
 80100f2:	9b08      	ldr	r3, [sp, #32]
 80100f4:	81a5      	strh	r5, [r4, #12]
 80100f6:	2601      	movs	r6, #1
 80100f8:	f883 9000 	strb.w	r9, [r3]
 80100fc:	e794      	b.n	8010028 <uxr_receive_reliable_message+0x24>
 80100fe:	2601      	movs	r6, #1
 8010100:	e792      	b.n	8010028 <uxr_receive_reliable_message+0x24>
 8010102:	bf00      	nop

08010104 <uxr_next_input_reliable_buffer_available>:
 8010104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010108:	4604      	mov	r4, r0
 801010a:	460f      	mov	r7, r1
 801010c:	8980      	ldrh	r0, [r0, #12]
 801010e:	2101      	movs	r1, #1
 8010110:	4690      	mov	r8, r2
 8010112:	f000 fc23 	bl	801095c <uxr_seq_num_add>
 8010116:	8922      	ldrh	r2, [r4, #8]
 8010118:	fbb0 f6f2 	udiv	r6, r0, r2
 801011c:	fb02 0616 	mls	r6, r2, r6, r0
 8010120:	b2b6      	uxth	r6, r6
 8010122:	6863      	ldr	r3, [r4, #4]
 8010124:	fbb3 f3f2 	udiv	r3, r3, r2
 8010128:	fb06 f303 	mul.w	r3, r6, r3
 801012c:	6826      	ldr	r6, [r4, #0]
 801012e:	3304      	adds	r3, #4
 8010130:	441e      	add	r6, r3
 8010132:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8010136:	f1b9 0f00 	cmp.w	r9, #0
 801013a:	d023      	beq.n	8010184 <uxr_next_input_reliable_buffer_available+0x80>
 801013c:	6923      	ldr	r3, [r4, #16]
 801013e:	4605      	mov	r5, r0
 8010140:	4630      	mov	r0, r6
 8010142:	4798      	blx	r3
 8010144:	4682      	mov	sl, r0
 8010146:	b300      	cbz	r0, 801018a <uxr_next_input_reliable_buffer_available+0x86>
 8010148:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801014c:	2101      	movs	r1, #1
 801014e:	4650      	mov	r0, sl
 8010150:	f000 fc04 	bl	801095c <uxr_seq_num_add>
 8010154:	8921      	ldrh	r1, [r4, #8]
 8010156:	fbb0 f2f1 	udiv	r2, r0, r1
 801015a:	4682      	mov	sl, r0
 801015c:	fb01 0212 	mls	r2, r1, r2, r0
 8010160:	e9d4 0300 	ldrd	r0, r3, [r4]
 8010164:	b292      	uxth	r2, r2
 8010166:	fbb3 f3f1 	udiv	r3, r3, r1
 801016a:	fb02 f303 	mul.w	r3, r2, r3
 801016e:	3304      	adds	r3, #4
 8010170:	4418      	add	r0, r3
 8010172:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010176:	b12b      	cbz	r3, 8010184 <uxr_next_input_reliable_buffer_available+0x80>
 8010178:	6923      	ldr	r3, [r4, #16]
 801017a:	4798      	blx	r3
 801017c:	2802      	cmp	r0, #2
 801017e:	d01b      	beq.n	80101b8 <uxr_next_input_reliable_buffer_available+0xb4>
 8010180:	2801      	cmp	r0, #1
 8010182:	d0e3      	beq.n	801014c <uxr_next_input_reliable_buffer_available+0x48>
 8010184:	2000      	movs	r0, #0
 8010186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801018a:	464a      	mov	r2, r9
 801018c:	4631      	mov	r1, r6
 801018e:	4638      	mov	r0, r7
 8010190:	f7fa fd3e 	bl	800ac10 <ucdr_init_buffer>
 8010194:	8921      	ldrh	r1, [r4, #8]
 8010196:	fbb5 f2f1 	udiv	r2, r5, r1
 801019a:	fb01 5212 	mls	r2, r1, r2, r5
 801019e:	b292      	uxth	r2, r2
 80101a0:	6863      	ldr	r3, [r4, #4]
 80101a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80101a6:	fb02 f303 	mul.w	r3, r2, r3
 80101aa:	6822      	ldr	r2, [r4, #0]
 80101ac:	f842 a003 	str.w	sl, [r2, r3]
 80101b0:	2001      	movs	r0, #1
 80101b2:	81a5      	strh	r5, [r4, #12]
 80101b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101b8:	8920      	ldrh	r0, [r4, #8]
 80101ba:	fbb5 f3f0 	udiv	r3, r5, r0
 80101be:	fb00 5513 	mls	r5, r0, r3, r5
 80101c2:	b2ad      	uxth	r5, r5
 80101c4:	6863      	ldr	r3, [r4, #4]
 80101c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80101ca:	fb03 f505 	mul.w	r5, r3, r5
 80101ce:	6823      	ldr	r3, [r4, #0]
 80101d0:	2000      	movs	r0, #0
 80101d2:	5158      	str	r0, [r3, r5]
 80101d4:	eb06 0108 	add.w	r1, r6, r8
 80101d8:	eba9 0208 	sub.w	r2, r9, r8
 80101dc:	4638      	mov	r0, r7
 80101de:	f7fa fd17 	bl	800ac10 <ucdr_init_buffer>
 80101e2:	4638      	mov	r0, r7
 80101e4:	4903      	ldr	r1, [pc, #12]	@ (80101f4 <uxr_next_input_reliable_buffer_available+0xf0>)
 80101e6:	4622      	mov	r2, r4
 80101e8:	f7fa fce6 	bl	800abb8 <ucdr_set_on_full_buffer_callback>
 80101ec:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80101f0:	2001      	movs	r0, #1
 80101f2:	e7c8      	b.n	8010186 <uxr_next_input_reliable_buffer_available+0x82>
 80101f4:	0800fef9 	.word	0x0800fef9

080101f8 <uxr_process_heartbeat>:
 80101f8:	b538      	push	{r3, r4, r5, lr}
 80101fa:	4611      	mov	r1, r2
 80101fc:	4604      	mov	r4, r0
 80101fe:	89c0      	ldrh	r0, [r0, #14]
 8010200:	4615      	mov	r5, r2
 8010202:	f000 fbb3 	bl	801096c <uxr_seq_num_cmp>
 8010206:	2800      	cmp	r0, #0
 8010208:	bfb8      	it	lt
 801020a:	81e5      	strhlt	r5, [r4, #14]
 801020c:	bd38      	pop	{r3, r4, r5, pc}
 801020e:	bf00      	nop

08010210 <uxr_compute_acknack>:
 8010210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010214:	8903      	ldrh	r3, [r0, #8]
 8010216:	8985      	ldrh	r5, [r0, #12]
 8010218:	4604      	mov	r4, r0
 801021a:	460e      	mov	r6, r1
 801021c:	b1d3      	cbz	r3, 8010254 <uxr_compute_acknack+0x44>
 801021e:	4628      	mov	r0, r5
 8010220:	2701      	movs	r7, #1
 8010222:	e003      	b.n	801022c <uxr_compute_acknack+0x1c>
 8010224:	4567      	cmp	r7, ip
 8010226:	d215      	bcs.n	8010254 <uxr_compute_acknack+0x44>
 8010228:	89a0      	ldrh	r0, [r4, #12]
 801022a:	3701      	adds	r7, #1
 801022c:	b2b9      	uxth	r1, r7
 801022e:	f000 fb95 	bl	801095c <uxr_seq_num_add>
 8010232:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010236:	fbb0 f3fc 	udiv	r3, r0, ip
 801023a:	fb0c 0313 	mls	r3, ip, r3, r0
 801023e:	b29a      	uxth	r2, r3
 8010240:	e9d4 1300 	ldrd	r1, r3, [r4]
 8010244:	fbb3 f3fc 	udiv	r3, r3, ip
 8010248:	fb02 f303 	mul.w	r3, r2, r3
 801024c:	58cb      	ldr	r3, [r1, r3]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1e8      	bne.n	8010224 <uxr_compute_acknack+0x14>
 8010252:	4605      	mov	r5, r0
 8010254:	8035      	strh	r5, [r6, #0]
 8010256:	2101      	movs	r1, #1
 8010258:	4628      	mov	r0, r5
 801025a:	89e7      	ldrh	r7, [r4, #14]
 801025c:	f000 fb82 	bl	8010964 <uxr_seq_num_sub>
 8010260:	4601      	mov	r1, r0
 8010262:	4638      	mov	r0, r7
 8010264:	f000 fb7e 	bl	8010964 <uxr_seq_num_sub>
 8010268:	4605      	mov	r5, r0
 801026a:	b318      	cbz	r0, 80102b4 <uxr_compute_acknack+0xa4>
 801026c:	f04f 0900 	mov.w	r9, #0
 8010270:	464f      	mov	r7, r9
 8010272:	f04f 0801 	mov.w	r8, #1
 8010276:	fa1f f189 	uxth.w	r1, r9
 801027a:	8830      	ldrh	r0, [r6, #0]
 801027c:	f000 fb6e 	bl	801095c <uxr_seq_num_add>
 8010280:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010284:	fbb0 f3fc 	udiv	r3, r0, ip
 8010288:	e9d4 1200 	ldrd	r1, r2, [r4]
 801028c:	fb03 001c 	mls	r0, r3, ip, r0
 8010290:	b283      	uxth	r3, r0
 8010292:	fbb2 f2fc 	udiv	r2, r2, ip
 8010296:	fb02 f303 	mul.w	r3, r2, r3
 801029a:	fa08 f209 	lsl.w	r2, r8, r9
 801029e:	58cb      	ldr	r3, [r1, r3]
 80102a0:	f109 0901 	add.w	r9, r9, #1
 80102a4:	b90b      	cbnz	r3, 80102aa <uxr_compute_acknack+0x9a>
 80102a6:	4317      	orrs	r7, r2
 80102a8:	b2bf      	uxth	r7, r7
 80102aa:	454d      	cmp	r5, r9
 80102ac:	d1e3      	bne.n	8010276 <uxr_compute_acknack+0x66>
 80102ae:	4638      	mov	r0, r7
 80102b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102b4:	4607      	mov	r7, r0
 80102b6:	4638      	mov	r0, r7
 80102b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080102bc <uxr_init_output_best_effort_stream>:
 80102bc:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80102c0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80102c4:	6001      	str	r1, [r0, #0]
 80102c6:	7303      	strb	r3, [r0, #12]
 80102c8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop

080102d0 <uxr_reset_output_best_effort_stream>:
 80102d0:	7b02      	ldrb	r2, [r0, #12]
 80102d2:	6042      	str	r2, [r0, #4]
 80102d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80102d8:	81c3      	strh	r3, [r0, #14]
 80102da:	4770      	bx	lr

080102dc <uxr_prepare_best_effort_buffer_to_write>:
 80102dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102de:	4604      	mov	r4, r0
 80102e0:	b083      	sub	sp, #12
 80102e2:	6840      	ldr	r0, [r0, #4]
 80102e4:	460d      	mov	r5, r1
 80102e6:	4616      	mov	r6, r2
 80102e8:	f7fc fea6 	bl	800d038 <uxr_submessage_padding>
 80102ec:	6863      	ldr	r3, [r4, #4]
 80102ee:	4418      	add	r0, r3
 80102f0:	68a3      	ldr	r3, [r4, #8]
 80102f2:	1942      	adds	r2, r0, r5
 80102f4:	4293      	cmp	r3, r2
 80102f6:	bf2c      	ite	cs
 80102f8:	2701      	movcs	r7, #1
 80102fa:	2700      	movcc	r7, #0
 80102fc:	d202      	bcs.n	8010304 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80102fe:	4638      	mov	r0, r7
 8010300:	b003      	add	sp, #12
 8010302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010304:	9000      	str	r0, [sp, #0]
 8010306:	6821      	ldr	r1, [r4, #0]
 8010308:	4630      	mov	r0, r6
 801030a:	2300      	movs	r3, #0
 801030c:	f7fa fc6e 	bl	800abec <ucdr_init_buffer_origin_offset>
 8010310:	6861      	ldr	r1, [r4, #4]
 8010312:	4638      	mov	r0, r7
 8010314:	4429      	add	r1, r5
 8010316:	6061      	str	r1, [r4, #4]
 8010318:	b003      	add	sp, #12
 801031a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801031c <uxr_prepare_best_effort_buffer_to_send>:
 801031c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010320:	4604      	mov	r4, r0
 8010322:	461d      	mov	r5, r3
 8010324:	6840      	ldr	r0, [r0, #4]
 8010326:	7b23      	ldrb	r3, [r4, #12]
 8010328:	4298      	cmp	r0, r3
 801032a:	bf8c      	ite	hi
 801032c:	2601      	movhi	r6, #1
 801032e:	2600      	movls	r6, #0
 8010330:	d802      	bhi.n	8010338 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8010332:	4630      	mov	r0, r6
 8010334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010338:	4688      	mov	r8, r1
 801033a:	89e0      	ldrh	r0, [r4, #14]
 801033c:	2101      	movs	r1, #1
 801033e:	4617      	mov	r7, r2
 8010340:	f000 fb0c 	bl	801095c <uxr_seq_num_add>
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	81e0      	strh	r0, [r4, #14]
 8010348:	8028      	strh	r0, [r5, #0]
 801034a:	f8c8 3000 	str.w	r3, [r8]
 801034e:	6863      	ldr	r3, [r4, #4]
 8010350:	603b      	str	r3, [r7, #0]
 8010352:	7b23      	ldrb	r3, [r4, #12]
 8010354:	6063      	str	r3, [r4, #4]
 8010356:	4630      	mov	r0, r6
 8010358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801035c <on_full_output_buffer>:
 801035c:	b538      	push	{r3, r4, r5, lr}
 801035e:	6802      	ldr	r2, [r0, #0]
 8010360:	460c      	mov	r4, r1
 8010362:	6809      	ldr	r1, [r1, #0]
 8010364:	8923      	ldrh	r3, [r4, #8]
 8010366:	eba2 0c01 	sub.w	ip, r2, r1
 801036a:	6862      	ldr	r2, [r4, #4]
 801036c:	fbb2 f2f3 	udiv	r2, r2, r3
 8010370:	fbbc fcf2 	udiv	ip, ip, r2
 8010374:	f10c 0c01 	add.w	ip, ip, #1
 8010378:	fa1f fc8c 	uxth.w	ip, ip
 801037c:	fbbc fef3 	udiv	lr, ip, r3
 8010380:	fb03 c31e 	mls	r3, r3, lr, ip
 8010384:	b29b      	uxth	r3, r3
 8010386:	fb02 f303 	mul.w	r3, r2, r3
 801038a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801038e:	58ca      	ldr	r2, [r1, r3]
 8010390:	4463      	add	r3, ip
 8010392:	eba2 020c 	sub.w	r2, r2, ip
 8010396:	3308      	adds	r3, #8
 8010398:	4605      	mov	r5, r0
 801039a:	4419      	add	r1, r3
 801039c:	3a04      	subs	r2, #4
 801039e:	6903      	ldr	r3, [r0, #16]
 80103a0:	f7fa fc2e 	bl	800ac00 <ucdr_init_buffer_origin>
 80103a4:	4628      	mov	r0, r5
 80103a6:	4903      	ldr	r1, [pc, #12]	@ (80103b4 <on_full_output_buffer+0x58>)
 80103a8:	4622      	mov	r2, r4
 80103aa:	f7fa fc05 	bl	800abb8 <ucdr_set_on_full_buffer_callback>
 80103ae:	2000      	movs	r0, #0
 80103b0:	bd38      	pop	{r3, r4, r5, pc}
 80103b2:	bf00      	nop
 80103b4:	0801035d 	.word	0x0801035d

080103b8 <uxr_init_output_reliable_stream>:
 80103b8:	b410      	push	{r4}
 80103ba:	f89d c004 	ldrb.w	ip, [sp, #4]
 80103be:	8103      	strh	r3, [r0, #8]
 80103c0:	e9c0 1200 	strd	r1, r2, [r0]
 80103c4:	f880 c00c 	strb.w	ip, [r0, #12]
 80103c8:	b1d3      	cbz	r3, 8010400 <uxr_init_output_reliable_stream+0x48>
 80103ca:	f8c1 c000 	str.w	ip, [r1]
 80103ce:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80103d2:	f1bc 0f01 	cmp.w	ip, #1
 80103d6:	d913      	bls.n	8010400 <uxr_init_output_reliable_stream+0x48>
 80103d8:	2301      	movs	r3, #1
 80103da:	fbb3 f1fc 	udiv	r1, r3, ip
 80103de:	fb0c 3111 	mls	r1, ip, r1, r3
 80103e2:	b289      	uxth	r1, r1
 80103e4:	6842      	ldr	r2, [r0, #4]
 80103e6:	6804      	ldr	r4, [r0, #0]
 80103e8:	fbb2 f2fc 	udiv	r2, r2, ip
 80103ec:	fb01 f202 	mul.w	r2, r1, r2
 80103f0:	7b01      	ldrb	r1, [r0, #12]
 80103f2:	50a1      	str	r1, [r4, r2]
 80103f4:	3301      	adds	r3, #1
 80103f6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	459c      	cmp	ip, r3
 80103fe:	d8ec      	bhi.n	80103da <uxr_init_output_reliable_stream+0x22>
 8010400:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010404:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010408:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801040c:	4905      	ldr	r1, [pc, #20]	@ (8010424 <uxr_init_output_reliable_stream+0x6c>)
 801040e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010412:	f8c0 100e 	str.w	r1, [r0, #14]
 8010416:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801041a:	2300      	movs	r3, #0
 801041c:	8242      	strh	r2, [r0, #18]
 801041e:	8403      	strh	r3, [r0, #32]
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	ffff0000 	.word	0xffff0000

08010428 <uxr_reset_output_reliable_stream>:
 8010428:	8901      	ldrh	r1, [r0, #8]
 801042a:	b1b1      	cbz	r1, 801045a <uxr_reset_output_reliable_stream+0x32>
 801042c:	f04f 0c00 	mov.w	ip, #0
 8010430:	4663      	mov	r3, ip
 8010432:	fbb3 f2f1 	udiv	r2, r3, r1
 8010436:	fb01 3312 	mls	r3, r1, r2, r3
 801043a:	b29b      	uxth	r3, r3
 801043c:	6842      	ldr	r2, [r0, #4]
 801043e:	fbb2 f2f1 	udiv	r2, r2, r1
 8010442:	6801      	ldr	r1, [r0, #0]
 8010444:	fb02 f303 	mul.w	r3, r2, r3
 8010448:	7b02      	ldrb	r2, [r0, #12]
 801044a:	50ca      	str	r2, [r1, r3]
 801044c:	f10c 0c01 	add.w	ip, ip, #1
 8010450:	8901      	ldrh	r1, [r0, #8]
 8010452:	fa1f f38c 	uxth.w	r3, ip
 8010456:	4299      	cmp	r1, r3
 8010458:	d8eb      	bhi.n	8010432 <uxr_reset_output_reliable_stream+0xa>
 801045a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801045e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010462:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8010466:	4904      	ldr	r1, [pc, #16]	@ (8010478 <uxr_reset_output_reliable_stream+0x50>)
 8010468:	f8c0 100e 	str.w	r1, [r0, #14]
 801046c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010470:	2300      	movs	r3, #0
 8010472:	8242      	strh	r2, [r0, #18]
 8010474:	8403      	strh	r3, [r0, #32]
 8010476:	4770      	bx	lr
 8010478:	ffff0000 	.word	0xffff0000

0801047c <uxr_prepare_reliable_buffer_to_write>:
 801047c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010480:	4604      	mov	r4, r0
 8010482:	b091      	sub	sp, #68	@ 0x44
 8010484:	8900      	ldrh	r0, [r0, #8]
 8010486:	89e6      	ldrh	r6, [r4, #14]
 8010488:	6823      	ldr	r3, [r4, #0]
 801048a:	9204      	str	r2, [sp, #16]
 801048c:	fbb6 f2f0 	udiv	r2, r6, r0
 8010490:	fb00 6212 	mls	r2, r0, r2, r6
 8010494:	b292      	uxth	r2, r2
 8010496:	6865      	ldr	r5, [r4, #4]
 8010498:	fbb5 f5f0 	udiv	r5, r5, r0
 801049c:	fb05 3202 	mla	r2, r5, r2, r3
 80104a0:	3204      	adds	r2, #4
 80104a2:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80104a6:	f894 900c 	ldrb.w	r9, [r4, #12]
 80104aa:	9203      	str	r2, [sp, #12]
 80104ac:	468b      	mov	fp, r1
 80104ae:	1f2f      	subs	r7, r5, #4
 80104b0:	2800      	cmp	r0, #0
 80104b2:	f000 814c 	beq.w	801074e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80104b6:	f04f 0c00 	mov.w	ip, #0
 80104ba:	46e2      	mov	sl, ip
 80104bc:	4661      	mov	r1, ip
 80104be:	fbb1 f2f0 	udiv	r2, r1, r0
 80104c2:	fb00 1212 	mls	r2, r0, r2, r1
 80104c6:	b292      	uxth	r2, r2
 80104c8:	fb05 f202 	mul.w	r2, r5, r2
 80104cc:	f10c 0c01 	add.w	ip, ip, #1
 80104d0:	589a      	ldr	r2, [r3, r2]
 80104d2:	454a      	cmp	r2, r9
 80104d4:	bf08      	it	eq
 80104d6:	f10a 0a01 	addeq.w	sl, sl, #1
 80104da:	fa1f f18c 	uxth.w	r1, ip
 80104de:	bf08      	it	eq
 80104e0:	fa1f fa8a 	uxtheq.w	sl, sl
 80104e4:	4281      	cmp	r1, r0
 80104e6:	d3ea      	bcc.n	80104be <uxr_prepare_reliable_buffer_to_write+0x42>
 80104e8:	4640      	mov	r0, r8
 80104ea:	2104      	movs	r1, #4
 80104ec:	f8cd a014 	str.w	sl, [sp, #20]
 80104f0:	f7fa fb92 	bl	800ac18 <ucdr_alignment>
 80104f4:	4480      	add	r8, r0
 80104f6:	eb08 020b 	add.w	r2, r8, fp
 80104fa:	42ba      	cmp	r2, r7
 80104fc:	f240 80cd 	bls.w	801069a <uxr_prepare_reliable_buffer_to_write+0x21e>
 8010500:	7b22      	ldrb	r2, [r4, #12]
 8010502:	445a      	add	r2, fp
 8010504:	42ba      	cmp	r2, r7
 8010506:	f240 80b5 	bls.w	8010674 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801050a:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801050e:	33fc      	adds	r3, #252	@ 0xfc
 8010510:	b2ba      	uxth	r2, r7
 8010512:	4413      	add	r3, r2
 8010514:	b29b      	uxth	r3, r3
 8010516:	fb0a f903 	mul.w	r9, sl, r3
 801051a:	45d9      	cmp	r9, fp
 801051c:	9305      	str	r3, [sp, #20]
 801051e:	9306      	str	r3, [sp, #24]
 8010520:	f0c0 80b7 	bcc.w	8010692 <uxr_prepare_reliable_buffer_to_write+0x216>
 8010524:	f108 0304 	add.w	r3, r8, #4
 8010528:	42bb      	cmp	r3, r7
 801052a:	f080 80db 	bcs.w	80106e4 <uxr_prepare_reliable_buffer_to_write+0x268>
 801052e:	f1a2 0904 	sub.w	r9, r2, #4
 8010532:	eba9 0908 	sub.w	r9, r9, r8
 8010536:	9b05      	ldr	r3, [sp, #20]
 8010538:	fa1f f989 	uxth.w	r9, r9
 801053c:	ebab 0b09 	sub.w	fp, fp, r9
 8010540:	fbbb f2f3 	udiv	r2, fp, r3
 8010544:	fb03 b312 	mls	r3, r3, r2, fp
 8010548:	2b00      	cmp	r3, #0
 801054a:	f000 80c8 	beq.w	80106de <uxr_prepare_reliable_buffer_to_write+0x262>
 801054e:	3201      	adds	r2, #1
 8010550:	b292      	uxth	r2, r2
 8010552:	9306      	str	r3, [sp, #24]
 8010554:	4552      	cmp	r2, sl
 8010556:	f200 809c 	bhi.w	8010692 <uxr_prepare_reliable_buffer_to_write+0x216>
 801055a:	f10d 0b20 	add.w	fp, sp, #32
 801055e:	2a00      	cmp	r2, #0
 8010560:	d042      	beq.n	80105e8 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8010562:	f8cd 801c 	str.w	r8, [sp, #28]
 8010566:	f04f 0a00 	mov.w	sl, #0
 801056a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801056e:	9505      	str	r5, [sp, #20]
 8010570:	f10d 0b20 	add.w	fp, sp, #32
 8010574:	4615      	mov	r5, r2
 8010576:	e000      	b.n	801057a <uxr_prepare_reliable_buffer_to_write+0xfe>
 8010578:	46c1      	mov	r9, r8
 801057a:	8920      	ldrh	r0, [r4, #8]
 801057c:	fbb6 f2f0 	udiv	r2, r6, r0
 8010580:	fb00 6112 	mls	r1, r0, r2, r6
 8010584:	b28a      	uxth	r2, r1
 8010586:	6863      	ldr	r3, [r4, #4]
 8010588:	fbb3 f1f0 	udiv	r1, r3, r0
 801058c:	6823      	ldr	r3, [r4, #0]
 801058e:	fb02 f101 	mul.w	r1, r2, r1
 8010592:	3104      	adds	r1, #4
 8010594:	4419      	add	r1, r3
 8010596:	4658      	mov	r0, fp
 8010598:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801059c:	9200      	str	r2, [sp, #0]
 801059e:	2300      	movs	r3, #0
 80105a0:	463a      	mov	r2, r7
 80105a2:	f7fa fb23 	bl	800abec <ucdr_init_buffer_origin_offset>
 80105a6:	464a      	mov	r2, r9
 80105a8:	2300      	movs	r3, #0
 80105aa:	210d      	movs	r1, #13
 80105ac:	4658      	mov	r0, fp
 80105ae:	f7fc fd03 	bl	800cfb8 <uxr_buffer_submessage_header>
 80105b2:	8921      	ldrh	r1, [r4, #8]
 80105b4:	fbb6 f2f1 	udiv	r2, r6, r1
 80105b8:	fb01 6212 	mls	r2, r1, r2, r6
 80105bc:	b292      	uxth	r2, r2
 80105be:	6863      	ldr	r3, [r4, #4]
 80105c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80105c4:	fb02 f303 	mul.w	r3, r2, r3
 80105c8:	6822      	ldr	r2, [r4, #0]
 80105ca:	4630      	mov	r0, r6
 80105cc:	50d7      	str	r7, [r2, r3]
 80105ce:	2101      	movs	r1, #1
 80105d0:	f000 f9c4 	bl	801095c <uxr_seq_num_add>
 80105d4:	f10a 0a01 	add.w	sl, sl, #1
 80105d8:	fa1f f38a 	uxth.w	r3, sl
 80105dc:	429d      	cmp	r5, r3
 80105de:	4606      	mov	r6, r0
 80105e0:	d8ca      	bhi.n	8010578 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80105e2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80105e6:	9d05      	ldr	r5, [sp, #20]
 80105e8:	8920      	ldrh	r0, [r4, #8]
 80105ea:	fbb6 f3f0 	udiv	r3, r6, r0
 80105ee:	fb00 6313 	mls	r3, r0, r3, r6
 80105f2:	b299      	uxth	r1, r3
 80105f4:	6863      	ldr	r3, [r4, #4]
 80105f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80105fa:	fb01 f303 	mul.w	r3, r1, r3
 80105fe:	6821      	ldr	r1, [r4, #0]
 8010600:	3304      	adds	r3, #4
 8010602:	4419      	add	r1, r3
 8010604:	463a      	mov	r2, r7
 8010606:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801060a:	9000      	str	r0, [sp, #0]
 801060c:	2300      	movs	r3, #0
 801060e:	4658      	mov	r0, fp
 8010610:	f7fa faec 	bl	800abec <ucdr_init_buffer_origin_offset>
 8010614:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8010618:	4658      	mov	r0, fp
 801061a:	fa1f f289 	uxth.w	r2, r9
 801061e:	2302      	movs	r3, #2
 8010620:	210d      	movs	r1, #13
 8010622:	f7fc fcc9 	bl	800cfb8 <uxr_buffer_submessage_header>
 8010626:	9b03      	ldr	r3, [sp, #12]
 8010628:	8927      	ldrh	r7, [r4, #8]
 801062a:	7b20      	ldrb	r0, [r4, #12]
 801062c:	f108 0104 	add.w	r1, r8, #4
 8010630:	440b      	add	r3, r1
 8010632:	4619      	mov	r1, r3
 8010634:	fbb6 f3f7 	udiv	r3, r6, r7
 8010638:	fb07 6313 	mls	r3, r7, r3, r6
 801063c:	f1a5 0208 	sub.w	r2, r5, #8
 8010640:	b29d      	uxth	r5, r3
 8010642:	3004      	adds	r0, #4
 8010644:	6863      	ldr	r3, [r4, #4]
 8010646:	fbb3 f3f7 	udiv	r3, r3, r7
 801064a:	fb05 f303 	mul.w	r3, r5, r3
 801064e:	6825      	ldr	r5, [r4, #0]
 8010650:	4448      	add	r0, r9
 8010652:	50e8      	str	r0, [r5, r3]
 8010654:	9d04      	ldr	r5, [sp, #16]
 8010656:	eba2 0208 	sub.w	r2, r2, r8
 801065a:	4628      	mov	r0, r5
 801065c:	f7fa fad8 	bl	800ac10 <ucdr_init_buffer>
 8010660:	4628      	mov	r0, r5
 8010662:	493c      	ldr	r1, [pc, #240]	@ (8010754 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8010664:	4622      	mov	r2, r4
 8010666:	f7fa faa7 	bl	800abb8 <ucdr_set_on_full_buffer_callback>
 801066a:	2001      	movs	r0, #1
 801066c:	81e6      	strh	r6, [r4, #14]
 801066e:	b011      	add	sp, #68	@ 0x44
 8010670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010674:	2101      	movs	r1, #1
 8010676:	89e0      	ldrh	r0, [r4, #14]
 8010678:	f000 f970 	bl	801095c <uxr_seq_num_add>
 801067c:	8921      	ldrh	r1, [r4, #8]
 801067e:	4605      	mov	r5, r0
 8010680:	8a60      	ldrh	r0, [r4, #18]
 8010682:	f000 f96b 	bl	801095c <uxr_seq_num_add>
 8010686:	4601      	mov	r1, r0
 8010688:	4628      	mov	r0, r5
 801068a:	f000 f96f 	bl	801096c <uxr_seq_num_cmp>
 801068e:	2800      	cmp	r0, #0
 8010690:	dd42      	ble.n	8010718 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8010692:	2000      	movs	r0, #0
 8010694:	b011      	add	sp, #68	@ 0x44
 8010696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801069a:	8921      	ldrh	r1, [r4, #8]
 801069c:	8a60      	ldrh	r0, [r4, #18]
 801069e:	9205      	str	r2, [sp, #20]
 80106a0:	f000 f95c 	bl	801095c <uxr_seq_num_add>
 80106a4:	4601      	mov	r1, r0
 80106a6:	4630      	mov	r0, r6
 80106a8:	f000 f960 	bl	801096c <uxr_seq_num_cmp>
 80106ac:	2800      	cmp	r0, #0
 80106ae:	9a05      	ldr	r2, [sp, #20]
 80106b0:	dcef      	bgt.n	8010692 <uxr_prepare_reliable_buffer_to_write+0x216>
 80106b2:	8927      	ldrh	r7, [r4, #8]
 80106b4:	fbb6 f3f7 	udiv	r3, r6, r7
 80106b8:	fb07 6313 	mls	r3, r7, r3, r6
 80106bc:	b29d      	uxth	r5, r3
 80106be:	6863      	ldr	r3, [r4, #4]
 80106c0:	6824      	ldr	r4, [r4, #0]
 80106c2:	fbb3 f3f7 	udiv	r3, r3, r7
 80106c6:	fb05 f303 	mul.w	r3, r5, r3
 80106ca:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80106ce:	50e2      	str	r2, [r4, r3]
 80106d0:	2300      	movs	r3, #0
 80106d2:	f8cd 8000 	str.w	r8, [sp]
 80106d6:	f7fa fa89 	bl	800abec <ucdr_init_buffer_origin_offset>
 80106da:	2001      	movs	r0, #1
 80106dc:	e7da      	b.n	8010694 <uxr_prepare_reliable_buffer_to_write+0x218>
 80106de:	b293      	uxth	r3, r2
 80106e0:	461a      	mov	r2, r3
 80106e2:	e737      	b.n	8010554 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80106e4:	4630      	mov	r0, r6
 80106e6:	2101      	movs	r1, #1
 80106e8:	9207      	str	r2, [sp, #28]
 80106ea:	f000 f937 	bl	801095c <uxr_seq_num_add>
 80106ee:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80106f2:	fbb0 f1fc 	udiv	r1, r0, ip
 80106f6:	fb0c 0111 	mls	r1, ip, r1, r0
 80106fa:	4606      	mov	r6, r0
 80106fc:	b288      	uxth	r0, r1
 80106fe:	6863      	ldr	r3, [r4, #4]
 8010700:	fbb3 f1fc 	udiv	r1, r3, ip
 8010704:	6823      	ldr	r3, [r4, #0]
 8010706:	9a07      	ldr	r2, [sp, #28]
 8010708:	fb00 f101 	mul.w	r1, r0, r1
 801070c:	3104      	adds	r1, #4
 801070e:	440b      	add	r3, r1
 8010710:	9303      	str	r3, [sp, #12]
 8010712:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8010716:	e70a      	b.n	801052e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8010718:	8921      	ldrh	r1, [r4, #8]
 801071a:	fbb5 f3f1 	udiv	r3, r5, r1
 801071e:	fb01 5313 	mls	r3, r1, r3, r5
 8010722:	b29a      	uxth	r2, r3
 8010724:	6863      	ldr	r3, [r4, #4]
 8010726:	fbb3 f3f1 	udiv	r3, r3, r1
 801072a:	6821      	ldr	r1, [r4, #0]
 801072c:	9804      	ldr	r0, [sp, #16]
 801072e:	fb02 f303 	mul.w	r3, r2, r3
 8010732:	3304      	adds	r3, #4
 8010734:	7b22      	ldrb	r2, [r4, #12]
 8010736:	4419      	add	r1, r3
 8010738:	445a      	add	r2, fp
 801073a:	f841 2c04 	str.w	r2, [r1, #-4]
 801073e:	7b23      	ldrb	r3, [r4, #12]
 8010740:	9300      	str	r3, [sp, #0]
 8010742:	2300      	movs	r3, #0
 8010744:	f7fa fa52 	bl	800abec <ucdr_init_buffer_origin_offset>
 8010748:	81e5      	strh	r5, [r4, #14]
 801074a:	2001      	movs	r0, #1
 801074c:	e7a2      	b.n	8010694 <uxr_prepare_reliable_buffer_to_write+0x218>
 801074e:	4682      	mov	sl, r0
 8010750:	e6ca      	b.n	80104e8 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8010752:	bf00      	nop
 8010754:	0801035d 	.word	0x0801035d

08010758 <uxr_prepare_next_reliable_buffer_to_send>:
 8010758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801075a:	4604      	mov	r4, r0
 801075c:	460f      	mov	r7, r1
 801075e:	8a00      	ldrh	r0, [r0, #16]
 8010760:	2101      	movs	r1, #1
 8010762:	4616      	mov	r6, r2
 8010764:	461d      	mov	r5, r3
 8010766:	f000 f8f9 	bl	801095c <uxr_seq_num_add>
 801076a:	8028      	strh	r0, [r5, #0]
 801076c:	8922      	ldrh	r2, [r4, #8]
 801076e:	fbb0 f3f2 	udiv	r3, r0, r2
 8010772:	fb02 0c13 	mls	ip, r2, r3, r0
 8010776:	fa1f fc8c 	uxth.w	ip, ip
 801077a:	6863      	ldr	r3, [r4, #4]
 801077c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010780:	fb0c fc03 	mul.w	ip, ip, r3
 8010784:	6823      	ldr	r3, [r4, #0]
 8010786:	89e1      	ldrh	r1, [r4, #14]
 8010788:	f10c 0c04 	add.w	ip, ip, #4
 801078c:	4463      	add	r3, ip
 801078e:	603b      	str	r3, [r7, #0]
 8010790:	6823      	ldr	r3, [r4, #0]
 8010792:	449c      	add	ip, r3
 8010794:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8010798:	6033      	str	r3, [r6, #0]
 801079a:	f000 f8e7 	bl	801096c <uxr_seq_num_cmp>
 801079e:	2800      	cmp	r0, #0
 80107a0:	dd01      	ble.n	80107a6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80107a2:	2000      	movs	r0, #0
 80107a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107a6:	7b23      	ldrb	r3, [r4, #12]
 80107a8:	6832      	ldr	r2, [r6, #0]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d9f9      	bls.n	80107a2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80107ae:	8a61      	ldrh	r1, [r4, #18]
 80107b0:	8a20      	ldrh	r0, [r4, #16]
 80107b2:	f000 f8d7 	bl	8010964 <uxr_seq_num_sub>
 80107b6:	8923      	ldrh	r3, [r4, #8]
 80107b8:	4283      	cmp	r3, r0
 80107ba:	d0f2      	beq.n	80107a2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80107bc:	8828      	ldrh	r0, [r5, #0]
 80107be:	89e3      	ldrh	r3, [r4, #14]
 80107c0:	8220      	strh	r0, [r4, #16]
 80107c2:	4298      	cmp	r0, r3
 80107c4:	d001      	beq.n	80107ca <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80107c6:	2001      	movs	r0, #1
 80107c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ca:	2101      	movs	r1, #1
 80107cc:	f000 f8c6 	bl	801095c <uxr_seq_num_add>
 80107d0:	81e0      	strh	r0, [r4, #14]
 80107d2:	2001      	movs	r0, #1
 80107d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107d6:	bf00      	nop

080107d8 <uxr_update_output_stream_heartbeat_timestamp>:
 80107d8:	b570      	push	{r4, r5, r6, lr}
 80107da:	8a01      	ldrh	r1, [r0, #16]
 80107dc:	4604      	mov	r4, r0
 80107de:	8a40      	ldrh	r0, [r0, #18]
 80107e0:	4615      	mov	r5, r2
 80107e2:	461e      	mov	r6, r3
 80107e4:	f000 f8c2 	bl	801096c <uxr_seq_num_cmp>
 80107e8:	2800      	cmp	r0, #0
 80107ea:	db07      	blt.n	80107fc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80107ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80107f0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80107f4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80107f8:	2000      	movs	r0, #0
 80107fa:	bd70      	pop	{r4, r5, r6, pc}
 80107fc:	f894 0020 	ldrb.w	r0, [r4, #32]
 8010800:	b940      	cbnz	r0, 8010814 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8010802:	2301      	movs	r3, #1
 8010804:	f884 3020 	strb.w	r3, [r4, #32]
 8010808:	3564      	adds	r5, #100	@ 0x64
 801080a:	f146 0600 	adc.w	r6, r6, #0
 801080e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8010812:	bd70      	pop	{r4, r5, r6, pc}
 8010814:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8010818:	4295      	cmp	r5, r2
 801081a:	eb76 0303 	sbcs.w	r3, r6, r3
 801081e:	bfa5      	ittet	ge
 8010820:	3001      	addge	r0, #1
 8010822:	f884 0020 	strbge.w	r0, [r4, #32]
 8010826:	2000      	movlt	r0, #0
 8010828:	2001      	movge	r0, #1
 801082a:	e7ed      	b.n	8010808 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801082c <uxr_begin_output_nack_buffer_it>:
 801082c:	8a40      	ldrh	r0, [r0, #18]
 801082e:	4770      	bx	lr

08010830 <uxr_next_reliable_nack_buffer_to_send>:
 8010830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010834:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8010838:	b082      	sub	sp, #8
 801083a:	f1b8 0f00 	cmp.w	r8, #0
 801083e:	d011      	beq.n	8010864 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8010840:	4604      	mov	r4, r0
 8010842:	8818      	ldrh	r0, [r3, #0]
 8010844:	460e      	mov	r6, r1
 8010846:	4617      	mov	r7, r2
 8010848:	461d      	mov	r5, r3
 801084a:	2101      	movs	r1, #1
 801084c:	f000 f886 	bl	801095c <uxr_seq_num_add>
 8010850:	8028      	strh	r0, [r5, #0]
 8010852:	8a21      	ldrh	r1, [r4, #16]
 8010854:	f000 f88a 	bl	801096c <uxr_seq_num_cmp>
 8010858:	2800      	cmp	r0, #0
 801085a:	dd07      	ble.n	801086c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801085c:	f04f 0800 	mov.w	r8, #0
 8010860:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8010864:	4640      	mov	r0, r8
 8010866:	b002      	add	sp, #8
 8010868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801086c:	8921      	ldrh	r1, [r4, #8]
 801086e:	8828      	ldrh	r0, [r5, #0]
 8010870:	6823      	ldr	r3, [r4, #0]
 8010872:	fbb0 f2f1 	udiv	r2, r0, r1
 8010876:	fb01 0c12 	mls	ip, r1, r2, r0
 801087a:	fa1f f28c 	uxth.w	r2, ip
 801087e:	9301      	str	r3, [sp, #4]
 8010880:	6863      	ldr	r3, [r4, #4]
 8010882:	fbb3 fcf1 	udiv	ip, r3, r1
 8010886:	9b01      	ldr	r3, [sp, #4]
 8010888:	fb02 fc0c 	mul.w	ip, r2, ip
 801088c:	f10c 0c04 	add.w	ip, ip, #4
 8010890:	4463      	add	r3, ip
 8010892:	6033      	str	r3, [r6, #0]
 8010894:	6823      	ldr	r3, [r4, #0]
 8010896:	4463      	add	r3, ip
 8010898:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801089c:	603b      	str	r3, [r7, #0]
 801089e:	7b22      	ldrb	r2, [r4, #12]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d0d2      	beq.n	801084a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80108a4:	4640      	mov	r0, r8
 80108a6:	b002      	add	sp, #8
 80108a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080108ac <uxr_process_acknack>:
 80108ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ae:	4604      	mov	r4, r0
 80108b0:	460e      	mov	r6, r1
 80108b2:	4610      	mov	r0, r2
 80108b4:	2101      	movs	r1, #1
 80108b6:	f000 f855 	bl	8010964 <uxr_seq_num_sub>
 80108ba:	8a61      	ldrh	r1, [r4, #18]
 80108bc:	f000 f852 	bl	8010964 <uxr_seq_num_sub>
 80108c0:	b1c0      	cbz	r0, 80108f4 <uxr_process_acknack+0x48>
 80108c2:	4605      	mov	r5, r0
 80108c4:	2700      	movs	r7, #0
 80108c6:	2101      	movs	r1, #1
 80108c8:	8a60      	ldrh	r0, [r4, #18]
 80108ca:	f000 f847 	bl	801095c <uxr_seq_num_add>
 80108ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80108d2:	fbb0 f1fc 	udiv	r1, r0, ip
 80108d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80108da:	fb0c 0111 	mls	r1, ip, r1, r0
 80108de:	b289      	uxth	r1, r1
 80108e0:	3701      	adds	r7, #1
 80108e2:	fbb3 f3fc 	udiv	r3, r3, ip
 80108e6:	fb01 f303 	mul.w	r3, r1, r3
 80108ea:	42bd      	cmp	r5, r7
 80108ec:	7b21      	ldrb	r1, [r4, #12]
 80108ee:	8260      	strh	r0, [r4, #18]
 80108f0:	50d1      	str	r1, [r2, r3]
 80108f2:	d1e8      	bne.n	80108c6 <uxr_process_acknack+0x1a>
 80108f4:	3e00      	subs	r6, #0
 80108f6:	f04f 0300 	mov.w	r3, #0
 80108fa:	bf18      	it	ne
 80108fc:	2601      	movne	r6, #1
 80108fe:	f884 3020 	strb.w	r3, [r4, #32]
 8010902:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8010906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010908 <uxr_is_output_up_to_date>:
 8010908:	8a01      	ldrh	r1, [r0, #16]
 801090a:	8a40      	ldrh	r0, [r0, #18]
 801090c:	b508      	push	{r3, lr}
 801090e:	f000 f82d 	bl	801096c <uxr_seq_num_cmp>
 8010912:	fab0 f080 	clz	r0, r0
 8010916:	0940      	lsrs	r0, r0, #5
 8010918:	bd08      	pop	{r3, pc}
 801091a:	bf00      	nop

0801091c <get_available_free_slots>:
 801091c:	8902      	ldrh	r2, [r0, #8]
 801091e:	b1da      	cbz	r2, 8010958 <get_available_free_slots+0x3c>
 8010920:	b530      	push	{r4, r5, lr}
 8010922:	2100      	movs	r1, #0
 8010924:	6843      	ldr	r3, [r0, #4]
 8010926:	6805      	ldr	r5, [r0, #0]
 8010928:	7b04      	ldrb	r4, [r0, #12]
 801092a:	fbb3 fef2 	udiv	lr, r3, r2
 801092e:	4608      	mov	r0, r1
 8010930:	460b      	mov	r3, r1
 8010932:	fbb3 fcf2 	udiv	ip, r3, r2
 8010936:	fb02 331c 	mls	r3, r2, ip, r3
 801093a:	b29b      	uxth	r3, r3
 801093c:	fb0e f303 	mul.w	r3, lr, r3
 8010940:	3101      	adds	r1, #1
 8010942:	f855 c003 	ldr.w	ip, [r5, r3]
 8010946:	4564      	cmp	r4, ip
 8010948:	bf08      	it	eq
 801094a:	3001      	addeq	r0, #1
 801094c:	b28b      	uxth	r3, r1
 801094e:	bf08      	it	eq
 8010950:	b280      	uxtheq	r0, r0
 8010952:	4293      	cmp	r3, r2
 8010954:	d3ed      	bcc.n	8010932 <get_available_free_slots+0x16>
 8010956:	bd30      	pop	{r4, r5, pc}
 8010958:	4610      	mov	r0, r2
 801095a:	4770      	bx	lr

0801095c <uxr_seq_num_add>:
 801095c:	4408      	add	r0, r1
 801095e:	b280      	uxth	r0, r0
 8010960:	4770      	bx	lr
 8010962:	bf00      	nop

08010964 <uxr_seq_num_sub>:
 8010964:	1a40      	subs	r0, r0, r1
 8010966:	b280      	uxth	r0, r0
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop

0801096c <uxr_seq_num_cmp>:
 801096c:	4288      	cmp	r0, r1
 801096e:	d011      	beq.n	8010994 <uxr_seq_num_cmp+0x28>
 8010970:	d309      	bcc.n	8010986 <uxr_seq_num_cmp+0x1a>
 8010972:	4288      	cmp	r0, r1
 8010974:	d910      	bls.n	8010998 <uxr_seq_num_cmp+0x2c>
 8010976:	1a40      	subs	r0, r0, r1
 8010978:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801097c:	bfd4      	ite	le
 801097e:	2001      	movle	r0, #1
 8010980:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8010984:	4770      	bx	lr
 8010986:	1a0b      	subs	r3, r1, r0
 8010988:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801098c:	daf1      	bge.n	8010972 <uxr_seq_num_cmp+0x6>
 801098e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010992:	4770      	bx	lr
 8010994:	2000      	movs	r0, #0
 8010996:	4770      	bx	lr
 8010998:	2001      	movs	r0, #1
 801099a:	4770      	bx	lr

0801099c <rcl_get_default_domain_id>:
 801099c:	b530      	push	{r4, r5, lr}
 801099e:	b083      	sub	sp, #12
 80109a0:	2300      	movs	r3, #0
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	b1d0      	cbz	r0, 80109dc <rcl_get_default_domain_id+0x40>
 80109a6:	4604      	mov	r4, r0
 80109a8:	4669      	mov	r1, sp
 80109aa:	4815      	ldr	r0, [pc, #84]	@ (8010a00 <rcl_get_default_domain_id+0x64>)
 80109ac:	f7fe fa9c 	bl	800eee8 <rcutils_get_env>
 80109b0:	4602      	mov	r2, r0
 80109b2:	b110      	cbz	r0, 80109ba <rcl_get_default_domain_id+0x1e>
 80109b4:	2001      	movs	r0, #1
 80109b6:	b003      	add	sp, #12
 80109b8:	bd30      	pop	{r4, r5, pc}
 80109ba:	9b00      	ldr	r3, [sp, #0]
 80109bc:	b18b      	cbz	r3, 80109e2 <rcl_get_default_domain_id+0x46>
 80109be:	7818      	ldrb	r0, [r3, #0]
 80109c0:	2800      	cmp	r0, #0
 80109c2:	d0f8      	beq.n	80109b6 <rcl_get_default_domain_id+0x1a>
 80109c4:	a901      	add	r1, sp, #4
 80109c6:	4618      	mov	r0, r3
 80109c8:	9201      	str	r2, [sp, #4]
 80109ca:	f000 fd57 	bl	801147c <strtoul>
 80109ce:	4605      	mov	r5, r0
 80109d0:	b150      	cbz	r0, 80109e8 <rcl_get_default_domain_id+0x4c>
 80109d2:	1c43      	adds	r3, r0, #1
 80109d4:	d00d      	beq.n	80109f2 <rcl_get_default_domain_id+0x56>
 80109d6:	6025      	str	r5, [r4, #0]
 80109d8:	2000      	movs	r0, #0
 80109da:	e7ec      	b.n	80109b6 <rcl_get_default_domain_id+0x1a>
 80109dc:	200b      	movs	r0, #11
 80109de:	b003      	add	sp, #12
 80109e0:	bd30      	pop	{r4, r5, pc}
 80109e2:	4618      	mov	r0, r3
 80109e4:	b003      	add	sp, #12
 80109e6:	bd30      	pop	{r4, r5, pc}
 80109e8:	9b01      	ldr	r3, [sp, #4]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d0f2      	beq.n	80109d6 <rcl_get_default_domain_id+0x3a>
 80109f0:	e7e0      	b.n	80109b4 <rcl_get_default_domain_id+0x18>
 80109f2:	f000 ff65 	bl	80118c0 <__errno>
 80109f6:	6803      	ldr	r3, [r0, #0]
 80109f8:	2b22      	cmp	r3, #34	@ 0x22
 80109fa:	d1ec      	bne.n	80109d6 <rcl_get_default_domain_id+0x3a>
 80109fc:	e7da      	b.n	80109b4 <rcl_get_default_domain_id+0x18>
 80109fe:	bf00      	nop
 8010a00:	08013110 	.word	0x08013110

08010a04 <rcl_expand_topic_name>:
 8010a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a08:	b08b      	sub	sp, #44	@ 0x2c
 8010a0a:	9306      	str	r3, [sp, #24]
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	f000 80ad 	beq.w	8010b6c <rcl_expand_topic_name+0x168>
 8010a12:	460e      	mov	r6, r1
 8010a14:	2900      	cmp	r1, #0
 8010a16:	f000 80a9 	beq.w	8010b6c <rcl_expand_topic_name+0x168>
 8010a1a:	4617      	mov	r7, r2
 8010a1c:	2a00      	cmp	r2, #0
 8010a1e:	f000 80a5 	beq.w	8010b6c <rcl_expand_topic_name+0x168>
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	f000 80a2 	beq.w	8010b6c <rcl_expand_topic_name+0x168>
 8010a28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f000 809e 	beq.w	8010b6c <rcl_expand_topic_name+0x168>
 8010a30:	2200      	movs	r2, #0
 8010a32:	a909      	add	r1, sp, #36	@ 0x24
 8010a34:	4680      	mov	r8, r0
 8010a36:	f000 f9f5 	bl	8010e24 <rcl_validate_topic_name>
 8010a3a:	4604      	mov	r4, r0
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	f040 8096 	bne.w	8010b6e <rcl_expand_topic_name+0x16a>
 8010a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f040 809a 	bne.w	8010b7e <rcl_expand_topic_name+0x17a>
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	a909      	add	r1, sp, #36	@ 0x24
 8010a4e:	4630      	mov	r0, r6
 8010a50:	f7fe fe38 	bl	800f6c4 <rmw_validate_node_name>
 8010a54:	2800      	cmp	r0, #0
 8010a56:	f040 808e 	bne.w	8010b76 <rcl_expand_topic_name+0x172>
 8010a5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a5c:	2a00      	cmp	r2, #0
 8010a5e:	f040 8093 	bne.w	8010b88 <rcl_expand_topic_name+0x184>
 8010a62:	a909      	add	r1, sp, #36	@ 0x24
 8010a64:	4638      	mov	r0, r7
 8010a66:	f7fe fe0f 	bl	800f688 <rmw_validate_namespace>
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	f040 8083 	bne.w	8010b76 <rcl_expand_topic_name+0x172>
 8010a70:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010a72:	2c00      	cmp	r4, #0
 8010a74:	f040 80ed 	bne.w	8010c52 <rcl_expand_topic_name+0x24e>
 8010a78:	217b      	movs	r1, #123	@ 0x7b
 8010a7a:	4640      	mov	r0, r8
 8010a7c:	f000 fe94 	bl	80117a8 <strchr>
 8010a80:	f898 3000 	ldrb.w	r3, [r8]
 8010a84:	2b2f      	cmp	r3, #47	@ 0x2f
 8010a86:	4605      	mov	r5, r0
 8010a88:	f000 809e 	beq.w	8010bc8 <rcl_expand_topic_name+0x1c4>
 8010a8c:	2b7e      	cmp	r3, #126	@ 0x7e
 8010a8e:	f040 80a2 	bne.w	8010bd6 <rcl_expand_topic_name+0x1d2>
 8010a92:	4638      	mov	r0, r7
 8010a94:	f7ef fbce 	bl	8000234 <strlen>
 8010a98:	4a82      	ldr	r2, [pc, #520]	@ (8010ca4 <rcl_expand_topic_name+0x2a0>)
 8010a9a:	4b83      	ldr	r3, [pc, #524]	@ (8010ca8 <rcl_expand_topic_name+0x2a4>)
 8010a9c:	2801      	cmp	r0, #1
 8010a9e:	bf18      	it	ne
 8010aa0:	4613      	movne	r3, r2
 8010aa2:	9302      	str	r3, [sp, #8]
 8010aa4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8010aa6:	9300      	str	r3, [sp, #0]
 8010aa8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8010aac:	f108 0301 	add.w	r3, r8, #1
 8010ab0:	9305      	str	r3, [sp, #20]
 8010ab2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010ab6:	9301      	str	r3, [sp, #4]
 8010ab8:	ab14      	add	r3, sp, #80	@ 0x50
 8010aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010abc:	f7fe fa3c 	bl	800ef38 <rcutils_format_string_limit>
 8010ac0:	4682      	mov	sl, r0
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	f000 80c7 	beq.w	8010c56 <rcl_expand_topic_name+0x252>
 8010ac8:	2d00      	cmp	r5, #0
 8010aca:	f000 80a2 	beq.w	8010c12 <rcl_expand_topic_name+0x20e>
 8010ace:	217b      	movs	r1, #123	@ 0x7b
 8010ad0:	f000 fe6a 	bl	80117a8 <strchr>
 8010ad4:	46d1      	mov	r9, sl
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	9407      	str	r4, [sp, #28]
 8010ada:	46d3      	mov	fp, sl
 8010adc:	464c      	mov	r4, r9
 8010ade:	2d00      	cmp	r5, #0
 8010ae0:	f000 80be 	beq.w	8010c60 <rcl_expand_topic_name+0x25c>
 8010ae4:	217d      	movs	r1, #125	@ 0x7d
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	f000 fe5e 	bl	80117a8 <strchr>
 8010aec:	eba0 0905 	sub.w	r9, r0, r5
 8010af0:	f109 0a01 	add.w	sl, r9, #1
 8010af4:	486d      	ldr	r0, [pc, #436]	@ (8010cac <rcl_expand_topic_name+0x2a8>)
 8010af6:	4652      	mov	r2, sl
 8010af8:	4629      	mov	r1, r5
 8010afa:	f000 fe62 	bl	80117c2 <strncmp>
 8010afe:	2800      	cmp	r0, #0
 8010b00:	d067      	beq.n	8010bd2 <rcl_expand_topic_name+0x1ce>
 8010b02:	486b      	ldr	r0, [pc, #428]	@ (8010cb0 <rcl_expand_topic_name+0x2ac>)
 8010b04:	4652      	mov	r2, sl
 8010b06:	4629      	mov	r1, r5
 8010b08:	f000 fe5b 	bl	80117c2 <strncmp>
 8010b0c:	b130      	cbz	r0, 8010b1c <rcl_expand_topic_name+0x118>
 8010b0e:	4869      	ldr	r0, [pc, #420]	@ (8010cb4 <rcl_expand_topic_name+0x2b0>)
 8010b10:	4652      	mov	r2, sl
 8010b12:	4629      	mov	r1, r5
 8010b14:	f000 fe55 	bl	80117c2 <strncmp>
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	d137      	bne.n	8010b8c <rcl_expand_topic_name+0x188>
 8010b1c:	46b9      	mov	r9, r7
 8010b1e:	ab16      	add	r3, sp, #88	@ 0x58
 8010b20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b24:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010b28:	ab14      	add	r3, sp, #80	@ 0x50
 8010b2a:	4628      	mov	r0, r5
 8010b2c:	cb0c      	ldmia	r3, {r2, r3}
 8010b2e:	4651      	mov	r1, sl
 8010b30:	f7fe fb3e 	bl	800f1b0 <rcutils_strndup>
 8010b34:	4605      	mov	r5, r0
 8010b36:	2800      	cmp	r0, #0
 8010b38:	f000 809c 	beq.w	8010c74 <rcl_expand_topic_name+0x270>
 8010b3c:	464a      	mov	r2, r9
 8010b3e:	4620      	mov	r0, r4
 8010b40:	ab14      	add	r3, sp, #80	@ 0x50
 8010b42:	4629      	mov	r1, r5
 8010b44:	f7fe fa32 	bl	800efac <rcutils_repl_str>
 8010b48:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010b4a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	4628      	mov	r0, r5
 8010b50:	4798      	blx	r3
 8010b52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010b54:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010b56:	4658      	mov	r0, fp
 8010b58:	4798      	blx	r3
 8010b5a:	2c00      	cmp	r4, #0
 8010b5c:	d07b      	beq.n	8010c56 <rcl_expand_topic_name+0x252>
 8010b5e:	217b      	movs	r1, #123	@ 0x7b
 8010b60:	4620      	mov	r0, r4
 8010b62:	f000 fe21 	bl	80117a8 <strchr>
 8010b66:	46a3      	mov	fp, r4
 8010b68:	4605      	mov	r5, r0
 8010b6a:	e7b8      	b.n	8010ade <rcl_expand_topic_name+0xda>
 8010b6c:	240b      	movs	r4, #11
 8010b6e:	4620      	mov	r0, r4
 8010b70:	b00b      	add	sp, #44	@ 0x2c
 8010b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b76:	f7fd fb95 	bl	800e2a4 <rcl_convert_rmw_ret_to_rcl_ret>
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	e7f7      	b.n	8010b6e <rcl_expand_topic_name+0x16a>
 8010b7e:	2467      	movs	r4, #103	@ 0x67
 8010b80:	4620      	mov	r0, r4
 8010b82:	b00b      	add	sp, #44	@ 0x2c
 8010b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b88:	24c9      	movs	r4, #201	@ 0xc9
 8010b8a:	e7f0      	b.n	8010b6e <rcl_expand_topic_name+0x16a>
 8010b8c:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8010b90:	9806      	ldr	r0, [sp, #24]
 8010b92:	1c69      	adds	r1, r5, #1
 8010b94:	f7fe fc26 	bl	800f3e4 <rcutils_string_map_getn>
 8010b98:	4681      	mov	r9, r0
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d1bf      	bne.n	8010b1e <rcl_expand_topic_name+0x11a>
 8010b9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ba0:	aa16      	add	r2, sp, #88	@ 0x58
 8010ba2:	6018      	str	r0, [r3, #0]
 8010ba4:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ba6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010baa:	ab14      	add	r3, sp, #80	@ 0x50
 8010bac:	cb0c      	ldmia	r3, {r2, r3}
 8010bae:	4651      	mov	r1, sl
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	f7fe fafd 	bl	800f1b0 <rcutils_strndup>
 8010bb6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010bb8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010bba:	4798      	blx	r3
 8010bbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010bbe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010bc0:	4658      	mov	r0, fp
 8010bc2:	2469      	movs	r4, #105	@ 0x69
 8010bc4:	4798      	blx	r3
 8010bc6:	e7d2      	b.n	8010b6e <rcl_expand_topic_name+0x16a>
 8010bc8:	2800      	cmp	r0, #0
 8010bca:	d05b      	beq.n	8010c84 <rcl_expand_topic_name+0x280>
 8010bcc:	46c1      	mov	r9, r8
 8010bce:	46a2      	mov	sl, r4
 8010bd0:	e782      	b.n	8010ad8 <rcl_expand_topic_name+0xd4>
 8010bd2:	46b1      	mov	r9, r6
 8010bd4:	e7a3      	b.n	8010b1e <rcl_expand_topic_name+0x11a>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	d1f8      	bne.n	8010bcc <rcl_expand_topic_name+0x1c8>
 8010bda:	4638      	mov	r0, r7
 8010bdc:	f7ef fb2a 	bl	8000234 <strlen>
 8010be0:	4a35      	ldr	r2, [pc, #212]	@ (8010cb8 <rcl_expand_topic_name+0x2b4>)
 8010be2:	4b36      	ldr	r3, [pc, #216]	@ (8010cbc <rcl_expand_topic_name+0x2b8>)
 8010be4:	f8cd 8010 	str.w	r8, [sp, #16]
 8010be8:	2801      	cmp	r0, #1
 8010bea:	bf18      	it	ne
 8010bec:	4613      	movne	r3, r2
 8010bee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8010bf2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8010bf6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010bf8:	9703      	str	r7, [sp, #12]
 8010bfa:	9200      	str	r2, [sp, #0]
 8010bfc:	ab14      	add	r3, sp, #80	@ 0x50
 8010bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c00:	f7fe f99a 	bl	800ef38 <rcutils_format_string_limit>
 8010c04:	4682      	mov	sl, r0
 8010c06:	4653      	mov	r3, sl
 8010c08:	b32b      	cbz	r3, 8010c56 <rcl_expand_topic_name+0x252>
 8010c0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c0c:	f8c3 a000 	str.w	sl, [r3]
 8010c10:	e7ad      	b.n	8010b6e <rcl_expand_topic_name+0x16a>
 8010c12:	f89a 3000 	ldrb.w	r3, [sl]
 8010c16:	2b2f      	cmp	r3, #47	@ 0x2f
 8010c18:	d0f7      	beq.n	8010c0a <rcl_expand_topic_name+0x206>
 8010c1a:	4638      	mov	r0, r7
 8010c1c:	f7ef fb0a 	bl	8000234 <strlen>
 8010c20:	4a25      	ldr	r2, [pc, #148]	@ (8010cb8 <rcl_expand_topic_name+0x2b4>)
 8010c22:	4b26      	ldr	r3, [pc, #152]	@ (8010cbc <rcl_expand_topic_name+0x2b8>)
 8010c24:	f8cd a010 	str.w	sl, [sp, #16]
 8010c28:	2801      	cmp	r0, #1
 8010c2a:	bf18      	it	ne
 8010c2c:	4613      	movne	r3, r2
 8010c2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8010c32:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8010c36:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010c38:	9703      	str	r7, [sp, #12]
 8010c3a:	9200      	str	r2, [sp, #0]
 8010c3c:	ab14      	add	r3, sp, #80	@ 0x50
 8010c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c40:	f7fe f97a 	bl	800ef38 <rcutils_format_string_limit>
 8010c44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010c46:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010c48:	4605      	mov	r5, r0
 8010c4a:	4650      	mov	r0, sl
 8010c4c:	4798      	blx	r3
 8010c4e:	46aa      	mov	sl, r5
 8010c50:	e7d9      	b.n	8010c06 <rcl_expand_topic_name+0x202>
 8010c52:	24ca      	movs	r4, #202	@ 0xca
 8010c54:	e78b      	b.n	8010b6e <rcl_expand_topic_name+0x16a>
 8010c56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010c58:	2300      	movs	r3, #0
 8010c5a:	6013      	str	r3, [r2, #0]
 8010c5c:	240a      	movs	r4, #10
 8010c5e:	e786      	b.n	8010b6e <rcl_expand_topic_name+0x16a>
 8010c60:	465b      	mov	r3, fp
 8010c62:	9c07      	ldr	r4, [sp, #28]
 8010c64:	46da      	mov	sl, fp
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d1d3      	bne.n	8010c12 <rcl_expand_topic_name+0x20e>
 8010c6a:	f898 3000 	ldrb.w	r3, [r8]
 8010c6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8010c70:	d0cb      	beq.n	8010c0a <rcl_expand_topic_name+0x206>
 8010c72:	e7b2      	b.n	8010bda <rcl_expand_topic_name+0x1d6>
 8010c74:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8010c78:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010c7a:	6015      	str	r5, [r2, #0]
 8010c7c:	4658      	mov	r0, fp
 8010c7e:	4798      	blx	r3
 8010c80:	240a      	movs	r4, #10
 8010c82:	e774      	b.n	8010b6e <rcl_expand_topic_name+0x16a>
 8010c84:	ab17      	add	r3, sp, #92	@ 0x5c
 8010c86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c8a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010c8e:	ab14      	add	r3, sp, #80	@ 0x50
 8010c90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c92:	4640      	mov	r0, r8
 8010c94:	f7fe fa6a 	bl	800f16c <rcutils_strdup>
 8010c98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	6018      	str	r0, [r3, #0]
 8010c9e:	bf08      	it	eq
 8010ca0:	240a      	moveq	r4, #10
 8010ca2:	e764      	b.n	8010b6e <rcl_expand_topic_name+0x16a>
 8010ca4:	08013120 	.word	0x08013120
 8010ca8:	08012914 	.word	0x08012914
 8010cac:	08013128 	.word	0x08013128
 8010cb0:	08013130 	.word	0x08013130
 8010cb4:	08013138 	.word	0x08013138
 8010cb8:	080128dc 	.word	0x080128dc
 8010cbc:	08012924 	.word	0x08012924

08010cc0 <rcl_get_default_topic_name_substitutions>:
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	bf0c      	ite	eq
 8010cc4:	200b      	moveq	r0, #11
 8010cc6:	2000      	movne	r0, #0
 8010cc8:	4770      	bx	lr
 8010cca:	bf00      	nop

08010ccc <rcl_get_zero_initialized_guard_condition>:
 8010ccc:	4a03      	ldr	r2, [pc, #12]	@ (8010cdc <rcl_get_zero_initialized_guard_condition+0x10>)
 8010cce:	4603      	mov	r3, r0
 8010cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	4770      	bx	lr
 8010cdc:	08013144 	.word	0x08013144

08010ce0 <rcl_guard_condition_init_from_rmw>:
 8010ce0:	b082      	sub	sp, #8
 8010ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce6:	b086      	sub	sp, #24
 8010ce8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010cec:	4604      	mov	r4, r0
 8010cee:	f84c 3f04 	str.w	r3, [ip, #4]!
 8010cf2:	460e      	mov	r6, r1
 8010cf4:	4617      	mov	r7, r2
 8010cf6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010cfa:	f10d 0e04 	add.w	lr, sp, #4
 8010cfe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d02:	f8dc 3000 	ldr.w	r3, [ip]
 8010d06:	f8ce 3000 	str.w	r3, [lr]
 8010d0a:	a801      	add	r0, sp, #4
 8010d0c:	f7f7 fe3e 	bl	800898c <rcutils_allocator_is_valid>
 8010d10:	b350      	cbz	r0, 8010d68 <rcl_guard_condition_init_from_rmw+0x88>
 8010d12:	b34c      	cbz	r4, 8010d68 <rcl_guard_condition_init_from_rmw+0x88>
 8010d14:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010d18:	f1b8 0f00 	cmp.w	r8, #0
 8010d1c:	d11e      	bne.n	8010d5c <rcl_guard_condition_init_from_rmw+0x7c>
 8010d1e:	b31f      	cbz	r7, 8010d68 <rcl_guard_condition_init_from_rmw+0x88>
 8010d20:	4638      	mov	r0, r7
 8010d22:	f7fd fadd 	bl	800e2e0 <rcl_context_is_valid>
 8010d26:	b328      	cbz	r0, 8010d74 <rcl_guard_condition_init_from_rmw+0x94>
 8010d28:	9b01      	ldr	r3, [sp, #4]
 8010d2a:	9905      	ldr	r1, [sp, #20]
 8010d2c:	201c      	movs	r0, #28
 8010d2e:	4798      	blx	r3
 8010d30:	4605      	mov	r5, r0
 8010d32:	6060      	str	r0, [r4, #4]
 8010d34:	b358      	cbz	r0, 8010d8e <rcl_guard_condition_init_from_rmw+0xae>
 8010d36:	b1fe      	cbz	r6, 8010d78 <rcl_guard_condition_init_from_rmw+0x98>
 8010d38:	6006      	str	r6, [r0, #0]
 8010d3a:	f880 8004 	strb.w	r8, [r0, #4]
 8010d3e:	ac01      	add	r4, sp, #4
 8010d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d42:	f105 0c08 	add.w	ip, r5, #8
 8010d46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d4a:	6823      	ldr	r3, [r4, #0]
 8010d4c:	f8cc 3000 	str.w	r3, [ip]
 8010d50:	2000      	movs	r0, #0
 8010d52:	b006      	add	sp, #24
 8010d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d58:	b002      	add	sp, #8
 8010d5a:	4770      	bx	lr
 8010d5c:	2064      	movs	r0, #100	@ 0x64
 8010d5e:	b006      	add	sp, #24
 8010d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d64:	b002      	add	sp, #8
 8010d66:	4770      	bx	lr
 8010d68:	200b      	movs	r0, #11
 8010d6a:	b006      	add	sp, #24
 8010d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d70:	b002      	add	sp, #8
 8010d72:	4770      	bx	lr
 8010d74:	2065      	movs	r0, #101	@ 0x65
 8010d76:	e7f2      	b.n	8010d5e <rcl_guard_condition_init_from_rmw+0x7e>
 8010d78:	6838      	ldr	r0, [r7, #0]
 8010d7a:	3028      	adds	r0, #40	@ 0x28
 8010d7c:	f000 f924 	bl	8010fc8 <rmw_create_guard_condition>
 8010d80:	6028      	str	r0, [r5, #0]
 8010d82:	6865      	ldr	r5, [r4, #4]
 8010d84:	682e      	ldr	r6, [r5, #0]
 8010d86:	b126      	cbz	r6, 8010d92 <rcl_guard_condition_init_from_rmw+0xb2>
 8010d88:	2301      	movs	r3, #1
 8010d8a:	712b      	strb	r3, [r5, #4]
 8010d8c:	e7d7      	b.n	8010d3e <rcl_guard_condition_init_from_rmw+0x5e>
 8010d8e:	200a      	movs	r0, #10
 8010d90:	e7e5      	b.n	8010d5e <rcl_guard_condition_init_from_rmw+0x7e>
 8010d92:	4628      	mov	r0, r5
 8010d94:	9b02      	ldr	r3, [sp, #8]
 8010d96:	9905      	ldr	r1, [sp, #20]
 8010d98:	4798      	blx	r3
 8010d9a:	6066      	str	r6, [r4, #4]
 8010d9c:	2001      	movs	r0, #1
 8010d9e:	e7de      	b.n	8010d5e <rcl_guard_condition_init_from_rmw+0x7e>

08010da0 <rcl_guard_condition_fini>:
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	b1f0      	cbz	r0, 8010de4 <rcl_guard_condition_fini+0x44>
 8010da6:	6843      	ldr	r3, [r0, #4]
 8010da8:	4604      	mov	r4, r0
 8010daa:	b163      	cbz	r3, 8010dc6 <rcl_guard_condition_fini+0x26>
 8010dac:	6818      	ldr	r0, [r3, #0]
 8010dae:	68de      	ldr	r6, [r3, #12]
 8010db0:	6999      	ldr	r1, [r3, #24]
 8010db2:	b160      	cbz	r0, 8010dce <rcl_guard_condition_fini+0x2e>
 8010db4:	791d      	ldrb	r5, [r3, #4]
 8010db6:	b965      	cbnz	r5, 8010dd2 <rcl_guard_condition_fini+0x32>
 8010db8:	4618      	mov	r0, r3
 8010dba:	47b0      	blx	r6
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	6063      	str	r3, [r4, #4]
 8010dc2:	b002      	add	sp, #8
 8010dc4:	bd70      	pop	{r4, r5, r6, pc}
 8010dc6:	461d      	mov	r5, r3
 8010dc8:	4628      	mov	r0, r5
 8010dca:	b002      	add	sp, #8
 8010dcc:	bd70      	pop	{r4, r5, r6, pc}
 8010dce:	4605      	mov	r5, r0
 8010dd0:	e7f2      	b.n	8010db8 <rcl_guard_condition_fini+0x18>
 8010dd2:	9101      	str	r1, [sp, #4]
 8010dd4:	f000 f90c 	bl	8010ff0 <rmw_destroy_guard_condition>
 8010dd8:	1e05      	subs	r5, r0, #0
 8010dda:	6863      	ldr	r3, [r4, #4]
 8010ddc:	9901      	ldr	r1, [sp, #4]
 8010dde:	bf18      	it	ne
 8010de0:	2501      	movne	r5, #1
 8010de2:	e7e9      	b.n	8010db8 <rcl_guard_condition_fini+0x18>
 8010de4:	250b      	movs	r5, #11
 8010de6:	4628      	mov	r0, r5
 8010de8:	b002      	add	sp, #8
 8010dea:	bd70      	pop	{r4, r5, r6, pc}

08010dec <rcl_guard_condition_get_default_options>:
 8010dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dee:	b087      	sub	sp, #28
 8010df0:	4606      	mov	r6, r0
 8010df2:	4668      	mov	r0, sp
 8010df4:	f7f7 fdbc 	bl	8008970 <rcutils_get_default_allocator>
 8010df8:	4b09      	ldr	r3, [pc, #36]	@ (8010e20 <rcl_guard_condition_get_default_options+0x34>)
 8010dfa:	46ee      	mov	lr, sp
 8010dfc:	469c      	mov	ip, r3
 8010dfe:	461d      	mov	r5, r3
 8010e00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e0a:	4634      	mov	r4, r6
 8010e0c:	f8de 7000 	ldr.w	r7, [lr]
 8010e10:	f8cc 7000 	str.w	r7, [ip]
 8010e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e16:	4630      	mov	r0, r6
 8010e18:	6027      	str	r7, [r4, #0]
 8010e1a:	b007      	add	sp, #28
 8010e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	2000aae8 	.word	0x2000aae8

08010e24 <rcl_validate_topic_name>:
 8010e24:	2800      	cmp	r0, #0
 8010e26:	d07a      	beq.n	8010f1e <rcl_validate_topic_name+0xfa>
 8010e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e2c:	460e      	mov	r6, r1
 8010e2e:	2900      	cmp	r1, #0
 8010e30:	d07c      	beq.n	8010f2c <rcl_validate_topic_name+0x108>
 8010e32:	4617      	mov	r7, r2
 8010e34:	4605      	mov	r5, r0
 8010e36:	f7ef f9fd 	bl	8000234 <strlen>
 8010e3a:	b1b0      	cbz	r0, 8010e6a <rcl_validate_topic_name+0x46>
 8010e3c:	f895 9000 	ldrb.w	r9, [r5]
 8010e40:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8010fc4 <rcl_validate_topic_name+0x1a0>
 8010e44:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8010e48:	f013 0304 	ands.w	r3, r3, #4
 8010e4c:	d169      	bne.n	8010f22 <rcl_validate_topic_name+0xfe>
 8010e4e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8010e52:	f815 2008 	ldrb.w	r2, [r5, r8]
 8010e56:	2a2f      	cmp	r2, #47	@ 0x2f
 8010e58:	d10e      	bne.n	8010e78 <rcl_validate_topic_name+0x54>
 8010e5a:	2202      	movs	r2, #2
 8010e5c:	6032      	str	r2, [r6, #0]
 8010e5e:	b36f      	cbz	r7, 8010ebc <rcl_validate_topic_name+0x98>
 8010e60:	f8c7 8000 	str.w	r8, [r7]
 8010e64:	4618      	mov	r0, r3
 8010e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	6033      	str	r3, [r6, #0]
 8010e6e:	b32f      	cbz	r7, 8010ebc <rcl_validate_topic_name+0x98>
 8010e70:	2000      	movs	r0, #0
 8010e72:	6038      	str	r0, [r7, #0]
 8010e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e78:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8010e7c:	461c      	mov	r4, r3
 8010e7e:	4619      	mov	r1, r3
 8010e80:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8010e84:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010e88:	f1be 0f09 	cmp.w	lr, #9
 8010e8c:	d919      	bls.n	8010ec2 <rcl_validate_topic_name+0x9e>
 8010e8e:	f022 0e20 	bic.w	lr, r2, #32
 8010e92:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8010e96:	f1be 0f19 	cmp.w	lr, #25
 8010e9a:	d912      	bls.n	8010ec2 <rcl_validate_topic_name+0x9e>
 8010e9c:	2a5f      	cmp	r2, #95	@ 0x5f
 8010e9e:	d019      	beq.n	8010ed4 <rcl_validate_topic_name+0xb0>
 8010ea0:	2a2f      	cmp	r2, #47	@ 0x2f
 8010ea2:	d051      	beq.n	8010f48 <rcl_validate_topic_name+0x124>
 8010ea4:	2a7e      	cmp	r2, #126	@ 0x7e
 8010ea6:	d048      	beq.n	8010f3a <rcl_validate_topic_name+0x116>
 8010ea8:	2a7b      	cmp	r2, #123	@ 0x7b
 8010eaa:	d054      	beq.n	8010f56 <rcl_validate_topic_name+0x132>
 8010eac:	2a7d      	cmp	r2, #125	@ 0x7d
 8010eae:	d161      	bne.n	8010f74 <rcl_validate_topic_name+0x150>
 8010eb0:	2c00      	cmp	r4, #0
 8010eb2:	d155      	bne.n	8010f60 <rcl_validate_topic_name+0x13c>
 8010eb4:	2305      	movs	r3, #5
 8010eb6:	6033      	str	r3, [r6, #0]
 8010eb8:	b107      	cbz	r7, 8010ebc <rcl_validate_topic_name+0x98>
 8010eba:	6039      	str	r1, [r7, #0]
 8010ebc:	2000      	movs	r0, #0
 8010ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8010ec6:	0752      	lsls	r2, r2, #29
 8010ec8:	d504      	bpl.n	8010ed4 <rcl_validate_topic_name+0xb0>
 8010eca:	b11c      	cbz	r4, 8010ed4 <rcl_validate_topic_name+0xb0>
 8010ecc:	b111      	cbz	r1, 8010ed4 <rcl_validate_topic_name+0xb0>
 8010ece:	1e4a      	subs	r2, r1, #1
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d02d      	beq.n	8010f30 <rcl_validate_topic_name+0x10c>
 8010ed4:	3101      	adds	r1, #1
 8010ed6:	4288      	cmp	r0, r1
 8010ed8:	d1d2      	bne.n	8010e80 <rcl_validate_topic_name+0x5c>
 8010eda:	2c00      	cmp	r4, #0
 8010edc:	d145      	bne.n	8010f6a <rcl_validate_topic_name+0x146>
 8010ede:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8010ee2:	d04f      	beq.n	8010f84 <rcl_validate_topic_name+0x160>
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	e006      	b.n	8010ef8 <rcl_validate_topic_name+0xd4>
 8010eea:	428b      	cmp	r3, r1
 8010eec:	f105 0501 	add.w	r5, r5, #1
 8010ef0:	f103 0201 	add.w	r2, r3, #1
 8010ef4:	d236      	bcs.n	8010f64 <rcl_validate_topic_name+0x140>
 8010ef6:	4613      	mov	r3, r2
 8010ef8:	4580      	cmp	r8, r0
 8010efa:	f100 0001 	add.w	r0, r0, #1
 8010efe:	d0f4      	beq.n	8010eea <rcl_validate_topic_name+0xc6>
 8010f00:	782a      	ldrb	r2, [r5, #0]
 8010f02:	2a2f      	cmp	r2, #47	@ 0x2f
 8010f04:	d1f1      	bne.n	8010eea <rcl_validate_topic_name+0xc6>
 8010f06:	786a      	ldrb	r2, [r5, #1]
 8010f08:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8010f0c:	0754      	lsls	r4, r2, #29
 8010f0e:	d5ec      	bpl.n	8010eea <rcl_validate_topic_name+0xc6>
 8010f10:	2204      	movs	r2, #4
 8010f12:	6032      	str	r2, [r6, #0]
 8010f14:	2f00      	cmp	r7, #0
 8010f16:	d0d1      	beq.n	8010ebc <rcl_validate_topic_name+0x98>
 8010f18:	603b      	str	r3, [r7, #0]
 8010f1a:	2000      	movs	r0, #0
 8010f1c:	e7aa      	b.n	8010e74 <rcl_validate_topic_name+0x50>
 8010f1e:	200b      	movs	r0, #11
 8010f20:	4770      	bx	lr
 8010f22:	2304      	movs	r3, #4
 8010f24:	6033      	str	r3, [r6, #0]
 8010f26:	2f00      	cmp	r7, #0
 8010f28:	d1a2      	bne.n	8010e70 <rcl_validate_topic_name+0x4c>
 8010f2a:	e7c7      	b.n	8010ebc <rcl_validate_topic_name+0x98>
 8010f2c:	200b      	movs	r0, #11
 8010f2e:	e7a1      	b.n	8010e74 <rcl_validate_topic_name+0x50>
 8010f30:	2309      	movs	r3, #9
 8010f32:	6033      	str	r3, [r6, #0]
 8010f34:	2f00      	cmp	r7, #0
 8010f36:	d1c0      	bne.n	8010eba <rcl_validate_topic_name+0x96>
 8010f38:	e7c0      	b.n	8010ebc <rcl_validate_topic_name+0x98>
 8010f3a:	2900      	cmp	r1, #0
 8010f3c:	d0ca      	beq.n	8010ed4 <rcl_validate_topic_name+0xb0>
 8010f3e:	2306      	movs	r3, #6
 8010f40:	6033      	str	r3, [r6, #0]
 8010f42:	2f00      	cmp	r7, #0
 8010f44:	d1b9      	bne.n	8010eba <rcl_validate_topic_name+0x96>
 8010f46:	e7b9      	b.n	8010ebc <rcl_validate_topic_name+0x98>
 8010f48:	2c00      	cmp	r4, #0
 8010f4a:	d0c3      	beq.n	8010ed4 <rcl_validate_topic_name+0xb0>
 8010f4c:	2308      	movs	r3, #8
 8010f4e:	6033      	str	r3, [r6, #0]
 8010f50:	2f00      	cmp	r7, #0
 8010f52:	d1b2      	bne.n	8010eba <rcl_validate_topic_name+0x96>
 8010f54:	e7b2      	b.n	8010ebc <rcl_validate_topic_name+0x98>
 8010f56:	2c00      	cmp	r4, #0
 8010f58:	d1f8      	bne.n	8010f4c <rcl_validate_topic_name+0x128>
 8010f5a:	460b      	mov	r3, r1
 8010f5c:	2401      	movs	r4, #1
 8010f5e:	e7b9      	b.n	8010ed4 <rcl_validate_topic_name+0xb0>
 8010f60:	2400      	movs	r4, #0
 8010f62:	e7b7      	b.n	8010ed4 <rcl_validate_topic_name+0xb0>
 8010f64:	2000      	movs	r0, #0
 8010f66:	6030      	str	r0, [r6, #0]
 8010f68:	e784      	b.n	8010e74 <rcl_validate_topic_name+0x50>
 8010f6a:	2205      	movs	r2, #5
 8010f6c:	6032      	str	r2, [r6, #0]
 8010f6e:	2f00      	cmp	r7, #0
 8010f70:	d1d2      	bne.n	8010f18 <rcl_validate_topic_name+0xf4>
 8010f72:	e7a3      	b.n	8010ebc <rcl_validate_topic_name+0x98>
 8010f74:	2c00      	cmp	r4, #0
 8010f76:	bf14      	ite	ne
 8010f78:	2308      	movne	r3, #8
 8010f7a:	2303      	moveq	r3, #3
 8010f7c:	6033      	str	r3, [r6, #0]
 8010f7e:	2f00      	cmp	r7, #0
 8010f80:	d19b      	bne.n	8010eba <rcl_validate_topic_name+0x96>
 8010f82:	e79b      	b.n	8010ebc <rcl_validate_topic_name+0x98>
 8010f84:	2301      	movs	r3, #1
 8010f86:	e00a      	b.n	8010f9e <rcl_validate_topic_name+0x17a>
 8010f88:	2c01      	cmp	r4, #1
 8010f8a:	d013      	beq.n	8010fb4 <rcl_validate_topic_name+0x190>
 8010f8c:	4299      	cmp	r1, r3
 8010f8e:	f104 0401 	add.w	r4, r4, #1
 8010f92:	f105 0501 	add.w	r5, r5, #1
 8010f96:	f103 0201 	add.w	r2, r3, #1
 8010f9a:	d9e3      	bls.n	8010f64 <rcl_validate_topic_name+0x140>
 8010f9c:	4613      	mov	r3, r2
 8010f9e:	45a0      	cmp	r8, r4
 8010fa0:	d0f4      	beq.n	8010f8c <rcl_validate_topic_name+0x168>
 8010fa2:	782a      	ldrb	r2, [r5, #0]
 8010fa4:	2a2f      	cmp	r2, #47	@ 0x2f
 8010fa6:	d1ef      	bne.n	8010f88 <rcl_validate_topic_name+0x164>
 8010fa8:	786a      	ldrb	r2, [r5, #1]
 8010faa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8010fae:	0752      	lsls	r2, r2, #29
 8010fb0:	d5ec      	bpl.n	8010f8c <rcl_validate_topic_name+0x168>
 8010fb2:	e7ad      	b.n	8010f10 <rcl_validate_topic_name+0xec>
 8010fb4:	2307      	movs	r3, #7
 8010fb6:	6033      	str	r3, [r6, #0]
 8010fb8:	2f00      	cmp	r7, #0
 8010fba:	f43f af7f 	beq.w	8010ebc <rcl_validate_topic_name+0x98>
 8010fbe:	603c      	str	r4, [r7, #0]
 8010fc0:	2000      	movs	r0, #0
 8010fc2:	e757      	b.n	8010e74 <rcl_validate_topic_name+0x50>
 8010fc4:	080131bc 	.word	0x080131bc

08010fc8 <rmw_create_guard_condition>:
 8010fc8:	b538      	push	{r3, r4, r5, lr}
 8010fca:	4605      	mov	r5, r0
 8010fcc:	4807      	ldr	r0, [pc, #28]	@ (8010fec <rmw_create_guard_condition+0x24>)
 8010fce:	f7fe fcbf 	bl	800f950 <get_memory>
 8010fd2:	b148      	cbz	r0, 8010fe8 <rmw_create_guard_condition+0x20>
 8010fd4:	6884      	ldr	r4, [r0, #8]
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	7423      	strb	r3, [r4, #16]
 8010fda:	61e5      	str	r5, [r4, #28]
 8010fdc:	f7fe fd20 	bl	800fa20 <rmw_get_implementation_identifier>
 8010fe0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8010fe4:	f104 0014 	add.w	r0, r4, #20
 8010fe8:	bd38      	pop	{r3, r4, r5, pc}
 8010fea:	bf00      	nop
 8010fec:	2000a984 	.word	0x2000a984

08010ff0 <rmw_destroy_guard_condition>:
 8010ff0:	b508      	push	{r3, lr}
 8010ff2:	4b08      	ldr	r3, [pc, #32]	@ (8011014 <rmw_destroy_guard_condition+0x24>)
 8010ff4:	6819      	ldr	r1, [r3, #0]
 8010ff6:	b911      	cbnz	r1, 8010ffe <rmw_destroy_guard_condition+0xe>
 8010ff8:	e00a      	b.n	8011010 <rmw_destroy_guard_condition+0x20>
 8010ffa:	6849      	ldr	r1, [r1, #4]
 8010ffc:	b141      	cbz	r1, 8011010 <rmw_destroy_guard_condition+0x20>
 8010ffe:	688b      	ldr	r3, [r1, #8]
 8011000:	3314      	adds	r3, #20
 8011002:	4298      	cmp	r0, r3
 8011004:	d1f9      	bne.n	8010ffa <rmw_destroy_guard_condition+0xa>
 8011006:	4803      	ldr	r0, [pc, #12]	@ (8011014 <rmw_destroy_guard_condition+0x24>)
 8011008:	f7fe fcb2 	bl	800f970 <put_memory>
 801100c:	2000      	movs	r0, #0
 801100e:	bd08      	pop	{r3, pc}
 8011010:	2001      	movs	r0, #1
 8011012:	bd08      	pop	{r3, pc}
 8011014:	2000a984 	.word	0x2000a984

08011018 <calloc>:
 8011018:	4b02      	ldr	r3, [pc, #8]	@ (8011024 <calloc+0xc>)
 801101a:	460a      	mov	r2, r1
 801101c:	4601      	mov	r1, r0
 801101e:	6818      	ldr	r0, [r3, #0]
 8011020:	f000 b802 	b.w	8011028 <_calloc_r>
 8011024:	200000c0 	.word	0x200000c0

08011028 <_calloc_r>:
 8011028:	b570      	push	{r4, r5, r6, lr}
 801102a:	fba1 5402 	umull	r5, r4, r1, r2
 801102e:	b93c      	cbnz	r4, 8011040 <_calloc_r+0x18>
 8011030:	4629      	mov	r1, r5
 8011032:	f000 f887 	bl	8011144 <_malloc_r>
 8011036:	4606      	mov	r6, r0
 8011038:	b928      	cbnz	r0, 8011046 <_calloc_r+0x1e>
 801103a:	2600      	movs	r6, #0
 801103c:	4630      	mov	r0, r6
 801103e:	bd70      	pop	{r4, r5, r6, pc}
 8011040:	220c      	movs	r2, #12
 8011042:	6002      	str	r2, [r0, #0]
 8011044:	e7f9      	b.n	801103a <_calloc_r+0x12>
 8011046:	462a      	mov	r2, r5
 8011048:	4621      	mov	r1, r4
 801104a:	f000 fba5 	bl	8011798 <memset>
 801104e:	e7f5      	b.n	801103c <_calloc_r+0x14>

08011050 <getenv>:
 8011050:	b507      	push	{r0, r1, r2, lr}
 8011052:	4b04      	ldr	r3, [pc, #16]	@ (8011064 <getenv+0x14>)
 8011054:	4601      	mov	r1, r0
 8011056:	aa01      	add	r2, sp, #4
 8011058:	6818      	ldr	r0, [r3, #0]
 801105a:	f000 f805 	bl	8011068 <_findenv_r>
 801105e:	b003      	add	sp, #12
 8011060:	f85d fb04 	ldr.w	pc, [sp], #4
 8011064:	200000c0 	.word	0x200000c0

08011068 <_findenv_r>:
 8011068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80110dc <_findenv_r+0x74>
 8011070:	4606      	mov	r6, r0
 8011072:	4689      	mov	r9, r1
 8011074:	4617      	mov	r7, r2
 8011076:	f000 fc85 	bl	8011984 <__env_lock>
 801107a:	f8da 4000 	ldr.w	r4, [sl]
 801107e:	b134      	cbz	r4, 801108e <_findenv_r+0x26>
 8011080:	464b      	mov	r3, r9
 8011082:	4698      	mov	r8, r3
 8011084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011088:	b13a      	cbz	r2, 801109a <_findenv_r+0x32>
 801108a:	2a3d      	cmp	r2, #61	@ 0x3d
 801108c:	d1f9      	bne.n	8011082 <_findenv_r+0x1a>
 801108e:	4630      	mov	r0, r6
 8011090:	f000 fc7e 	bl	8011990 <__env_unlock>
 8011094:	2000      	movs	r0, #0
 8011096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801109a:	eba8 0809 	sub.w	r8, r8, r9
 801109e:	46a3      	mov	fp, r4
 80110a0:	f854 0b04 	ldr.w	r0, [r4], #4
 80110a4:	2800      	cmp	r0, #0
 80110a6:	d0f2      	beq.n	801108e <_findenv_r+0x26>
 80110a8:	4642      	mov	r2, r8
 80110aa:	4649      	mov	r1, r9
 80110ac:	f000 fb89 	bl	80117c2 <strncmp>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	d1f4      	bne.n	801109e <_findenv_r+0x36>
 80110b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80110b8:	eb03 0508 	add.w	r5, r3, r8
 80110bc:	f813 3008 	ldrb.w	r3, [r3, r8]
 80110c0:	2b3d      	cmp	r3, #61	@ 0x3d
 80110c2:	d1ec      	bne.n	801109e <_findenv_r+0x36>
 80110c4:	f8da 3000 	ldr.w	r3, [sl]
 80110c8:	ebab 0303 	sub.w	r3, fp, r3
 80110cc:	109b      	asrs	r3, r3, #2
 80110ce:	4630      	mov	r0, r6
 80110d0:	603b      	str	r3, [r7, #0]
 80110d2:	f000 fc5d 	bl	8011990 <__env_unlock>
 80110d6:	1c68      	adds	r0, r5, #1
 80110d8:	e7dd      	b.n	8011096 <_findenv_r+0x2e>
 80110da:	bf00      	nop
 80110dc:	20000000 	.word	0x20000000

080110e0 <malloc>:
 80110e0:	4b02      	ldr	r3, [pc, #8]	@ (80110ec <malloc+0xc>)
 80110e2:	4601      	mov	r1, r0
 80110e4:	6818      	ldr	r0, [r3, #0]
 80110e6:	f000 b82d 	b.w	8011144 <_malloc_r>
 80110ea:	bf00      	nop
 80110ec:	200000c0 	.word	0x200000c0

080110f0 <free>:
 80110f0:	4b02      	ldr	r3, [pc, #8]	@ (80110fc <free+0xc>)
 80110f2:	4601      	mov	r1, r0
 80110f4:	6818      	ldr	r0, [r3, #0]
 80110f6:	f000 bc51 	b.w	801199c <_free_r>
 80110fa:	bf00      	nop
 80110fc:	200000c0 	.word	0x200000c0

08011100 <sbrk_aligned>:
 8011100:	b570      	push	{r4, r5, r6, lr}
 8011102:	4e0f      	ldr	r6, [pc, #60]	@ (8011140 <sbrk_aligned+0x40>)
 8011104:	460c      	mov	r4, r1
 8011106:	6831      	ldr	r1, [r6, #0]
 8011108:	4605      	mov	r5, r0
 801110a:	b911      	cbnz	r1, 8011112 <sbrk_aligned+0x12>
 801110c:	f000 fbb6 	bl	801187c <_sbrk_r>
 8011110:	6030      	str	r0, [r6, #0]
 8011112:	4621      	mov	r1, r4
 8011114:	4628      	mov	r0, r5
 8011116:	f000 fbb1 	bl	801187c <_sbrk_r>
 801111a:	1c43      	adds	r3, r0, #1
 801111c:	d103      	bne.n	8011126 <sbrk_aligned+0x26>
 801111e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011122:	4620      	mov	r0, r4
 8011124:	bd70      	pop	{r4, r5, r6, pc}
 8011126:	1cc4      	adds	r4, r0, #3
 8011128:	f024 0403 	bic.w	r4, r4, #3
 801112c:	42a0      	cmp	r0, r4
 801112e:	d0f8      	beq.n	8011122 <sbrk_aligned+0x22>
 8011130:	1a21      	subs	r1, r4, r0
 8011132:	4628      	mov	r0, r5
 8011134:	f000 fba2 	bl	801187c <_sbrk_r>
 8011138:	3001      	adds	r0, #1
 801113a:	d1f2      	bne.n	8011122 <sbrk_aligned+0x22>
 801113c:	e7ef      	b.n	801111e <sbrk_aligned+0x1e>
 801113e:	bf00      	nop
 8011140:	2000aafc 	.word	0x2000aafc

08011144 <_malloc_r>:
 8011144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011148:	1ccd      	adds	r5, r1, #3
 801114a:	f025 0503 	bic.w	r5, r5, #3
 801114e:	3508      	adds	r5, #8
 8011150:	2d0c      	cmp	r5, #12
 8011152:	bf38      	it	cc
 8011154:	250c      	movcc	r5, #12
 8011156:	2d00      	cmp	r5, #0
 8011158:	4606      	mov	r6, r0
 801115a:	db01      	blt.n	8011160 <_malloc_r+0x1c>
 801115c:	42a9      	cmp	r1, r5
 801115e:	d904      	bls.n	801116a <_malloc_r+0x26>
 8011160:	230c      	movs	r3, #12
 8011162:	6033      	str	r3, [r6, #0]
 8011164:	2000      	movs	r0, #0
 8011166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801116a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011240 <_malloc_r+0xfc>
 801116e:	f000 f869 	bl	8011244 <__malloc_lock>
 8011172:	f8d8 3000 	ldr.w	r3, [r8]
 8011176:	461c      	mov	r4, r3
 8011178:	bb44      	cbnz	r4, 80111cc <_malloc_r+0x88>
 801117a:	4629      	mov	r1, r5
 801117c:	4630      	mov	r0, r6
 801117e:	f7ff ffbf 	bl	8011100 <sbrk_aligned>
 8011182:	1c43      	adds	r3, r0, #1
 8011184:	4604      	mov	r4, r0
 8011186:	d158      	bne.n	801123a <_malloc_r+0xf6>
 8011188:	f8d8 4000 	ldr.w	r4, [r8]
 801118c:	4627      	mov	r7, r4
 801118e:	2f00      	cmp	r7, #0
 8011190:	d143      	bne.n	801121a <_malloc_r+0xd6>
 8011192:	2c00      	cmp	r4, #0
 8011194:	d04b      	beq.n	801122e <_malloc_r+0xea>
 8011196:	6823      	ldr	r3, [r4, #0]
 8011198:	4639      	mov	r1, r7
 801119a:	4630      	mov	r0, r6
 801119c:	eb04 0903 	add.w	r9, r4, r3
 80111a0:	f000 fb6c 	bl	801187c <_sbrk_r>
 80111a4:	4581      	cmp	r9, r0
 80111a6:	d142      	bne.n	801122e <_malloc_r+0xea>
 80111a8:	6821      	ldr	r1, [r4, #0]
 80111aa:	1a6d      	subs	r5, r5, r1
 80111ac:	4629      	mov	r1, r5
 80111ae:	4630      	mov	r0, r6
 80111b0:	f7ff ffa6 	bl	8011100 <sbrk_aligned>
 80111b4:	3001      	adds	r0, #1
 80111b6:	d03a      	beq.n	801122e <_malloc_r+0xea>
 80111b8:	6823      	ldr	r3, [r4, #0]
 80111ba:	442b      	add	r3, r5
 80111bc:	6023      	str	r3, [r4, #0]
 80111be:	f8d8 3000 	ldr.w	r3, [r8]
 80111c2:	685a      	ldr	r2, [r3, #4]
 80111c4:	bb62      	cbnz	r2, 8011220 <_malloc_r+0xdc>
 80111c6:	f8c8 7000 	str.w	r7, [r8]
 80111ca:	e00f      	b.n	80111ec <_malloc_r+0xa8>
 80111cc:	6822      	ldr	r2, [r4, #0]
 80111ce:	1b52      	subs	r2, r2, r5
 80111d0:	d420      	bmi.n	8011214 <_malloc_r+0xd0>
 80111d2:	2a0b      	cmp	r2, #11
 80111d4:	d917      	bls.n	8011206 <_malloc_r+0xc2>
 80111d6:	1961      	adds	r1, r4, r5
 80111d8:	42a3      	cmp	r3, r4
 80111da:	6025      	str	r5, [r4, #0]
 80111dc:	bf18      	it	ne
 80111de:	6059      	strne	r1, [r3, #4]
 80111e0:	6863      	ldr	r3, [r4, #4]
 80111e2:	bf08      	it	eq
 80111e4:	f8c8 1000 	streq.w	r1, [r8]
 80111e8:	5162      	str	r2, [r4, r5]
 80111ea:	604b      	str	r3, [r1, #4]
 80111ec:	4630      	mov	r0, r6
 80111ee:	f000 f82f 	bl	8011250 <__malloc_unlock>
 80111f2:	f104 000b 	add.w	r0, r4, #11
 80111f6:	1d23      	adds	r3, r4, #4
 80111f8:	f020 0007 	bic.w	r0, r0, #7
 80111fc:	1ac2      	subs	r2, r0, r3
 80111fe:	bf1c      	itt	ne
 8011200:	1a1b      	subne	r3, r3, r0
 8011202:	50a3      	strne	r3, [r4, r2]
 8011204:	e7af      	b.n	8011166 <_malloc_r+0x22>
 8011206:	6862      	ldr	r2, [r4, #4]
 8011208:	42a3      	cmp	r3, r4
 801120a:	bf0c      	ite	eq
 801120c:	f8c8 2000 	streq.w	r2, [r8]
 8011210:	605a      	strne	r2, [r3, #4]
 8011212:	e7eb      	b.n	80111ec <_malloc_r+0xa8>
 8011214:	4623      	mov	r3, r4
 8011216:	6864      	ldr	r4, [r4, #4]
 8011218:	e7ae      	b.n	8011178 <_malloc_r+0x34>
 801121a:	463c      	mov	r4, r7
 801121c:	687f      	ldr	r7, [r7, #4]
 801121e:	e7b6      	b.n	801118e <_malloc_r+0x4a>
 8011220:	461a      	mov	r2, r3
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	42a3      	cmp	r3, r4
 8011226:	d1fb      	bne.n	8011220 <_malloc_r+0xdc>
 8011228:	2300      	movs	r3, #0
 801122a:	6053      	str	r3, [r2, #4]
 801122c:	e7de      	b.n	80111ec <_malloc_r+0xa8>
 801122e:	230c      	movs	r3, #12
 8011230:	6033      	str	r3, [r6, #0]
 8011232:	4630      	mov	r0, r6
 8011234:	f000 f80c 	bl	8011250 <__malloc_unlock>
 8011238:	e794      	b.n	8011164 <_malloc_r+0x20>
 801123a:	6005      	str	r5, [r0, #0]
 801123c:	e7d6      	b.n	80111ec <_malloc_r+0xa8>
 801123e:	bf00      	nop
 8011240:	2000ab00 	.word	0x2000ab00

08011244 <__malloc_lock>:
 8011244:	4801      	ldr	r0, [pc, #4]	@ (801124c <__malloc_lock+0x8>)
 8011246:	f000 bb66 	b.w	8011916 <__retarget_lock_acquire_recursive>
 801124a:	bf00      	nop
 801124c:	2000ac45 	.word	0x2000ac45

08011250 <__malloc_unlock>:
 8011250:	4801      	ldr	r0, [pc, #4]	@ (8011258 <__malloc_unlock+0x8>)
 8011252:	f000 bb61 	b.w	8011918 <__retarget_lock_release_recursive>
 8011256:	bf00      	nop
 8011258:	2000ac45 	.word	0x2000ac45

0801125c <srand>:
 801125c:	b538      	push	{r3, r4, r5, lr}
 801125e:	4b10      	ldr	r3, [pc, #64]	@ (80112a0 <srand+0x44>)
 8011260:	681d      	ldr	r5, [r3, #0]
 8011262:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011264:	4604      	mov	r4, r0
 8011266:	b9b3      	cbnz	r3, 8011296 <srand+0x3a>
 8011268:	2018      	movs	r0, #24
 801126a:	f7ff ff39 	bl	80110e0 <malloc>
 801126e:	4602      	mov	r2, r0
 8011270:	6328      	str	r0, [r5, #48]	@ 0x30
 8011272:	b920      	cbnz	r0, 801127e <srand+0x22>
 8011274:	4b0b      	ldr	r3, [pc, #44]	@ (80112a4 <srand+0x48>)
 8011276:	480c      	ldr	r0, [pc, #48]	@ (80112a8 <srand+0x4c>)
 8011278:	2146      	movs	r1, #70	@ 0x46
 801127a:	f000 fb65 	bl	8011948 <__assert_func>
 801127e:	490b      	ldr	r1, [pc, #44]	@ (80112ac <srand+0x50>)
 8011280:	4b0b      	ldr	r3, [pc, #44]	@ (80112b0 <srand+0x54>)
 8011282:	e9c0 1300 	strd	r1, r3, [r0]
 8011286:	4b0b      	ldr	r3, [pc, #44]	@ (80112b4 <srand+0x58>)
 8011288:	6083      	str	r3, [r0, #8]
 801128a:	230b      	movs	r3, #11
 801128c:	8183      	strh	r3, [r0, #12]
 801128e:	2100      	movs	r1, #0
 8011290:	2001      	movs	r0, #1
 8011292:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011296:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011298:	2200      	movs	r2, #0
 801129a:	611c      	str	r4, [r3, #16]
 801129c:	615a      	str	r2, [r3, #20]
 801129e:	bd38      	pop	{r3, r4, r5, pc}
 80112a0:	200000c0 	.word	0x200000c0
 80112a4:	0801314c 	.word	0x0801314c
 80112a8:	08013163 	.word	0x08013163
 80112ac:	abcd330e 	.word	0xabcd330e
 80112b0:	e66d1234 	.word	0xe66d1234
 80112b4:	0005deec 	.word	0x0005deec

080112b8 <rand>:
 80112b8:	4b16      	ldr	r3, [pc, #88]	@ (8011314 <rand+0x5c>)
 80112ba:	b510      	push	{r4, lr}
 80112bc:	681c      	ldr	r4, [r3, #0]
 80112be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80112c0:	b9b3      	cbnz	r3, 80112f0 <rand+0x38>
 80112c2:	2018      	movs	r0, #24
 80112c4:	f7ff ff0c 	bl	80110e0 <malloc>
 80112c8:	4602      	mov	r2, r0
 80112ca:	6320      	str	r0, [r4, #48]	@ 0x30
 80112cc:	b920      	cbnz	r0, 80112d8 <rand+0x20>
 80112ce:	4b12      	ldr	r3, [pc, #72]	@ (8011318 <rand+0x60>)
 80112d0:	4812      	ldr	r0, [pc, #72]	@ (801131c <rand+0x64>)
 80112d2:	2152      	movs	r1, #82	@ 0x52
 80112d4:	f000 fb38 	bl	8011948 <__assert_func>
 80112d8:	4911      	ldr	r1, [pc, #68]	@ (8011320 <rand+0x68>)
 80112da:	4b12      	ldr	r3, [pc, #72]	@ (8011324 <rand+0x6c>)
 80112dc:	e9c0 1300 	strd	r1, r3, [r0]
 80112e0:	4b11      	ldr	r3, [pc, #68]	@ (8011328 <rand+0x70>)
 80112e2:	6083      	str	r3, [r0, #8]
 80112e4:	230b      	movs	r3, #11
 80112e6:	8183      	strh	r3, [r0, #12]
 80112e8:	2100      	movs	r1, #0
 80112ea:	2001      	movs	r0, #1
 80112ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80112f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80112f2:	480e      	ldr	r0, [pc, #56]	@ (801132c <rand+0x74>)
 80112f4:	690b      	ldr	r3, [r1, #16]
 80112f6:	694c      	ldr	r4, [r1, #20]
 80112f8:	4a0d      	ldr	r2, [pc, #52]	@ (8011330 <rand+0x78>)
 80112fa:	4358      	muls	r0, r3
 80112fc:	fb02 0004 	mla	r0, r2, r4, r0
 8011300:	fba3 3202 	umull	r3, r2, r3, r2
 8011304:	3301      	adds	r3, #1
 8011306:	eb40 0002 	adc.w	r0, r0, r2
 801130a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801130e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011312:	bd10      	pop	{r4, pc}
 8011314:	200000c0 	.word	0x200000c0
 8011318:	0801314c 	.word	0x0801314c
 801131c:	08013163 	.word	0x08013163
 8011320:	abcd330e 	.word	0xabcd330e
 8011324:	e66d1234 	.word	0xe66d1234
 8011328:	0005deec 	.word	0x0005deec
 801132c:	5851f42d 	.word	0x5851f42d
 8011330:	4c957f2d 	.word	0x4c957f2d

08011334 <realloc>:
 8011334:	4b02      	ldr	r3, [pc, #8]	@ (8011340 <realloc+0xc>)
 8011336:	460a      	mov	r2, r1
 8011338:	4601      	mov	r1, r0
 801133a:	6818      	ldr	r0, [r3, #0]
 801133c:	f000 b802 	b.w	8011344 <_realloc_r>
 8011340:	200000c0 	.word	0x200000c0

08011344 <_realloc_r>:
 8011344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011348:	4680      	mov	r8, r0
 801134a:	4615      	mov	r5, r2
 801134c:	460c      	mov	r4, r1
 801134e:	b921      	cbnz	r1, 801135a <_realloc_r+0x16>
 8011350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011354:	4611      	mov	r1, r2
 8011356:	f7ff bef5 	b.w	8011144 <_malloc_r>
 801135a:	b92a      	cbnz	r2, 8011368 <_realloc_r+0x24>
 801135c:	f000 fb1e 	bl	801199c <_free_r>
 8011360:	2400      	movs	r4, #0
 8011362:	4620      	mov	r0, r4
 8011364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011368:	f000 fb62 	bl	8011a30 <_malloc_usable_size_r>
 801136c:	4285      	cmp	r5, r0
 801136e:	4606      	mov	r6, r0
 8011370:	d802      	bhi.n	8011378 <_realloc_r+0x34>
 8011372:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011376:	d8f4      	bhi.n	8011362 <_realloc_r+0x1e>
 8011378:	4629      	mov	r1, r5
 801137a:	4640      	mov	r0, r8
 801137c:	f7ff fee2 	bl	8011144 <_malloc_r>
 8011380:	4607      	mov	r7, r0
 8011382:	2800      	cmp	r0, #0
 8011384:	d0ec      	beq.n	8011360 <_realloc_r+0x1c>
 8011386:	42b5      	cmp	r5, r6
 8011388:	462a      	mov	r2, r5
 801138a:	4621      	mov	r1, r4
 801138c:	bf28      	it	cs
 801138e:	4632      	movcs	r2, r6
 8011390:	f000 facb 	bl	801192a <memcpy>
 8011394:	4621      	mov	r1, r4
 8011396:	4640      	mov	r0, r8
 8011398:	f000 fb00 	bl	801199c <_free_r>
 801139c:	463c      	mov	r4, r7
 801139e:	e7e0      	b.n	8011362 <_realloc_r+0x1e>

080113a0 <_strtoul_l.constprop.0>:
 80113a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113a4:	4e34      	ldr	r6, [pc, #208]	@ (8011478 <_strtoul_l.constprop.0+0xd8>)
 80113a6:	4686      	mov	lr, r0
 80113a8:	460d      	mov	r5, r1
 80113aa:	4628      	mov	r0, r5
 80113ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80113b0:	5d37      	ldrb	r7, [r6, r4]
 80113b2:	f017 0708 	ands.w	r7, r7, #8
 80113b6:	d1f8      	bne.n	80113aa <_strtoul_l.constprop.0+0xa>
 80113b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80113ba:	d12f      	bne.n	801141c <_strtoul_l.constprop.0+0x7c>
 80113bc:	782c      	ldrb	r4, [r5, #0]
 80113be:	2701      	movs	r7, #1
 80113c0:	1c85      	adds	r5, r0, #2
 80113c2:	f033 0010 	bics.w	r0, r3, #16
 80113c6:	d109      	bne.n	80113dc <_strtoul_l.constprop.0+0x3c>
 80113c8:	2c30      	cmp	r4, #48	@ 0x30
 80113ca:	d12c      	bne.n	8011426 <_strtoul_l.constprop.0+0x86>
 80113cc:	7828      	ldrb	r0, [r5, #0]
 80113ce:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80113d2:	2858      	cmp	r0, #88	@ 0x58
 80113d4:	d127      	bne.n	8011426 <_strtoul_l.constprop.0+0x86>
 80113d6:	786c      	ldrb	r4, [r5, #1]
 80113d8:	2310      	movs	r3, #16
 80113da:	3502      	adds	r5, #2
 80113dc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80113e0:	2600      	movs	r6, #0
 80113e2:	fbb8 f8f3 	udiv	r8, r8, r3
 80113e6:	fb03 f908 	mul.w	r9, r3, r8
 80113ea:	ea6f 0909 	mvn.w	r9, r9
 80113ee:	4630      	mov	r0, r6
 80113f0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80113f4:	f1bc 0f09 	cmp.w	ip, #9
 80113f8:	d81c      	bhi.n	8011434 <_strtoul_l.constprop.0+0x94>
 80113fa:	4664      	mov	r4, ip
 80113fc:	42a3      	cmp	r3, r4
 80113fe:	dd2a      	ble.n	8011456 <_strtoul_l.constprop.0+0xb6>
 8011400:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8011404:	d007      	beq.n	8011416 <_strtoul_l.constprop.0+0x76>
 8011406:	4580      	cmp	r8, r0
 8011408:	d322      	bcc.n	8011450 <_strtoul_l.constprop.0+0xb0>
 801140a:	d101      	bne.n	8011410 <_strtoul_l.constprop.0+0x70>
 801140c:	45a1      	cmp	r9, r4
 801140e:	db1f      	blt.n	8011450 <_strtoul_l.constprop.0+0xb0>
 8011410:	fb00 4003 	mla	r0, r0, r3, r4
 8011414:	2601      	movs	r6, #1
 8011416:	f815 4b01 	ldrb.w	r4, [r5], #1
 801141a:	e7e9      	b.n	80113f0 <_strtoul_l.constprop.0+0x50>
 801141c:	2c2b      	cmp	r4, #43	@ 0x2b
 801141e:	bf04      	itt	eq
 8011420:	782c      	ldrbeq	r4, [r5, #0]
 8011422:	1c85      	addeq	r5, r0, #2
 8011424:	e7cd      	b.n	80113c2 <_strtoul_l.constprop.0+0x22>
 8011426:	2b00      	cmp	r3, #0
 8011428:	d1d8      	bne.n	80113dc <_strtoul_l.constprop.0+0x3c>
 801142a:	2c30      	cmp	r4, #48	@ 0x30
 801142c:	bf0c      	ite	eq
 801142e:	2308      	moveq	r3, #8
 8011430:	230a      	movne	r3, #10
 8011432:	e7d3      	b.n	80113dc <_strtoul_l.constprop.0+0x3c>
 8011434:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011438:	f1bc 0f19 	cmp.w	ip, #25
 801143c:	d801      	bhi.n	8011442 <_strtoul_l.constprop.0+0xa2>
 801143e:	3c37      	subs	r4, #55	@ 0x37
 8011440:	e7dc      	b.n	80113fc <_strtoul_l.constprop.0+0x5c>
 8011442:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011446:	f1bc 0f19 	cmp.w	ip, #25
 801144a:	d804      	bhi.n	8011456 <_strtoul_l.constprop.0+0xb6>
 801144c:	3c57      	subs	r4, #87	@ 0x57
 801144e:	e7d5      	b.n	80113fc <_strtoul_l.constprop.0+0x5c>
 8011450:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8011454:	e7df      	b.n	8011416 <_strtoul_l.constprop.0+0x76>
 8011456:	1c73      	adds	r3, r6, #1
 8011458:	d106      	bne.n	8011468 <_strtoul_l.constprop.0+0xc8>
 801145a:	2322      	movs	r3, #34	@ 0x22
 801145c:	f8ce 3000 	str.w	r3, [lr]
 8011460:	4630      	mov	r0, r6
 8011462:	b932      	cbnz	r2, 8011472 <_strtoul_l.constprop.0+0xd2>
 8011464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011468:	b107      	cbz	r7, 801146c <_strtoul_l.constprop.0+0xcc>
 801146a:	4240      	negs	r0, r0
 801146c:	2a00      	cmp	r2, #0
 801146e:	d0f9      	beq.n	8011464 <_strtoul_l.constprop.0+0xc4>
 8011470:	b106      	cbz	r6, 8011474 <_strtoul_l.constprop.0+0xd4>
 8011472:	1e69      	subs	r1, r5, #1
 8011474:	6011      	str	r1, [r2, #0]
 8011476:	e7f5      	b.n	8011464 <_strtoul_l.constprop.0+0xc4>
 8011478:	080131bc 	.word	0x080131bc

0801147c <strtoul>:
 801147c:	4613      	mov	r3, r2
 801147e:	460a      	mov	r2, r1
 8011480:	4601      	mov	r1, r0
 8011482:	4802      	ldr	r0, [pc, #8]	@ (801148c <strtoul+0x10>)
 8011484:	6800      	ldr	r0, [r0, #0]
 8011486:	f7ff bf8b 	b.w	80113a0 <_strtoul_l.constprop.0>
 801148a:	bf00      	nop
 801148c:	200000c0 	.word	0x200000c0

08011490 <std>:
 8011490:	2300      	movs	r3, #0
 8011492:	b510      	push	{r4, lr}
 8011494:	4604      	mov	r4, r0
 8011496:	e9c0 3300 	strd	r3, r3, [r0]
 801149a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801149e:	6083      	str	r3, [r0, #8]
 80114a0:	8181      	strh	r1, [r0, #12]
 80114a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80114a4:	81c2      	strh	r2, [r0, #14]
 80114a6:	6183      	str	r3, [r0, #24]
 80114a8:	4619      	mov	r1, r3
 80114aa:	2208      	movs	r2, #8
 80114ac:	305c      	adds	r0, #92	@ 0x5c
 80114ae:	f000 f973 	bl	8011798 <memset>
 80114b2:	4b0d      	ldr	r3, [pc, #52]	@ (80114e8 <std+0x58>)
 80114b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80114b6:	4b0d      	ldr	r3, [pc, #52]	@ (80114ec <std+0x5c>)
 80114b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80114ba:	4b0d      	ldr	r3, [pc, #52]	@ (80114f0 <std+0x60>)
 80114bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80114be:	4b0d      	ldr	r3, [pc, #52]	@ (80114f4 <std+0x64>)
 80114c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80114c2:	4b0d      	ldr	r3, [pc, #52]	@ (80114f8 <std+0x68>)
 80114c4:	6224      	str	r4, [r4, #32]
 80114c6:	429c      	cmp	r4, r3
 80114c8:	d006      	beq.n	80114d8 <std+0x48>
 80114ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80114ce:	4294      	cmp	r4, r2
 80114d0:	d002      	beq.n	80114d8 <std+0x48>
 80114d2:	33d0      	adds	r3, #208	@ 0xd0
 80114d4:	429c      	cmp	r4, r3
 80114d6:	d105      	bne.n	80114e4 <std+0x54>
 80114d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80114dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114e0:	f000 ba18 	b.w	8011914 <__retarget_lock_init_recursive>
 80114e4:	bd10      	pop	{r4, pc}
 80114e6:	bf00      	nop
 80114e8:	080116a1 	.word	0x080116a1
 80114ec:	080116c3 	.word	0x080116c3
 80114f0:	080116fb 	.word	0x080116fb
 80114f4:	0801171f 	.word	0x0801171f
 80114f8:	2000ab04 	.word	0x2000ab04

080114fc <stdio_exit_handler>:
 80114fc:	4a02      	ldr	r2, [pc, #8]	@ (8011508 <stdio_exit_handler+0xc>)
 80114fe:	4903      	ldr	r1, [pc, #12]	@ (801150c <stdio_exit_handler+0x10>)
 8011500:	4803      	ldr	r0, [pc, #12]	@ (8011510 <stdio_exit_handler+0x14>)
 8011502:	f000 b869 	b.w	80115d8 <_fwalk_sglue>
 8011506:	bf00      	nop
 8011508:	200000b4 	.word	0x200000b4
 801150c:	08012399 	.word	0x08012399
 8011510:	200000c4 	.word	0x200000c4

08011514 <cleanup_stdio>:
 8011514:	6841      	ldr	r1, [r0, #4]
 8011516:	4b0c      	ldr	r3, [pc, #48]	@ (8011548 <cleanup_stdio+0x34>)
 8011518:	4299      	cmp	r1, r3
 801151a:	b510      	push	{r4, lr}
 801151c:	4604      	mov	r4, r0
 801151e:	d001      	beq.n	8011524 <cleanup_stdio+0x10>
 8011520:	f000 ff3a 	bl	8012398 <_fflush_r>
 8011524:	68a1      	ldr	r1, [r4, #8]
 8011526:	4b09      	ldr	r3, [pc, #36]	@ (801154c <cleanup_stdio+0x38>)
 8011528:	4299      	cmp	r1, r3
 801152a:	d002      	beq.n	8011532 <cleanup_stdio+0x1e>
 801152c:	4620      	mov	r0, r4
 801152e:	f000 ff33 	bl	8012398 <_fflush_r>
 8011532:	68e1      	ldr	r1, [r4, #12]
 8011534:	4b06      	ldr	r3, [pc, #24]	@ (8011550 <cleanup_stdio+0x3c>)
 8011536:	4299      	cmp	r1, r3
 8011538:	d004      	beq.n	8011544 <cleanup_stdio+0x30>
 801153a:	4620      	mov	r0, r4
 801153c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011540:	f000 bf2a 	b.w	8012398 <_fflush_r>
 8011544:	bd10      	pop	{r4, pc}
 8011546:	bf00      	nop
 8011548:	2000ab04 	.word	0x2000ab04
 801154c:	2000ab6c 	.word	0x2000ab6c
 8011550:	2000abd4 	.word	0x2000abd4

08011554 <global_stdio_init.part.0>:
 8011554:	b510      	push	{r4, lr}
 8011556:	4b0b      	ldr	r3, [pc, #44]	@ (8011584 <global_stdio_init.part.0+0x30>)
 8011558:	4c0b      	ldr	r4, [pc, #44]	@ (8011588 <global_stdio_init.part.0+0x34>)
 801155a:	4a0c      	ldr	r2, [pc, #48]	@ (801158c <global_stdio_init.part.0+0x38>)
 801155c:	601a      	str	r2, [r3, #0]
 801155e:	4620      	mov	r0, r4
 8011560:	2200      	movs	r2, #0
 8011562:	2104      	movs	r1, #4
 8011564:	f7ff ff94 	bl	8011490 <std>
 8011568:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801156c:	2201      	movs	r2, #1
 801156e:	2109      	movs	r1, #9
 8011570:	f7ff ff8e 	bl	8011490 <std>
 8011574:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011578:	2202      	movs	r2, #2
 801157a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801157e:	2112      	movs	r1, #18
 8011580:	f7ff bf86 	b.w	8011490 <std>
 8011584:	2000ac3c 	.word	0x2000ac3c
 8011588:	2000ab04 	.word	0x2000ab04
 801158c:	080114fd 	.word	0x080114fd

08011590 <__sfp_lock_acquire>:
 8011590:	4801      	ldr	r0, [pc, #4]	@ (8011598 <__sfp_lock_acquire+0x8>)
 8011592:	f000 b9c0 	b.w	8011916 <__retarget_lock_acquire_recursive>
 8011596:	bf00      	nop
 8011598:	2000ac46 	.word	0x2000ac46

0801159c <__sfp_lock_release>:
 801159c:	4801      	ldr	r0, [pc, #4]	@ (80115a4 <__sfp_lock_release+0x8>)
 801159e:	f000 b9bb 	b.w	8011918 <__retarget_lock_release_recursive>
 80115a2:	bf00      	nop
 80115a4:	2000ac46 	.word	0x2000ac46

080115a8 <__sinit>:
 80115a8:	b510      	push	{r4, lr}
 80115aa:	4604      	mov	r4, r0
 80115ac:	f7ff fff0 	bl	8011590 <__sfp_lock_acquire>
 80115b0:	6a23      	ldr	r3, [r4, #32]
 80115b2:	b11b      	cbz	r3, 80115bc <__sinit+0x14>
 80115b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115b8:	f7ff bff0 	b.w	801159c <__sfp_lock_release>
 80115bc:	4b04      	ldr	r3, [pc, #16]	@ (80115d0 <__sinit+0x28>)
 80115be:	6223      	str	r3, [r4, #32]
 80115c0:	4b04      	ldr	r3, [pc, #16]	@ (80115d4 <__sinit+0x2c>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d1f5      	bne.n	80115b4 <__sinit+0xc>
 80115c8:	f7ff ffc4 	bl	8011554 <global_stdio_init.part.0>
 80115cc:	e7f2      	b.n	80115b4 <__sinit+0xc>
 80115ce:	bf00      	nop
 80115d0:	08011515 	.word	0x08011515
 80115d4:	2000ac3c 	.word	0x2000ac3c

080115d8 <_fwalk_sglue>:
 80115d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115dc:	4607      	mov	r7, r0
 80115de:	4688      	mov	r8, r1
 80115e0:	4614      	mov	r4, r2
 80115e2:	2600      	movs	r6, #0
 80115e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115e8:	f1b9 0901 	subs.w	r9, r9, #1
 80115ec:	d505      	bpl.n	80115fa <_fwalk_sglue+0x22>
 80115ee:	6824      	ldr	r4, [r4, #0]
 80115f0:	2c00      	cmp	r4, #0
 80115f2:	d1f7      	bne.n	80115e4 <_fwalk_sglue+0xc>
 80115f4:	4630      	mov	r0, r6
 80115f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115fa:	89ab      	ldrh	r3, [r5, #12]
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	d907      	bls.n	8011610 <_fwalk_sglue+0x38>
 8011600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011604:	3301      	adds	r3, #1
 8011606:	d003      	beq.n	8011610 <_fwalk_sglue+0x38>
 8011608:	4629      	mov	r1, r5
 801160a:	4638      	mov	r0, r7
 801160c:	47c0      	blx	r8
 801160e:	4306      	orrs	r6, r0
 8011610:	3568      	adds	r5, #104	@ 0x68
 8011612:	e7e9      	b.n	80115e8 <_fwalk_sglue+0x10>

08011614 <iprintf>:
 8011614:	b40f      	push	{r0, r1, r2, r3}
 8011616:	b507      	push	{r0, r1, r2, lr}
 8011618:	4906      	ldr	r1, [pc, #24]	@ (8011634 <iprintf+0x20>)
 801161a:	ab04      	add	r3, sp, #16
 801161c:	6808      	ldr	r0, [r1, #0]
 801161e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011622:	6881      	ldr	r1, [r0, #8]
 8011624:	9301      	str	r3, [sp, #4]
 8011626:	f000 fb8d 	bl	8011d44 <_vfiprintf_r>
 801162a:	b003      	add	sp, #12
 801162c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011630:	b004      	add	sp, #16
 8011632:	4770      	bx	lr
 8011634:	200000c0 	.word	0x200000c0

08011638 <sniprintf>:
 8011638:	b40c      	push	{r2, r3}
 801163a:	b530      	push	{r4, r5, lr}
 801163c:	4b17      	ldr	r3, [pc, #92]	@ (801169c <sniprintf+0x64>)
 801163e:	1e0c      	subs	r4, r1, #0
 8011640:	681d      	ldr	r5, [r3, #0]
 8011642:	b09d      	sub	sp, #116	@ 0x74
 8011644:	da08      	bge.n	8011658 <sniprintf+0x20>
 8011646:	238b      	movs	r3, #139	@ 0x8b
 8011648:	602b      	str	r3, [r5, #0]
 801164a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801164e:	b01d      	add	sp, #116	@ 0x74
 8011650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011654:	b002      	add	sp, #8
 8011656:	4770      	bx	lr
 8011658:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801165c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011660:	bf14      	ite	ne
 8011662:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8011666:	4623      	moveq	r3, r4
 8011668:	9304      	str	r3, [sp, #16]
 801166a:	9307      	str	r3, [sp, #28]
 801166c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011670:	9002      	str	r0, [sp, #8]
 8011672:	9006      	str	r0, [sp, #24]
 8011674:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011678:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801167a:	ab21      	add	r3, sp, #132	@ 0x84
 801167c:	a902      	add	r1, sp, #8
 801167e:	4628      	mov	r0, r5
 8011680:	9301      	str	r3, [sp, #4]
 8011682:	f000 fa39 	bl	8011af8 <_svfiprintf_r>
 8011686:	1c43      	adds	r3, r0, #1
 8011688:	bfbc      	itt	lt
 801168a:	238b      	movlt	r3, #139	@ 0x8b
 801168c:	602b      	strlt	r3, [r5, #0]
 801168e:	2c00      	cmp	r4, #0
 8011690:	d0dd      	beq.n	801164e <sniprintf+0x16>
 8011692:	9b02      	ldr	r3, [sp, #8]
 8011694:	2200      	movs	r2, #0
 8011696:	701a      	strb	r2, [r3, #0]
 8011698:	e7d9      	b.n	801164e <sniprintf+0x16>
 801169a:	bf00      	nop
 801169c:	200000c0 	.word	0x200000c0

080116a0 <__sread>:
 80116a0:	b510      	push	{r4, lr}
 80116a2:	460c      	mov	r4, r1
 80116a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116a8:	f000 f8d6 	bl	8011858 <_read_r>
 80116ac:	2800      	cmp	r0, #0
 80116ae:	bfab      	itete	ge
 80116b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80116b2:	89a3      	ldrhlt	r3, [r4, #12]
 80116b4:	181b      	addge	r3, r3, r0
 80116b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80116ba:	bfac      	ite	ge
 80116bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80116be:	81a3      	strhlt	r3, [r4, #12]
 80116c0:	bd10      	pop	{r4, pc}

080116c2 <__swrite>:
 80116c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116c6:	461f      	mov	r7, r3
 80116c8:	898b      	ldrh	r3, [r1, #12]
 80116ca:	05db      	lsls	r3, r3, #23
 80116cc:	4605      	mov	r5, r0
 80116ce:	460c      	mov	r4, r1
 80116d0:	4616      	mov	r6, r2
 80116d2:	d505      	bpl.n	80116e0 <__swrite+0x1e>
 80116d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116d8:	2302      	movs	r3, #2
 80116da:	2200      	movs	r2, #0
 80116dc:	f000 f8aa 	bl	8011834 <_lseek_r>
 80116e0:	89a3      	ldrh	r3, [r4, #12]
 80116e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80116ea:	81a3      	strh	r3, [r4, #12]
 80116ec:	4632      	mov	r2, r6
 80116ee:	463b      	mov	r3, r7
 80116f0:	4628      	mov	r0, r5
 80116f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116f6:	f000 b8d1 	b.w	801189c <_write_r>

080116fa <__sseek>:
 80116fa:	b510      	push	{r4, lr}
 80116fc:	460c      	mov	r4, r1
 80116fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011702:	f000 f897 	bl	8011834 <_lseek_r>
 8011706:	1c43      	adds	r3, r0, #1
 8011708:	89a3      	ldrh	r3, [r4, #12]
 801170a:	bf15      	itete	ne
 801170c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801170e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011712:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011716:	81a3      	strheq	r3, [r4, #12]
 8011718:	bf18      	it	ne
 801171a:	81a3      	strhne	r3, [r4, #12]
 801171c:	bd10      	pop	{r4, pc}

0801171e <__sclose>:
 801171e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011722:	f000 b877 	b.w	8011814 <_close_r>

08011726 <_vsniprintf_r>:
 8011726:	b530      	push	{r4, r5, lr}
 8011728:	4614      	mov	r4, r2
 801172a:	2c00      	cmp	r4, #0
 801172c:	b09b      	sub	sp, #108	@ 0x6c
 801172e:	4605      	mov	r5, r0
 8011730:	461a      	mov	r2, r3
 8011732:	da05      	bge.n	8011740 <_vsniprintf_r+0x1a>
 8011734:	238b      	movs	r3, #139	@ 0x8b
 8011736:	6003      	str	r3, [r0, #0]
 8011738:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801173c:	b01b      	add	sp, #108	@ 0x6c
 801173e:	bd30      	pop	{r4, r5, pc}
 8011740:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011744:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011748:	bf14      	ite	ne
 801174a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801174e:	4623      	moveq	r3, r4
 8011750:	9302      	str	r3, [sp, #8]
 8011752:	9305      	str	r3, [sp, #20]
 8011754:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011758:	9100      	str	r1, [sp, #0]
 801175a:	9104      	str	r1, [sp, #16]
 801175c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011760:	4669      	mov	r1, sp
 8011762:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011764:	f000 f9c8 	bl	8011af8 <_svfiprintf_r>
 8011768:	1c43      	adds	r3, r0, #1
 801176a:	bfbc      	itt	lt
 801176c:	238b      	movlt	r3, #139	@ 0x8b
 801176e:	602b      	strlt	r3, [r5, #0]
 8011770:	2c00      	cmp	r4, #0
 8011772:	d0e3      	beq.n	801173c <_vsniprintf_r+0x16>
 8011774:	9b00      	ldr	r3, [sp, #0]
 8011776:	2200      	movs	r2, #0
 8011778:	701a      	strb	r2, [r3, #0]
 801177a:	e7df      	b.n	801173c <_vsniprintf_r+0x16>

0801177c <vsniprintf>:
 801177c:	b507      	push	{r0, r1, r2, lr}
 801177e:	9300      	str	r3, [sp, #0]
 8011780:	4613      	mov	r3, r2
 8011782:	460a      	mov	r2, r1
 8011784:	4601      	mov	r1, r0
 8011786:	4803      	ldr	r0, [pc, #12]	@ (8011794 <vsniprintf+0x18>)
 8011788:	6800      	ldr	r0, [r0, #0]
 801178a:	f7ff ffcc 	bl	8011726 <_vsniprintf_r>
 801178e:	b003      	add	sp, #12
 8011790:	f85d fb04 	ldr.w	pc, [sp], #4
 8011794:	200000c0 	.word	0x200000c0

08011798 <memset>:
 8011798:	4402      	add	r2, r0
 801179a:	4603      	mov	r3, r0
 801179c:	4293      	cmp	r3, r2
 801179e:	d100      	bne.n	80117a2 <memset+0xa>
 80117a0:	4770      	bx	lr
 80117a2:	f803 1b01 	strb.w	r1, [r3], #1
 80117a6:	e7f9      	b.n	801179c <memset+0x4>

080117a8 <strchr>:
 80117a8:	b2c9      	uxtb	r1, r1
 80117aa:	4603      	mov	r3, r0
 80117ac:	4618      	mov	r0, r3
 80117ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117b2:	b112      	cbz	r2, 80117ba <strchr+0x12>
 80117b4:	428a      	cmp	r2, r1
 80117b6:	d1f9      	bne.n	80117ac <strchr+0x4>
 80117b8:	4770      	bx	lr
 80117ba:	2900      	cmp	r1, #0
 80117bc:	bf18      	it	ne
 80117be:	2000      	movne	r0, #0
 80117c0:	4770      	bx	lr

080117c2 <strncmp>:
 80117c2:	b510      	push	{r4, lr}
 80117c4:	b16a      	cbz	r2, 80117e2 <strncmp+0x20>
 80117c6:	3901      	subs	r1, #1
 80117c8:	1884      	adds	r4, r0, r2
 80117ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d103      	bne.n	80117de <strncmp+0x1c>
 80117d6:	42a0      	cmp	r0, r4
 80117d8:	d001      	beq.n	80117de <strncmp+0x1c>
 80117da:	2a00      	cmp	r2, #0
 80117dc:	d1f5      	bne.n	80117ca <strncmp+0x8>
 80117de:	1ad0      	subs	r0, r2, r3
 80117e0:	bd10      	pop	{r4, pc}
 80117e2:	4610      	mov	r0, r2
 80117e4:	e7fc      	b.n	80117e0 <strncmp+0x1e>

080117e6 <strstr>:
 80117e6:	780a      	ldrb	r2, [r1, #0]
 80117e8:	b570      	push	{r4, r5, r6, lr}
 80117ea:	b96a      	cbnz	r2, 8011808 <strstr+0x22>
 80117ec:	bd70      	pop	{r4, r5, r6, pc}
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d109      	bne.n	8011806 <strstr+0x20>
 80117f2:	460c      	mov	r4, r1
 80117f4:	4605      	mov	r5, r0
 80117f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d0f6      	beq.n	80117ec <strstr+0x6>
 80117fe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011802:	429e      	cmp	r6, r3
 8011804:	d0f7      	beq.n	80117f6 <strstr+0x10>
 8011806:	3001      	adds	r0, #1
 8011808:	7803      	ldrb	r3, [r0, #0]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d1ef      	bne.n	80117ee <strstr+0x8>
 801180e:	4618      	mov	r0, r3
 8011810:	e7ec      	b.n	80117ec <strstr+0x6>
	...

08011814 <_close_r>:
 8011814:	b538      	push	{r3, r4, r5, lr}
 8011816:	4d06      	ldr	r5, [pc, #24]	@ (8011830 <_close_r+0x1c>)
 8011818:	2300      	movs	r3, #0
 801181a:	4604      	mov	r4, r0
 801181c:	4608      	mov	r0, r1
 801181e:	602b      	str	r3, [r5, #0]
 8011820:	f7ef fe98 	bl	8001554 <_close>
 8011824:	1c43      	adds	r3, r0, #1
 8011826:	d102      	bne.n	801182e <_close_r+0x1a>
 8011828:	682b      	ldr	r3, [r5, #0]
 801182a:	b103      	cbz	r3, 801182e <_close_r+0x1a>
 801182c:	6023      	str	r3, [r4, #0]
 801182e:	bd38      	pop	{r3, r4, r5, pc}
 8011830:	2000ac40 	.word	0x2000ac40

08011834 <_lseek_r>:
 8011834:	b538      	push	{r3, r4, r5, lr}
 8011836:	4d07      	ldr	r5, [pc, #28]	@ (8011854 <_lseek_r+0x20>)
 8011838:	4604      	mov	r4, r0
 801183a:	4608      	mov	r0, r1
 801183c:	4611      	mov	r1, r2
 801183e:	2200      	movs	r2, #0
 8011840:	602a      	str	r2, [r5, #0]
 8011842:	461a      	mov	r2, r3
 8011844:	f7ef fead 	bl	80015a2 <_lseek>
 8011848:	1c43      	adds	r3, r0, #1
 801184a:	d102      	bne.n	8011852 <_lseek_r+0x1e>
 801184c:	682b      	ldr	r3, [r5, #0]
 801184e:	b103      	cbz	r3, 8011852 <_lseek_r+0x1e>
 8011850:	6023      	str	r3, [r4, #0]
 8011852:	bd38      	pop	{r3, r4, r5, pc}
 8011854:	2000ac40 	.word	0x2000ac40

08011858 <_read_r>:
 8011858:	b538      	push	{r3, r4, r5, lr}
 801185a:	4d07      	ldr	r5, [pc, #28]	@ (8011878 <_read_r+0x20>)
 801185c:	4604      	mov	r4, r0
 801185e:	4608      	mov	r0, r1
 8011860:	4611      	mov	r1, r2
 8011862:	2200      	movs	r2, #0
 8011864:	602a      	str	r2, [r5, #0]
 8011866:	461a      	mov	r2, r3
 8011868:	f7ef fe3b 	bl	80014e2 <_read>
 801186c:	1c43      	adds	r3, r0, #1
 801186e:	d102      	bne.n	8011876 <_read_r+0x1e>
 8011870:	682b      	ldr	r3, [r5, #0]
 8011872:	b103      	cbz	r3, 8011876 <_read_r+0x1e>
 8011874:	6023      	str	r3, [r4, #0]
 8011876:	bd38      	pop	{r3, r4, r5, pc}
 8011878:	2000ac40 	.word	0x2000ac40

0801187c <_sbrk_r>:
 801187c:	b538      	push	{r3, r4, r5, lr}
 801187e:	4d06      	ldr	r5, [pc, #24]	@ (8011898 <_sbrk_r+0x1c>)
 8011880:	2300      	movs	r3, #0
 8011882:	4604      	mov	r4, r0
 8011884:	4608      	mov	r0, r1
 8011886:	602b      	str	r3, [r5, #0]
 8011888:	f7ef fe98 	bl	80015bc <_sbrk>
 801188c:	1c43      	adds	r3, r0, #1
 801188e:	d102      	bne.n	8011896 <_sbrk_r+0x1a>
 8011890:	682b      	ldr	r3, [r5, #0]
 8011892:	b103      	cbz	r3, 8011896 <_sbrk_r+0x1a>
 8011894:	6023      	str	r3, [r4, #0]
 8011896:	bd38      	pop	{r3, r4, r5, pc}
 8011898:	2000ac40 	.word	0x2000ac40

0801189c <_write_r>:
 801189c:	b538      	push	{r3, r4, r5, lr}
 801189e:	4d07      	ldr	r5, [pc, #28]	@ (80118bc <_write_r+0x20>)
 80118a0:	4604      	mov	r4, r0
 80118a2:	4608      	mov	r0, r1
 80118a4:	4611      	mov	r1, r2
 80118a6:	2200      	movs	r2, #0
 80118a8:	602a      	str	r2, [r5, #0]
 80118aa:	461a      	mov	r2, r3
 80118ac:	f7ef fe36 	bl	800151c <_write>
 80118b0:	1c43      	adds	r3, r0, #1
 80118b2:	d102      	bne.n	80118ba <_write_r+0x1e>
 80118b4:	682b      	ldr	r3, [r5, #0]
 80118b6:	b103      	cbz	r3, 80118ba <_write_r+0x1e>
 80118b8:	6023      	str	r3, [r4, #0]
 80118ba:	bd38      	pop	{r3, r4, r5, pc}
 80118bc:	2000ac40 	.word	0x2000ac40

080118c0 <__errno>:
 80118c0:	4b01      	ldr	r3, [pc, #4]	@ (80118c8 <__errno+0x8>)
 80118c2:	6818      	ldr	r0, [r3, #0]
 80118c4:	4770      	bx	lr
 80118c6:	bf00      	nop
 80118c8:	200000c0 	.word	0x200000c0

080118cc <__libc_init_array>:
 80118cc:	b570      	push	{r4, r5, r6, lr}
 80118ce:	4d0d      	ldr	r5, [pc, #52]	@ (8011904 <__libc_init_array+0x38>)
 80118d0:	4c0d      	ldr	r4, [pc, #52]	@ (8011908 <__libc_init_array+0x3c>)
 80118d2:	1b64      	subs	r4, r4, r5
 80118d4:	10a4      	asrs	r4, r4, #2
 80118d6:	2600      	movs	r6, #0
 80118d8:	42a6      	cmp	r6, r4
 80118da:	d109      	bne.n	80118f0 <__libc_init_array+0x24>
 80118dc:	4d0b      	ldr	r5, [pc, #44]	@ (801190c <__libc_init_array+0x40>)
 80118de:	4c0c      	ldr	r4, [pc, #48]	@ (8011910 <__libc_init_array+0x44>)
 80118e0:	f000 ff12 	bl	8012708 <_init>
 80118e4:	1b64      	subs	r4, r4, r5
 80118e6:	10a4      	asrs	r4, r4, #2
 80118e8:	2600      	movs	r6, #0
 80118ea:	42a6      	cmp	r6, r4
 80118ec:	d105      	bne.n	80118fa <__libc_init_array+0x2e>
 80118ee:	bd70      	pop	{r4, r5, r6, pc}
 80118f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80118f4:	4798      	blx	r3
 80118f6:	3601      	adds	r6, #1
 80118f8:	e7ee      	b.n	80118d8 <__libc_init_array+0xc>
 80118fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80118fe:	4798      	blx	r3
 8011900:	3601      	adds	r6, #1
 8011902:	e7f2      	b.n	80118ea <__libc_init_array+0x1e>
 8011904:	08013334 	.word	0x08013334
 8011908:	08013334 	.word	0x08013334
 801190c:	08013334 	.word	0x08013334
 8011910:	0801333c 	.word	0x0801333c

08011914 <__retarget_lock_init_recursive>:
 8011914:	4770      	bx	lr

08011916 <__retarget_lock_acquire_recursive>:
 8011916:	4770      	bx	lr

08011918 <__retarget_lock_release_recursive>:
 8011918:	4770      	bx	lr

0801191a <strcpy>:
 801191a:	4603      	mov	r3, r0
 801191c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011920:	f803 2b01 	strb.w	r2, [r3], #1
 8011924:	2a00      	cmp	r2, #0
 8011926:	d1f9      	bne.n	801191c <strcpy+0x2>
 8011928:	4770      	bx	lr

0801192a <memcpy>:
 801192a:	440a      	add	r2, r1
 801192c:	4291      	cmp	r1, r2
 801192e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011932:	d100      	bne.n	8011936 <memcpy+0xc>
 8011934:	4770      	bx	lr
 8011936:	b510      	push	{r4, lr}
 8011938:	f811 4b01 	ldrb.w	r4, [r1], #1
 801193c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011940:	4291      	cmp	r1, r2
 8011942:	d1f9      	bne.n	8011938 <memcpy+0xe>
 8011944:	bd10      	pop	{r4, pc}
	...

08011948 <__assert_func>:
 8011948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801194a:	4614      	mov	r4, r2
 801194c:	461a      	mov	r2, r3
 801194e:	4b09      	ldr	r3, [pc, #36]	@ (8011974 <__assert_func+0x2c>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	4605      	mov	r5, r0
 8011954:	68d8      	ldr	r0, [r3, #12]
 8011956:	b954      	cbnz	r4, 801196e <__assert_func+0x26>
 8011958:	4b07      	ldr	r3, [pc, #28]	@ (8011978 <__assert_func+0x30>)
 801195a:	461c      	mov	r4, r3
 801195c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011960:	9100      	str	r1, [sp, #0]
 8011962:	462b      	mov	r3, r5
 8011964:	4905      	ldr	r1, [pc, #20]	@ (801197c <__assert_func+0x34>)
 8011966:	f000 fd3f 	bl	80123e8 <fiprintf>
 801196a:	f000 fdfd 	bl	8012568 <abort>
 801196e:	4b04      	ldr	r3, [pc, #16]	@ (8011980 <__assert_func+0x38>)
 8011970:	e7f4      	b.n	801195c <__assert_func+0x14>
 8011972:	bf00      	nop
 8011974:	200000c0 	.word	0x200000c0
 8011978:	080132f7 	.word	0x080132f7
 801197c:	080132c9 	.word	0x080132c9
 8011980:	080132bc 	.word	0x080132bc

08011984 <__env_lock>:
 8011984:	4801      	ldr	r0, [pc, #4]	@ (801198c <__env_lock+0x8>)
 8011986:	f7ff bfc6 	b.w	8011916 <__retarget_lock_acquire_recursive>
 801198a:	bf00      	nop
 801198c:	2000ac44 	.word	0x2000ac44

08011990 <__env_unlock>:
 8011990:	4801      	ldr	r0, [pc, #4]	@ (8011998 <__env_unlock+0x8>)
 8011992:	f7ff bfc1 	b.w	8011918 <__retarget_lock_release_recursive>
 8011996:	bf00      	nop
 8011998:	2000ac44 	.word	0x2000ac44

0801199c <_free_r>:
 801199c:	b538      	push	{r3, r4, r5, lr}
 801199e:	4605      	mov	r5, r0
 80119a0:	2900      	cmp	r1, #0
 80119a2:	d041      	beq.n	8011a28 <_free_r+0x8c>
 80119a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119a8:	1f0c      	subs	r4, r1, #4
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	bfb8      	it	lt
 80119ae:	18e4      	addlt	r4, r4, r3
 80119b0:	f7ff fc48 	bl	8011244 <__malloc_lock>
 80119b4:	4a1d      	ldr	r2, [pc, #116]	@ (8011a2c <_free_r+0x90>)
 80119b6:	6813      	ldr	r3, [r2, #0]
 80119b8:	b933      	cbnz	r3, 80119c8 <_free_r+0x2c>
 80119ba:	6063      	str	r3, [r4, #4]
 80119bc:	6014      	str	r4, [r2, #0]
 80119be:	4628      	mov	r0, r5
 80119c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119c4:	f7ff bc44 	b.w	8011250 <__malloc_unlock>
 80119c8:	42a3      	cmp	r3, r4
 80119ca:	d908      	bls.n	80119de <_free_r+0x42>
 80119cc:	6820      	ldr	r0, [r4, #0]
 80119ce:	1821      	adds	r1, r4, r0
 80119d0:	428b      	cmp	r3, r1
 80119d2:	bf01      	itttt	eq
 80119d4:	6819      	ldreq	r1, [r3, #0]
 80119d6:	685b      	ldreq	r3, [r3, #4]
 80119d8:	1809      	addeq	r1, r1, r0
 80119da:	6021      	streq	r1, [r4, #0]
 80119dc:	e7ed      	b.n	80119ba <_free_r+0x1e>
 80119de:	461a      	mov	r2, r3
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	b10b      	cbz	r3, 80119e8 <_free_r+0x4c>
 80119e4:	42a3      	cmp	r3, r4
 80119e6:	d9fa      	bls.n	80119de <_free_r+0x42>
 80119e8:	6811      	ldr	r1, [r2, #0]
 80119ea:	1850      	adds	r0, r2, r1
 80119ec:	42a0      	cmp	r0, r4
 80119ee:	d10b      	bne.n	8011a08 <_free_r+0x6c>
 80119f0:	6820      	ldr	r0, [r4, #0]
 80119f2:	4401      	add	r1, r0
 80119f4:	1850      	adds	r0, r2, r1
 80119f6:	4283      	cmp	r3, r0
 80119f8:	6011      	str	r1, [r2, #0]
 80119fa:	d1e0      	bne.n	80119be <_free_r+0x22>
 80119fc:	6818      	ldr	r0, [r3, #0]
 80119fe:	685b      	ldr	r3, [r3, #4]
 8011a00:	6053      	str	r3, [r2, #4]
 8011a02:	4408      	add	r0, r1
 8011a04:	6010      	str	r0, [r2, #0]
 8011a06:	e7da      	b.n	80119be <_free_r+0x22>
 8011a08:	d902      	bls.n	8011a10 <_free_r+0x74>
 8011a0a:	230c      	movs	r3, #12
 8011a0c:	602b      	str	r3, [r5, #0]
 8011a0e:	e7d6      	b.n	80119be <_free_r+0x22>
 8011a10:	6820      	ldr	r0, [r4, #0]
 8011a12:	1821      	adds	r1, r4, r0
 8011a14:	428b      	cmp	r3, r1
 8011a16:	bf04      	itt	eq
 8011a18:	6819      	ldreq	r1, [r3, #0]
 8011a1a:	685b      	ldreq	r3, [r3, #4]
 8011a1c:	6063      	str	r3, [r4, #4]
 8011a1e:	bf04      	itt	eq
 8011a20:	1809      	addeq	r1, r1, r0
 8011a22:	6021      	streq	r1, [r4, #0]
 8011a24:	6054      	str	r4, [r2, #4]
 8011a26:	e7ca      	b.n	80119be <_free_r+0x22>
 8011a28:	bd38      	pop	{r3, r4, r5, pc}
 8011a2a:	bf00      	nop
 8011a2c:	2000ab00 	.word	0x2000ab00

08011a30 <_malloc_usable_size_r>:
 8011a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a34:	1f18      	subs	r0, r3, #4
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	bfbc      	itt	lt
 8011a3a:	580b      	ldrlt	r3, [r1, r0]
 8011a3c:	18c0      	addlt	r0, r0, r3
 8011a3e:	4770      	bx	lr

08011a40 <__ssputs_r>:
 8011a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a44:	688e      	ldr	r6, [r1, #8]
 8011a46:	461f      	mov	r7, r3
 8011a48:	42be      	cmp	r6, r7
 8011a4a:	680b      	ldr	r3, [r1, #0]
 8011a4c:	4682      	mov	sl, r0
 8011a4e:	460c      	mov	r4, r1
 8011a50:	4690      	mov	r8, r2
 8011a52:	d82d      	bhi.n	8011ab0 <__ssputs_r+0x70>
 8011a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011a5c:	d026      	beq.n	8011aac <__ssputs_r+0x6c>
 8011a5e:	6965      	ldr	r5, [r4, #20]
 8011a60:	6909      	ldr	r1, [r1, #16]
 8011a62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a66:	eba3 0901 	sub.w	r9, r3, r1
 8011a6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a6e:	1c7b      	adds	r3, r7, #1
 8011a70:	444b      	add	r3, r9
 8011a72:	106d      	asrs	r5, r5, #1
 8011a74:	429d      	cmp	r5, r3
 8011a76:	bf38      	it	cc
 8011a78:	461d      	movcc	r5, r3
 8011a7a:	0553      	lsls	r3, r2, #21
 8011a7c:	d527      	bpl.n	8011ace <__ssputs_r+0x8e>
 8011a7e:	4629      	mov	r1, r5
 8011a80:	f7ff fb60 	bl	8011144 <_malloc_r>
 8011a84:	4606      	mov	r6, r0
 8011a86:	b360      	cbz	r0, 8011ae2 <__ssputs_r+0xa2>
 8011a88:	6921      	ldr	r1, [r4, #16]
 8011a8a:	464a      	mov	r2, r9
 8011a8c:	f7ff ff4d 	bl	801192a <memcpy>
 8011a90:	89a3      	ldrh	r3, [r4, #12]
 8011a92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a9a:	81a3      	strh	r3, [r4, #12]
 8011a9c:	6126      	str	r6, [r4, #16]
 8011a9e:	6165      	str	r5, [r4, #20]
 8011aa0:	444e      	add	r6, r9
 8011aa2:	eba5 0509 	sub.w	r5, r5, r9
 8011aa6:	6026      	str	r6, [r4, #0]
 8011aa8:	60a5      	str	r5, [r4, #8]
 8011aaa:	463e      	mov	r6, r7
 8011aac:	42be      	cmp	r6, r7
 8011aae:	d900      	bls.n	8011ab2 <__ssputs_r+0x72>
 8011ab0:	463e      	mov	r6, r7
 8011ab2:	6820      	ldr	r0, [r4, #0]
 8011ab4:	4632      	mov	r2, r6
 8011ab6:	4641      	mov	r1, r8
 8011ab8:	f000 fd3c 	bl	8012534 <memmove>
 8011abc:	68a3      	ldr	r3, [r4, #8]
 8011abe:	1b9b      	subs	r3, r3, r6
 8011ac0:	60a3      	str	r3, [r4, #8]
 8011ac2:	6823      	ldr	r3, [r4, #0]
 8011ac4:	4433      	add	r3, r6
 8011ac6:	6023      	str	r3, [r4, #0]
 8011ac8:	2000      	movs	r0, #0
 8011aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ace:	462a      	mov	r2, r5
 8011ad0:	f7ff fc38 	bl	8011344 <_realloc_r>
 8011ad4:	4606      	mov	r6, r0
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	d1e0      	bne.n	8011a9c <__ssputs_r+0x5c>
 8011ada:	6921      	ldr	r1, [r4, #16]
 8011adc:	4650      	mov	r0, sl
 8011ade:	f7ff ff5d 	bl	801199c <_free_r>
 8011ae2:	230c      	movs	r3, #12
 8011ae4:	f8ca 3000 	str.w	r3, [sl]
 8011ae8:	89a3      	ldrh	r3, [r4, #12]
 8011aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011aee:	81a3      	strh	r3, [r4, #12]
 8011af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011af4:	e7e9      	b.n	8011aca <__ssputs_r+0x8a>
	...

08011af8 <_svfiprintf_r>:
 8011af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011afc:	4698      	mov	r8, r3
 8011afe:	898b      	ldrh	r3, [r1, #12]
 8011b00:	061b      	lsls	r3, r3, #24
 8011b02:	b09d      	sub	sp, #116	@ 0x74
 8011b04:	4607      	mov	r7, r0
 8011b06:	460d      	mov	r5, r1
 8011b08:	4614      	mov	r4, r2
 8011b0a:	d510      	bpl.n	8011b2e <_svfiprintf_r+0x36>
 8011b0c:	690b      	ldr	r3, [r1, #16]
 8011b0e:	b973      	cbnz	r3, 8011b2e <_svfiprintf_r+0x36>
 8011b10:	2140      	movs	r1, #64	@ 0x40
 8011b12:	f7ff fb17 	bl	8011144 <_malloc_r>
 8011b16:	6028      	str	r0, [r5, #0]
 8011b18:	6128      	str	r0, [r5, #16]
 8011b1a:	b930      	cbnz	r0, 8011b2a <_svfiprintf_r+0x32>
 8011b1c:	230c      	movs	r3, #12
 8011b1e:	603b      	str	r3, [r7, #0]
 8011b20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b24:	b01d      	add	sp, #116	@ 0x74
 8011b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b2a:	2340      	movs	r3, #64	@ 0x40
 8011b2c:	616b      	str	r3, [r5, #20]
 8011b2e:	2300      	movs	r3, #0
 8011b30:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b32:	2320      	movs	r3, #32
 8011b34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b3c:	2330      	movs	r3, #48	@ 0x30
 8011b3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011cdc <_svfiprintf_r+0x1e4>
 8011b42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b46:	f04f 0901 	mov.w	r9, #1
 8011b4a:	4623      	mov	r3, r4
 8011b4c:	469a      	mov	sl, r3
 8011b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b52:	b10a      	cbz	r2, 8011b58 <_svfiprintf_r+0x60>
 8011b54:	2a25      	cmp	r2, #37	@ 0x25
 8011b56:	d1f9      	bne.n	8011b4c <_svfiprintf_r+0x54>
 8011b58:	ebba 0b04 	subs.w	fp, sl, r4
 8011b5c:	d00b      	beq.n	8011b76 <_svfiprintf_r+0x7e>
 8011b5e:	465b      	mov	r3, fp
 8011b60:	4622      	mov	r2, r4
 8011b62:	4629      	mov	r1, r5
 8011b64:	4638      	mov	r0, r7
 8011b66:	f7ff ff6b 	bl	8011a40 <__ssputs_r>
 8011b6a:	3001      	adds	r0, #1
 8011b6c:	f000 80a7 	beq.w	8011cbe <_svfiprintf_r+0x1c6>
 8011b70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b72:	445a      	add	r2, fp
 8011b74:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b76:	f89a 3000 	ldrb.w	r3, [sl]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	f000 809f 	beq.w	8011cbe <_svfiprintf_r+0x1c6>
 8011b80:	2300      	movs	r3, #0
 8011b82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b8a:	f10a 0a01 	add.w	sl, sl, #1
 8011b8e:	9304      	str	r3, [sp, #16]
 8011b90:	9307      	str	r3, [sp, #28]
 8011b92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b96:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b98:	4654      	mov	r4, sl
 8011b9a:	2205      	movs	r2, #5
 8011b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ba0:	484e      	ldr	r0, [pc, #312]	@ (8011cdc <_svfiprintf_r+0x1e4>)
 8011ba2:	f7ee fb55 	bl	8000250 <memchr>
 8011ba6:	9a04      	ldr	r2, [sp, #16]
 8011ba8:	b9d8      	cbnz	r0, 8011be2 <_svfiprintf_r+0xea>
 8011baa:	06d0      	lsls	r0, r2, #27
 8011bac:	bf44      	itt	mi
 8011bae:	2320      	movmi	r3, #32
 8011bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bb4:	0711      	lsls	r1, r2, #28
 8011bb6:	bf44      	itt	mi
 8011bb8:	232b      	movmi	r3, #43	@ 0x2b
 8011bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8011bc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bc4:	d015      	beq.n	8011bf2 <_svfiprintf_r+0xfa>
 8011bc6:	9a07      	ldr	r2, [sp, #28]
 8011bc8:	4654      	mov	r4, sl
 8011bca:	2000      	movs	r0, #0
 8011bcc:	f04f 0c0a 	mov.w	ip, #10
 8011bd0:	4621      	mov	r1, r4
 8011bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bd6:	3b30      	subs	r3, #48	@ 0x30
 8011bd8:	2b09      	cmp	r3, #9
 8011bda:	d94b      	bls.n	8011c74 <_svfiprintf_r+0x17c>
 8011bdc:	b1b0      	cbz	r0, 8011c0c <_svfiprintf_r+0x114>
 8011bde:	9207      	str	r2, [sp, #28]
 8011be0:	e014      	b.n	8011c0c <_svfiprintf_r+0x114>
 8011be2:	eba0 0308 	sub.w	r3, r0, r8
 8011be6:	fa09 f303 	lsl.w	r3, r9, r3
 8011bea:	4313      	orrs	r3, r2
 8011bec:	9304      	str	r3, [sp, #16]
 8011bee:	46a2      	mov	sl, r4
 8011bf0:	e7d2      	b.n	8011b98 <_svfiprintf_r+0xa0>
 8011bf2:	9b03      	ldr	r3, [sp, #12]
 8011bf4:	1d19      	adds	r1, r3, #4
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	9103      	str	r1, [sp, #12]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	bfbb      	ittet	lt
 8011bfe:	425b      	neglt	r3, r3
 8011c00:	f042 0202 	orrlt.w	r2, r2, #2
 8011c04:	9307      	strge	r3, [sp, #28]
 8011c06:	9307      	strlt	r3, [sp, #28]
 8011c08:	bfb8      	it	lt
 8011c0a:	9204      	strlt	r2, [sp, #16]
 8011c0c:	7823      	ldrb	r3, [r4, #0]
 8011c0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c10:	d10a      	bne.n	8011c28 <_svfiprintf_r+0x130>
 8011c12:	7863      	ldrb	r3, [r4, #1]
 8011c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c16:	d132      	bne.n	8011c7e <_svfiprintf_r+0x186>
 8011c18:	9b03      	ldr	r3, [sp, #12]
 8011c1a:	1d1a      	adds	r2, r3, #4
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	9203      	str	r2, [sp, #12]
 8011c20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c24:	3402      	adds	r4, #2
 8011c26:	9305      	str	r3, [sp, #20]
 8011c28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011cec <_svfiprintf_r+0x1f4>
 8011c2c:	7821      	ldrb	r1, [r4, #0]
 8011c2e:	2203      	movs	r2, #3
 8011c30:	4650      	mov	r0, sl
 8011c32:	f7ee fb0d 	bl	8000250 <memchr>
 8011c36:	b138      	cbz	r0, 8011c48 <_svfiprintf_r+0x150>
 8011c38:	9b04      	ldr	r3, [sp, #16]
 8011c3a:	eba0 000a 	sub.w	r0, r0, sl
 8011c3e:	2240      	movs	r2, #64	@ 0x40
 8011c40:	4082      	lsls	r2, r0
 8011c42:	4313      	orrs	r3, r2
 8011c44:	3401      	adds	r4, #1
 8011c46:	9304      	str	r3, [sp, #16]
 8011c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c4c:	4824      	ldr	r0, [pc, #144]	@ (8011ce0 <_svfiprintf_r+0x1e8>)
 8011c4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c52:	2206      	movs	r2, #6
 8011c54:	f7ee fafc 	bl	8000250 <memchr>
 8011c58:	2800      	cmp	r0, #0
 8011c5a:	d036      	beq.n	8011cca <_svfiprintf_r+0x1d2>
 8011c5c:	4b21      	ldr	r3, [pc, #132]	@ (8011ce4 <_svfiprintf_r+0x1ec>)
 8011c5e:	bb1b      	cbnz	r3, 8011ca8 <_svfiprintf_r+0x1b0>
 8011c60:	9b03      	ldr	r3, [sp, #12]
 8011c62:	3307      	adds	r3, #7
 8011c64:	f023 0307 	bic.w	r3, r3, #7
 8011c68:	3308      	adds	r3, #8
 8011c6a:	9303      	str	r3, [sp, #12]
 8011c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c6e:	4433      	add	r3, r6
 8011c70:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c72:	e76a      	b.n	8011b4a <_svfiprintf_r+0x52>
 8011c74:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c78:	460c      	mov	r4, r1
 8011c7a:	2001      	movs	r0, #1
 8011c7c:	e7a8      	b.n	8011bd0 <_svfiprintf_r+0xd8>
 8011c7e:	2300      	movs	r3, #0
 8011c80:	3401      	adds	r4, #1
 8011c82:	9305      	str	r3, [sp, #20]
 8011c84:	4619      	mov	r1, r3
 8011c86:	f04f 0c0a 	mov.w	ip, #10
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c90:	3a30      	subs	r2, #48	@ 0x30
 8011c92:	2a09      	cmp	r2, #9
 8011c94:	d903      	bls.n	8011c9e <_svfiprintf_r+0x1a6>
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d0c6      	beq.n	8011c28 <_svfiprintf_r+0x130>
 8011c9a:	9105      	str	r1, [sp, #20]
 8011c9c:	e7c4      	b.n	8011c28 <_svfiprintf_r+0x130>
 8011c9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	e7f0      	b.n	8011c8a <_svfiprintf_r+0x192>
 8011ca8:	ab03      	add	r3, sp, #12
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	462a      	mov	r2, r5
 8011cae:	4b0e      	ldr	r3, [pc, #56]	@ (8011ce8 <_svfiprintf_r+0x1f0>)
 8011cb0:	a904      	add	r1, sp, #16
 8011cb2:	4638      	mov	r0, r7
 8011cb4:	f3af 8000 	nop.w
 8011cb8:	1c42      	adds	r2, r0, #1
 8011cba:	4606      	mov	r6, r0
 8011cbc:	d1d6      	bne.n	8011c6c <_svfiprintf_r+0x174>
 8011cbe:	89ab      	ldrh	r3, [r5, #12]
 8011cc0:	065b      	lsls	r3, r3, #25
 8011cc2:	f53f af2d 	bmi.w	8011b20 <_svfiprintf_r+0x28>
 8011cc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011cc8:	e72c      	b.n	8011b24 <_svfiprintf_r+0x2c>
 8011cca:	ab03      	add	r3, sp, #12
 8011ccc:	9300      	str	r3, [sp, #0]
 8011cce:	462a      	mov	r2, r5
 8011cd0:	4b05      	ldr	r3, [pc, #20]	@ (8011ce8 <_svfiprintf_r+0x1f0>)
 8011cd2:	a904      	add	r1, sp, #16
 8011cd4:	4638      	mov	r0, r7
 8011cd6:	f000 f9bb 	bl	8012050 <_printf_i>
 8011cda:	e7ed      	b.n	8011cb8 <_svfiprintf_r+0x1c0>
 8011cdc:	080132f8 	.word	0x080132f8
 8011ce0:	08013302 	.word	0x08013302
 8011ce4:	00000000 	.word	0x00000000
 8011ce8:	08011a41 	.word	0x08011a41
 8011cec:	080132fe 	.word	0x080132fe

08011cf0 <__sfputc_r>:
 8011cf0:	6893      	ldr	r3, [r2, #8]
 8011cf2:	3b01      	subs	r3, #1
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	b410      	push	{r4}
 8011cf8:	6093      	str	r3, [r2, #8]
 8011cfa:	da08      	bge.n	8011d0e <__sfputc_r+0x1e>
 8011cfc:	6994      	ldr	r4, [r2, #24]
 8011cfe:	42a3      	cmp	r3, r4
 8011d00:	db01      	blt.n	8011d06 <__sfputc_r+0x16>
 8011d02:	290a      	cmp	r1, #10
 8011d04:	d103      	bne.n	8011d0e <__sfputc_r+0x1e>
 8011d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d0a:	f000 bb7f 	b.w	801240c <__swbuf_r>
 8011d0e:	6813      	ldr	r3, [r2, #0]
 8011d10:	1c58      	adds	r0, r3, #1
 8011d12:	6010      	str	r0, [r2, #0]
 8011d14:	7019      	strb	r1, [r3, #0]
 8011d16:	4608      	mov	r0, r1
 8011d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d1c:	4770      	bx	lr

08011d1e <__sfputs_r>:
 8011d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d20:	4606      	mov	r6, r0
 8011d22:	460f      	mov	r7, r1
 8011d24:	4614      	mov	r4, r2
 8011d26:	18d5      	adds	r5, r2, r3
 8011d28:	42ac      	cmp	r4, r5
 8011d2a:	d101      	bne.n	8011d30 <__sfputs_r+0x12>
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	e007      	b.n	8011d40 <__sfputs_r+0x22>
 8011d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d34:	463a      	mov	r2, r7
 8011d36:	4630      	mov	r0, r6
 8011d38:	f7ff ffda 	bl	8011cf0 <__sfputc_r>
 8011d3c:	1c43      	adds	r3, r0, #1
 8011d3e:	d1f3      	bne.n	8011d28 <__sfputs_r+0xa>
 8011d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d44 <_vfiprintf_r>:
 8011d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d48:	460d      	mov	r5, r1
 8011d4a:	b09d      	sub	sp, #116	@ 0x74
 8011d4c:	4614      	mov	r4, r2
 8011d4e:	4698      	mov	r8, r3
 8011d50:	4606      	mov	r6, r0
 8011d52:	b118      	cbz	r0, 8011d5c <_vfiprintf_r+0x18>
 8011d54:	6a03      	ldr	r3, [r0, #32]
 8011d56:	b90b      	cbnz	r3, 8011d5c <_vfiprintf_r+0x18>
 8011d58:	f7ff fc26 	bl	80115a8 <__sinit>
 8011d5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d5e:	07d9      	lsls	r1, r3, #31
 8011d60:	d405      	bmi.n	8011d6e <_vfiprintf_r+0x2a>
 8011d62:	89ab      	ldrh	r3, [r5, #12]
 8011d64:	059a      	lsls	r2, r3, #22
 8011d66:	d402      	bmi.n	8011d6e <_vfiprintf_r+0x2a>
 8011d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d6a:	f7ff fdd4 	bl	8011916 <__retarget_lock_acquire_recursive>
 8011d6e:	89ab      	ldrh	r3, [r5, #12]
 8011d70:	071b      	lsls	r3, r3, #28
 8011d72:	d501      	bpl.n	8011d78 <_vfiprintf_r+0x34>
 8011d74:	692b      	ldr	r3, [r5, #16]
 8011d76:	b99b      	cbnz	r3, 8011da0 <_vfiprintf_r+0x5c>
 8011d78:	4629      	mov	r1, r5
 8011d7a:	4630      	mov	r0, r6
 8011d7c:	f000 fb84 	bl	8012488 <__swsetup_r>
 8011d80:	b170      	cbz	r0, 8011da0 <_vfiprintf_r+0x5c>
 8011d82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d84:	07dc      	lsls	r4, r3, #31
 8011d86:	d504      	bpl.n	8011d92 <_vfiprintf_r+0x4e>
 8011d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d8c:	b01d      	add	sp, #116	@ 0x74
 8011d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d92:	89ab      	ldrh	r3, [r5, #12]
 8011d94:	0598      	lsls	r0, r3, #22
 8011d96:	d4f7      	bmi.n	8011d88 <_vfiprintf_r+0x44>
 8011d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d9a:	f7ff fdbd 	bl	8011918 <__retarget_lock_release_recursive>
 8011d9e:	e7f3      	b.n	8011d88 <_vfiprintf_r+0x44>
 8011da0:	2300      	movs	r3, #0
 8011da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011da4:	2320      	movs	r3, #32
 8011da6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8011dae:	2330      	movs	r3, #48	@ 0x30
 8011db0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011f60 <_vfiprintf_r+0x21c>
 8011db4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011db8:	f04f 0901 	mov.w	r9, #1
 8011dbc:	4623      	mov	r3, r4
 8011dbe:	469a      	mov	sl, r3
 8011dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dc4:	b10a      	cbz	r2, 8011dca <_vfiprintf_r+0x86>
 8011dc6:	2a25      	cmp	r2, #37	@ 0x25
 8011dc8:	d1f9      	bne.n	8011dbe <_vfiprintf_r+0x7a>
 8011dca:	ebba 0b04 	subs.w	fp, sl, r4
 8011dce:	d00b      	beq.n	8011de8 <_vfiprintf_r+0xa4>
 8011dd0:	465b      	mov	r3, fp
 8011dd2:	4622      	mov	r2, r4
 8011dd4:	4629      	mov	r1, r5
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	f7ff ffa1 	bl	8011d1e <__sfputs_r>
 8011ddc:	3001      	adds	r0, #1
 8011dde:	f000 80a7 	beq.w	8011f30 <_vfiprintf_r+0x1ec>
 8011de2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011de4:	445a      	add	r2, fp
 8011de6:	9209      	str	r2, [sp, #36]	@ 0x24
 8011de8:	f89a 3000 	ldrb.w	r3, [sl]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	f000 809f 	beq.w	8011f30 <_vfiprintf_r+0x1ec>
 8011df2:	2300      	movs	r3, #0
 8011df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dfc:	f10a 0a01 	add.w	sl, sl, #1
 8011e00:	9304      	str	r3, [sp, #16]
 8011e02:	9307      	str	r3, [sp, #28]
 8011e04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e08:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e0a:	4654      	mov	r4, sl
 8011e0c:	2205      	movs	r2, #5
 8011e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e12:	4853      	ldr	r0, [pc, #332]	@ (8011f60 <_vfiprintf_r+0x21c>)
 8011e14:	f7ee fa1c 	bl	8000250 <memchr>
 8011e18:	9a04      	ldr	r2, [sp, #16]
 8011e1a:	b9d8      	cbnz	r0, 8011e54 <_vfiprintf_r+0x110>
 8011e1c:	06d1      	lsls	r1, r2, #27
 8011e1e:	bf44      	itt	mi
 8011e20:	2320      	movmi	r3, #32
 8011e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e26:	0713      	lsls	r3, r2, #28
 8011e28:	bf44      	itt	mi
 8011e2a:	232b      	movmi	r3, #43	@ 0x2b
 8011e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e30:	f89a 3000 	ldrb.w	r3, [sl]
 8011e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e36:	d015      	beq.n	8011e64 <_vfiprintf_r+0x120>
 8011e38:	9a07      	ldr	r2, [sp, #28]
 8011e3a:	4654      	mov	r4, sl
 8011e3c:	2000      	movs	r0, #0
 8011e3e:	f04f 0c0a 	mov.w	ip, #10
 8011e42:	4621      	mov	r1, r4
 8011e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e48:	3b30      	subs	r3, #48	@ 0x30
 8011e4a:	2b09      	cmp	r3, #9
 8011e4c:	d94b      	bls.n	8011ee6 <_vfiprintf_r+0x1a2>
 8011e4e:	b1b0      	cbz	r0, 8011e7e <_vfiprintf_r+0x13a>
 8011e50:	9207      	str	r2, [sp, #28]
 8011e52:	e014      	b.n	8011e7e <_vfiprintf_r+0x13a>
 8011e54:	eba0 0308 	sub.w	r3, r0, r8
 8011e58:	fa09 f303 	lsl.w	r3, r9, r3
 8011e5c:	4313      	orrs	r3, r2
 8011e5e:	9304      	str	r3, [sp, #16]
 8011e60:	46a2      	mov	sl, r4
 8011e62:	e7d2      	b.n	8011e0a <_vfiprintf_r+0xc6>
 8011e64:	9b03      	ldr	r3, [sp, #12]
 8011e66:	1d19      	adds	r1, r3, #4
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	9103      	str	r1, [sp, #12]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	bfbb      	ittet	lt
 8011e70:	425b      	neglt	r3, r3
 8011e72:	f042 0202 	orrlt.w	r2, r2, #2
 8011e76:	9307      	strge	r3, [sp, #28]
 8011e78:	9307      	strlt	r3, [sp, #28]
 8011e7a:	bfb8      	it	lt
 8011e7c:	9204      	strlt	r2, [sp, #16]
 8011e7e:	7823      	ldrb	r3, [r4, #0]
 8011e80:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e82:	d10a      	bne.n	8011e9a <_vfiprintf_r+0x156>
 8011e84:	7863      	ldrb	r3, [r4, #1]
 8011e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e88:	d132      	bne.n	8011ef0 <_vfiprintf_r+0x1ac>
 8011e8a:	9b03      	ldr	r3, [sp, #12]
 8011e8c:	1d1a      	adds	r2, r3, #4
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	9203      	str	r2, [sp, #12]
 8011e92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e96:	3402      	adds	r4, #2
 8011e98:	9305      	str	r3, [sp, #20]
 8011e9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011f70 <_vfiprintf_r+0x22c>
 8011e9e:	7821      	ldrb	r1, [r4, #0]
 8011ea0:	2203      	movs	r2, #3
 8011ea2:	4650      	mov	r0, sl
 8011ea4:	f7ee f9d4 	bl	8000250 <memchr>
 8011ea8:	b138      	cbz	r0, 8011eba <_vfiprintf_r+0x176>
 8011eaa:	9b04      	ldr	r3, [sp, #16]
 8011eac:	eba0 000a 	sub.w	r0, r0, sl
 8011eb0:	2240      	movs	r2, #64	@ 0x40
 8011eb2:	4082      	lsls	r2, r0
 8011eb4:	4313      	orrs	r3, r2
 8011eb6:	3401      	adds	r4, #1
 8011eb8:	9304      	str	r3, [sp, #16]
 8011eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ebe:	4829      	ldr	r0, [pc, #164]	@ (8011f64 <_vfiprintf_r+0x220>)
 8011ec0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ec4:	2206      	movs	r2, #6
 8011ec6:	f7ee f9c3 	bl	8000250 <memchr>
 8011eca:	2800      	cmp	r0, #0
 8011ecc:	d03f      	beq.n	8011f4e <_vfiprintf_r+0x20a>
 8011ece:	4b26      	ldr	r3, [pc, #152]	@ (8011f68 <_vfiprintf_r+0x224>)
 8011ed0:	bb1b      	cbnz	r3, 8011f1a <_vfiprintf_r+0x1d6>
 8011ed2:	9b03      	ldr	r3, [sp, #12]
 8011ed4:	3307      	adds	r3, #7
 8011ed6:	f023 0307 	bic.w	r3, r3, #7
 8011eda:	3308      	adds	r3, #8
 8011edc:	9303      	str	r3, [sp, #12]
 8011ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ee0:	443b      	add	r3, r7
 8011ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ee4:	e76a      	b.n	8011dbc <_vfiprintf_r+0x78>
 8011ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011eea:	460c      	mov	r4, r1
 8011eec:	2001      	movs	r0, #1
 8011eee:	e7a8      	b.n	8011e42 <_vfiprintf_r+0xfe>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	3401      	adds	r4, #1
 8011ef4:	9305      	str	r3, [sp, #20]
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	f04f 0c0a 	mov.w	ip, #10
 8011efc:	4620      	mov	r0, r4
 8011efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f02:	3a30      	subs	r2, #48	@ 0x30
 8011f04:	2a09      	cmp	r2, #9
 8011f06:	d903      	bls.n	8011f10 <_vfiprintf_r+0x1cc>
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d0c6      	beq.n	8011e9a <_vfiprintf_r+0x156>
 8011f0c:	9105      	str	r1, [sp, #20]
 8011f0e:	e7c4      	b.n	8011e9a <_vfiprintf_r+0x156>
 8011f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f14:	4604      	mov	r4, r0
 8011f16:	2301      	movs	r3, #1
 8011f18:	e7f0      	b.n	8011efc <_vfiprintf_r+0x1b8>
 8011f1a:	ab03      	add	r3, sp, #12
 8011f1c:	9300      	str	r3, [sp, #0]
 8011f1e:	462a      	mov	r2, r5
 8011f20:	4b12      	ldr	r3, [pc, #72]	@ (8011f6c <_vfiprintf_r+0x228>)
 8011f22:	a904      	add	r1, sp, #16
 8011f24:	4630      	mov	r0, r6
 8011f26:	f3af 8000 	nop.w
 8011f2a:	4607      	mov	r7, r0
 8011f2c:	1c78      	adds	r0, r7, #1
 8011f2e:	d1d6      	bne.n	8011ede <_vfiprintf_r+0x19a>
 8011f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f32:	07d9      	lsls	r1, r3, #31
 8011f34:	d405      	bmi.n	8011f42 <_vfiprintf_r+0x1fe>
 8011f36:	89ab      	ldrh	r3, [r5, #12]
 8011f38:	059a      	lsls	r2, r3, #22
 8011f3a:	d402      	bmi.n	8011f42 <_vfiprintf_r+0x1fe>
 8011f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f3e:	f7ff fceb 	bl	8011918 <__retarget_lock_release_recursive>
 8011f42:	89ab      	ldrh	r3, [r5, #12]
 8011f44:	065b      	lsls	r3, r3, #25
 8011f46:	f53f af1f 	bmi.w	8011d88 <_vfiprintf_r+0x44>
 8011f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f4c:	e71e      	b.n	8011d8c <_vfiprintf_r+0x48>
 8011f4e:	ab03      	add	r3, sp, #12
 8011f50:	9300      	str	r3, [sp, #0]
 8011f52:	462a      	mov	r2, r5
 8011f54:	4b05      	ldr	r3, [pc, #20]	@ (8011f6c <_vfiprintf_r+0x228>)
 8011f56:	a904      	add	r1, sp, #16
 8011f58:	4630      	mov	r0, r6
 8011f5a:	f000 f879 	bl	8012050 <_printf_i>
 8011f5e:	e7e4      	b.n	8011f2a <_vfiprintf_r+0x1e6>
 8011f60:	080132f8 	.word	0x080132f8
 8011f64:	08013302 	.word	0x08013302
 8011f68:	00000000 	.word	0x00000000
 8011f6c:	08011d1f 	.word	0x08011d1f
 8011f70:	080132fe 	.word	0x080132fe

08011f74 <_printf_common>:
 8011f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f78:	4616      	mov	r6, r2
 8011f7a:	4698      	mov	r8, r3
 8011f7c:	688a      	ldr	r2, [r1, #8]
 8011f7e:	690b      	ldr	r3, [r1, #16]
 8011f80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011f84:	4293      	cmp	r3, r2
 8011f86:	bfb8      	it	lt
 8011f88:	4613      	movlt	r3, r2
 8011f8a:	6033      	str	r3, [r6, #0]
 8011f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011f90:	4607      	mov	r7, r0
 8011f92:	460c      	mov	r4, r1
 8011f94:	b10a      	cbz	r2, 8011f9a <_printf_common+0x26>
 8011f96:	3301      	adds	r3, #1
 8011f98:	6033      	str	r3, [r6, #0]
 8011f9a:	6823      	ldr	r3, [r4, #0]
 8011f9c:	0699      	lsls	r1, r3, #26
 8011f9e:	bf42      	ittt	mi
 8011fa0:	6833      	ldrmi	r3, [r6, #0]
 8011fa2:	3302      	addmi	r3, #2
 8011fa4:	6033      	strmi	r3, [r6, #0]
 8011fa6:	6825      	ldr	r5, [r4, #0]
 8011fa8:	f015 0506 	ands.w	r5, r5, #6
 8011fac:	d106      	bne.n	8011fbc <_printf_common+0x48>
 8011fae:	f104 0a19 	add.w	sl, r4, #25
 8011fb2:	68e3      	ldr	r3, [r4, #12]
 8011fb4:	6832      	ldr	r2, [r6, #0]
 8011fb6:	1a9b      	subs	r3, r3, r2
 8011fb8:	42ab      	cmp	r3, r5
 8011fba:	dc26      	bgt.n	801200a <_printf_common+0x96>
 8011fbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011fc0:	6822      	ldr	r2, [r4, #0]
 8011fc2:	3b00      	subs	r3, #0
 8011fc4:	bf18      	it	ne
 8011fc6:	2301      	movne	r3, #1
 8011fc8:	0692      	lsls	r2, r2, #26
 8011fca:	d42b      	bmi.n	8012024 <_printf_common+0xb0>
 8011fcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011fd0:	4641      	mov	r1, r8
 8011fd2:	4638      	mov	r0, r7
 8011fd4:	47c8      	blx	r9
 8011fd6:	3001      	adds	r0, #1
 8011fd8:	d01e      	beq.n	8012018 <_printf_common+0xa4>
 8011fda:	6823      	ldr	r3, [r4, #0]
 8011fdc:	6922      	ldr	r2, [r4, #16]
 8011fde:	f003 0306 	and.w	r3, r3, #6
 8011fe2:	2b04      	cmp	r3, #4
 8011fe4:	bf02      	ittt	eq
 8011fe6:	68e5      	ldreq	r5, [r4, #12]
 8011fe8:	6833      	ldreq	r3, [r6, #0]
 8011fea:	1aed      	subeq	r5, r5, r3
 8011fec:	68a3      	ldr	r3, [r4, #8]
 8011fee:	bf0c      	ite	eq
 8011ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ff4:	2500      	movne	r5, #0
 8011ff6:	4293      	cmp	r3, r2
 8011ff8:	bfc4      	itt	gt
 8011ffa:	1a9b      	subgt	r3, r3, r2
 8011ffc:	18ed      	addgt	r5, r5, r3
 8011ffe:	2600      	movs	r6, #0
 8012000:	341a      	adds	r4, #26
 8012002:	42b5      	cmp	r5, r6
 8012004:	d11a      	bne.n	801203c <_printf_common+0xc8>
 8012006:	2000      	movs	r0, #0
 8012008:	e008      	b.n	801201c <_printf_common+0xa8>
 801200a:	2301      	movs	r3, #1
 801200c:	4652      	mov	r2, sl
 801200e:	4641      	mov	r1, r8
 8012010:	4638      	mov	r0, r7
 8012012:	47c8      	blx	r9
 8012014:	3001      	adds	r0, #1
 8012016:	d103      	bne.n	8012020 <_printf_common+0xac>
 8012018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801201c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012020:	3501      	adds	r5, #1
 8012022:	e7c6      	b.n	8011fb2 <_printf_common+0x3e>
 8012024:	18e1      	adds	r1, r4, r3
 8012026:	1c5a      	adds	r2, r3, #1
 8012028:	2030      	movs	r0, #48	@ 0x30
 801202a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801202e:	4422      	add	r2, r4
 8012030:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012034:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012038:	3302      	adds	r3, #2
 801203a:	e7c7      	b.n	8011fcc <_printf_common+0x58>
 801203c:	2301      	movs	r3, #1
 801203e:	4622      	mov	r2, r4
 8012040:	4641      	mov	r1, r8
 8012042:	4638      	mov	r0, r7
 8012044:	47c8      	blx	r9
 8012046:	3001      	adds	r0, #1
 8012048:	d0e6      	beq.n	8012018 <_printf_common+0xa4>
 801204a:	3601      	adds	r6, #1
 801204c:	e7d9      	b.n	8012002 <_printf_common+0x8e>
	...

08012050 <_printf_i>:
 8012050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012054:	7e0f      	ldrb	r7, [r1, #24]
 8012056:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012058:	2f78      	cmp	r7, #120	@ 0x78
 801205a:	4691      	mov	r9, r2
 801205c:	4680      	mov	r8, r0
 801205e:	460c      	mov	r4, r1
 8012060:	469a      	mov	sl, r3
 8012062:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012066:	d807      	bhi.n	8012078 <_printf_i+0x28>
 8012068:	2f62      	cmp	r7, #98	@ 0x62
 801206a:	d80a      	bhi.n	8012082 <_printf_i+0x32>
 801206c:	2f00      	cmp	r7, #0
 801206e:	f000 80d2 	beq.w	8012216 <_printf_i+0x1c6>
 8012072:	2f58      	cmp	r7, #88	@ 0x58
 8012074:	f000 80b9 	beq.w	80121ea <_printf_i+0x19a>
 8012078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801207c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012080:	e03a      	b.n	80120f8 <_printf_i+0xa8>
 8012082:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012086:	2b15      	cmp	r3, #21
 8012088:	d8f6      	bhi.n	8012078 <_printf_i+0x28>
 801208a:	a101      	add	r1, pc, #4	@ (adr r1, 8012090 <_printf_i+0x40>)
 801208c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012090:	080120e9 	.word	0x080120e9
 8012094:	080120fd 	.word	0x080120fd
 8012098:	08012079 	.word	0x08012079
 801209c:	08012079 	.word	0x08012079
 80120a0:	08012079 	.word	0x08012079
 80120a4:	08012079 	.word	0x08012079
 80120a8:	080120fd 	.word	0x080120fd
 80120ac:	08012079 	.word	0x08012079
 80120b0:	08012079 	.word	0x08012079
 80120b4:	08012079 	.word	0x08012079
 80120b8:	08012079 	.word	0x08012079
 80120bc:	080121fd 	.word	0x080121fd
 80120c0:	08012127 	.word	0x08012127
 80120c4:	080121b7 	.word	0x080121b7
 80120c8:	08012079 	.word	0x08012079
 80120cc:	08012079 	.word	0x08012079
 80120d0:	0801221f 	.word	0x0801221f
 80120d4:	08012079 	.word	0x08012079
 80120d8:	08012127 	.word	0x08012127
 80120dc:	08012079 	.word	0x08012079
 80120e0:	08012079 	.word	0x08012079
 80120e4:	080121bf 	.word	0x080121bf
 80120e8:	6833      	ldr	r3, [r6, #0]
 80120ea:	1d1a      	adds	r2, r3, #4
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	6032      	str	r2, [r6, #0]
 80120f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80120f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80120f8:	2301      	movs	r3, #1
 80120fa:	e09d      	b.n	8012238 <_printf_i+0x1e8>
 80120fc:	6833      	ldr	r3, [r6, #0]
 80120fe:	6820      	ldr	r0, [r4, #0]
 8012100:	1d19      	adds	r1, r3, #4
 8012102:	6031      	str	r1, [r6, #0]
 8012104:	0606      	lsls	r6, r0, #24
 8012106:	d501      	bpl.n	801210c <_printf_i+0xbc>
 8012108:	681d      	ldr	r5, [r3, #0]
 801210a:	e003      	b.n	8012114 <_printf_i+0xc4>
 801210c:	0645      	lsls	r5, r0, #25
 801210e:	d5fb      	bpl.n	8012108 <_printf_i+0xb8>
 8012110:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012114:	2d00      	cmp	r5, #0
 8012116:	da03      	bge.n	8012120 <_printf_i+0xd0>
 8012118:	232d      	movs	r3, #45	@ 0x2d
 801211a:	426d      	negs	r5, r5
 801211c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012120:	4859      	ldr	r0, [pc, #356]	@ (8012288 <_printf_i+0x238>)
 8012122:	230a      	movs	r3, #10
 8012124:	e011      	b.n	801214a <_printf_i+0xfa>
 8012126:	6821      	ldr	r1, [r4, #0]
 8012128:	6833      	ldr	r3, [r6, #0]
 801212a:	0608      	lsls	r0, r1, #24
 801212c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012130:	d402      	bmi.n	8012138 <_printf_i+0xe8>
 8012132:	0649      	lsls	r1, r1, #25
 8012134:	bf48      	it	mi
 8012136:	b2ad      	uxthmi	r5, r5
 8012138:	2f6f      	cmp	r7, #111	@ 0x6f
 801213a:	4853      	ldr	r0, [pc, #332]	@ (8012288 <_printf_i+0x238>)
 801213c:	6033      	str	r3, [r6, #0]
 801213e:	bf14      	ite	ne
 8012140:	230a      	movne	r3, #10
 8012142:	2308      	moveq	r3, #8
 8012144:	2100      	movs	r1, #0
 8012146:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801214a:	6866      	ldr	r6, [r4, #4]
 801214c:	60a6      	str	r6, [r4, #8]
 801214e:	2e00      	cmp	r6, #0
 8012150:	bfa2      	ittt	ge
 8012152:	6821      	ldrge	r1, [r4, #0]
 8012154:	f021 0104 	bicge.w	r1, r1, #4
 8012158:	6021      	strge	r1, [r4, #0]
 801215a:	b90d      	cbnz	r5, 8012160 <_printf_i+0x110>
 801215c:	2e00      	cmp	r6, #0
 801215e:	d04b      	beq.n	80121f8 <_printf_i+0x1a8>
 8012160:	4616      	mov	r6, r2
 8012162:	fbb5 f1f3 	udiv	r1, r5, r3
 8012166:	fb03 5711 	mls	r7, r3, r1, r5
 801216a:	5dc7      	ldrb	r7, [r0, r7]
 801216c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012170:	462f      	mov	r7, r5
 8012172:	42bb      	cmp	r3, r7
 8012174:	460d      	mov	r5, r1
 8012176:	d9f4      	bls.n	8012162 <_printf_i+0x112>
 8012178:	2b08      	cmp	r3, #8
 801217a:	d10b      	bne.n	8012194 <_printf_i+0x144>
 801217c:	6823      	ldr	r3, [r4, #0]
 801217e:	07df      	lsls	r7, r3, #31
 8012180:	d508      	bpl.n	8012194 <_printf_i+0x144>
 8012182:	6923      	ldr	r3, [r4, #16]
 8012184:	6861      	ldr	r1, [r4, #4]
 8012186:	4299      	cmp	r1, r3
 8012188:	bfde      	ittt	le
 801218a:	2330      	movle	r3, #48	@ 0x30
 801218c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012190:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8012194:	1b92      	subs	r2, r2, r6
 8012196:	6122      	str	r2, [r4, #16]
 8012198:	f8cd a000 	str.w	sl, [sp]
 801219c:	464b      	mov	r3, r9
 801219e:	aa03      	add	r2, sp, #12
 80121a0:	4621      	mov	r1, r4
 80121a2:	4640      	mov	r0, r8
 80121a4:	f7ff fee6 	bl	8011f74 <_printf_common>
 80121a8:	3001      	adds	r0, #1
 80121aa:	d14a      	bne.n	8012242 <_printf_i+0x1f2>
 80121ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121b0:	b004      	add	sp, #16
 80121b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121b6:	6823      	ldr	r3, [r4, #0]
 80121b8:	f043 0320 	orr.w	r3, r3, #32
 80121bc:	6023      	str	r3, [r4, #0]
 80121be:	4833      	ldr	r0, [pc, #204]	@ (801228c <_printf_i+0x23c>)
 80121c0:	2778      	movs	r7, #120	@ 0x78
 80121c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80121c6:	6823      	ldr	r3, [r4, #0]
 80121c8:	6831      	ldr	r1, [r6, #0]
 80121ca:	061f      	lsls	r7, r3, #24
 80121cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80121d0:	d402      	bmi.n	80121d8 <_printf_i+0x188>
 80121d2:	065f      	lsls	r7, r3, #25
 80121d4:	bf48      	it	mi
 80121d6:	b2ad      	uxthmi	r5, r5
 80121d8:	6031      	str	r1, [r6, #0]
 80121da:	07d9      	lsls	r1, r3, #31
 80121dc:	bf44      	itt	mi
 80121de:	f043 0320 	orrmi.w	r3, r3, #32
 80121e2:	6023      	strmi	r3, [r4, #0]
 80121e4:	b11d      	cbz	r5, 80121ee <_printf_i+0x19e>
 80121e6:	2310      	movs	r3, #16
 80121e8:	e7ac      	b.n	8012144 <_printf_i+0xf4>
 80121ea:	4827      	ldr	r0, [pc, #156]	@ (8012288 <_printf_i+0x238>)
 80121ec:	e7e9      	b.n	80121c2 <_printf_i+0x172>
 80121ee:	6823      	ldr	r3, [r4, #0]
 80121f0:	f023 0320 	bic.w	r3, r3, #32
 80121f4:	6023      	str	r3, [r4, #0]
 80121f6:	e7f6      	b.n	80121e6 <_printf_i+0x196>
 80121f8:	4616      	mov	r6, r2
 80121fa:	e7bd      	b.n	8012178 <_printf_i+0x128>
 80121fc:	6833      	ldr	r3, [r6, #0]
 80121fe:	6825      	ldr	r5, [r4, #0]
 8012200:	6961      	ldr	r1, [r4, #20]
 8012202:	1d18      	adds	r0, r3, #4
 8012204:	6030      	str	r0, [r6, #0]
 8012206:	062e      	lsls	r6, r5, #24
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	d501      	bpl.n	8012210 <_printf_i+0x1c0>
 801220c:	6019      	str	r1, [r3, #0]
 801220e:	e002      	b.n	8012216 <_printf_i+0x1c6>
 8012210:	0668      	lsls	r0, r5, #25
 8012212:	d5fb      	bpl.n	801220c <_printf_i+0x1bc>
 8012214:	8019      	strh	r1, [r3, #0]
 8012216:	2300      	movs	r3, #0
 8012218:	6123      	str	r3, [r4, #16]
 801221a:	4616      	mov	r6, r2
 801221c:	e7bc      	b.n	8012198 <_printf_i+0x148>
 801221e:	6833      	ldr	r3, [r6, #0]
 8012220:	1d1a      	adds	r2, r3, #4
 8012222:	6032      	str	r2, [r6, #0]
 8012224:	681e      	ldr	r6, [r3, #0]
 8012226:	6862      	ldr	r2, [r4, #4]
 8012228:	2100      	movs	r1, #0
 801222a:	4630      	mov	r0, r6
 801222c:	f7ee f810 	bl	8000250 <memchr>
 8012230:	b108      	cbz	r0, 8012236 <_printf_i+0x1e6>
 8012232:	1b80      	subs	r0, r0, r6
 8012234:	6060      	str	r0, [r4, #4]
 8012236:	6863      	ldr	r3, [r4, #4]
 8012238:	6123      	str	r3, [r4, #16]
 801223a:	2300      	movs	r3, #0
 801223c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012240:	e7aa      	b.n	8012198 <_printf_i+0x148>
 8012242:	6923      	ldr	r3, [r4, #16]
 8012244:	4632      	mov	r2, r6
 8012246:	4649      	mov	r1, r9
 8012248:	4640      	mov	r0, r8
 801224a:	47d0      	blx	sl
 801224c:	3001      	adds	r0, #1
 801224e:	d0ad      	beq.n	80121ac <_printf_i+0x15c>
 8012250:	6823      	ldr	r3, [r4, #0]
 8012252:	079b      	lsls	r3, r3, #30
 8012254:	d413      	bmi.n	801227e <_printf_i+0x22e>
 8012256:	68e0      	ldr	r0, [r4, #12]
 8012258:	9b03      	ldr	r3, [sp, #12]
 801225a:	4298      	cmp	r0, r3
 801225c:	bfb8      	it	lt
 801225e:	4618      	movlt	r0, r3
 8012260:	e7a6      	b.n	80121b0 <_printf_i+0x160>
 8012262:	2301      	movs	r3, #1
 8012264:	4632      	mov	r2, r6
 8012266:	4649      	mov	r1, r9
 8012268:	4640      	mov	r0, r8
 801226a:	47d0      	blx	sl
 801226c:	3001      	adds	r0, #1
 801226e:	d09d      	beq.n	80121ac <_printf_i+0x15c>
 8012270:	3501      	adds	r5, #1
 8012272:	68e3      	ldr	r3, [r4, #12]
 8012274:	9903      	ldr	r1, [sp, #12]
 8012276:	1a5b      	subs	r3, r3, r1
 8012278:	42ab      	cmp	r3, r5
 801227a:	dcf2      	bgt.n	8012262 <_printf_i+0x212>
 801227c:	e7eb      	b.n	8012256 <_printf_i+0x206>
 801227e:	2500      	movs	r5, #0
 8012280:	f104 0619 	add.w	r6, r4, #25
 8012284:	e7f5      	b.n	8012272 <_printf_i+0x222>
 8012286:	bf00      	nop
 8012288:	08013309 	.word	0x08013309
 801228c:	0801331a 	.word	0x0801331a

08012290 <__sflush_r>:
 8012290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012298:	0716      	lsls	r6, r2, #28
 801229a:	4605      	mov	r5, r0
 801229c:	460c      	mov	r4, r1
 801229e:	d454      	bmi.n	801234a <__sflush_r+0xba>
 80122a0:	684b      	ldr	r3, [r1, #4]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	dc02      	bgt.n	80122ac <__sflush_r+0x1c>
 80122a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	dd48      	ble.n	801233e <__sflush_r+0xae>
 80122ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80122ae:	2e00      	cmp	r6, #0
 80122b0:	d045      	beq.n	801233e <__sflush_r+0xae>
 80122b2:	2300      	movs	r3, #0
 80122b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80122b8:	682f      	ldr	r7, [r5, #0]
 80122ba:	6a21      	ldr	r1, [r4, #32]
 80122bc:	602b      	str	r3, [r5, #0]
 80122be:	d030      	beq.n	8012322 <__sflush_r+0x92>
 80122c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80122c2:	89a3      	ldrh	r3, [r4, #12]
 80122c4:	0759      	lsls	r1, r3, #29
 80122c6:	d505      	bpl.n	80122d4 <__sflush_r+0x44>
 80122c8:	6863      	ldr	r3, [r4, #4]
 80122ca:	1ad2      	subs	r2, r2, r3
 80122cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80122ce:	b10b      	cbz	r3, 80122d4 <__sflush_r+0x44>
 80122d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80122d2:	1ad2      	subs	r2, r2, r3
 80122d4:	2300      	movs	r3, #0
 80122d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80122d8:	6a21      	ldr	r1, [r4, #32]
 80122da:	4628      	mov	r0, r5
 80122dc:	47b0      	blx	r6
 80122de:	1c43      	adds	r3, r0, #1
 80122e0:	89a3      	ldrh	r3, [r4, #12]
 80122e2:	d106      	bne.n	80122f2 <__sflush_r+0x62>
 80122e4:	6829      	ldr	r1, [r5, #0]
 80122e6:	291d      	cmp	r1, #29
 80122e8:	d82b      	bhi.n	8012342 <__sflush_r+0xb2>
 80122ea:	4a2a      	ldr	r2, [pc, #168]	@ (8012394 <__sflush_r+0x104>)
 80122ec:	410a      	asrs	r2, r1
 80122ee:	07d6      	lsls	r6, r2, #31
 80122f0:	d427      	bmi.n	8012342 <__sflush_r+0xb2>
 80122f2:	2200      	movs	r2, #0
 80122f4:	6062      	str	r2, [r4, #4]
 80122f6:	04d9      	lsls	r1, r3, #19
 80122f8:	6922      	ldr	r2, [r4, #16]
 80122fa:	6022      	str	r2, [r4, #0]
 80122fc:	d504      	bpl.n	8012308 <__sflush_r+0x78>
 80122fe:	1c42      	adds	r2, r0, #1
 8012300:	d101      	bne.n	8012306 <__sflush_r+0x76>
 8012302:	682b      	ldr	r3, [r5, #0]
 8012304:	b903      	cbnz	r3, 8012308 <__sflush_r+0x78>
 8012306:	6560      	str	r0, [r4, #84]	@ 0x54
 8012308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801230a:	602f      	str	r7, [r5, #0]
 801230c:	b1b9      	cbz	r1, 801233e <__sflush_r+0xae>
 801230e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012312:	4299      	cmp	r1, r3
 8012314:	d002      	beq.n	801231c <__sflush_r+0x8c>
 8012316:	4628      	mov	r0, r5
 8012318:	f7ff fb40 	bl	801199c <_free_r>
 801231c:	2300      	movs	r3, #0
 801231e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012320:	e00d      	b.n	801233e <__sflush_r+0xae>
 8012322:	2301      	movs	r3, #1
 8012324:	4628      	mov	r0, r5
 8012326:	47b0      	blx	r6
 8012328:	4602      	mov	r2, r0
 801232a:	1c50      	adds	r0, r2, #1
 801232c:	d1c9      	bne.n	80122c2 <__sflush_r+0x32>
 801232e:	682b      	ldr	r3, [r5, #0]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d0c6      	beq.n	80122c2 <__sflush_r+0x32>
 8012334:	2b1d      	cmp	r3, #29
 8012336:	d001      	beq.n	801233c <__sflush_r+0xac>
 8012338:	2b16      	cmp	r3, #22
 801233a:	d11e      	bne.n	801237a <__sflush_r+0xea>
 801233c:	602f      	str	r7, [r5, #0]
 801233e:	2000      	movs	r0, #0
 8012340:	e022      	b.n	8012388 <__sflush_r+0xf8>
 8012342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012346:	b21b      	sxth	r3, r3
 8012348:	e01b      	b.n	8012382 <__sflush_r+0xf2>
 801234a:	690f      	ldr	r7, [r1, #16]
 801234c:	2f00      	cmp	r7, #0
 801234e:	d0f6      	beq.n	801233e <__sflush_r+0xae>
 8012350:	0793      	lsls	r3, r2, #30
 8012352:	680e      	ldr	r6, [r1, #0]
 8012354:	bf08      	it	eq
 8012356:	694b      	ldreq	r3, [r1, #20]
 8012358:	600f      	str	r7, [r1, #0]
 801235a:	bf18      	it	ne
 801235c:	2300      	movne	r3, #0
 801235e:	eba6 0807 	sub.w	r8, r6, r7
 8012362:	608b      	str	r3, [r1, #8]
 8012364:	f1b8 0f00 	cmp.w	r8, #0
 8012368:	dde9      	ble.n	801233e <__sflush_r+0xae>
 801236a:	6a21      	ldr	r1, [r4, #32]
 801236c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801236e:	4643      	mov	r3, r8
 8012370:	463a      	mov	r2, r7
 8012372:	4628      	mov	r0, r5
 8012374:	47b0      	blx	r6
 8012376:	2800      	cmp	r0, #0
 8012378:	dc08      	bgt.n	801238c <__sflush_r+0xfc>
 801237a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801237e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012382:	81a3      	strh	r3, [r4, #12]
 8012384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801238c:	4407      	add	r7, r0
 801238e:	eba8 0800 	sub.w	r8, r8, r0
 8012392:	e7e7      	b.n	8012364 <__sflush_r+0xd4>
 8012394:	dfbffffe 	.word	0xdfbffffe

08012398 <_fflush_r>:
 8012398:	b538      	push	{r3, r4, r5, lr}
 801239a:	690b      	ldr	r3, [r1, #16]
 801239c:	4605      	mov	r5, r0
 801239e:	460c      	mov	r4, r1
 80123a0:	b913      	cbnz	r3, 80123a8 <_fflush_r+0x10>
 80123a2:	2500      	movs	r5, #0
 80123a4:	4628      	mov	r0, r5
 80123a6:	bd38      	pop	{r3, r4, r5, pc}
 80123a8:	b118      	cbz	r0, 80123b2 <_fflush_r+0x1a>
 80123aa:	6a03      	ldr	r3, [r0, #32]
 80123ac:	b90b      	cbnz	r3, 80123b2 <_fflush_r+0x1a>
 80123ae:	f7ff f8fb 	bl	80115a8 <__sinit>
 80123b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d0f3      	beq.n	80123a2 <_fflush_r+0xa>
 80123ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80123bc:	07d0      	lsls	r0, r2, #31
 80123be:	d404      	bmi.n	80123ca <_fflush_r+0x32>
 80123c0:	0599      	lsls	r1, r3, #22
 80123c2:	d402      	bmi.n	80123ca <_fflush_r+0x32>
 80123c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123c6:	f7ff faa6 	bl	8011916 <__retarget_lock_acquire_recursive>
 80123ca:	4628      	mov	r0, r5
 80123cc:	4621      	mov	r1, r4
 80123ce:	f7ff ff5f 	bl	8012290 <__sflush_r>
 80123d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80123d4:	07da      	lsls	r2, r3, #31
 80123d6:	4605      	mov	r5, r0
 80123d8:	d4e4      	bmi.n	80123a4 <_fflush_r+0xc>
 80123da:	89a3      	ldrh	r3, [r4, #12]
 80123dc:	059b      	lsls	r3, r3, #22
 80123de:	d4e1      	bmi.n	80123a4 <_fflush_r+0xc>
 80123e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123e2:	f7ff fa99 	bl	8011918 <__retarget_lock_release_recursive>
 80123e6:	e7dd      	b.n	80123a4 <_fflush_r+0xc>

080123e8 <fiprintf>:
 80123e8:	b40e      	push	{r1, r2, r3}
 80123ea:	b503      	push	{r0, r1, lr}
 80123ec:	4601      	mov	r1, r0
 80123ee:	ab03      	add	r3, sp, #12
 80123f0:	4805      	ldr	r0, [pc, #20]	@ (8012408 <fiprintf+0x20>)
 80123f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80123f6:	6800      	ldr	r0, [r0, #0]
 80123f8:	9301      	str	r3, [sp, #4]
 80123fa:	f7ff fca3 	bl	8011d44 <_vfiprintf_r>
 80123fe:	b002      	add	sp, #8
 8012400:	f85d eb04 	ldr.w	lr, [sp], #4
 8012404:	b003      	add	sp, #12
 8012406:	4770      	bx	lr
 8012408:	200000c0 	.word	0x200000c0

0801240c <__swbuf_r>:
 801240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801240e:	460e      	mov	r6, r1
 8012410:	4614      	mov	r4, r2
 8012412:	4605      	mov	r5, r0
 8012414:	b118      	cbz	r0, 801241e <__swbuf_r+0x12>
 8012416:	6a03      	ldr	r3, [r0, #32]
 8012418:	b90b      	cbnz	r3, 801241e <__swbuf_r+0x12>
 801241a:	f7ff f8c5 	bl	80115a8 <__sinit>
 801241e:	69a3      	ldr	r3, [r4, #24]
 8012420:	60a3      	str	r3, [r4, #8]
 8012422:	89a3      	ldrh	r3, [r4, #12]
 8012424:	071a      	lsls	r2, r3, #28
 8012426:	d501      	bpl.n	801242c <__swbuf_r+0x20>
 8012428:	6923      	ldr	r3, [r4, #16]
 801242a:	b943      	cbnz	r3, 801243e <__swbuf_r+0x32>
 801242c:	4621      	mov	r1, r4
 801242e:	4628      	mov	r0, r5
 8012430:	f000 f82a 	bl	8012488 <__swsetup_r>
 8012434:	b118      	cbz	r0, 801243e <__swbuf_r+0x32>
 8012436:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801243a:	4638      	mov	r0, r7
 801243c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801243e:	6823      	ldr	r3, [r4, #0]
 8012440:	6922      	ldr	r2, [r4, #16]
 8012442:	1a98      	subs	r0, r3, r2
 8012444:	6963      	ldr	r3, [r4, #20]
 8012446:	b2f6      	uxtb	r6, r6
 8012448:	4283      	cmp	r3, r0
 801244a:	4637      	mov	r7, r6
 801244c:	dc05      	bgt.n	801245a <__swbuf_r+0x4e>
 801244e:	4621      	mov	r1, r4
 8012450:	4628      	mov	r0, r5
 8012452:	f7ff ffa1 	bl	8012398 <_fflush_r>
 8012456:	2800      	cmp	r0, #0
 8012458:	d1ed      	bne.n	8012436 <__swbuf_r+0x2a>
 801245a:	68a3      	ldr	r3, [r4, #8]
 801245c:	3b01      	subs	r3, #1
 801245e:	60a3      	str	r3, [r4, #8]
 8012460:	6823      	ldr	r3, [r4, #0]
 8012462:	1c5a      	adds	r2, r3, #1
 8012464:	6022      	str	r2, [r4, #0]
 8012466:	701e      	strb	r6, [r3, #0]
 8012468:	6962      	ldr	r2, [r4, #20]
 801246a:	1c43      	adds	r3, r0, #1
 801246c:	429a      	cmp	r2, r3
 801246e:	d004      	beq.n	801247a <__swbuf_r+0x6e>
 8012470:	89a3      	ldrh	r3, [r4, #12]
 8012472:	07db      	lsls	r3, r3, #31
 8012474:	d5e1      	bpl.n	801243a <__swbuf_r+0x2e>
 8012476:	2e0a      	cmp	r6, #10
 8012478:	d1df      	bne.n	801243a <__swbuf_r+0x2e>
 801247a:	4621      	mov	r1, r4
 801247c:	4628      	mov	r0, r5
 801247e:	f7ff ff8b 	bl	8012398 <_fflush_r>
 8012482:	2800      	cmp	r0, #0
 8012484:	d0d9      	beq.n	801243a <__swbuf_r+0x2e>
 8012486:	e7d6      	b.n	8012436 <__swbuf_r+0x2a>

08012488 <__swsetup_r>:
 8012488:	b538      	push	{r3, r4, r5, lr}
 801248a:	4b29      	ldr	r3, [pc, #164]	@ (8012530 <__swsetup_r+0xa8>)
 801248c:	4605      	mov	r5, r0
 801248e:	6818      	ldr	r0, [r3, #0]
 8012490:	460c      	mov	r4, r1
 8012492:	b118      	cbz	r0, 801249c <__swsetup_r+0x14>
 8012494:	6a03      	ldr	r3, [r0, #32]
 8012496:	b90b      	cbnz	r3, 801249c <__swsetup_r+0x14>
 8012498:	f7ff f886 	bl	80115a8 <__sinit>
 801249c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124a0:	0719      	lsls	r1, r3, #28
 80124a2:	d422      	bmi.n	80124ea <__swsetup_r+0x62>
 80124a4:	06da      	lsls	r2, r3, #27
 80124a6:	d407      	bmi.n	80124b8 <__swsetup_r+0x30>
 80124a8:	2209      	movs	r2, #9
 80124aa:	602a      	str	r2, [r5, #0]
 80124ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124b0:	81a3      	strh	r3, [r4, #12]
 80124b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80124b6:	e033      	b.n	8012520 <__swsetup_r+0x98>
 80124b8:	0758      	lsls	r0, r3, #29
 80124ba:	d512      	bpl.n	80124e2 <__swsetup_r+0x5a>
 80124bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80124be:	b141      	cbz	r1, 80124d2 <__swsetup_r+0x4a>
 80124c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80124c4:	4299      	cmp	r1, r3
 80124c6:	d002      	beq.n	80124ce <__swsetup_r+0x46>
 80124c8:	4628      	mov	r0, r5
 80124ca:	f7ff fa67 	bl	801199c <_free_r>
 80124ce:	2300      	movs	r3, #0
 80124d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80124d2:	89a3      	ldrh	r3, [r4, #12]
 80124d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80124d8:	81a3      	strh	r3, [r4, #12]
 80124da:	2300      	movs	r3, #0
 80124dc:	6063      	str	r3, [r4, #4]
 80124de:	6923      	ldr	r3, [r4, #16]
 80124e0:	6023      	str	r3, [r4, #0]
 80124e2:	89a3      	ldrh	r3, [r4, #12]
 80124e4:	f043 0308 	orr.w	r3, r3, #8
 80124e8:	81a3      	strh	r3, [r4, #12]
 80124ea:	6923      	ldr	r3, [r4, #16]
 80124ec:	b94b      	cbnz	r3, 8012502 <__swsetup_r+0x7a>
 80124ee:	89a3      	ldrh	r3, [r4, #12]
 80124f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80124f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80124f8:	d003      	beq.n	8012502 <__swsetup_r+0x7a>
 80124fa:	4621      	mov	r1, r4
 80124fc:	4628      	mov	r0, r5
 80124fe:	f000 f860 	bl	80125c2 <__smakebuf_r>
 8012502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012506:	f013 0201 	ands.w	r2, r3, #1
 801250a:	d00a      	beq.n	8012522 <__swsetup_r+0x9a>
 801250c:	2200      	movs	r2, #0
 801250e:	60a2      	str	r2, [r4, #8]
 8012510:	6962      	ldr	r2, [r4, #20]
 8012512:	4252      	negs	r2, r2
 8012514:	61a2      	str	r2, [r4, #24]
 8012516:	6922      	ldr	r2, [r4, #16]
 8012518:	b942      	cbnz	r2, 801252c <__swsetup_r+0xa4>
 801251a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801251e:	d1c5      	bne.n	80124ac <__swsetup_r+0x24>
 8012520:	bd38      	pop	{r3, r4, r5, pc}
 8012522:	0799      	lsls	r1, r3, #30
 8012524:	bf58      	it	pl
 8012526:	6962      	ldrpl	r2, [r4, #20]
 8012528:	60a2      	str	r2, [r4, #8]
 801252a:	e7f4      	b.n	8012516 <__swsetup_r+0x8e>
 801252c:	2000      	movs	r0, #0
 801252e:	e7f7      	b.n	8012520 <__swsetup_r+0x98>
 8012530:	200000c0 	.word	0x200000c0

08012534 <memmove>:
 8012534:	4288      	cmp	r0, r1
 8012536:	b510      	push	{r4, lr}
 8012538:	eb01 0402 	add.w	r4, r1, r2
 801253c:	d902      	bls.n	8012544 <memmove+0x10>
 801253e:	4284      	cmp	r4, r0
 8012540:	4623      	mov	r3, r4
 8012542:	d807      	bhi.n	8012554 <memmove+0x20>
 8012544:	1e43      	subs	r3, r0, #1
 8012546:	42a1      	cmp	r1, r4
 8012548:	d008      	beq.n	801255c <memmove+0x28>
 801254a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801254e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012552:	e7f8      	b.n	8012546 <memmove+0x12>
 8012554:	4402      	add	r2, r0
 8012556:	4601      	mov	r1, r0
 8012558:	428a      	cmp	r2, r1
 801255a:	d100      	bne.n	801255e <memmove+0x2a>
 801255c:	bd10      	pop	{r4, pc}
 801255e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012566:	e7f7      	b.n	8012558 <memmove+0x24>

08012568 <abort>:
 8012568:	b508      	push	{r3, lr}
 801256a:	2006      	movs	r0, #6
 801256c:	f000 f88e 	bl	801268c <raise>
 8012570:	2001      	movs	r0, #1
 8012572:	f7ee ffab 	bl	80014cc <_exit>

08012576 <__swhatbuf_r>:
 8012576:	b570      	push	{r4, r5, r6, lr}
 8012578:	460c      	mov	r4, r1
 801257a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801257e:	2900      	cmp	r1, #0
 8012580:	b096      	sub	sp, #88	@ 0x58
 8012582:	4615      	mov	r5, r2
 8012584:	461e      	mov	r6, r3
 8012586:	da0d      	bge.n	80125a4 <__swhatbuf_r+0x2e>
 8012588:	89a3      	ldrh	r3, [r4, #12]
 801258a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801258e:	f04f 0100 	mov.w	r1, #0
 8012592:	bf14      	ite	ne
 8012594:	2340      	movne	r3, #64	@ 0x40
 8012596:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801259a:	2000      	movs	r0, #0
 801259c:	6031      	str	r1, [r6, #0]
 801259e:	602b      	str	r3, [r5, #0]
 80125a0:	b016      	add	sp, #88	@ 0x58
 80125a2:	bd70      	pop	{r4, r5, r6, pc}
 80125a4:	466a      	mov	r2, sp
 80125a6:	f000 f879 	bl	801269c <_fstat_r>
 80125aa:	2800      	cmp	r0, #0
 80125ac:	dbec      	blt.n	8012588 <__swhatbuf_r+0x12>
 80125ae:	9901      	ldr	r1, [sp, #4]
 80125b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80125b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80125b8:	4259      	negs	r1, r3
 80125ba:	4159      	adcs	r1, r3
 80125bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80125c0:	e7eb      	b.n	801259a <__swhatbuf_r+0x24>

080125c2 <__smakebuf_r>:
 80125c2:	898b      	ldrh	r3, [r1, #12]
 80125c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125c6:	079d      	lsls	r5, r3, #30
 80125c8:	4606      	mov	r6, r0
 80125ca:	460c      	mov	r4, r1
 80125cc:	d507      	bpl.n	80125de <__smakebuf_r+0x1c>
 80125ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80125d2:	6023      	str	r3, [r4, #0]
 80125d4:	6123      	str	r3, [r4, #16]
 80125d6:	2301      	movs	r3, #1
 80125d8:	6163      	str	r3, [r4, #20]
 80125da:	b003      	add	sp, #12
 80125dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125de:	ab01      	add	r3, sp, #4
 80125e0:	466a      	mov	r2, sp
 80125e2:	f7ff ffc8 	bl	8012576 <__swhatbuf_r>
 80125e6:	9f00      	ldr	r7, [sp, #0]
 80125e8:	4605      	mov	r5, r0
 80125ea:	4639      	mov	r1, r7
 80125ec:	4630      	mov	r0, r6
 80125ee:	f7fe fda9 	bl	8011144 <_malloc_r>
 80125f2:	b948      	cbnz	r0, 8012608 <__smakebuf_r+0x46>
 80125f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125f8:	059a      	lsls	r2, r3, #22
 80125fa:	d4ee      	bmi.n	80125da <__smakebuf_r+0x18>
 80125fc:	f023 0303 	bic.w	r3, r3, #3
 8012600:	f043 0302 	orr.w	r3, r3, #2
 8012604:	81a3      	strh	r3, [r4, #12]
 8012606:	e7e2      	b.n	80125ce <__smakebuf_r+0xc>
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	6020      	str	r0, [r4, #0]
 801260c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012610:	81a3      	strh	r3, [r4, #12]
 8012612:	9b01      	ldr	r3, [sp, #4]
 8012614:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012618:	b15b      	cbz	r3, 8012632 <__smakebuf_r+0x70>
 801261a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801261e:	4630      	mov	r0, r6
 8012620:	f000 f84e 	bl	80126c0 <_isatty_r>
 8012624:	b128      	cbz	r0, 8012632 <__smakebuf_r+0x70>
 8012626:	89a3      	ldrh	r3, [r4, #12]
 8012628:	f023 0303 	bic.w	r3, r3, #3
 801262c:	f043 0301 	orr.w	r3, r3, #1
 8012630:	81a3      	strh	r3, [r4, #12]
 8012632:	89a3      	ldrh	r3, [r4, #12]
 8012634:	431d      	orrs	r5, r3
 8012636:	81a5      	strh	r5, [r4, #12]
 8012638:	e7cf      	b.n	80125da <__smakebuf_r+0x18>

0801263a <_raise_r>:
 801263a:	291f      	cmp	r1, #31
 801263c:	b538      	push	{r3, r4, r5, lr}
 801263e:	4605      	mov	r5, r0
 8012640:	460c      	mov	r4, r1
 8012642:	d904      	bls.n	801264e <_raise_r+0x14>
 8012644:	2316      	movs	r3, #22
 8012646:	6003      	str	r3, [r0, #0]
 8012648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801264c:	bd38      	pop	{r3, r4, r5, pc}
 801264e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012650:	b112      	cbz	r2, 8012658 <_raise_r+0x1e>
 8012652:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012656:	b94b      	cbnz	r3, 801266c <_raise_r+0x32>
 8012658:	4628      	mov	r0, r5
 801265a:	f000 f853 	bl	8012704 <_getpid_r>
 801265e:	4622      	mov	r2, r4
 8012660:	4601      	mov	r1, r0
 8012662:	4628      	mov	r0, r5
 8012664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012668:	f000 b83a 	b.w	80126e0 <_kill_r>
 801266c:	2b01      	cmp	r3, #1
 801266e:	d00a      	beq.n	8012686 <_raise_r+0x4c>
 8012670:	1c59      	adds	r1, r3, #1
 8012672:	d103      	bne.n	801267c <_raise_r+0x42>
 8012674:	2316      	movs	r3, #22
 8012676:	6003      	str	r3, [r0, #0]
 8012678:	2001      	movs	r0, #1
 801267a:	e7e7      	b.n	801264c <_raise_r+0x12>
 801267c:	2100      	movs	r1, #0
 801267e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012682:	4620      	mov	r0, r4
 8012684:	4798      	blx	r3
 8012686:	2000      	movs	r0, #0
 8012688:	e7e0      	b.n	801264c <_raise_r+0x12>
	...

0801268c <raise>:
 801268c:	4b02      	ldr	r3, [pc, #8]	@ (8012698 <raise+0xc>)
 801268e:	4601      	mov	r1, r0
 8012690:	6818      	ldr	r0, [r3, #0]
 8012692:	f7ff bfd2 	b.w	801263a <_raise_r>
 8012696:	bf00      	nop
 8012698:	200000c0 	.word	0x200000c0

0801269c <_fstat_r>:
 801269c:	b538      	push	{r3, r4, r5, lr}
 801269e:	4d07      	ldr	r5, [pc, #28]	@ (80126bc <_fstat_r+0x20>)
 80126a0:	2300      	movs	r3, #0
 80126a2:	4604      	mov	r4, r0
 80126a4:	4608      	mov	r0, r1
 80126a6:	4611      	mov	r1, r2
 80126a8:	602b      	str	r3, [r5, #0]
 80126aa:	f7ee ff5f 	bl	800156c <_fstat>
 80126ae:	1c43      	adds	r3, r0, #1
 80126b0:	d102      	bne.n	80126b8 <_fstat_r+0x1c>
 80126b2:	682b      	ldr	r3, [r5, #0]
 80126b4:	b103      	cbz	r3, 80126b8 <_fstat_r+0x1c>
 80126b6:	6023      	str	r3, [r4, #0]
 80126b8:	bd38      	pop	{r3, r4, r5, pc}
 80126ba:	bf00      	nop
 80126bc:	2000ac40 	.word	0x2000ac40

080126c0 <_isatty_r>:
 80126c0:	b538      	push	{r3, r4, r5, lr}
 80126c2:	4d06      	ldr	r5, [pc, #24]	@ (80126dc <_isatty_r+0x1c>)
 80126c4:	2300      	movs	r3, #0
 80126c6:	4604      	mov	r4, r0
 80126c8:	4608      	mov	r0, r1
 80126ca:	602b      	str	r3, [r5, #0]
 80126cc:	f7ee ff5e 	bl	800158c <_isatty>
 80126d0:	1c43      	adds	r3, r0, #1
 80126d2:	d102      	bne.n	80126da <_isatty_r+0x1a>
 80126d4:	682b      	ldr	r3, [r5, #0]
 80126d6:	b103      	cbz	r3, 80126da <_isatty_r+0x1a>
 80126d8:	6023      	str	r3, [r4, #0]
 80126da:	bd38      	pop	{r3, r4, r5, pc}
 80126dc:	2000ac40 	.word	0x2000ac40

080126e0 <_kill_r>:
 80126e0:	b538      	push	{r3, r4, r5, lr}
 80126e2:	4d07      	ldr	r5, [pc, #28]	@ (8012700 <_kill_r+0x20>)
 80126e4:	2300      	movs	r3, #0
 80126e6:	4604      	mov	r4, r0
 80126e8:	4608      	mov	r0, r1
 80126ea:	4611      	mov	r1, r2
 80126ec:	602b      	str	r3, [r5, #0]
 80126ee:	f7ee fedd 	bl	80014ac <_kill>
 80126f2:	1c43      	adds	r3, r0, #1
 80126f4:	d102      	bne.n	80126fc <_kill_r+0x1c>
 80126f6:	682b      	ldr	r3, [r5, #0]
 80126f8:	b103      	cbz	r3, 80126fc <_kill_r+0x1c>
 80126fa:	6023      	str	r3, [r4, #0]
 80126fc:	bd38      	pop	{r3, r4, r5, pc}
 80126fe:	bf00      	nop
 8012700:	2000ac40 	.word	0x2000ac40

08012704 <_getpid_r>:
 8012704:	f7ee beca 	b.w	800149c <_getpid>

08012708 <_init>:
 8012708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801270a:	bf00      	nop
 801270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801270e:	bc08      	pop	{r3}
 8012710:	469e      	mov	lr, r3
 8012712:	4770      	bx	lr

08012714 <_fini>:
 8012714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012716:	bf00      	nop
 8012718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801271a:	bc08      	pop	{r3}
 801271c:	469e      	mov	lr, r3
 801271e:	4770      	bx	lr

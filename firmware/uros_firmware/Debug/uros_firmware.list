
uros_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000197c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a0  080199a8  080199a8  0001a9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa48  0801aa48  0001c680  2**0
                  CONTENTS
  4 .ARM          00000008  0801aa48  0801aa48  0001ba48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aa50  0801aa50  0001c680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801aa50  0801aa50  0001ba50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801aa58  0801aa58  0001ba58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000680  20000000  0801aa5c  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000adc0  20000680  0801b0dc  0001c680  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b440  0801b0dc  0001d440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c680  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002689a  00000000  00000000  0001c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054f8  00000000  00000000  00042f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e68  00000000  00000000  00048448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000177b  00000000  00000000  0004a2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dce8  00000000  00000000  0004ba2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a23  00000000  00000000  00079713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116250  00000000  00000000  000a1136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b7386  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fdc  00000000  00000000  001b73fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001c03d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000680 	.word	0x20000680
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801998c 	.word	0x0801998c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000684 	.word	0x20000684
 800021c:	0801998c 	.word	0x0801998c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 b9b5 	b.w	8000f54 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <MX_FREERTOS_Init+0x18>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <MX_FREERTOS_Init+0x1c>)
 8000f62:	f006 fce1 	bl	8007928 <osThreadNew>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a03      	ldr	r2, [pc, #12]	@ (8000f78 <MX_FREERTOS_Init+0x20>)
 8000f6a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	08019a30 	.word	0x08019a30
 8000f74:	08001a1d 	.word	0x08001a1d
 8000f78:	2000069c 	.word	0x2000069c

08000f7c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f88:	f007 fda2 	bl	8008ad0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f94:	f000 f986 	bl	80012a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f98:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f040 8090 	bne.w	80010c6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01e      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fac:	2208      	movs	r2, #8
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d015      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f023 0307 	bic.w	r3, r3, #7
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fd6:	f383 8811 	msr	BASEPRI, r3
 8000fda:	f3bf 8f6f 	isb	sy
 8000fde:	f3bf 8f4f 	dsb	sy
 8000fe2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	e7fd      	b.n	8000fe6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d06a      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
 8000ff0:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d865      	bhi.n	80010c6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ffa:	4b42      	ldr	r3, [pc, #264]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8000ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000ffe:	4b41      	ldr	r3, [pc, #260]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001004:	e004      	b.n	8001010 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d903      	bls.n	8001022 <pvPortMallocMicroROS+0xa6>
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f1      	bne.n	8001006 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001028:	429a      	cmp	r2, r3
 800102a:	d04c      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2208      	movs	r2, #8
 8001032:	4413      	add	r3, r2
 8001034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	1ad2      	subs	r2, r2, r3
 8001046:	2308      	movs	r3, #8
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	429a      	cmp	r2, r3
 800104c:	d920      	bls.n	8001090 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800104e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001064:	f383 8811 	msr	BASEPRI, r3
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	613b      	str	r3, [r7, #16]
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1ad2      	subs	r2, r2, r3
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800108a:	69b8      	ldr	r0, [r7, #24]
 800108c:	f000 f96c 	bl	8001368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 800109c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d203      	bcs.n	80010b2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a16      	ldr	r2, [pc, #88]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010c6:	f007 fd11 	bl	8008aec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d8:	f383 8811 	msr	BASEPRI, r3
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	60fb      	str	r3, [r7, #12]
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80010ec:	69fb      	ldr	r3, [r7, #28]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200041e4 	.word	0x200041e4
 80010fc:	200041f0 	.word	0x200041f0
 8001100:	200041e8 	.word	0x200041e8
 8001104:	200041dc 	.word	0x200041dc
 8001108:	200041ec 	.word	0x200041ec

0800110c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d04a      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800111e:	2308      	movs	r3, #8
 8001120:	425b      	negs	r3, r3
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <vPortFreeMicroROS+0x46>
	__asm volatile
 800113a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	60fb      	str	r3, [r7, #12]
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <vPortFreeMicroROS+0x66>
	__asm volatile
 800115a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115e:	f383 8811 	msr	BASEPRI, r3
 8001162:	f3bf 8f6f 	isb	sy
 8001166:	f3bf 8f4f 	dsb	sy
 800116a:	60bb      	str	r3, [r7, #8]
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	e7fd      	b.n	800116e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d019      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d115      	bne.n	80011b4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001198:	f007 fc9a 	bl	8008ad0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011aa:	6938      	ldr	r0, [r7, #16]
 80011ac:	f000 f8dc 	bl	8001368 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011b0:	f007 fc9c 	bl	8008aec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200041f0 	.word	0x200041f0
 80011c0:	200041e8 	.word	0x200041e8

080011c4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011d0:	2308      	movs	r3, #8
 80011d2:	425b      	negs	r3, r3
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4413      	add	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <getBlockSize+0x38>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

	return count;
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200041f0 	.word	0x200041f0

08001200 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800120a:	f007 fc61 	bl	8008ad0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f7ff feb4 	bl	8000f7c <pvPortMallocMicroROS>
 8001214:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d017      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d014      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffce 	bl	80011c4 <getBlockSize>
 8001228:	4603      	mov	r3, r0
 800122a:	2208      	movs	r2, #8
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d201      	bcs.n	800123c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f017 f9f2 	bl	801862a <memcpy>

		vPortFreeMicroROS(pv);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff60 	bl	800110c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800124c:	f007 fc4e 	bl	8008aec <xTaskResumeAll>

	return newmem;
 8001250:	68bb      	ldr	r3, [r7, #8]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001264:	f007 fc34 	bl	8008ad0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff fe82 	bl	8000f7c <pvPortMallocMicroROS>
 8001278:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800127e:	e004      	b.n	800128a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	613a      	str	r2, [r7, #16]
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	1e5a      	subs	r2, r3, #1
 800128e:	617a      	str	r2, [r7, #20]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f5      	bne.n	8001280 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001294:	f007 fc2a 	bl	8008aec <xTaskResumeAll>
  	return mem;
 8001298:	68fb      	ldr	r3, [r7, #12]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b0:	4b27      	ldr	r3, [pc, #156]	@ (8001350 <prvHeapInit+0xac>)
 80012b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00c      	beq.n	80012d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3307      	adds	r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 0307 	bic.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <prvHeapInit+0xac>)
 80012d4:	4413      	add	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <prvHeapInit+0xb0>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <prvHeapInit+0xb0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f0:	2208      	movs	r2, #8
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f023 0307 	bic.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a15      	ldr	r2, [pc, #84]	@ (8001358 <prvHeapInit+0xb4>)
 8001304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <prvHeapInit+0xb4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <prvHeapInit+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	1ad2      	subs	r2, r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <prvHeapInit+0xb4>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <prvHeapInit+0xb8>)
 8001332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <prvHeapInit+0xbc>)
 800133a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <prvHeapInit+0xc0>)
 800133e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	200035dc 	.word	0x200035dc
 8001354:	200041dc 	.word	0x200041dc
 8001358:	200041e4 	.word	0x200041e4
 800135c:	200041ec 	.word	0x200041ec
 8001360:	200041e8 	.word	0x200041e8
 8001364:	200041f0 	.word	0x200041f0

08001368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <prvInsertBlockIntoFreeList+0xac>)
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e002      	b.n	800137c <prvInsertBlockIntoFreeList+0x14>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d8f7      	bhi.n	8001376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	4413      	add	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	d108      	bne.n	80013aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	441a      	add	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	441a      	add	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d118      	bne.n	80013f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d00d      	beq.n	80013e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e008      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e003      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d002      	beq.n	8001406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	200041dc 	.word	0x200041dc
 8001418:	200041e4 	.word	0x200041e4

0800141c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <MX_DMA_Init+0x60>)
 8001424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001426:	4a15      	ldr	r2, [pc, #84]	@ (800147c <MX_DMA_Init+0x60>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6493      	str	r3, [r2, #72]	@ 0x48
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <MX_DMA_Init+0x60>)
 8001430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <MX_DMA_Init+0x60>)
 800143c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800143e:	4a0f      	ldr	r2, [pc, #60]	@ (800147c <MX_DMA_Init+0x60>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6493      	str	r3, [r2, #72]	@ 0x48
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <MX_DMA_Init+0x60>)
 8001448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2105      	movs	r1, #5
 8001456:	200b      	movs	r0, #11
 8001458:	f001 f908 	bl	800266c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800145c:	200b      	movs	r0, #11
 800145e:	f001 f91f 	bl	80026a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2105      	movs	r1, #5
 8001466:	200c      	movs	r0, #12
 8001468:	f001 f900 	bl	800266c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800146c:	200c      	movs	r0, #12
 800146e:	f001 f917 	bl	80026a0 <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800148e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001490:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001494:	4904      	ldr	r1, [pc, #16]	@ (80014a8 <cubemx_transport_open+0x28>)
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f004 f90a 	bl	80056b0 <HAL_UART_Receive_DMA>
    return true;
 800149c:	2301      	movs	r3, #1
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200041f4 	.word	0x200041f4

080014ac <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014ba:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f004 f943 	bl	8005748 <HAL_UART_DMAStop>
    return true;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014e0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e8:	2b20      	cmp	r3, #32
 80014ea:	d11b      	bne.n	8001524 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	68b9      	ldr	r1, [r7, #8]
 80014f4:	6978      	ldr	r0, [r7, #20]
 80014f6:	f004 f85b 	bl	80055b0 <HAL_UART_Transmit_DMA>
 80014fa:	4603      	mov	r3, r0
 80014fc:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80014fe:	e002      	b.n	8001506 <cubemx_transport_write+0x3a>
            osDelay(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f006 faa3 	bl	8007a4c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001506:	7cfb      	ldrb	r3, [r7, #19]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d104      	bne.n	8001516 <cubemx_transport_write+0x4a>
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	2b20      	cmp	r3, #32
 8001514:	d1f4      	bne.n	8001500 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8001516:	7cfb      	ldrb	r3, [r7, #19]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <cubemx_transport_write+0x54>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	e002      	b.n	8001526 <cubemx_transport_write+0x5a>
 8001520:	2300      	movs	r3, #0
 8001522:	e000      	b.n	8001526 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001524:	2300      	movs	r3, #0
    }
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001544:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154a:	b672      	cpsid	i
}
 800154c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800155c:	4a1b      	ldr	r2, [pc, #108]	@ (80015cc <cubemx_transport_read+0x9c>)
 800155e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001560:	b662      	cpsie	i
}
 8001562:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	3301      	adds	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800156a:	2001      	movs	r0, #1
 800156c:	f006 fa6e 	bl	8007a4c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001570:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <cubemx_transport_read+0xa0>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <cubemx_transport_read+0x9c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d103      	bne.n	8001584 <cubemx_transport_read+0x54>
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbe2      	blt.n	800154a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001588:	e011      	b.n	80015ae <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <cubemx_transport_read+0xa0>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	440b      	add	r3, r1
 8001594:	490f      	ldr	r1, [pc, #60]	@ (80015d4 <cubemx_transport_read+0xa4>)
 8001596:	5c8a      	ldrb	r2, [r1, r2]
 8001598:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800159a:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <cubemx_transport_read+0xa0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015a4:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <cubemx_transport_read+0xa0>)
 80015a6:	6013      	str	r3, [r2, #0]
        wrote++;
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	3301      	adds	r3, #1
 80015ac:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <cubemx_transport_read+0xa0>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <cubemx_transport_read+0x9c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d003      	beq.n	80015c2 <cubemx_transport_read+0x92>
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d3e3      	bcc.n	800158a <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 80015c2:	69bb      	ldr	r3, [r7, #24]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200049f8 	.word	0x200049f8
 80015d0:	200049f4 	.word	0x200049f4
 80015d4:	200041f4 	.word	0x200041f4

080015d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	4b2f      	ldr	r3, [pc, #188]	@ (80016ac <MX_GPIO_Init+0xd4>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	4a2e      	ldr	r2, [pc, #184]	@ (80016ac <MX_GPIO_Init+0xd4>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fa:	4b2c      	ldr	r3, [pc, #176]	@ (80016ac <MX_GPIO_Init+0xd4>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001606:	4b29      	ldr	r3, [pc, #164]	@ (80016ac <MX_GPIO_Init+0xd4>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160a:	4a28      	ldr	r2, [pc, #160]	@ (80016ac <MX_GPIO_Init+0xd4>)
 800160c:	f043 0320 	orr.w	r3, r3, #32
 8001610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001612:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <MX_GPIO_Init+0xd4>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b23      	ldr	r3, [pc, #140]	@ (80016ac <MX_GPIO_Init+0xd4>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	4a22      	ldr	r2, [pc, #136]	@ (80016ac <MX_GPIO_Init+0xd4>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162a:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <MX_GPIO_Init+0xd4>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <MX_GPIO_Init+0xd4>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <MX_GPIO_Init+0xd4>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <MX_GPIO_Init+0xd4>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2120      	movs	r1, #32
 8001652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001656:	f001 fcf1 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800165a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001660:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	480f      	ldr	r0, [pc, #60]	@ (80016b0 <MX_GPIO_Init+0xd8>)
 8001672:	f001 fb61 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001676:	2320      	movs	r3, #32
 8001678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001690:	f001 fb52 	bl	8002d38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2105      	movs	r1, #5
 8001698:	2028      	movs	r0, #40	@ 0x28
 800169a:	f000 ffe7 	bl	800266c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800169e:	2028      	movs	r0, #40	@ 0x28
 80016a0:	f000 fffe 	bl	80026a0 <HAL_NVIC_EnableIRQ>

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	@ 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	48000800 	.word	0x48000800

080016b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <MX_I2C1_Init+0x74>)
 80016ba:	4a1c      	ldr	r2, [pc, #112]	@ (800172c <MX_I2C1_Init+0x78>)
 80016bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 80016be:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <MX_I2C1_Init+0x74>)
 80016c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001730 <MX_I2C1_Init+0x7c>)
 80016c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016c4:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <MX_I2C1_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ca:	4b17      	ldr	r3, [pc, #92]	@ (8001728 <MX_I2C1_Init+0x74>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <MX_I2C1_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016d6:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <MX_I2C1_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <MX_I2C1_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_I2C1_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <MX_I2C1_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ee:	480e      	ldr	r0, [pc, #56]	@ (8001728 <MX_I2C1_Init+0x74>)
 80016f0:	f001 fcdf 	bl	80030b2 <HAL_I2C_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016fa:	f000 fa73 	bl	8001be4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016fe:	2100      	movs	r1, #0
 8001700:	4809      	ldr	r0, [pc, #36]	@ (8001728 <MX_I2C1_Init+0x74>)
 8001702:	f002 fa61 	bl	8003bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800170c:	f000 fa6a 	bl	8001be4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001710:	2100      	movs	r1, #0
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_I2C1_Init+0x74>)
 8001714:	f002 faa3 	bl	8003c5e <HAL_I2CEx_ConfigDigitalFilter>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800171e:	f000 fa61 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200049fc 	.word	0x200049fc
 800172c:	40005400 	.word	0x40005400
 8001730:	40621236 	.word	0x40621236

08001734 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b09e      	sub	sp, #120	@ 0x78
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	2254      	movs	r2, #84	@ 0x54
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f016 fe9f 	bl	8018498 <memset>
  if(i2cHandle->Instance==I2C1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1f      	ldr	r2, [pc, #124]	@ (80017dc <HAL_I2C_MspInit+0xa8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d136      	bne.n	80017d2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001764:	2340      	movs	r3, #64	@ 0x40
 8001766:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	4618      	mov	r0, r3
 8001772:	f003 f933 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800177c:	f000 fa32 	bl	8001be4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <HAL_I2C_MspInit+0xac>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001784:	4a16      	ldr	r2, [pc, #88]	@ (80017e0 <HAL_I2C_MspInit+0xac>)
 8001786:	f043 0302 	orr.w	r3, r3, #2
 800178a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <HAL_I2C_MspInit+0xac>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001798:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800179c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179e:	2312      	movs	r3, #18
 80017a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017aa:	2304      	movs	r3, #4
 80017ac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017b2:	4619      	mov	r1, r3
 80017b4:	480b      	ldr	r0, [pc, #44]	@ (80017e4 <HAL_I2C_MspInit+0xb0>)
 80017b6:	f001 fabf 	bl	8002d38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <HAL_I2C_MspInit+0xac>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <HAL_I2C_MspInit+0xac>)
 80017c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_I2C_MspInit+0xac>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017d2:	bf00      	nop
 80017d4:	3778      	adds	r7, #120	@ 0x78
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40005400 	.word	0x40005400
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000400 	.word	0x48000400

080017e8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <MX_IWDG_Init+0x34>)
 80017ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <MX_IWDG_Init+0x38>)
 80017f0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <MX_IWDG_Init+0x34>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <MX_IWDG_Init+0x34>)
 80017fa:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80017fe:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <MX_IWDG_Init+0x34>)
 8001802:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001806:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	@ (800181c <MX_IWDG_Init+0x34>)
 800180a:	f002 fa74 	bl	8003cf6 <HAL_IWDG_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001814:	f000 f9e6 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20004a50 	.word	0x20004a50
 8001820:	40003000 	.word	0x40003000

08001824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001828:	f000 fe31 	bl	800248e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182c:	f000 f81c 	bl	8001868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001830:	f7ff fed2 	bl	80015d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001834:	f7ff fdf2 	bl	800141c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001838:	f000 fcf8 	bl	800222c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800183c:	f7ff ff3a 	bl	80016b4 <MX_I2C1_Init>
  MX_IWDG_Init();
 8001840:	f7ff ffd2 	bl	80017e8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8001844:	bf00      	nop
 8001846:	4807      	ldr	r0, [pc, #28]	@ (8001864 <main+0x40>)
 8001848:	f005 fc46 	bl	80070d8 <MPU6050_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b01      	cmp	r3, #1
 8001850:	d0f9      	beq.n	8001846 <main+0x22>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001852:	f006 f81f 	bl	8007894 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001856:	f7ff fb7f 	bl	8000f58 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800185a:	f006 f83f 	bl	80078dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800185e:	bf00      	nop
 8001860:	e7fd      	b.n	800185e <main+0x3a>
 8001862:	bf00      	nop
 8001864:	200049fc 	.word	0x200049fc

08001868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b094      	sub	sp, #80	@ 0x50
 800186c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186e:	f107 0318 	add.w	r3, r7, #24
 8001872:	2238      	movs	r2, #56	@ 0x38
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f016 fe0e 	bl	8018498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800188a:	2000      	movs	r0, #0
 800188c:	f002 fa92 	bl	8003db4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001890:	2309      	movs	r3, #9
 8001892:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001898:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800189a:	2301      	movs	r3, #1
 800189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a2:	2303      	movs	r3, #3
 80018a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80018a6:	2306      	movs	r3, #6
 80018a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80018aa:	2355      	movs	r3, #85	@ 0x55
 80018ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0318 	add.w	r3, r7, #24
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fb2c 	bl	8003f1c <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018ca:	f000 f98b 	bl	8001be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2303      	movs	r3, #3
 80018d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2104      	movs	r1, #4
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fe2a 	bl	8004540 <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018f2:	f000 f977 	bl	8001be4 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3750      	adds	r7, #80	@ 0x50
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <timer_callback>:

/* USER CODE BEGIN 4 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d06b      	beq.n	80019ea <timer_callback+0xea>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8001912:	493d      	ldr	r1, [pc, #244]	@ (8001a08 <timer_callback+0x108>)
 8001914:	483d      	ldr	r0, [pc, #244]	@ (8001a0c <timer_callback+0x10c>)
 8001916:	f005 fc37 	bl	8007188 <MPU6050_Read_All>

		imu_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 800191a:	f00a fd63 	bl	800c3e4 <rmw_uros_epoch_millis>
 800191e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	f7ff f94f 	bl	8000bc8 <__aeabi_ldivmod>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4b38      	ldr	r3, [pc, #224]	@ (8001a10 <timer_callback+0x110>)
 8001930:	601a      	str	r2, [r3, #0]
		imu_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 8001932:	f00a fd65 	bl	800c400 <rmw_uros_epoch_nanos>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4b35      	ldr	r3, [pc, #212]	@ (8001a10 <timer_callback+0x110>)
 800193c:	605a      	str	r2, [r3, #4]

		imu_msg.linear_acceleration.x = G2M_S2 * MPU6050.Ax;
 800193e:	4b32      	ldr	r3, [pc, #200]	@ (8001a08 <timer_callback+0x108>)
 8001940:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001944:	a32c      	add	r3, pc, #176	@ (adr r3, 80019f8 <timer_callback+0xf8>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fe8d 	bl	8000668 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	492f      	ldr	r1, [pc, #188]	@ (8001a10 <timer_callback+0x110>)
 8001954:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
		imu_msg.linear_acceleration.y = G2M_S2 * MPU6050.Ay;
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <timer_callback+0x108>)
 800195a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800195e:	a326      	add	r3, pc, #152	@ (adr r3, 80019f8 <timer_callback+0xf8>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe fe80 	bl	8000668 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4928      	ldr	r1, [pc, #160]	@ (8001a10 <timer_callback+0x110>)
 800196e:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
		imu_msg.linear_acceleration.z = G2M_S2 * MPU6050.Az;
 8001972:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <timer_callback+0x108>)
 8001974:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001978:	a31f      	add	r3, pc, #124	@ (adr r3, 80019f8 <timer_callback+0xf8>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fe73 	bl	8000668 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4922      	ldr	r1, [pc, #136]	@ (8001a10 <timer_callback+0x110>)
 8001988:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

		imu_msg.angular_velocity.x = DEG2RAD * MPU6050.Gx;
 800198c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <timer_callback+0x108>)
 800198e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001992:	a31b      	add	r3, pc, #108	@ (adr r3, 8001a00 <timer_callback+0x100>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fe66 	bl	8000668 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	491b      	ldr	r1, [pc, #108]	@ (8001a10 <timer_callback+0x110>)
 80019a2:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
		imu_msg.angular_velocity.y = DEG2RAD * MPU6050.Gy;
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <timer_callback+0x108>)
 80019a8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80019ac:	a314      	add	r3, pc, #80	@ (adr r3, 8001a00 <timer_callback+0x100>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe fe59 	bl	8000668 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4915      	ldr	r1, [pc, #84]	@ (8001a10 <timer_callback+0x110>)
 80019bc:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		imu_msg.angular_velocity.z = DEG2RAD * MPU6050.Gz;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <timer_callback+0x108>)
 80019c2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80019c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001a00 <timer_callback+0x100>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fe4c 	bl	8000668 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	490e      	ldr	r1, [pc, #56]	@ (8001a10 <timer_callback+0x110>)
 80019d6:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

		RCSOFTCHECK(rcl_publish(&imu_publisher, &imu_msg, NULL));
 80019da:	2200      	movs	r2, #0
 80019dc:	490c      	ldr	r1, [pc, #48]	@ (8001a10 <timer_callback+0x110>)
 80019de:	480d      	ldr	r0, [pc, #52]	@ (8001a14 <timer_callback+0x114>)
 80019e0:	f008 fef6 	bl	800a7d0 <rcl_publish>

		HAL_IWDG_Refresh(&hiwdg);
 80019e4:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <timer_callback+0x118>)
 80019e6:	f002 f9d5 	bl	8003d94 <HAL_IWDG_Refresh>
	}
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	f3af 8000 	nop.w
 80019f8:	51eb851f 	.word	0x51eb851f
 80019fc:	40239eb8 	.word	0x40239eb8
 8001a00:	9217271a 	.word	0x9217271a
 8001a04:	3fa015bf 	.word	0x3fa015bf
 8001a08:	20004c88 	.word	0x20004c88
 8001a0c:	200049fc 	.word	0x200049fc
 8001a10:	20004b48 	.word	0x20004b48
 8001a14:	20004b44 	.word	0x20004b44
 8001a18:	20004a50 	.word	0x20004a50

08001a1c <StartDefaultTask>:
void StartDefaultTask(void *argument)
{
 8001a1c:	b5b0      	push	{r4, r5, r7, lr}
 8001a1e:	b0b2      	sub	sp, #200	@ 0xc8
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN StartDefaultTask */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8001a26:	4b4e      	ldr	r3, [pc, #312]	@ (8001b60 <StartDefaultTask+0x144>)
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b64 <StartDefaultTask+0x148>)
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b68 <StartDefaultTask+0x14c>)
 8001a30:	4a4e      	ldr	r2, [pc, #312]	@ (8001b6c <StartDefaultTask+0x150>)
 8001a32:	494f      	ldr	r1, [pc, #316]	@ (8001b70 <StartDefaultTask+0x154>)
 8001a34:	2001      	movs	r0, #1
 8001a36:	f009 feeb 	bl	800b810 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001a3a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f009 fe02 	bl	800b648 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001a44:	4b4b      	ldr	r3, [pc, #300]	@ (8001b74 <StartDefaultTask+0x158>)
 8001a46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b78 <StartDefaultTask+0x15c>)
 8001a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001a50:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <StartDefaultTask+0x160>)
 8001a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001a56:	4b4a      	ldr	r3, [pc, #296]	@ (8001b80 <StartDefaultTask+0x164>)
 8001a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001a5c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001a60:	4618      	mov	r0, r3
 8001a62:	f009 fdff 	bl	800b664 <rcutils_set_default_allocator>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <StartDefaultTask+0x5e>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 8001a72:	21fc      	movs	r1, #252	@ 0xfc
 8001a74:	4843      	ldr	r0, [pc, #268]	@ (8001b84 <StartDefaultTask+0x168>)
 8001a76:	f016 fb8f 	bl	8018198 <iprintf>
  }

  // micro-ROS app
  // Initialize micro-ROS allocator
  allocator = rcl_get_default_allocator();
 8001a7a:	4c43      	ldr	r4, [pc, #268]	@ (8001b88 <StartDefaultTask+0x16c>)
 8001a7c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001a80:	4618      	mov	r0, r3
 8001a82:	f009 fe0d 	bl	800b6a0 <rcutils_get_default_allocator>
 8001a86:	4625      	mov	r5, r4
 8001a88:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	602b      	str	r3, [r5, #0]

  // Initialize and modify options (Set DOMAIN ID to 73)
  init_options = rcl_get_zero_initialized_init_options();
 8001a94:	f008 fccc 	bl	800a430 <rcl_get_zero_initialized_init_options>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b8c <StartDefaultTask+0x170>)
 8001a9c:	6013      	str	r3, [r2, #0]
  RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b88 <StartDefaultTask+0x16c>)
 8001aa0:	466c      	mov	r4, sp
 8001aa2:	f103 020c 	add.w	r2, r3, #12
 8001aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aaa:	e884 0003 	stmia.w	r4, {r0, r1}
 8001aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab0:	4836      	ldr	r0, [pc, #216]	@ (8001b8c <StartDefaultTask+0x170>)
 8001ab2:	f008 fcbf 	bl	800a434 <rcl_init_options_init>
  RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 73));
 8001ab6:	2149      	movs	r1, #73	@ 0x49
 8001ab8:	4834      	ldr	r0, [pc, #208]	@ (8001b8c <StartDefaultTask+0x170>)
 8001aba:	f008 fdb7 	bl	800a62c <rcl_init_options_set_domain_id>

  // Initialize rclc support object with custom options
  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001abe:	4b32      	ldr	r3, [pc, #200]	@ (8001b88 <StartDefaultTask+0x16c>)
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4b32      	ldr	r3, [pc, #200]	@ (8001b8c <StartDefaultTask+0x170>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4831      	ldr	r0, [pc, #196]	@ (8001b90 <StartDefaultTask+0x174>)
 8001aca:	f009 fce1 	bl	800b490 <rclc_support_init_with_options>

  // Create node object
  const char * node_name = "imu_node";
 8001ace:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <StartDefaultTask+0x178>)
 8001ad0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  // Init node with configured support object
  rclc_node_init_default(&node, node_name, "", &support);
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b90 <StartDefaultTask+0x174>)
 8001ad6:	4a30      	ldr	r2, [pc, #192]	@ (8001b98 <StartDefaultTask+0x17c>)
 8001ad8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001adc:	482f      	ldr	r0, [pc, #188]	@ (8001b9c <StartDefaultTask+0x180>)
 8001ade:	f009 fd0b 	bl	800b4f8 <rclc_node_init_default>

  // Synchronize time with the agent
  rmw_uros_sync_session(1000);
 8001ae2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ae6:	f00a fc99 	bl	800c41c <rmw_uros_sync_session>

  // Create timer
  rclc_timer_init_default(
 8001aea:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba0 <StartDefaultTask+0x184>)
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba4 <StartDefaultTask+0x188>)
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	4926      	ldr	r1, [pc, #152]	@ (8001b90 <StartDefaultTask+0x174>)
 8001af6:	482c      	ldr	r0, [pc, #176]	@ (8001ba8 <StartDefaultTask+0x18c>)
 8001af8:	f009 fd6e 	bl	800b5d8 <rclc_timer_init_default>
	RCL_MS_TO_NS(10),
	timer_callback
  );

  // Creates a best effort rcl publisher
  rclc_publisher_init_best_effort(
 8001afc:	f00b f810 	bl	800cb20 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b2a      	ldr	r3, [pc, #168]	@ (8001bac <StartDefaultTask+0x190>)
 8001b04:	4925      	ldr	r1, [pc, #148]	@ (8001b9c <StartDefaultTask+0x180>)
 8001b06:	482a      	ldr	r0, [pc, #168]	@ (8001bb0 <StartDefaultTask+0x194>)
 8001b08:	f009 fd32 	bl	800b570 <rclc_publisher_init_best_effort>
	ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
	"imu"
  );

  // Create imu message
  imu_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8001b0c:	4c29      	ldr	r4, [pc, #164]	@ (8001bb4 <StartDefaultTask+0x198>)
 8001b0e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001b12:	4929      	ldr	r1, [pc, #164]	@ (8001bb8 <StartDefaultTask+0x19c>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f008 fc67 	bl	800a3e8 <micro_ros_string_utilities_init>
 8001b1a:	f104 0308 	add.w	r3, r4, #8
 8001b1e:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8001b22:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b24:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // Create executor
  executor = rclc_executor_get_zero_initialized_executor();
 8001b28:	4c24      	ldr	r4, [pc, #144]	@ (8001bbc <StartDefaultTask+0x1a0>)
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f009 f9dd 	bl	800aeec <rclc_executor_get_zero_initialized_executor>
 8001b32:	4620      	mov	r0, r4
 8001b34:	463b      	mov	r3, r7
 8001b36:	2288      	movs	r2, #136	@ 0x88
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f016 fd76 	bl	801862a <memcpy>
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001b3e:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <StartDefaultTask+0x16c>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	4913      	ldr	r1, [pc, #76]	@ (8001b90 <StartDefaultTask+0x174>)
 8001b44:	481d      	ldr	r0, [pc, #116]	@ (8001bbc <StartDefaultTask+0x1a0>)
 8001b46:	f009 f9db 	bl	800af00 <rclc_executor_init>

  // Add executor
  rclc_executor_add_timer(&executor, &imu_timer);
 8001b4a:	4917      	ldr	r1, [pc, #92]	@ (8001ba8 <StartDefaultTask+0x18c>)
 8001b4c:	481b      	ldr	r0, [pc, #108]	@ (8001bbc <StartDefaultTask+0x1a0>)
 8001b4e:	f009 fa47 	bl	800afe0 <rclc_executor_add_timer>

  // Spin executor
  rclc_executor_spin(&executor);
 8001b52:	481a      	ldr	r0, [pc, #104]	@ (8001bbc <StartDefaultTask+0x1a0>)
 8001b54:	f009 fc5a 	bl	800b40c <rclc_executor_spin>

  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8001b58:	200a      	movs	r0, #10
 8001b5a:	f005 ff77 	bl	8007a4c <osDelay>
 8001b5e:	e7fb      	b.n	8001b58 <StartDefaultTask+0x13c>
 8001b60:	08001531 	.word	0x08001531
 8001b64:	080014cd 	.word	0x080014cd
 8001b68:	080014ad 	.word	0x080014ad
 8001b6c:	08001481 	.word	0x08001481
 8001b70:	20004d3c 	.word	0x20004d3c
 8001b74:	08001bf1 	.word	0x08001bf1
 8001b78:	08001c35 	.word	0x08001c35
 8001b7c:	08001c6d 	.word	0x08001c6d
 8001b80:	08001cd9 	.word	0x08001cd9
 8001b84:	080199b4 	.word	0x080199b4
 8001b88:	20004a98 	.word	0x20004a98
 8001b8c:	20004a60 	.word	0x20004a60
 8001b90:	20004a64 	.word	0x20004a64
 8001b94:	080199dc 	.word	0x080199dc
 8001b98:	080199e8 	.word	0x080199e8
 8001b9c:	20004aac 	.word	0x20004aac
 8001ba0:	08001901 	.word	0x08001901
 8001ba4:	00989680 	.word	0x00989680
 8001ba8:	20004b40 	.word	0x20004b40
 8001bac:	080199ec 	.word	0x080199ec
 8001bb0:	20004b44 	.word	0x20004b44
 8001bb4:	20004b48 	.word	0x20004b48
 8001bb8:	080199f0 	.word	0x080199f0
 8001bbc:	20004ab8 	.word	0x20004ab8

08001bc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bd2:	f000 fc75 	bl	80024c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40012c00 	.word	0x40012c00

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001be8:	b672      	cpsid	i
}
 8001bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <Error_Handler+0x8>

08001bf0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <microros_allocate+0x3c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <microros_allocate+0x3c>)
 8001c08:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <microros_allocate+0x40>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <microros_allocate+0x40>)
 8001c18:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff f9ae 	bl	8000f7c <pvPortMallocMicroROS>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20004ce0 	.word	0x20004ce0
 8001c30:	20004ce4 	.word	0x20004ce4

08001c34 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00c      	beq.n	8001c5e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fabd 	bl	80011c4 <getBlockSize>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a06      	ldr	r2, [pc, #24]	@ (8001c68 <microros_deallocate+0x34>)
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <microros_deallocate+0x34>)
 8001c56:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff fa57 	bl	800110c <vPortFreeMicroROS>
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20004ce4 	.word	0x20004ce4

08001c6c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c78:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <microros_reallocate+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	4413      	add	r3, r2
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <microros_reallocate+0x64>)
 8001c86:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c88:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <microros_reallocate+0x68>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	4413      	add	r3, r2
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <microros_reallocate+0x68>)
 8001c96:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d104      	bne.n	8001ca8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001c9e:	68b8      	ldr	r0, [r7, #8]
 8001ca0:	f7ff f96c 	bl	8000f7c <pvPortMallocMicroROS>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	e00e      	b.n	8001cc6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff fa8b 	bl	80011c4 <getBlockSize>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a08      	ldr	r2, [pc, #32]	@ (8001cd4 <microros_reallocate+0x68>)
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <microros_reallocate+0x68>)
 8001cba:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7ff fa9e 	bl	8001200 <pvPortReallocMicroROS>
 8001cc4:	4603      	mov	r3, r0
  }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20004ce0 	.word	0x20004ce0
 8001cd4:	20004ce4 	.word	0x20004ce4

08001cd8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	fb02 f303 	mul.w	r3, r2, r3
 8001cec:	4a0c      	ldr	r2, [pc, #48]	@ (8001d20 <microros_zero_allocate+0x48>)
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <microros_zero_allocate+0x48>)
 8001cf6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	fb02 f303 	mul.w	r3, r2, r3
 8001d00:	4a08      	ldr	r2, [pc, #32]	@ (8001d24 <microros_zero_allocate+0x4c>)
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	4413      	add	r3, r2
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <microros_zero_allocate+0x4c>)
 8001d0a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f7ff faa3 	bl	800125a <pvPortCallocMicroROS>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20004ce0 	.word	0x20004ce0
 8001d24:	20004ce4 	.word	0x20004ce4

08001d28 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001d3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d3e:	a320      	add	r3, pc, #128	@ (adr r3, 8001dc0 <UTILS_NanosecondsToTimespec+0x98>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe ff40 	bl	8000bc8 <__aeabi_ldivmod>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d56:	a31a      	add	r3, pc, #104	@ (adr r3, 8001dc0 <UTILS_NanosecondsToTimespec+0x98>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe ff34 	bl	8000bc8 <__aeabi_ldivmod>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	da20      	bge.n	8001dae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a11      	ldr	r2, [pc, #68]	@ (8001db8 <UTILS_NanosecondsToTimespec+0x90>)
 8001d72:	fb82 1203 	smull	r1, r2, r2, r3
 8001d76:	1712      	asrs	r2, r2, #28
 8001d78:	17db      	asrs	r3, r3, #31
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	6979      	ldr	r1, [r7, #20]
 8001d88:	17c8      	asrs	r0, r1, #31
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	4605      	mov	r5, r0
 8001d8e:	ebb2 0804 	subs.w	r8, r2, r4
 8001d92:	eb63 0905 	sbc.w	r9, r3, r5
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4906      	ldr	r1, [pc, #24]	@ (8001dbc <UTILS_NanosecondsToTimespec+0x94>)
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	441a      	add	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	609a      	str	r2, [r3, #8]
    }
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001db8:	44b82fa1 	.word	0x44b82fa1
 8001dbc:	3b9aca00 	.word	0x3b9aca00
 8001dc0:	3b9aca00 	.word	0x3b9aca00
 8001dc4:	00000000 	.word	0x00000000

08001dc8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dcc:	b08e      	sub	sp, #56	@ 0x38
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8001dd2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001dd4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001dd8:	2300      	movs	r3, #0
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001dea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dee:	4618      	mov	r0, r3
 8001df0:	f007 f8f8 	bl	8008fe4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df6:	17da      	asrs	r2, r3, #31
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	61fa      	str	r2, [r7, #28]
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	69b9      	ldr	r1, [r7, #24]
 8001e06:	000b      	movs	r3, r1
 8001e08:	2200      	movs	r2, #0
 8001e0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e10:	2200      	movs	r2, #0
 8001e12:	461c      	mov	r4, r3
 8001e14:	4615      	mov	r5, r2
 8001e16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e1a:	1911      	adds	r1, r2, r4
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	416b      	adcs	r3, r5
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e26:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001e2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	f04f 0400 	mov.w	r4, #0
 8001e36:	f04f 0500 	mov.w	r5, #0
 8001e3a:	015d      	lsls	r5, r3, #5
 8001e3c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001e40:	0154      	lsls	r4, r2, #5
 8001e42:	4622      	mov	r2, r4
 8001e44:	462b      	mov	r3, r5
 8001e46:	ebb2 0800 	subs.w	r8, r2, r0
 8001e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e5a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001e5e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001e62:	4690      	mov	r8, r2
 8001e64:	4699      	mov	r9, r3
 8001e66:	eb18 0a00 	adds.w	sl, r8, r0
 8001e6a:	eb49 0b01 	adc.w	fp, r9, r1
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e7a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e7e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e82:	ebb2 040a 	subs.w	r4, r2, sl
 8001e86:	603c      	str	r4, [r7, #0]
 8001e88:	eb63 030b 	sbc.w	r3, r3, fp
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e92:	4623      	mov	r3, r4
 8001e94:	181b      	adds	r3, r3, r0
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	462b      	mov	r3, r5
 8001e9a:	eb41 0303 	adc.w	r3, r1, r3
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ea6:	f7ff ff3f 	bl	8001d28 <UTILS_NanosecondsToTimespec>

    return 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	3738      	adds	r7, #56	@ 0x38
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_MspInit+0x50>)
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec2:	4a11      	ldr	r2, [pc, #68]	@ (8001f08 <HAL_MspInit+0x50>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_MspInit+0x50>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <HAL_MspInit+0x50>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	4a0b      	ldr	r2, [pc, #44]	@ (8001f08 <HAL_MspInit+0x50>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_MspInit+0x50>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	f06f 0001 	mvn.w	r0, #1
 8001ef6:	f000 fbb9 	bl	800266c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001efa:	f001 ffff 	bl	8003efc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	@ 0x30
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <HAL_InitTick+0xc4>)
 8001f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f20:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd0 <HAL_InitTick+0xc4>)
 8001f22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f26:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f28:	4b29      	ldr	r3, [pc, #164]	@ (8001fd0 <HAL_InitTick+0xc4>)
 8001f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f34:	f107 020c 	add.w	r2, r7, #12
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fcd4 	bl	80048ec <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f44:	f002 fcbc 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8001f48:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4c:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <HAL_InitTick+0xc8>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	3b01      	subs	r3, #1
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <HAL_InitTick+0xcc>)
 8001f5a:	4a20      	ldr	r2, [pc, #128]	@ (8001fdc <HAL_InitTick+0xd0>)
 8001f5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd8 <HAL_InitTick+0xcc>)
 8001f60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f66:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd8 <HAL_InitTick+0xcc>)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <HAL_InitTick+0xcc>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_InitTick+0xcc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001f78:	4817      	ldr	r0, [pc, #92]	@ (8001fd8 <HAL_InitTick+0xcc>)
 8001f7a:	f002 ff7d 	bl	8004e78 <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f8c:	4812      	ldr	r0, [pc, #72]	@ (8001fd8 <HAL_InitTick+0xcc>)
 8001f8e:	f002 ffd5 	bl	8004f3c <HAL_TIM_Base_Start_IT>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d111      	bne.n	8001fc4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fa0:	2019      	movs	r0, #25
 8001fa2:	f000 fb7d 	bl	80026a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d808      	bhi.n	8001fbe <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	2019      	movs	r0, #25
 8001fb2:	f000 fb5b 	bl	800266c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <HAL_InitTick+0xd4>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	e002      	b.n	8001fc4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3730      	adds	r7, #48	@ 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	431bde83 	.word	0x431bde83
 8001fd8:	20004ce8 	.word	0x20004ce8
 8001fdc:	40012c00 	.word	0x40012c00
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <NMI_Handler+0x4>

08001fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <UsageFault_Handler+0x4>

0800200c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <DMA1_Channel1_IRQHandler+0x10>)
 8002022:	f000 fd2e 	bl	8002a82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20004dd0 	.word	0x20004dd0

08002030 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <DMA1_Channel2_IRQHandler+0x10>)
 8002036:	f000 fd24 	bl	8002a82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20004e30 	.word	0x20004e30

08002044 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800204a:	f002 ffef 	bl	800502c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20004ce8 	.word	0x20004ce8

08002058 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800205c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002060:	f001 f804 	bl	800306c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <LPUART1_IRQHandler+0x10>)
 800206e:	f003 fc01 	bl	8005874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20004d3c 	.word	0x20004d3c

0800207c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return 1;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_kill>:

int _kill(int pid, int sig)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002096:	f016 fa93 	bl	80185c0 <__errno>
 800209a:	4603      	mov	r3, r0
 800209c:	2216      	movs	r2, #22
 800209e:	601a      	str	r2, [r3, #0]
  return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_exit>:

void _exit (int status)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ffe7 	bl	800208c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020be:	bf00      	nop
 80020c0:	e7fd      	b.n	80020be <_exit+0x12>

080020c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	e00a      	b.n	80020ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d4:	f3af 8000 	nop.w
 80020d8:	4601      	mov	r1, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	60ba      	str	r2, [r7, #8]
 80020e0:	b2ca      	uxtb	r2, r1
 80020e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dbf0      	blt.n	80020d4 <_read+0x12>
  }

  return len;
 80020f2:	687b      	ldr	r3, [r7, #4]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e009      	b.n	8002122 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	60ba      	str	r2, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	dbf1      	blt.n	800210e <_write+0x12>
  }
  return len;
 800212a:	687b      	ldr	r3, [r7, #4]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_close>:

int _close(int file)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800215c:	605a      	str	r2, [r3, #4]
  return 0;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_isatty>:

int _isatty(int file)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002174:	2301      	movs	r3, #1
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	@ (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	@ (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f016 f9f8 	bl	80185c0 <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	@ (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20020000 	.word	0x20020000
 80021fc:	00000400 	.word	0x00000400
 8002200:	20004d38 	.word	0x20004d38
 8002204:	2000b440 	.word	0x2000b440

08002208 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <SystemInit+0x20>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	4a05      	ldr	r2, [pc, #20]	@ (8002228 <SystemInit+0x20>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002230:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 8002232:	4a21      	ldr	r2, [pc, #132]	@ (80022b8 <MX_LPUART1_UART_Init+0x8c>)
 8002234:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8002236:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 8002238:	4a20      	ldr	r2, [pc, #128]	@ (80022bc <MX_LPUART1_UART_Init+0x90>)
 800223a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800223c:	4b1d      	ldr	r3, [pc, #116]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002242:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800224e:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 8002250:	220c      	movs	r2, #12
 8002252:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002254:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002260:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002266:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 8002268:	2200      	movs	r2, #0
 800226a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800226c:	4811      	ldr	r0, [pc, #68]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 800226e:	f003 f94f 	bl	8005510 <HAL_UART_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002278:	f7ff fcb4 	bl	8001be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800227c:	2100      	movs	r1, #0
 800227e:	480d      	ldr	r0, [pc, #52]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 8002280:	f004 fe5f 	bl	8006f42 <HAL_UARTEx_SetTxFifoThreshold>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800228a:	f7ff fcab 	bl	8001be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800228e:	2100      	movs	r1, #0
 8002290:	4808      	ldr	r0, [pc, #32]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 8002292:	f004 fe94 	bl	8006fbe <HAL_UARTEx_SetRxFifoThreshold>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800229c:	f7ff fca2 	bl	8001be4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80022a0:	4804      	ldr	r0, [pc, #16]	@ (80022b4 <MX_LPUART1_UART_Init+0x88>)
 80022a2:	f004 fe15 	bl	8006ed0 <HAL_UARTEx_DisableFifoMode>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80022ac:	f7ff fc9a 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20004d3c 	.word	0x20004d3c
 80022b8:	40008000 	.word	0x40008000
 80022bc:	001e8480 	.word	0x001e8480

080022c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b09e      	sub	sp, #120	@ 0x78
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	2254      	movs	r2, #84	@ 0x54
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f016 f8d9 	bl	8018498 <memset>
  if(uartHandle->Instance==LPUART1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a4e      	ldr	r2, [pc, #312]	@ (8002424 <HAL_UART_MspInit+0x164>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	f040 8094 	bne.w	800241a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80022f2:	2320      	movs	r3, #32
 80022f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022fa:	f107 0310 	add.w	r3, r7, #16
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 fb6c 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800230a:	f7ff fc6b 	bl	8001be4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800230e:	4b46      	ldr	r3, [pc, #280]	@ (8002428 <HAL_UART_MspInit+0x168>)
 8002310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002312:	4a45      	ldr	r2, [pc, #276]	@ (8002428 <HAL_UART_MspInit+0x168>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800231a:	4b43      	ldr	r3, [pc, #268]	@ (8002428 <HAL_UART_MspInit+0x168>)
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	4b40      	ldr	r3, [pc, #256]	@ (8002428 <HAL_UART_MspInit+0x168>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	4a3f      	ldr	r2, [pc, #252]	@ (8002428 <HAL_UART_MspInit+0x168>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002332:	4b3d      	ldr	r3, [pc, #244]	@ (8002428 <HAL_UART_MspInit+0x168>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800233e:	230c      	movs	r3, #12
 8002340:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800234e:	230c      	movs	r3, #12
 8002350:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002356:	4619      	mov	r1, r3
 8002358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800235c:	f000 fcec 	bl	8002d38 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002360:	4b32      	ldr	r3, [pc, #200]	@ (800242c <HAL_UART_MspInit+0x16c>)
 8002362:	4a33      	ldr	r2, [pc, #204]	@ (8002430 <HAL_UART_MspInit+0x170>)
 8002364:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002366:	4b31      	ldr	r3, [pc, #196]	@ (800242c <HAL_UART_MspInit+0x16c>)
 8002368:	2222      	movs	r2, #34	@ 0x22
 800236a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800236c:	4b2f      	ldr	r3, [pc, #188]	@ (800242c <HAL_UART_MspInit+0x16c>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002372:	4b2e      	ldr	r3, [pc, #184]	@ (800242c <HAL_UART_MspInit+0x16c>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002378:	4b2c      	ldr	r3, [pc, #176]	@ (800242c <HAL_UART_MspInit+0x16c>)
 800237a:	2280      	movs	r2, #128	@ 0x80
 800237c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800237e:	4b2b      	ldr	r3, [pc, #172]	@ (800242c <HAL_UART_MspInit+0x16c>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002384:	4b29      	ldr	r3, [pc, #164]	@ (800242c <HAL_UART_MspInit+0x16c>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800238a:	4b28      	ldr	r3, [pc, #160]	@ (800242c <HAL_UART_MspInit+0x16c>)
 800238c:	2220      	movs	r2, #32
 800238e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002390:	4b26      	ldr	r3, [pc, #152]	@ (800242c <HAL_UART_MspInit+0x16c>)
 8002392:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002396:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002398:	4824      	ldr	r0, [pc, #144]	@ (800242c <HAL_UART_MspInit+0x16c>)
 800239a:	f000 f98f 	bl	80026bc <HAL_DMA_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80023a4:	f7ff fc1e 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a20      	ldr	r2, [pc, #128]	@ (800242c <HAL_UART_MspInit+0x16c>)
 80023ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80023b0:	4a1e      	ldr	r2, [pc, #120]	@ (800242c <HAL_UART_MspInit+0x16c>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80023b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <HAL_UART_MspInit+0x174>)
 80023b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002438 <HAL_UART_MspInit+0x178>)
 80023ba:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80023bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002434 <HAL_UART_MspInit+0x174>)
 80023be:	2223      	movs	r2, #35	@ 0x23
 80023c0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <HAL_UART_MspInit+0x174>)
 80023c4:	2210      	movs	r2, #16
 80023c6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <HAL_UART_MspInit+0x174>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ce:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <HAL_UART_MspInit+0x174>)
 80023d0:	2280      	movs	r2, #128	@ 0x80
 80023d2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d4:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <HAL_UART_MspInit+0x174>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023da:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <HAL_UART_MspInit+0x174>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <HAL_UART_MspInit+0x174>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023e6:	4b13      	ldr	r3, [pc, #76]	@ (8002434 <HAL_UART_MspInit+0x174>)
 80023e8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80023ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80023ee:	4811      	ldr	r0, [pc, #68]	@ (8002434 <HAL_UART_MspInit+0x174>)
 80023f0:	f000 f964 	bl	80026bc <HAL_DMA_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80023fa:	f7ff fbf3 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a0c      	ldr	r2, [pc, #48]	@ (8002434 <HAL_UART_MspInit+0x174>)
 8002402:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002404:	4a0b      	ldr	r2, [pc, #44]	@ (8002434 <HAL_UART_MspInit+0x174>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2105      	movs	r1, #5
 800240e:	205b      	movs	r0, #91	@ 0x5b
 8002410:	f000 f92c 	bl	800266c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002414:	205b      	movs	r0, #91	@ 0x5b
 8002416:	f000 f943 	bl	80026a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800241a:	bf00      	nop
 800241c:	3778      	adds	r7, #120	@ 0x78
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40008000 	.word	0x40008000
 8002428:	40021000 	.word	0x40021000
 800242c:	20004dd0 	.word	0x20004dd0
 8002430:	40020008 	.word	0x40020008
 8002434:	20004e30 	.word	0x20004e30
 8002438:	4002001c 	.word	0x4002001c

0800243c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800243c:	480d      	ldr	r0, [pc, #52]	@ (8002474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800243e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002440:	f7ff fee2 	bl	8002208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002444:	480c      	ldr	r0, [pc, #48]	@ (8002478 <LoopForever+0x6>)
  ldr r1, =_edata
 8002446:	490d      	ldr	r1, [pc, #52]	@ (800247c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002448:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <LoopForever+0xe>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800244c:	e002      	b.n	8002454 <LoopCopyDataInit>

0800244e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002452:	3304      	adds	r3, #4

08002454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002458:	d3f9      	bcc.n	800244e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245a:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800245c:	4c0a      	ldr	r4, [pc, #40]	@ (8002488 <LoopForever+0x16>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002460:	e001      	b.n	8002466 <LoopFillZerobss>

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002464:	3204      	adds	r2, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246a:	f016 f8af 	bl	80185cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800246e:	f7ff f9d9 	bl	8001824 <main>

08002472 <LoopForever>:

LoopForever:
    b LoopForever
 8002472:	e7fe      	b.n	8002472 <LoopForever>
  ldr   r0, =_estack
 8002474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800247c:	20000680 	.word	0x20000680
  ldr r2, =_sidata
 8002480:	0801aa5c 	.word	0x0801aa5c
  ldr r2, =_sbss
 8002484:	20000680 	.word	0x20000680
  ldr r4, =_ebss
 8002488:	2000b440 	.word	0x2000b440

0800248c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC1_2_IRQHandler>

0800248e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002498:	2003      	movs	r0, #3
 800249a:	f000 f8dc 	bl	8002656 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800249e:	200f      	movs	r0, #15
 80024a0:	f7ff fd34 	bl	8001f0c <HAL_InitTick>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	71fb      	strb	r3, [r7, #7]
 80024ae:	e001      	b.n	80024b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024b0:	f7ff fd02 	bl	8001eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024b4:	79fb      	ldrb	r3, [r7, #7]

}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_IncTick+0x1c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <HAL_IncTick+0x20>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	4a03      	ldr	r2, [pc, #12]	@ (80024dc <HAL_IncTick+0x1c>)
 80024d0:	6013      	str	r3, [r2, #0]
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	20004e90 	.word	0x20004e90
 80024e0:	2000000c 	.word	0x2000000c

080024e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return uwTick;
 80024e8:	4b03      	ldr	r3, [pc, #12]	@ (80024f8 <HAL_GetTick+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20004e90 	.word	0x20004e90

080024fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	@ (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 0307 	and.w	r3, r3, #7
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db0b      	blt.n	800258a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4907      	ldr	r1, [pc, #28]	@ (8002598 <__NVIC_EnableIRQ+0x38>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0a      	blt.n	80025c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	490c      	ldr	r1, [pc, #48]	@ (80025e8 <__NVIC_SetPriority+0x4c>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	440b      	add	r3, r1
 80025c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c4:	e00a      	b.n	80025dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4908      	ldr	r1, [pc, #32]	@ (80025ec <__NVIC_SetPriority+0x50>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	3b04      	subs	r3, #4
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	440b      	add	r3, r1
 80025da:	761a      	strb	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000e100 	.word	0xe000e100
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f1c3 0307 	rsb	r3, r3, #7
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf28      	it	cs
 800260e:	2304      	movcs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3304      	adds	r3, #4
 8002616:	2b06      	cmp	r3, #6
 8002618:	d902      	bls.n	8002620 <NVIC_EncodePriority+0x30>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3b03      	subs	r3, #3
 800261e:	e000      	b.n	8002622 <NVIC_EncodePriority+0x32>
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002638:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43d9      	mvns	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	4313      	orrs	r3, r2
         );
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ff4c 	bl	80024fc <__NVIC_SetPriorityGrouping>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800267a:	f7ff ff63 	bl	8002544 <__NVIC_GetPriorityGrouping>
 800267e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	6978      	ldr	r0, [r7, #20]
 8002686:	f7ff ffb3 	bl	80025f0 <NVIC_EncodePriority>
 800268a:	4602      	mov	r2, r0
 800268c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff82 	bl	800259c <__NVIC_SetPriority>
}
 8002698:	bf00      	nop
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff56 	bl	8002560 <__NVIC_EnableIRQ>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e08d      	b.n	80027ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b47      	ldr	r3, [pc, #284]	@ (80027f4 <HAL_DMA_Init+0x138>)
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d80f      	bhi.n	80026fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	4b45      	ldr	r3, [pc, #276]	@ (80027f8 <HAL_DMA_Init+0x13c>)
 80026e2:	4413      	add	r3, r2
 80026e4:	4a45      	ldr	r2, [pc, #276]	@ (80027fc <HAL_DMA_Init+0x140>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	009a      	lsls	r2, r3, #2
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a42      	ldr	r2, [pc, #264]	@ (8002800 <HAL_DMA_Init+0x144>)
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80026f8:	e00e      	b.n	8002718 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	4b40      	ldr	r3, [pc, #256]	@ (8002804 <HAL_DMA_Init+0x148>)
 8002702:	4413      	add	r3, r2
 8002704:	4a3d      	ldr	r2, [pc, #244]	@ (80027fc <HAL_DMA_Init+0x140>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	009a      	lsls	r2, r3, #2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a3c      	ldr	r2, [pc, #240]	@ (8002808 <HAL_DMA_Init+0x14c>)
 8002716:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800272e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002732:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800273c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fa82 	bl	8002c74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002778:	d102      	bne.n	8002780 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002794:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d010      	beq.n	80027c0 <HAL_DMA_Init+0x104>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d80c      	bhi.n	80027c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 faa2 	bl	8002cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	e008      	b.n	80027d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40020407 	.word	0x40020407
 80027f8:	bffdfff8 	.word	0xbffdfff8
 80027fc:	cccccccd 	.word	0xcccccccd
 8002800:	40020000 	.word	0x40020000
 8002804:	bffdfbf8 	.word	0xbffdfbf8
 8002808:	40020400 	.word	0x40020400

0800280c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_DMA_Start_IT+0x20>
 8002828:	2302      	movs	r3, #2
 800282a:	e066      	b.n	80028fa <HAL_DMA_Start_IT+0xee>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d155      	bne.n	80028ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f9c7 	bl	8002bf8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 020e 	orr.w	r2, r2, #14
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e00f      	b.n	80028a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0204 	bic.w	r2, r2, #4
 8002892:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 020a 	orr.w	r2, r2, #10
 80028a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e005      	b.n	80028f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
 80028f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d005      	beq.n	8002926 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2204      	movs	r2, #4
 800291e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e037      	b.n	8002996 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 020e 	bic.w	r2, r2, #14
 8002934:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002944:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	f003 021f 	and.w	r2, r3, #31
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002972:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00c      	beq.n	8002996 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002986:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800298a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002994:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d00d      	beq.n	80029e8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2204      	movs	r2, #4
 80029d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	e047      	b.n	8002a78 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 020e 	bic.w	r2, r2, #14
 80029f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	2101      	movs	r1, #1
 8002a26:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a34:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00c      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a56:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
    }
  }
  return status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d026      	beq.n	8002afc <HAL_DMA_IRQHandler+0x7a>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d021      	beq.n	8002afc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d107      	bne.n	8002ad6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0204 	bic.w	r2, r2, #4
 8002ad4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f003 021f 	and.w	r2, r3, #31
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d071      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002afa:	e06c      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	2202      	movs	r2, #2
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d02e      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d029      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 020a 	bic.w	r2, r2, #10
 8002b36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d038      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b6c:	e033      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	2208      	movs	r2, #8
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d02a      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d025      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 020e 	bic.w	r2, r2, #14
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f202 	lsl.w	r2, r1, r2
 8002bae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bd6:	bf00      	nop
 8002bd8:	bf00      	nop
}
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d004      	beq.n	8002c22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	f003 021f 	and.w	r2, r3, #31
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f202 	lsl.w	r2, r1, r2
 8002c34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d108      	bne.n	8002c58 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c56:	e007      	b.n	8002c68 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	60da      	str	r2, [r3, #12]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d802      	bhi.n	8002c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002c88:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	e001      	b.n	8002c92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002c8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c90:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	3b08      	subs	r3, #8
 8002c9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	009a      	lsls	r2, r3, #2
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002cec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002cbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40020407 	.word	0x40020407
 8002ce0:	40020800 	.word	0x40020800
 8002ce4:	40020820 	.word	0x40020820
 8002ce8:	cccccccd 	.word	0xcccccccd
 8002cec:	40020880 	.word	0x40020880

08002cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a08      	ldr	r2, [pc, #32]	@ (8002d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002d12:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	1000823f 	.word	0x1000823f
 8002d34:	40020940 	.word	0x40020940

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d46:	e15a      	b.n	8002ffe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 814c 	beq.w	8002ff8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d005      	beq.n	8002d78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d130      	bne.n	8002dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dae:	2201      	movs	r2, #1
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f003 0201 	and.w	r2, r3, #1
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d017      	beq.n	8002e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d123      	bne.n	8002e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	08da      	lsrs	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3208      	adds	r2, #8
 8002e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	08da      	lsrs	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3208      	adds	r2, #8
 8002e64:	6939      	ldr	r1, [r7, #16]
 8002e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0203 	and.w	r2, r3, #3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80a6 	beq.w	8002ff8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eac:	4b5b      	ldr	r3, [pc, #364]	@ (800301c <HAL_GPIO_Init+0x2e4>)
 8002eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb0:	4a5a      	ldr	r2, [pc, #360]	@ (800301c <HAL_GPIO_Init+0x2e4>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002eb8:	4b58      	ldr	r3, [pc, #352]	@ (800301c <HAL_GPIO_Init+0x2e4>)
 8002eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec4:	4a56      	ldr	r2, [pc, #344]	@ (8003020 <HAL_GPIO_Init+0x2e8>)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	089b      	lsrs	r3, r3, #2
 8002eca:	3302      	adds	r3, #2
 8002ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	220f      	movs	r2, #15
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002eee:	d01f      	beq.n	8002f30 <HAL_GPIO_Init+0x1f8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a4c      	ldr	r2, [pc, #304]	@ (8003024 <HAL_GPIO_Init+0x2ec>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d019      	beq.n	8002f2c <HAL_GPIO_Init+0x1f4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a4b      	ldr	r2, [pc, #300]	@ (8003028 <HAL_GPIO_Init+0x2f0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d013      	beq.n	8002f28 <HAL_GPIO_Init+0x1f0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a4a      	ldr	r2, [pc, #296]	@ (800302c <HAL_GPIO_Init+0x2f4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00d      	beq.n	8002f24 <HAL_GPIO_Init+0x1ec>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a49      	ldr	r2, [pc, #292]	@ (8003030 <HAL_GPIO_Init+0x2f8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d007      	beq.n	8002f20 <HAL_GPIO_Init+0x1e8>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a48      	ldr	r2, [pc, #288]	@ (8003034 <HAL_GPIO_Init+0x2fc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <HAL_GPIO_Init+0x1e4>
 8002f18:	2305      	movs	r3, #5
 8002f1a:	e00a      	b.n	8002f32 <HAL_GPIO_Init+0x1fa>
 8002f1c:	2306      	movs	r3, #6
 8002f1e:	e008      	b.n	8002f32 <HAL_GPIO_Init+0x1fa>
 8002f20:	2304      	movs	r3, #4
 8002f22:	e006      	b.n	8002f32 <HAL_GPIO_Init+0x1fa>
 8002f24:	2303      	movs	r3, #3
 8002f26:	e004      	b.n	8002f32 <HAL_GPIO_Init+0x1fa>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e002      	b.n	8002f32 <HAL_GPIO_Init+0x1fa>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_GPIO_Init+0x1fa>
 8002f30:	2300      	movs	r3, #0
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	f002 0203 	and.w	r2, r2, #3
 8002f38:	0092      	lsls	r2, r2, #2
 8002f3a:	4093      	lsls	r3, r2
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f42:	4937      	ldr	r1, [pc, #220]	@ (8003020 <HAL_GPIO_Init+0x2e8>)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f50:	4b39      	ldr	r3, [pc, #228]	@ (8003038 <HAL_GPIO_Init+0x300>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f74:	4a30      	ldr	r2, [pc, #192]	@ (8003038 <HAL_GPIO_Init+0x300>)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003038 <HAL_GPIO_Init+0x300>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f9e:	4a26      	ldr	r2, [pc, #152]	@ (8003038 <HAL_GPIO_Init+0x300>)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002fa4:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <HAL_GPIO_Init+0x300>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8003038 <HAL_GPIO_Init+0x300>)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fce:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <HAL_GPIO_Init+0x300>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ff2:	4a11      	ldr	r2, [pc, #68]	@ (8003038 <HAL_GPIO_Init+0x300>)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	f47f ae9d 	bne.w	8002d48 <HAL_GPIO_Init+0x10>
  }
}
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40021000 	.word	0x40021000
 8003020:	40010000 	.word	0x40010000
 8003024:	48000400 	.word	0x48000400
 8003028:	48000800 	.word	0x48000800
 800302c:	48000c00 	.word	0x48000c00
 8003030:	48001000 	.word	0x48001000
 8003034:	48001400 	.word	0x48001400
 8003038:	40010400 	.word	0x40010400

0800303c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
 8003048:	4613      	mov	r3, r2
 800304a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800304c:	787b      	ldrb	r3, [r7, #1]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003058:	e002      	b.n	8003060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800305a:	887a      	ldrh	r2, [r7, #2]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003076:	4b08      	ldr	r3, [pc, #32]	@ (8003098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d006      	beq.n	8003090 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003082:	4a05      	ldr	r2, [pc, #20]	@ (8003098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f806 	bl	800309c <HAL_GPIO_EXTI_Callback>
  }
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40010400 	.word	0x40010400

0800309c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e08d      	b.n	80031e0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fe fb2b 	bl	8001734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2224      	movs	r2, #36	@ 0x24
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003102:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003112:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003128:	609a      	str	r2, [r3, #8]
 800312a:	e006      	b.n	800313a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003138:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d108      	bne.n	8003154 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	e007      	b.n	8003164 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003162:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003176:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003186:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69d9      	ldr	r1, [r3, #28]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1a      	ldr	r2, [r3, #32]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b20      	cmp	r3, #32
 800320c:	f040 80f9 	bne.w	8003402 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_I2C_Mem_Write+0x34>
 8003216:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003222:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0ed      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Mem_Write+0x4e>
 8003232:	2302      	movs	r3, #2
 8003234:	e0e6      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800323e:	f7ff f951 	bl	80024e4 <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2319      	movs	r3, #25
 800324a:	2201      	movs	r2, #1
 800324c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fac3 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0d1      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2221      	movs	r2, #33	@ 0x21
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2240      	movs	r2, #64	@ 0x40
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a3a      	ldr	r2, [r7, #32]
 800327a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003280:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003288:	88f8      	ldrh	r0, [r7, #6]
 800328a:	893a      	ldrh	r2, [r7, #8]
 800328c:	8979      	ldrh	r1, [r7, #10]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	4603      	mov	r3, r0
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f9d3 	bl	8003644 <I2C_RequestMemoryWrite>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0a9      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2bff      	cmp	r3, #255	@ 0xff
 80032b8:	d90e      	bls.n	80032d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	22ff      	movs	r2, #255	@ 0xff
 80032be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	8979      	ldrh	r1, [r7, #10]
 80032c8:	2300      	movs	r3, #0
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fc47 	bl	8003b64 <I2C_TransferConfig>
 80032d6:	e00f      	b.n	80032f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	8979      	ldrh	r1, [r7, #10]
 80032ea:	2300      	movs	r3, #0
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fc36 	bl	8003b64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fac6 	bl	800388e <I2C_WaitOnTXISFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e07b      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	781a      	ldrb	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d034      	beq.n	80033b0 <HAL_I2C_Mem_Write+0x1c8>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d130      	bne.n	80033b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003354:	2200      	movs	r2, #0
 8003356:	2180      	movs	r1, #128	@ 0x80
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fa3f 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e04d      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	2bff      	cmp	r3, #255	@ 0xff
 8003370:	d90e      	bls.n	8003390 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	22ff      	movs	r2, #255	@ 0xff
 8003376:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337c:	b2da      	uxtb	r2, r3
 800337e:	8979      	ldrh	r1, [r7, #10]
 8003380:	2300      	movs	r3, #0
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fbeb 	bl	8003b64 <I2C_TransferConfig>
 800338e:	e00f      	b.n	80033b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	8979      	ldrh	r1, [r7, #10]
 80033a2:	2300      	movs	r3, #0
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fbda 	bl	8003b64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d19e      	bne.n	80032f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 faac 	bl	800391c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e01a      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2220      	movs	r2, #32
 80033d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_I2C_Mem_Write+0x224>)
 80033e2:	400b      	ands	r3, r1
 80033e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e000      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003402:	2302      	movs	r3, #2
  }
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	fe00e800 	.word	0xfe00e800

08003410 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	4608      	mov	r0, r1
 800341a:	4611      	mov	r1, r2
 800341c:	461a      	mov	r2, r3
 800341e:	4603      	mov	r3, r0
 8003420:	817b      	strh	r3, [r7, #10]
 8003422:	460b      	mov	r3, r1
 8003424:	813b      	strh	r3, [r7, #8]
 8003426:	4613      	mov	r3, r2
 8003428:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	f040 80fd 	bne.w	8003632 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_I2C_Mem_Read+0x34>
 800343e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0f1      	b.n	8003634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_I2C_Mem_Read+0x4e>
 800345a:	2302      	movs	r3, #2
 800345c:	e0ea      	b.n	8003634 <HAL_I2C_Mem_Read+0x224>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003466:	f7ff f83d 	bl	80024e4 <HAL_GetTick>
 800346a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2319      	movs	r3, #25
 8003472:	2201      	movs	r2, #1
 8003474:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f9af 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0d5      	b.n	8003634 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2222      	movs	r2, #34	@ 0x22
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2240      	movs	r2, #64	@ 0x40
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a3a      	ldr	r2, [r7, #32]
 80034a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80034a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034b0:	88f8      	ldrh	r0, [r7, #6]
 80034b2:	893a      	ldrh	r2, [r7, #8]
 80034b4:	8979      	ldrh	r1, [r7, #10]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	4603      	mov	r3, r0
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f913 	bl	80036ec <I2C_RequestMemoryRead>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0ad      	b.n	8003634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2bff      	cmp	r3, #255	@ 0xff
 80034e0:	d90e      	bls.n	8003500 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	22ff      	movs	r2, #255	@ 0xff
 80034e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	8979      	ldrh	r1, [r7, #10]
 80034f0:	4b52      	ldr	r3, [pc, #328]	@ (800363c <HAL_I2C_Mem_Read+0x22c>)
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fb33 	bl	8003b64 <I2C_TransferConfig>
 80034fe:	e00f      	b.n	8003520 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350e:	b2da      	uxtb	r2, r3
 8003510:	8979      	ldrh	r1, [r7, #10]
 8003512:	4b4a      	ldr	r3, [pc, #296]	@ (800363c <HAL_I2C_Mem_Read+0x22c>)
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 fb22 	bl	8003b64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003526:	2200      	movs	r2, #0
 8003528:	2104      	movs	r1, #4
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f956 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e07c      	b.n	8003634 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d034      	beq.n	80035e0 <HAL_I2C_Mem_Read+0x1d0>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357a:	2b00      	cmp	r3, #0
 800357c:	d130      	bne.n	80035e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003584:	2200      	movs	r2, #0
 8003586:	2180      	movs	r1, #128	@ 0x80
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f927 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e04d      	b.n	8003634 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	2bff      	cmp	r3, #255	@ 0xff
 80035a0:	d90e      	bls.n	80035c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	22ff      	movs	r2, #255	@ 0xff
 80035a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	8979      	ldrh	r1, [r7, #10]
 80035b0:	2300      	movs	r3, #0
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fad3 	bl	8003b64 <I2C_TransferConfig>
 80035be:	e00f      	b.n	80035e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	8979      	ldrh	r1, [r7, #10]
 80035d2:	2300      	movs	r3, #0
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fac2 	bl	8003b64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d19a      	bne.n	8003520 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f994 	bl	800391c <I2C_WaitOnSTOPFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e01a      	b.n	8003634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2220      	movs	r2, #32
 8003604:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <HAL_I2C_Mem_Read+0x230>)
 8003612:	400b      	ands	r3, r1
 8003614:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003632:	2302      	movs	r3, #2
  }
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	80002400 	.word	0x80002400
 8003640:	fe00e800 	.word	0xfe00e800

08003644 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4603      	mov	r3, r0
 8003654:	817b      	strh	r3, [r7, #10]
 8003656:	460b      	mov	r3, r1
 8003658:	813b      	strh	r3, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	8979      	ldrh	r1, [r7, #10]
 8003664:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <I2C_RequestMemoryWrite+0xa4>)
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fa79 	bl	8003b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	69b9      	ldr	r1, [r7, #24]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f909 	bl	800388e <I2C_WaitOnTXISFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e02c      	b.n	80036e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800368c:	893b      	ldrh	r3, [r7, #8]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	629a      	str	r2, [r3, #40]	@ 0x28
 8003696:	e015      	b.n	80036c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003698:	893b      	ldrh	r3, [r7, #8]
 800369a:	0a1b      	lsrs	r3, r3, #8
 800369c:	b29b      	uxth	r3, r3
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	69b9      	ldr	r1, [r7, #24]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f8ef 	bl	800388e <I2C_WaitOnTXISFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e012      	b.n	80036e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036ba:	893b      	ldrh	r3, [r7, #8]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2200      	movs	r2, #0
 80036cc:	2180      	movs	r1, #128	@ 0x80
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f884 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	80002000 	.word	0x80002000

080036ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	817b      	strh	r3, [r7, #10]
 80036fe:	460b      	mov	r3, r1
 8003700:	813b      	strh	r3, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	8979      	ldrh	r1, [r7, #10]
 800370c:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <I2C_RequestMemoryRead+0xa4>)
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2300      	movs	r3, #0
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fa26 	bl	8003b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	69b9      	ldr	r1, [r7, #24]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f8b6 	bl	800388e <I2C_WaitOnTXISFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e02c      	b.n	8003786 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d105      	bne.n	800373e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003732:	893b      	ldrh	r3, [r7, #8]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	629a      	str	r2, [r3, #40]	@ 0x28
 800373c:	e015      	b.n	800376a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800373e:	893b      	ldrh	r3, [r7, #8]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	b29b      	uxth	r3, r3
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	69b9      	ldr	r1, [r7, #24]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f89c 	bl	800388e <I2C_WaitOnTXISFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e012      	b.n	8003786 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003760:	893b      	ldrh	r3, [r7, #8]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2200      	movs	r2, #0
 8003772:	2140      	movs	r1, #64	@ 0x40
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f831 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	80002000 	.word	0x80002000

08003794 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d103      	bne.n	80037b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d007      	beq.n	80037d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	619a      	str	r2, [r3, #24]
  }
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ec:	e03b      	b.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	6839      	ldr	r1, [r7, #0]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f8d6 	bl	80039a4 <I2C_IsErrorOccurred>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e041      	b.n	8003886 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003808:	d02d      	beq.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fe fe6b 	bl	80024e4 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnFlagUntilTimeout+0x44>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d122      	bne.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	429a      	cmp	r2, r3
 800383c:	d113      	bne.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e00f      	b.n	8003886 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4013      	ands	r3, r2
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	429a      	cmp	r2, r3
 8003874:	bf0c      	ite	eq
 8003876:	2301      	moveq	r3, #1
 8003878:	2300      	movne	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	429a      	cmp	r2, r3
 8003882:	d0b4      	beq.n	80037ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800389a:	e033      	b.n	8003904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f87f 	bl	80039a4 <I2C_IsErrorOccurred>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e031      	b.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038b6:	d025      	beq.n	8003904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7fe fe14 	bl	80024e4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11a      	bne.n	8003904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d013      	beq.n	8003904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e007      	b.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b02      	cmp	r3, #2
 8003910:	d1c4      	bne.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003928:	e02f      	b.n	800398a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f838 	bl	80039a4 <I2C_IsErrorOccurred>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e02d      	b.n	800399a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fe fdd1 	bl	80024e4 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d11a      	bne.n	800398a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b20      	cmp	r3, #32
 8003960:	d013      	beq.n	800398a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e007      	b.n	800399a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b20      	cmp	r3, #32
 8003996:	d1c8      	bne.n	800392a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	@ 0x28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d068      	beq.n	8003aa2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2210      	movs	r2, #16
 80039d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039d8:	e049      	b.n	8003a6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039e0:	d045      	beq.n	8003a6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7fe fd7f 	bl	80024e4 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <I2C_IsErrorOccurred+0x54>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d13a      	bne.n	8003a6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a1a:	d121      	bne.n	8003a60 <I2C_IsErrorOccurred+0xbc>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a22:	d01d      	beq.n	8003a60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d01a      	beq.n	8003a60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a3a:	f7fe fd53 	bl	80024e4 <HAL_GetTick>
 8003a3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a40:	e00e      	b.n	8003a60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a42:	f7fe fd4f 	bl	80024e4 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b19      	cmp	r3, #25
 8003a4e:	d907      	bls.n	8003a60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f043 0320 	orr.w	r3, r3, #32
 8003a56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a5e:	e006      	b.n	8003a6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d1e9      	bne.n	8003a42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d003      	beq.n	8003a84 <I2C_IsErrorOccurred+0xe0>
 8003a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0aa      	beq.n	80039da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d103      	bne.n	8003a94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2220      	movs	r2, #32
 8003a92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	f043 0304 	orr.w	r3, r3, #4
 8003a9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ac4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f043 0308 	orr.w	r3, r3, #8
 8003adc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ae6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01c      	beq.n	8003b52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff fe3b 	bl	8003794 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <I2C_IsErrorOccurred+0x1bc>)
 8003b2a:	400b      	ands	r3, r1
 8003b2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	431a      	orrs	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3728      	adds	r7, #40	@ 0x28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	fe00e800 	.word	0xfe00e800

08003b64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	817b      	strh	r3, [r7, #10]
 8003b72:	4613      	mov	r3, r2
 8003b74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b76:	897b      	ldrh	r3, [r7, #10]
 8003b78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b7c:	7a7b      	ldrb	r3, [r7, #9]
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	0d5b      	lsrs	r3, r3, #21
 8003b9e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ba2:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <I2C_TransferConfig+0x60>)
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	ea02 0103 	and.w	r1, r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	03ff63ff 	.word	0x03ff63ff

08003bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d138      	bne.n	8003c50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e032      	b.n	8003c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2224      	movs	r2, #36	@ 0x24
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6819      	ldr	r1, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d139      	bne.n	8003ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e033      	b.n	8003cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2224      	movs	r2, #36	@ 0x24
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e041      	b.n	8003d8c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8003d10:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f245 5255 	movw	r2, #21845	@ 0x5555
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6852      	ldr	r2, [r2, #4]
 8003d24:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6892      	ldr	r2, [r2, #8]
 8003d2e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003d30:	f7fe fbd8 	bl	80024e4 <HAL_GetTick>
 8003d34:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d36:	e00f      	b.n	8003d58 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003d38:	f7fe fbd4 	bl	80024e4 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b31      	cmp	r3, #49	@ 0x31
 8003d44:	d908      	bls.n	8003d58 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e019      	b.n	8003d8c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e8      	bne.n	8003d38 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d005      	beq.n	8003d80 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68d2      	ldr	r2, [r2, #12]
 8003d7c:	611a      	str	r2, [r3, #16]
 8003d7e:	e004      	b.n	8003d8a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003da4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d141      	bne.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dce:	d131      	bne.n	8003e34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd0:	4b47      	ldr	r3, [pc, #284]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dd6:	4a46      	ldr	r2, [pc, #280]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ddc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de0:	4b43      	ldr	r3, [pc, #268]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003de8:	4a41      	ldr	r2, [pc, #260]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003df0:	4b40      	ldr	r3, [pc, #256]	@ (8003ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2232      	movs	r2, #50	@ 0x32
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003e00:	0c9b      	lsrs	r3, r3, #18
 8003e02:	3301      	adds	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e06:	e002      	b.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e0e:	4b38      	ldr	r3, [pc, #224]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1a:	d102      	bne.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f2      	bne.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e22:	4b33      	ldr	r3, [pc, #204]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2e:	d158      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e057      	b.n	8003ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e34:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e44:	e04d      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e4c:	d141      	bne.n	8003ed2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e4e:	4b28      	ldr	r3, [pc, #160]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e5a:	d131      	bne.n	8003ec0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e5c:	4b24      	ldr	r3, [pc, #144]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e62:	4a23      	ldr	r2, [pc, #140]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e6c:	4b20      	ldr	r3, [pc, #128]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e74:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2232      	movs	r2, #50	@ 0x32
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	0c9b      	lsrs	r3, r3, #18
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e92:	e002      	b.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e9a:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea6:	d102      	bne.n	8003eae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f2      	bne.n	8003e94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eae:	4b10      	ldr	r3, [pc, #64]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eba:	d112      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e011      	b.n	8003ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ecc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ed0:	e007      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ed2:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003eda:	4a05      	ldr	r2, [pc, #20]	@ (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003edc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ee0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	20000004 	.word	0x20000004
 8003ef8:	431bde83 	.word	0x431bde83

08003efc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f00:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a04      	ldr	r2, [pc, #16]	@ (8003f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f0a:	6093      	str	r3, [r2, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40007000 	.word	0x40007000

08003f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e2fe      	b.n	800452c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d075      	beq.n	8004026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f3a:	4b97      	ldr	r3, [pc, #604]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f44:	4b94      	ldr	r3, [pc, #592]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d102      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3e>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d002      	beq.n	8003f60 <HAL_RCC_OscConfig+0x44>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d10b      	bne.n	8003f78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	4b8d      	ldr	r3, [pc, #564]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05b      	beq.n	8004024 <HAL_RCC_OscConfig+0x108>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d157      	bne.n	8004024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e2d9      	b.n	800452c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f80:	d106      	bne.n	8003f90 <HAL_RCC_OscConfig+0x74>
 8003f82:	4b85      	ldr	r3, [pc, #532]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a84      	ldr	r2, [pc, #528]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e01d      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x98>
 8003f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b7c      	ldr	r3, [pc, #496]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7b      	ldr	r2, [pc, #492]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003fb4:	4b78      	ldr	r3, [pc, #480]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a77      	ldr	r2, [pc, #476]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b75      	ldr	r3, [pc, #468]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a74      	ldr	r2, [pc, #464]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe fa86 	bl	80024e4 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fe fa82 	bl	80024e4 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	@ 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e29e      	b.n	800452c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fee:	4b6a      	ldr	r3, [pc, #424]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0xc0>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe fa72 	bl	80024e4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004004:	f7fe fa6e 	bl	80024e4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	@ 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e28a      	b.n	800452c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004016:	4b60      	ldr	r3, [pc, #384]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0xe8>
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d075      	beq.n	800411e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004032:	4b59      	ldr	r3, [pc, #356]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800403c:	4b56      	ldr	r3, [pc, #344]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d102      	bne.n	8004052 <HAL_RCC_OscConfig+0x136>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d002      	beq.n	8004058 <HAL_RCC_OscConfig+0x13c>
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d11f      	bne.n	8004098 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004058:	4b4f      	ldr	r3, [pc, #316]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_OscConfig+0x154>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e25d      	b.n	800452c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	4b49      	ldr	r3, [pc, #292]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	4946      	ldr	r1, [pc, #280]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004084:	4b45      	ldr	r3, [pc, #276]	@ (800419c <HAL_RCC_OscConfig+0x280>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fd ff3f 	bl	8001f0c <HAL_InitTick>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d043      	beq.n	800411c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e249      	b.n	800452c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d023      	beq.n	80040e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fe fa1a 	bl	80024e4 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b4:	f7fe fa16 	bl	80024e4 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e232      	b.n	800452c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c6:	4b34      	ldr	r3, [pc, #208]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b31      	ldr	r3, [pc, #196]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	492d      	ldr	r1, [pc, #180]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
 80040e6:	e01a      	b.n	800411e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fe f9f6 	bl	80024e4 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fc:	f7fe f9f2 	bl	80024e4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e20e      	b.n	800452c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800410e:	4b22      	ldr	r3, [pc, #136]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x1e0>
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800411c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d041      	beq.n	80041ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01c      	beq.n	800416c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004132:	4b19      	ldr	r3, [pc, #100]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004138:	4a17      	ldr	r2, [pc, #92]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004142:	f7fe f9cf 	bl	80024e4 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414a:	f7fe f9cb 	bl	80024e4 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1e7      	b.n	800452c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415c:	4b0e      	ldr	r3, [pc, #56]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0ef      	beq.n	800414a <HAL_RCC_OscConfig+0x22e>
 800416a:	e020      	b.n	80041ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416c:	4b0a      	ldr	r3, [pc, #40]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 800416e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004172:	4a09      	ldr	r2, [pc, #36]	@ (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fe f9b2 	bl	80024e4 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004182:	e00d      	b.n	80041a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004184:	f7fe f9ae 	bl	80024e4 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d906      	bls.n	80041a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1ca      	b.n	800452c <HAL_RCC_OscConfig+0x610>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041a0:	4b8c      	ldr	r3, [pc, #560]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ea      	bne.n	8004184 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80a6 	beq.w	8004308 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041bc:	2300      	movs	r3, #0
 80041be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041c0:	4b84      	ldr	r3, [pc, #528]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_OscConfig+0x2b4>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x2b6>
 80041d0:	2300      	movs	r3, #0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00d      	beq.n	80041f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	4b7f      	ldr	r3, [pc, #508]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041da:	4a7e      	ldr	r2, [pc, #504]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e2:	4b7c      	ldr	r3, [pc, #496]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	4b79      	ldr	r3, [pc, #484]	@ (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d118      	bne.n	8004230 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041fe:	4b76      	ldr	r3, [pc, #472]	@ (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a75      	ldr	r2, [pc, #468]	@ (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420a:	f7fe f96b 	bl	80024e4 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004212:	f7fe f967 	bl	80024e4 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e183      	b.n	800452c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004224:	4b6c      	ldr	r3, [pc, #432]	@ (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d108      	bne.n	800424a <HAL_RCC_OscConfig+0x32e>
 8004238:	4b66      	ldr	r3, [pc, #408]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423e:	4a65      	ldr	r2, [pc, #404]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004248:	e024      	b.n	8004294 <HAL_RCC_OscConfig+0x378>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b05      	cmp	r3, #5
 8004250:	d110      	bne.n	8004274 <HAL_RCC_OscConfig+0x358>
 8004252:	4b60      	ldr	r3, [pc, #384]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004258:	4a5e      	ldr	r2, [pc, #376]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800425a:	f043 0304 	orr.w	r3, r3, #4
 800425e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004262:	4b5c      	ldr	r3, [pc, #368]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004268:	4a5a      	ldr	r2, [pc, #360]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004272:	e00f      	b.n	8004294 <HAL_RCC_OscConfig+0x378>
 8004274:	4b57      	ldr	r3, [pc, #348]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427a:	4a56      	ldr	r2, [pc, #344]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004284:	4b53      	ldr	r3, [pc, #332]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	4a52      	ldr	r2, [pc, #328]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d016      	beq.n	80042ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fe f922 	bl	80024e4 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fe f91e 	bl	80024e4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e138      	b.n	800452c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ba:	4b46      	ldr	r3, [pc, #280]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ed      	beq.n	80042a4 <HAL_RCC_OscConfig+0x388>
 80042c8:	e015      	b.n	80042f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fe f90b 	bl	80024e4 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fe f907 	bl	80024e4 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e121      	b.n	800452c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e8:	4b3a      	ldr	r3, [pc, #232]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1ed      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042f6:	7ffb      	ldrb	r3, [r7, #31]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fc:	4b35      	ldr	r3, [pc, #212]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004300:	4a34      	ldr	r2, [pc, #208]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004306:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d03c      	beq.n	800438e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01c      	beq.n	8004356 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800431c:	4b2d      	ldr	r3, [pc, #180]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800431e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004322:	4a2c      	ldr	r2, [pc, #176]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fe f8da 	bl	80024e4 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004334:	f7fe f8d6 	bl	80024e4 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0f2      	b.n	800452c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004346:	4b23      	ldr	r3, [pc, #140]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004348:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ef      	beq.n	8004334 <HAL_RCC_OscConfig+0x418>
 8004354:	e01b      	b.n	800438e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004356:	4b1f      	ldr	r3, [pc, #124]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004358:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800435c:	4a1d      	ldr	r2, [pc, #116]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004366:	f7fe f8bd 	bl	80024e4 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800436e:	f7fe f8b9 	bl	80024e4 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e0d5      	b.n	800452c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004380:	4b14      	ldr	r3, [pc, #80]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004382:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ef      	bne.n	800436e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80c9 	beq.w	800452a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004398:	4b0e      	ldr	r3, [pc, #56]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	f000 8083 	beq.w	80044ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d15e      	bne.n	800446c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ae:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a08      	ldr	r2, [pc, #32]	@ (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80043b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fe f893 	bl	80024e4 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c0:	e00c      	b.n	80043dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c2:	f7fe f88f 	bl	80024e4 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d905      	bls.n	80043dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0ab      	b.n	800452c <HAL_RCC_OscConfig+0x610>
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043dc:	4b55      	ldr	r3, [pc, #340]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ec      	bne.n	80043c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e8:	4b52      	ldr	r3, [pc, #328]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	4b52      	ldr	r3, [pc, #328]	@ (8004538 <HAL_RCC_OscConfig+0x61c>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6a11      	ldr	r1, [r2, #32]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043f8:	3a01      	subs	r2, #1
 80043fa:	0112      	lsls	r2, r2, #4
 80043fc:	4311      	orrs	r1, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004402:	0212      	lsls	r2, r2, #8
 8004404:	4311      	orrs	r1, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800440a:	0852      	lsrs	r2, r2, #1
 800440c:	3a01      	subs	r2, #1
 800440e:	0552      	lsls	r2, r2, #21
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004416:	0852      	lsrs	r2, r2, #1
 8004418:	3a01      	subs	r2, #1
 800441a:	0652      	lsls	r2, r2, #25
 800441c:	4311      	orrs	r1, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004422:	06d2      	lsls	r2, r2, #27
 8004424:	430a      	orrs	r2, r1
 8004426:	4943      	ldr	r1, [pc, #268]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 8004428:	4313      	orrs	r3, r2
 800442a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800442c:	4b41      	ldr	r3, [pc, #260]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a40      	ldr	r2, [pc, #256]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 8004432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004436:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004438:	4b3e      	ldr	r3, [pc, #248]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a3d      	ldr	r2, [pc, #244]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 800443e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004442:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fe f84e 	bl	80024e4 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fe f84a 	bl	80024e4 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e066      	b.n	800452c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445e:	4b35      	ldr	r3, [pc, #212]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x530>
 800446a:	e05e      	b.n	800452a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446c:	4b31      	ldr	r3, [pc, #196]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a30      	ldr	r2, [pc, #192]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 8004472:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fe f834 	bl	80024e4 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fe f830 	bl	80024e4 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e04c      	b.n	800452c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004492:	4b28      	ldr	r3, [pc, #160]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800449e:	4b25      	ldr	r3, [pc, #148]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	4924      	ldr	r1, [pc, #144]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 80044a4:	4b25      	ldr	r3, [pc, #148]	@ (800453c <HAL_RCC_OscConfig+0x620>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	60cb      	str	r3, [r1, #12]
 80044aa:	e03e      	b.n	800452a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e039      	b.n	800452c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004534 <HAL_RCC_OscConfig+0x618>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f003 0203 	and.w	r2, r3, #3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d12c      	bne.n	8004526 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	3b01      	subs	r3, #1
 80044d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d123      	bne.n	8004526 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d11b      	bne.n	8004526 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d113      	bne.n	8004526 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	3b01      	subs	r3, #1
 800450c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d109      	bne.n	8004526 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	3b01      	subs	r3, #1
 8004520:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d001      	beq.n	800452a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3720      	adds	r7, #32
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000
 8004538:	019f800c 	.word	0x019f800c
 800453c:	feeefffc 	.word	0xfeeefffc

08004540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e11e      	b.n	8004796 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004558:	4b91      	ldr	r3, [pc, #580]	@ (80047a0 <HAL_RCC_ClockConfig+0x260>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d910      	bls.n	8004588 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004566:	4b8e      	ldr	r3, [pc, #568]	@ (80047a0 <HAL_RCC_ClockConfig+0x260>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 020f 	bic.w	r2, r3, #15
 800456e:	498c      	ldr	r1, [pc, #560]	@ (80047a0 <HAL_RCC_ClockConfig+0x260>)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	4b8a      	ldr	r3, [pc, #552]	@ (80047a0 <HAL_RCC_ClockConfig+0x260>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e106      	b.n	8004796 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d073      	beq.n	800467c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d129      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459c:	4b81      	ldr	r3, [pc, #516]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0f4      	b.n	8004796 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045ac:	f000 f9d0 	bl	8004950 <RCC_GetSysClockFreqFromPLLSource>
 80045b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4a7c      	ldr	r2, [pc, #496]	@ (80047a8 <HAL_RCC_ClockConfig+0x268>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d93f      	bls.n	800463a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045ba:	4b7a      	ldr	r3, [pc, #488]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d033      	beq.n	800463a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d12f      	bne.n	800463a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045da:	4b72      	ldr	r3, [pc, #456]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045e2:	4a70      	ldr	r2, [pc, #448]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 80045e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045ea:	2380      	movs	r3, #128	@ 0x80
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e024      	b.n	800463a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d107      	bne.n	8004608 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f8:	4b6a      	ldr	r3, [pc, #424]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0c6      	b.n	8004796 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004608:	4b66      	ldr	r3, [pc, #408]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0be      	b.n	8004796 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004618:	f000 f8ce 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 800461c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4a61      	ldr	r2, [pc, #388]	@ (80047a8 <HAL_RCC_ClockConfig+0x268>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d909      	bls.n	800463a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004626:	4b5f      	ldr	r3, [pc, #380]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800462e:	4a5d      	ldr	r2, [pc, #372]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 8004630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004634:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004636:	2380      	movs	r3, #128	@ 0x80
 8004638:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800463a:	4b5a      	ldr	r3, [pc, #360]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4957      	ldr	r1, [pc, #348]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464c:	f7fd ff4a 	bl	80024e4 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fd ff46 	bl	80024e4 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e095      	b.n	8004796 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	4b4e      	ldr	r3, [pc, #312]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 020c 	and.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	429a      	cmp	r2, r3
 800467a:	d1eb      	bne.n	8004654 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d023      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004694:	4b43      	ldr	r3, [pc, #268]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	4a42      	ldr	r2, [pc, #264]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 800469a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800469e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d007      	beq.n	80046bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046ac:	4b3d      	ldr	r3, [pc, #244]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046b4:	4a3b      	ldr	r2, [pc, #236]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 80046b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046bc:	4b39      	ldr	r3, [pc, #228]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4936      	ldr	r1, [pc, #216]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b80      	cmp	r3, #128	@ 0x80
 80046d4:	d105      	bne.n	80046e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046d6:	4b33      	ldr	r3, [pc, #204]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	4a32      	ldr	r2, [pc, #200]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 80046dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046e2:	4b2f      	ldr	r3, [pc, #188]	@ (80047a0 <HAL_RCC_ClockConfig+0x260>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d21d      	bcs.n	800472c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f0:	4b2b      	ldr	r3, [pc, #172]	@ (80047a0 <HAL_RCC_ClockConfig+0x260>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f023 020f 	bic.w	r2, r3, #15
 80046f8:	4929      	ldr	r1, [pc, #164]	@ (80047a0 <HAL_RCC_ClockConfig+0x260>)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004700:	f7fd fef0 	bl	80024e4 <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	e00a      	b.n	800471e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004708:	f7fd feec 	bl	80024e4 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e03b      	b.n	8004796 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471e:	4b20      	ldr	r3, [pc, #128]	@ (80047a0 <HAL_RCC_ClockConfig+0x260>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d1ed      	bne.n	8004708 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004738:	4b1a      	ldr	r3, [pc, #104]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4917      	ldr	r1, [pc, #92]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004756:	4b13      	ldr	r3, [pc, #76]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	490f      	ldr	r1, [pc, #60]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800476a:	f000 f825 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 800476e:	4602      	mov	r2, r0
 8004770:	4b0c      	ldr	r3, [pc, #48]	@ (80047a4 <HAL_RCC_ClockConfig+0x264>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	490c      	ldr	r1, [pc, #48]	@ (80047ac <HAL_RCC_ClockConfig+0x26c>)
 800477c:	5ccb      	ldrb	r3, [r1, r3]
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	fa22 f303 	lsr.w	r3, r2, r3
 8004786:	4a0a      	ldr	r2, [pc, #40]	@ (80047b0 <HAL_RCC_ClockConfig+0x270>)
 8004788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800478a:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <HAL_RCC_ClockConfig+0x274>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7fd fbbc 	bl	8001f0c <HAL_InitTick>
 8004794:	4603      	mov	r3, r0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40022000 	.word	0x40022000
 80047a4:	40021000 	.word	0x40021000
 80047a8:	04c4b400 	.word	0x04c4b400
 80047ac:	08019a54 	.word	0x08019a54
 80047b0:	20000004 	.word	0x20000004
 80047b4:	20000008 	.word	0x20000008

080047b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047be:	4b2c      	ldr	r3, [pc, #176]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d102      	bne.n	80047d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004874 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	e047      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047d0:	4b27      	ldr	r3, [pc, #156]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d102      	bne.n	80047e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047dc:	4b26      	ldr	r3, [pc, #152]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	e03e      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047e2:	4b23      	ldr	r3, [pc, #140]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d136      	bne.n	800485c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ee:	4b20      	ldr	r3, [pc, #128]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	3301      	adds	r3, #1
 8004804:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b03      	cmp	r3, #3
 800480a:	d10c      	bne.n	8004826 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800480c:	4a1a      	ldr	r2, [pc, #104]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xc0>)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	4a16      	ldr	r2, [pc, #88]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004816:	68d2      	ldr	r2, [r2, #12]
 8004818:	0a12      	lsrs	r2, r2, #8
 800481a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	617b      	str	r3, [r7, #20]
      break;
 8004824:	e00c      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004826:	4a13      	ldr	r2, [pc, #76]	@ (8004874 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	fbb2 f3f3 	udiv	r3, r2, r3
 800482e:	4a10      	ldr	r2, [pc, #64]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004830:	68d2      	ldr	r2, [r2, #12]
 8004832:	0a12      	lsrs	r2, r2, #8
 8004834:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004838:	fb02 f303 	mul.w	r3, r2, r3
 800483c:	617b      	str	r3, [r7, #20]
      break;
 800483e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004840:	4b0b      	ldr	r3, [pc, #44]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	0e5b      	lsrs	r3, r3, #25
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	3301      	adds	r3, #1
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	e001      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004860:	693b      	ldr	r3, [r7, #16]
}
 8004862:	4618      	mov	r0, r3
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40021000 	.word	0x40021000
 8004874:	00f42400 	.word	0x00f42400
 8004878:	016e3600 	.word	0x016e3600

0800487c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004880:	4b03      	ldr	r3, [pc, #12]	@ (8004890 <HAL_RCC_GetHCLKFreq+0x14>)
 8004882:	681b      	ldr	r3, [r3, #0]
}
 8004884:	4618      	mov	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000004 	.word	0x20000004

08004894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004898:	f7ff fff0 	bl	800487c <HAL_RCC_GetHCLKFreq>
 800489c:	4602      	mov	r2, r0
 800489e:	4b06      	ldr	r3, [pc, #24]	@ (80048b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	4904      	ldr	r1, [pc, #16]	@ (80048bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80048aa:	5ccb      	ldrb	r3, [r1, r3]
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000
 80048bc:	08019a64 	.word	0x08019a64

080048c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048c4:	f7ff ffda 	bl	800487c <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	0adb      	lsrs	r3, r3, #11
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4904      	ldr	r1, [pc, #16]	@ (80048e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	08019a64 	.word	0x08019a64

080048ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	220f      	movs	r2, #15
 80048fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80048fc:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0203 	and.w	r2, r3, #3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004908:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004914:	4b0c      	ldr	r3, [pc, #48]	@ (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004920:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800492e:	4b07      	ldr	r3, [pc, #28]	@ (800494c <HAL_RCC_GetClockConfig+0x60>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 020f 	and.w	r2, r3, #15
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40021000 	.word	0x40021000
 800494c:	40022000 	.word	0x40022000

08004950 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004956:	4b1e      	ldr	r3, [pc, #120]	@ (80049d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004960:	4b1b      	ldr	r3, [pc, #108]	@ (80049d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d10c      	bne.n	800498e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004974:	4a17      	ldr	r2, [pc, #92]	@ (80049d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a14      	ldr	r2, [pc, #80]	@ (80049d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800497e:	68d2      	ldr	r2, [r2, #12]
 8004980:	0a12      	lsrs	r2, r2, #8
 8004982:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	617b      	str	r3, [r7, #20]
    break;
 800498c:	e00c      	b.n	80049a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800498e:	4a12      	ldr	r2, [pc, #72]	@ (80049d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	fbb2 f3f3 	udiv	r3, r2, r3
 8004996:	4a0e      	ldr	r2, [pc, #56]	@ (80049d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004998:	68d2      	ldr	r2, [r2, #12]
 800499a:	0a12      	lsrs	r2, r2, #8
 800499c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049a0:	fb02 f303 	mul.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]
    break;
 80049a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049a8:	4b09      	ldr	r3, [pc, #36]	@ (80049d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	0e5b      	lsrs	r3, r3, #25
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	3301      	adds	r3, #1
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80049c2:	687b      	ldr	r3, [r7, #4]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	40021000 	.word	0x40021000
 80049d4:	016e3600 	.word	0x016e3600
 80049d8:	00f42400 	.word	0x00f42400

080049dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049e4:	2300      	movs	r3, #0
 80049e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049e8:	2300      	movs	r3, #0
 80049ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8098 	beq.w	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fa:	2300      	movs	r3, #0
 80049fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fe:	4b43      	ldr	r3, [pc, #268]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10d      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	4b40      	ldr	r3, [pc, #256]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a16:	4b3d      	ldr	r3, [pc, #244]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a22:	2301      	movs	r3, #1
 8004a24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a26:	4b3a      	ldr	r3, [pc, #232]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a39      	ldr	r2, [pc, #228]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a32:	f7fd fd57 	bl	80024e4 <HAL_GetTick>
 8004a36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a38:	e009      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3a:	f7fd fd53 	bl	80024e4 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d902      	bls.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	74fb      	strb	r3, [r7, #19]
        break;
 8004a4c:	e005      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a4e:	4b30      	ldr	r3, [pc, #192]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0ef      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d159      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a60:	4b2a      	ldr	r3, [pc, #168]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01e      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d019      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a7c:	4b23      	ldr	r3, [pc, #140]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a88:	4b20      	ldr	r3, [pc, #128]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a98:	4b1c      	ldr	r3, [pc, #112]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004aa8:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d016      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fd fd13 	bl	80024e4 <HAL_GetTick>
 8004abe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ac0:	e00b      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac2:	f7fd fd0f 	bl	80024e4 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d902      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	74fb      	strb	r3, [r7, #19]
            break;
 8004ad8:	e006      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ada:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ec      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ae8:	7cfb      	ldrb	r3, [r7, #19]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aee:	4b07      	ldr	r3, [pc, #28]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004afc:	4903      	ldr	r1, [pc, #12]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b04:	e008      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b06:	7cfb      	ldrb	r3, [r7, #19]
 8004b08:	74bb      	strb	r3, [r7, #18]
 8004b0a:	e005      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
 8004b16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b18:	7c7b      	ldrb	r3, [r7, #17]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1e:	4ba7      	ldr	r3, [pc, #668]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b22:	4aa6      	ldr	r2, [pc, #664]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b36:	4ba1      	ldr	r3, [pc, #644]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	f023 0203 	bic.w	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	499d      	ldr	r1, [pc, #628]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b58:	4b98      	ldr	r3, [pc, #608]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5e:	f023 020c 	bic.w	r2, r3, #12
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	4995      	ldr	r1, [pc, #596]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b7a:	4b90      	ldr	r3, [pc, #576]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	498c      	ldr	r1, [pc, #560]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b9c:	4b87      	ldr	r3, [pc, #540]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	4984      	ldr	r1, [pc, #528]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	497b      	ldr	r1, [pc, #492]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004be0:	4b76      	ldr	r3, [pc, #472]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	4973      	ldr	r1, [pc, #460]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c02:	4b6e      	ldr	r3, [pc, #440]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	496a      	ldr	r1, [pc, #424]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c24:	4b65      	ldr	r3, [pc, #404]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	4962      	ldr	r1, [pc, #392]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c46:	4b5d      	ldr	r3, [pc, #372]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	4959      	ldr	r1, [pc, #356]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c68:	4b54      	ldr	r3, [pc, #336]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c6e:	f023 0203 	bic.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c76:	4951      	ldr	r1, [pc, #324]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c8a:	4b4c      	ldr	r3, [pc, #304]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c98:	4948      	ldr	r1, [pc, #288]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d015      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cac:	4b43      	ldr	r3, [pc, #268]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cba:	4940      	ldr	r1, [pc, #256]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cd6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d015      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ce4:	4b35      	ldr	r3, [pc, #212]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf2:	4932      	ldr	r1, [pc, #200]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d02:	d105      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d04:	4b2d      	ldr	r3, [pc, #180]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a2c      	ldr	r2, [pc, #176]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d0e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d015      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d1c:	4b27      	ldr	r3, [pc, #156]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d22:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2a:	4924      	ldr	r1, [pc, #144]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4a1e      	ldr	r2, [pc, #120]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d015      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d54:	4b19      	ldr	r3, [pc, #100]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d62:	4916      	ldr	r1, [pc, #88]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d72:	d105      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d74:	4b11      	ldr	r3, [pc, #68]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4a10      	ldr	r2, [pc, #64]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d019      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	4908      	ldr	r1, [pc, #32]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004daa:	d109      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dac:	4b03      	ldr	r3, [pc, #12]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4a02      	ldr	r2, [pc, #8]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004db6:	60d3      	str	r3, [r2, #12]
 8004db8:	e002      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d015      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004dcc:	4b29      	ldr	r3, [pc, #164]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	4926      	ldr	r1, [pc, #152]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dea:	d105      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004dec:	4b21      	ldr	r3, [pc, #132]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4a20      	ldr	r2, [pc, #128]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004df2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d015      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004e04:	4b1b      	ldr	r3, [pc, #108]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e12:	4918      	ldr	r1, [pc, #96]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e22:	d105      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e24:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4a12      	ldr	r2, [pc, #72]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e2e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d015      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e4a:	490a      	ldr	r1, [pc, #40]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e5a:	d105      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a04      	ldr	r2, [pc, #16]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e68:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000

08004e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e049      	b.n	8004f1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f841 	bl	8004f26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f000 fa30 	bl	800531c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d001      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e054      	b.n	8004ffe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a26      	ldr	r2, [pc, #152]	@ (800500c <HAL_TIM_Base_Start_IT+0xd0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d022      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f7e:	d01d      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a22      	ldr	r2, [pc, #136]	@ (8005010 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d018      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a21      	ldr	r2, [pc, #132]	@ (8005014 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1f      	ldr	r2, [pc, #124]	@ (8005018 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00e      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800501c <HAL_TIM_Base_Start_IT+0xe0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1c      	ldr	r2, [pc, #112]	@ (8005020 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8005024 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d115      	bne.n	8004fe8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	4b19      	ldr	r3, [pc, #100]	@ (8005028 <HAL_TIM_Base_Start_IT+0xec>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b06      	cmp	r3, #6
 8004fcc:	d015      	beq.n	8004ffa <HAL_TIM_Base_Start_IT+0xbe>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd4:	d011      	beq.n	8004ffa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe6:	e008      	b.n	8004ffa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e000      	b.n	8004ffc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40013400 	.word	0x40013400
 8005020:	40014000 	.word	0x40014000
 8005024:	40015000 	.word	0x40015000
 8005028:	00010007 	.word	0x00010007

0800502c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d020      	beq.n	8005090 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01b      	beq.n	8005090 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0202 	mvn.w	r2, #2
 8005060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f931 	bl	80052de <HAL_TIM_IC_CaptureCallback>
 800507c:	e005      	b.n	800508a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f923 	bl	80052ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f934 	bl	80052f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	d020      	beq.n	80050dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01b      	beq.n	80050dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0204 	mvn.w	r2, #4
 80050ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f90b 	bl	80052de <HAL_TIM_IC_CaptureCallback>
 80050c8:	e005      	b.n	80050d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8fd 	bl	80052ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f90e 	bl	80052f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d020      	beq.n	8005128 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01b      	beq.n	8005128 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0208 	mvn.w	r2, #8
 80050f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2204      	movs	r2, #4
 80050fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8e5 	bl	80052de <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f8d7 	bl	80052ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f8e8 	bl	80052f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b00      	cmp	r3, #0
 8005130:	d020      	beq.n	8005174 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01b      	beq.n	8005174 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0210 	mvn.w	r2, #16
 8005144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2208      	movs	r2, #8
 800514a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8bf 	bl	80052de <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f8b1 	bl	80052ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f8c2 	bl	80052f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0201 	mvn.w	r2, #1
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fc fd14 	bl	8001bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00c      	beq.n	80051c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d007      	beq.n	80051c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80051be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f969 	bl	8005498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00c      	beq.n	80051ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f961 	bl	80054ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00c      	beq.n	800520e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d007      	beq.n	800520e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f87c 	bl	8005306 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00c      	beq.n	8005232 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d007      	beq.n	8005232 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f06f 0220 	mvn.w	r2, #32
 800522a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f929 	bl	8005484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00c      	beq.n	8005256 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800524e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f935 	bl	80054c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00c      	beq.n	800527a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f92d 	bl	80054d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00c      	beq.n	800529e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f925 	bl	80054e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00c      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80052ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f91d 	bl	80054fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a4c      	ldr	r2, [pc, #304]	@ (8005460 <TIM_Base_SetConfig+0x144>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d017      	beq.n	8005364 <TIM_Base_SetConfig+0x48>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533a:	d013      	beq.n	8005364 <TIM_Base_SetConfig+0x48>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a49      	ldr	r2, [pc, #292]	@ (8005464 <TIM_Base_SetConfig+0x148>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00f      	beq.n	8005364 <TIM_Base_SetConfig+0x48>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a48      	ldr	r2, [pc, #288]	@ (8005468 <TIM_Base_SetConfig+0x14c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00b      	beq.n	8005364 <TIM_Base_SetConfig+0x48>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a47      	ldr	r2, [pc, #284]	@ (800546c <TIM_Base_SetConfig+0x150>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d007      	beq.n	8005364 <TIM_Base_SetConfig+0x48>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a46      	ldr	r2, [pc, #280]	@ (8005470 <TIM_Base_SetConfig+0x154>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_Base_SetConfig+0x48>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a45      	ldr	r2, [pc, #276]	@ (8005474 <TIM_Base_SetConfig+0x158>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d108      	bne.n	8005376 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a39      	ldr	r2, [pc, #228]	@ (8005460 <TIM_Base_SetConfig+0x144>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d023      	beq.n	80053c6 <TIM_Base_SetConfig+0xaa>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005384:	d01f      	beq.n	80053c6 <TIM_Base_SetConfig+0xaa>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a36      	ldr	r2, [pc, #216]	@ (8005464 <TIM_Base_SetConfig+0x148>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01b      	beq.n	80053c6 <TIM_Base_SetConfig+0xaa>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a35      	ldr	r2, [pc, #212]	@ (8005468 <TIM_Base_SetConfig+0x14c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d017      	beq.n	80053c6 <TIM_Base_SetConfig+0xaa>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a34      	ldr	r2, [pc, #208]	@ (800546c <TIM_Base_SetConfig+0x150>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <TIM_Base_SetConfig+0xaa>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a33      	ldr	r2, [pc, #204]	@ (8005470 <TIM_Base_SetConfig+0x154>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00f      	beq.n	80053c6 <TIM_Base_SetConfig+0xaa>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a33      	ldr	r2, [pc, #204]	@ (8005478 <TIM_Base_SetConfig+0x15c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <TIM_Base_SetConfig+0xaa>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a32      	ldr	r2, [pc, #200]	@ (800547c <TIM_Base_SetConfig+0x160>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <TIM_Base_SetConfig+0xaa>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a31      	ldr	r2, [pc, #196]	@ (8005480 <TIM_Base_SetConfig+0x164>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_Base_SetConfig+0xaa>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005474 <TIM_Base_SetConfig+0x158>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d108      	bne.n	80053d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a18      	ldr	r2, [pc, #96]	@ (8005460 <TIM_Base_SetConfig+0x144>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d013      	beq.n	800542c <TIM_Base_SetConfig+0x110>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a1a      	ldr	r2, [pc, #104]	@ (8005470 <TIM_Base_SetConfig+0x154>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00f      	beq.n	800542c <TIM_Base_SetConfig+0x110>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a1a      	ldr	r2, [pc, #104]	@ (8005478 <TIM_Base_SetConfig+0x15c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00b      	beq.n	800542c <TIM_Base_SetConfig+0x110>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a19      	ldr	r2, [pc, #100]	@ (800547c <TIM_Base_SetConfig+0x160>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d007      	beq.n	800542c <TIM_Base_SetConfig+0x110>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a18      	ldr	r2, [pc, #96]	@ (8005480 <TIM_Base_SetConfig+0x164>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_Base_SetConfig+0x110>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a13      	ldr	r2, [pc, #76]	@ (8005474 <TIM_Base_SetConfig+0x158>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d103      	bne.n	8005434 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b01      	cmp	r3, #1
 8005444:	d105      	bne.n	8005452 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f023 0201 	bic.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]
  }
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40013400 	.word	0x40013400
 8005474:	40015000 	.word	0x40015000
 8005478:	40014000 	.word	0x40014000
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800

08005484 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e042      	b.n	80055a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7fc fec3 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2224      	movs	r2, #36	@ 0x24
 800553e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0201 	bic.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f001 f806 	bl	800656c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fd07 	bl	8005f74 <UART_SetConfig>
 8005566:	4603      	mov	r3, r0
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e01b      	b.n	80055a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800557e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800558e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f001 f885 	bl	80066b0 <UART_CheckIdleState>
 80055a6:	4603      	mov	r3, r0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	@ 0x28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4613      	mov	r3, r2
 80055bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d167      	bne.n	8005698 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_UART_Transmit_DMA+0x24>
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e060      	b.n	800569a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	88fa      	ldrh	r2, [r7, #6]
 80055e2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	88fa      	ldrh	r2, [r7, #6]
 80055ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2221      	movs	r2, #33	@ 0x21
 80055fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d028      	beq.n	8005658 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800560a:	4a26      	ldr	r2, [pc, #152]	@ (80056a4 <HAL_UART_Transmit_DMA+0xf4>)
 800560c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005612:	4a25      	ldr	r2, [pc, #148]	@ (80056a8 <HAL_UART_Transmit_DMA+0xf8>)
 8005614:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800561a:	4a24      	ldr	r2, [pc, #144]	@ (80056ac <HAL_UART_Transmit_DMA+0xfc>)
 800561c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005622:	2200      	movs	r2, #0
 8005624:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562e:	4619      	mov	r1, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3328      	adds	r3, #40	@ 0x28
 8005636:	461a      	mov	r2, r3
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	f7fd f8e7 	bl	800280c <HAL_DMA_Start_IT>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d009      	beq.n	8005658 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2210      	movs	r2, #16
 8005648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e020      	b.n	800569a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2240      	movs	r2, #64	@ 0x40
 800565e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	613b      	str	r3, [r7, #16]
   return(result);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005676:	627b      	str	r3, [r7, #36]	@ 0x24
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3308      	adds	r3, #8
 800567e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005680:	623a      	str	r2, [r7, #32]
 8005682:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	69f9      	ldr	r1, [r7, #28]
 8005686:	6a3a      	ldr	r2, [r7, #32]
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	61bb      	str	r3, [r7, #24]
   return(result);
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e5      	bne.n	8005660 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e000      	b.n	800569a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005698:	2302      	movs	r3, #2
  }
}
 800569a:	4618      	mov	r0, r3
 800569c:	3728      	adds	r7, #40	@ 0x28
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	08006b7b 	.word	0x08006b7b
 80056a8:	08006c15 	.word	0x08006c15
 80056ac:	08006d9b 	.word	0x08006d9b

080056b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08a      	sub	sp, #40	@ 0x28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d137      	bne.n	8005738 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_UART_Receive_DMA+0x24>
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e030      	b.n	800573a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a18      	ldr	r2, [pc, #96]	@ (8005744 <HAL_UART_Receive_DMA+0x94>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d01f      	beq.n	8005728 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d018      	beq.n	8005728 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	613b      	str	r3, [r7, #16]
   return(result);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800570a:	627b      	str	r3, [r7, #36]	@ 0x24
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	623b      	str	r3, [r7, #32]
 8005716:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	69f9      	ldr	r1, [r7, #28]
 800571a:	6a3a      	ldr	r2, [r7, #32]
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	61bb      	str	r3, [r7, #24]
   return(result);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e6      	bne.n	80056f6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	461a      	mov	r2, r3
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f001 f8d6 	bl	80068e0 <UART_Start_Receive_DMA>
 8005734:	4603      	mov	r3, r0
 8005736:	e000      	b.n	800573a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	3728      	adds	r7, #40	@ 0x28
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40008000 	.word	0x40008000

08005748 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b090      	sub	sp, #64	@ 0x40
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800575e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576a:	2b80      	cmp	r3, #128	@ 0x80
 800576c:	d139      	bne.n	80057e2 <HAL_UART_DMAStop+0x9a>
 800576e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005770:	2b21      	cmp	r3, #33	@ 0x21
 8005772:	d136      	bne.n	80057e2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	61fb      	str	r3, [r7, #28]
   return(result);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800578a:	637b      	str	r3, [r7, #52]	@ 0x34
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005794:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005796:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800579a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d015      	beq.n	80057dc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fd f8a4 	bl	8002902 <HAL_DMA_Abort>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00d      	beq.n	80057dc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fd fa0b 	bl	8002be0 <HAL_DMA_GetError>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d105      	bne.n	80057dc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2210      	movs	r2, #16
 80057d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e047      	b.n	800586c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 f925 	bl	8006a2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ec:	2b40      	cmp	r3, #64	@ 0x40
 80057ee:	d13c      	bne.n	800586a <HAL_UART_DMAStop+0x122>
 80057f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f2:	2b22      	cmp	r3, #34	@ 0x22
 80057f4:	d139      	bne.n	800586a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3308      	adds	r3, #8
 80057fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	60bb      	str	r3, [r7, #8]
   return(result);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800580c:	633b      	str	r3, [r7, #48]	@ 0x30
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3308      	adds	r3, #8
 8005814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005816:	61ba      	str	r2, [r7, #24]
 8005818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6979      	ldr	r1, [r7, #20]
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	613b      	str	r3, [r7, #16]
   return(result);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e5      	bne.n	80057f6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005830:	2b00      	cmp	r3, #0
 8005832:	d017      	beq.n	8005864 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800583a:	4618      	mov	r0, r3
 800583c:	f7fd f861 	bl	8002902 <HAL_DMA_Abort>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00e      	beq.n	8005864 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800584c:	4618      	mov	r0, r3
 800584e:	f7fd f9c7 	bl	8002be0 <HAL_DMA_GetError>
 8005852:	4603      	mov	r3, r0
 8005854:	2b20      	cmp	r3, #32
 8005856:	d105      	bne.n	8005864 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2210      	movs	r2, #16
 800585c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e003      	b.n	800586c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 f922 	bl	8006aae <UART_EndRxTransfer>
  }

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3740      	adds	r7, #64	@ 0x40
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b0ba      	sub	sp, #232	@ 0xe8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800589a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800589e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80058a2:	4013      	ands	r3, r2
 80058a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80058a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d11b      	bne.n	80058e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d015      	beq.n	80058e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d105      	bne.n	80058d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8300 	beq.w	8005ede <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	4798      	blx	r3
      }
      return;
 80058e6:	e2fa      	b.n	8005ede <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8123 	beq.w	8005b38 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80058f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80058f6:	4b8d      	ldr	r3, [pc, #564]	@ (8005b2c <HAL_UART_IRQHandler+0x2b8>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80058fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005902:	4b8b      	ldr	r3, [pc, #556]	@ (8005b30 <HAL_UART_IRQHandler+0x2bc>)
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 8116 	beq.w	8005b38 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800590c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d011      	beq.n	800593c <HAL_UART_IRQHandler+0xc8>
 8005918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800591c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2201      	movs	r2, #1
 800592a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005932:	f043 0201 	orr.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800593c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d011      	beq.n	800596c <HAL_UART_IRQHandler+0xf8>
 8005948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2202      	movs	r2, #2
 800595a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005962:	f043 0204 	orr.w	r2, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800596c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d011      	beq.n	800599c <HAL_UART_IRQHandler+0x128>
 8005978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00b      	beq.n	800599c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2204      	movs	r2, #4
 800598a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005992:	f043 0202 	orr.w	r2, r3, #2
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800599c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d017      	beq.n	80059d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80059b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80059b8:	4b5c      	ldr	r3, [pc, #368]	@ (8005b2c <HAL_UART_IRQHandler+0x2b8>)
 80059ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00b      	beq.n	80059d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2208      	movs	r2, #8
 80059c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ce:	f043 0208 	orr.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d012      	beq.n	8005a0a <HAL_UART_IRQHandler+0x196>
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00c      	beq.n	8005a0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a00:	f043 0220 	orr.w	r2, r3, #32
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8266 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d013      	beq.n	8005a4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d105      	bne.n	8005a3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b40      	cmp	r3, #64	@ 0x40
 8005a60:	d005      	beq.n	8005a6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d054      	beq.n	8005b18 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f001 f81d 	bl	8006aae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7e:	2b40      	cmp	r3, #64	@ 0x40
 8005a80:	d146      	bne.n	8005b10 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005aae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1d9      	bne.n	8005a82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d017      	beq.n	8005b08 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ade:	4a15      	ldr	r2, [pc, #84]	@ (8005b34 <HAL_UART_IRQHandler+0x2c0>)
 8005ae0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fc ff63 	bl	80029b4 <HAL_DMA_Abort_IT>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d019      	beq.n	8005b28 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005b02:	4610      	mov	r0, r2
 8005b04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b06:	e00f      	b.n	8005b28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fa1d 	bl	8005f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0e:	e00b      	b.n	8005b28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fa19 	bl	8005f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b16:	e007      	b.n	8005b28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fa15 	bl	8005f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005b26:	e1dc      	b.n	8005ee2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b28:	bf00      	nop
    return;
 8005b2a:	e1da      	b.n	8005ee2 <HAL_UART_IRQHandler+0x66e>
 8005b2c:	10000001 	.word	0x10000001
 8005b30:	04000120 	.word	0x04000120
 8005b34:	08006e1b 	.word	0x08006e1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	f040 8170 	bne.w	8005e22 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 8169 	beq.w	8005e22 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8162 	beq.w	8005e22 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2210      	movs	r2, #16
 8005b64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b70:	2b40      	cmp	r3, #64	@ 0x40
 8005b72:	f040 80d8 	bne.w	8005d26 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 80af 	beq.w	8005cec <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	f080 80a7 	bcs.w	8005cec <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f040 8087 	bne.w	8005cca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005be6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1da      	bne.n	8005bbc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c18:	f023 0301 	bic.w	r3, r3, #1
 8005c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3308      	adds	r3, #8
 8005c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e1      	bne.n	8005c06 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3308      	adds	r3, #8
 8005c62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e3      	bne.n	8005c42 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c98:	f023 0310 	bic.w	r3, r3, #16
 8005c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005caa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e4      	bne.n	8005c88 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fc fe1c 	bl	8002902 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f939 	bl	8005f5c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005cea:	e0fc      	b.n	8005ee6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	f040 80f5 	bne.w	8005ee6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	f040 80eb 	bne.w	8005ee6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f91c 	bl	8005f5c <HAL_UARTEx_RxEventCallback>
      return;
 8005d24:	e0df      	b.n	8005ee6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80d1 	beq.w	8005eea <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80cc 	beq.w	8005eea <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e4      	bne.n	8005d52 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	623b      	str	r3, [r7, #32]
   return(result);
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d9e:	f023 0301 	bic.w	r3, r3, #1
 8005da2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005db0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e1      	bne.n	8005d88 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	e853 3f00 	ldrex	r3, [r3]
 8005de4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f023 0310 	bic.w	r3, r3, #16
 8005dec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	69b9      	ldr	r1, [r7, #24]
 8005e00:	69fa      	ldr	r2, [r7, #28]
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	617b      	str	r3, [r7, #20]
   return(result);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e4      	bne.n	8005dd8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f89e 	bl	8005f5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e20:	e063      	b.n	8005eea <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00e      	beq.n	8005e4c <HAL_UART_IRQHandler+0x5d8>
 8005e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d008      	beq.n	8005e4c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005e42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f001 f825 	bl	8006e94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e4a:	e051      	b.n	8005ef0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d014      	beq.n	8005e82 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d105      	bne.n	8005e70 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d008      	beq.n	8005e82 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d03a      	beq.n	8005eee <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	4798      	blx	r3
    }
    return;
 8005e80:	e035      	b.n	8005eee <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d009      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x62e>
 8005e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 ffcf 	bl	8006e3e <UART_EndTransmit_IT>
    return;
 8005ea0:	e026      	b.n	8005ef0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x64e>
 8005eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fffe 	bl	8006ebc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ec0:	e016      	b.n	8005ef0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d010      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x67c>
 8005ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da0c      	bge.n	8005ef0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 ffe6 	bl	8006ea8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005edc:	e008      	b.n	8005ef0 <HAL_UART_IRQHandler+0x67c>
      return;
 8005ede:	bf00      	nop
 8005ee0:	e006      	b.n	8005ef0 <HAL_UART_IRQHandler+0x67c>
    return;
 8005ee2:	bf00      	nop
 8005ee4:	e004      	b.n	8005ef0 <HAL_UART_IRQHandler+0x67c>
      return;
 8005ee6:	bf00      	nop
 8005ee8:	e002      	b.n	8005ef0 <HAL_UART_IRQHandler+0x67c>
      return;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <HAL_UART_IRQHandler+0x67c>
    return;
 8005eee:	bf00      	nop
  }
}
 8005ef0:	37e8      	adds	r7, #232	@ 0xe8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop

08005ef8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b08c      	sub	sp, #48	@ 0x30
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4baa      	ldr	r3, [pc, #680]	@ (800624c <UART_SetConfig+0x2d8>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	6812      	ldr	r2, [r2, #0]
 8005faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fac:	430b      	orrs	r3, r1
 8005fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a9f      	ldr	r2, [pc, #636]	@ (8006250 <UART_SetConfig+0x2dc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005fea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	6812      	ldr	r2, [r2, #0]
 8005ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	f023 010f 	bic.w	r1, r3, #15
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a90      	ldr	r2, [pc, #576]	@ (8006254 <UART_SetConfig+0x2e0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d125      	bne.n	8006064 <UART_SetConfig+0xf0>
 8006018:	4b8f      	ldr	r3, [pc, #572]	@ (8006258 <UART_SetConfig+0x2e4>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b03      	cmp	r3, #3
 8006024:	d81a      	bhi.n	800605c <UART_SetConfig+0xe8>
 8006026:	a201      	add	r2, pc, #4	@ (adr r2, 800602c <UART_SetConfig+0xb8>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	0800603d 	.word	0x0800603d
 8006030:	0800604d 	.word	0x0800604d
 8006034:	08006045 	.word	0x08006045
 8006038:	08006055 	.word	0x08006055
 800603c:	2301      	movs	r3, #1
 800603e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006042:	e116      	b.n	8006272 <UART_SetConfig+0x2fe>
 8006044:	2302      	movs	r3, #2
 8006046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800604a:	e112      	b.n	8006272 <UART_SetConfig+0x2fe>
 800604c:	2304      	movs	r3, #4
 800604e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006052:	e10e      	b.n	8006272 <UART_SetConfig+0x2fe>
 8006054:	2308      	movs	r3, #8
 8006056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800605a:	e10a      	b.n	8006272 <UART_SetConfig+0x2fe>
 800605c:	2310      	movs	r3, #16
 800605e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006062:	e106      	b.n	8006272 <UART_SetConfig+0x2fe>
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a7c      	ldr	r2, [pc, #496]	@ (800625c <UART_SetConfig+0x2e8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d138      	bne.n	80060e0 <UART_SetConfig+0x16c>
 800606e:	4b7a      	ldr	r3, [pc, #488]	@ (8006258 <UART_SetConfig+0x2e4>)
 8006070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006074:	f003 030c 	and.w	r3, r3, #12
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d82d      	bhi.n	80060d8 <UART_SetConfig+0x164>
 800607c:	a201      	add	r2, pc, #4	@ (adr r2, 8006084 <UART_SetConfig+0x110>)
 800607e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006082:	bf00      	nop
 8006084:	080060b9 	.word	0x080060b9
 8006088:	080060d9 	.word	0x080060d9
 800608c:	080060d9 	.word	0x080060d9
 8006090:	080060d9 	.word	0x080060d9
 8006094:	080060c9 	.word	0x080060c9
 8006098:	080060d9 	.word	0x080060d9
 800609c:	080060d9 	.word	0x080060d9
 80060a0:	080060d9 	.word	0x080060d9
 80060a4:	080060c1 	.word	0x080060c1
 80060a8:	080060d9 	.word	0x080060d9
 80060ac:	080060d9 	.word	0x080060d9
 80060b0:	080060d9 	.word	0x080060d9
 80060b4:	080060d1 	.word	0x080060d1
 80060b8:	2300      	movs	r3, #0
 80060ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060be:	e0d8      	b.n	8006272 <UART_SetConfig+0x2fe>
 80060c0:	2302      	movs	r3, #2
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c6:	e0d4      	b.n	8006272 <UART_SetConfig+0x2fe>
 80060c8:	2304      	movs	r3, #4
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ce:	e0d0      	b.n	8006272 <UART_SetConfig+0x2fe>
 80060d0:	2308      	movs	r3, #8
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d6:	e0cc      	b.n	8006272 <UART_SetConfig+0x2fe>
 80060d8:	2310      	movs	r3, #16
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060de:	e0c8      	b.n	8006272 <UART_SetConfig+0x2fe>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a5e      	ldr	r2, [pc, #376]	@ (8006260 <UART_SetConfig+0x2ec>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d125      	bne.n	8006136 <UART_SetConfig+0x1c2>
 80060ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006258 <UART_SetConfig+0x2e4>)
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060f4:	2b30      	cmp	r3, #48	@ 0x30
 80060f6:	d016      	beq.n	8006126 <UART_SetConfig+0x1b2>
 80060f8:	2b30      	cmp	r3, #48	@ 0x30
 80060fa:	d818      	bhi.n	800612e <UART_SetConfig+0x1ba>
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d00a      	beq.n	8006116 <UART_SetConfig+0x1a2>
 8006100:	2b20      	cmp	r3, #32
 8006102:	d814      	bhi.n	800612e <UART_SetConfig+0x1ba>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <UART_SetConfig+0x19a>
 8006108:	2b10      	cmp	r3, #16
 800610a:	d008      	beq.n	800611e <UART_SetConfig+0x1aa>
 800610c:	e00f      	b.n	800612e <UART_SetConfig+0x1ba>
 800610e:	2300      	movs	r3, #0
 8006110:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006114:	e0ad      	b.n	8006272 <UART_SetConfig+0x2fe>
 8006116:	2302      	movs	r3, #2
 8006118:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611c:	e0a9      	b.n	8006272 <UART_SetConfig+0x2fe>
 800611e:	2304      	movs	r3, #4
 8006120:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006124:	e0a5      	b.n	8006272 <UART_SetConfig+0x2fe>
 8006126:	2308      	movs	r3, #8
 8006128:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800612c:	e0a1      	b.n	8006272 <UART_SetConfig+0x2fe>
 800612e:	2310      	movs	r3, #16
 8006130:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006134:	e09d      	b.n	8006272 <UART_SetConfig+0x2fe>
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a4a      	ldr	r2, [pc, #296]	@ (8006264 <UART_SetConfig+0x2f0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d125      	bne.n	800618c <UART_SetConfig+0x218>
 8006140:	4b45      	ldr	r3, [pc, #276]	@ (8006258 <UART_SetConfig+0x2e4>)
 8006142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006146:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800614a:	2bc0      	cmp	r3, #192	@ 0xc0
 800614c:	d016      	beq.n	800617c <UART_SetConfig+0x208>
 800614e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006150:	d818      	bhi.n	8006184 <UART_SetConfig+0x210>
 8006152:	2b80      	cmp	r3, #128	@ 0x80
 8006154:	d00a      	beq.n	800616c <UART_SetConfig+0x1f8>
 8006156:	2b80      	cmp	r3, #128	@ 0x80
 8006158:	d814      	bhi.n	8006184 <UART_SetConfig+0x210>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <UART_SetConfig+0x1f0>
 800615e:	2b40      	cmp	r3, #64	@ 0x40
 8006160:	d008      	beq.n	8006174 <UART_SetConfig+0x200>
 8006162:	e00f      	b.n	8006184 <UART_SetConfig+0x210>
 8006164:	2300      	movs	r3, #0
 8006166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800616a:	e082      	b.n	8006272 <UART_SetConfig+0x2fe>
 800616c:	2302      	movs	r3, #2
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006172:	e07e      	b.n	8006272 <UART_SetConfig+0x2fe>
 8006174:	2304      	movs	r3, #4
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800617a:	e07a      	b.n	8006272 <UART_SetConfig+0x2fe>
 800617c:	2308      	movs	r3, #8
 800617e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006182:	e076      	b.n	8006272 <UART_SetConfig+0x2fe>
 8006184:	2310      	movs	r3, #16
 8006186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800618a:	e072      	b.n	8006272 <UART_SetConfig+0x2fe>
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a35      	ldr	r2, [pc, #212]	@ (8006268 <UART_SetConfig+0x2f4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d12a      	bne.n	80061ec <UART_SetConfig+0x278>
 8006196:	4b30      	ldr	r3, [pc, #192]	@ (8006258 <UART_SetConfig+0x2e4>)
 8006198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061a4:	d01a      	beq.n	80061dc <UART_SetConfig+0x268>
 80061a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061aa:	d81b      	bhi.n	80061e4 <UART_SetConfig+0x270>
 80061ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061b0:	d00c      	beq.n	80061cc <UART_SetConfig+0x258>
 80061b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061b6:	d815      	bhi.n	80061e4 <UART_SetConfig+0x270>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <UART_SetConfig+0x250>
 80061bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061c0:	d008      	beq.n	80061d4 <UART_SetConfig+0x260>
 80061c2:	e00f      	b.n	80061e4 <UART_SetConfig+0x270>
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ca:	e052      	b.n	8006272 <UART_SetConfig+0x2fe>
 80061cc:	2302      	movs	r3, #2
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d2:	e04e      	b.n	8006272 <UART_SetConfig+0x2fe>
 80061d4:	2304      	movs	r3, #4
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061da:	e04a      	b.n	8006272 <UART_SetConfig+0x2fe>
 80061dc:	2308      	movs	r3, #8
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e2:	e046      	b.n	8006272 <UART_SetConfig+0x2fe>
 80061e4:	2310      	movs	r3, #16
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ea:	e042      	b.n	8006272 <UART_SetConfig+0x2fe>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a17      	ldr	r2, [pc, #92]	@ (8006250 <UART_SetConfig+0x2dc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d13a      	bne.n	800626c <UART_SetConfig+0x2f8>
 80061f6:	4b18      	ldr	r3, [pc, #96]	@ (8006258 <UART_SetConfig+0x2e4>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006204:	d01a      	beq.n	800623c <UART_SetConfig+0x2c8>
 8006206:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800620a:	d81b      	bhi.n	8006244 <UART_SetConfig+0x2d0>
 800620c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006210:	d00c      	beq.n	800622c <UART_SetConfig+0x2b8>
 8006212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006216:	d815      	bhi.n	8006244 <UART_SetConfig+0x2d0>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <UART_SetConfig+0x2b0>
 800621c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006220:	d008      	beq.n	8006234 <UART_SetConfig+0x2c0>
 8006222:	e00f      	b.n	8006244 <UART_SetConfig+0x2d0>
 8006224:	2300      	movs	r3, #0
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622a:	e022      	b.n	8006272 <UART_SetConfig+0x2fe>
 800622c:	2302      	movs	r3, #2
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006232:	e01e      	b.n	8006272 <UART_SetConfig+0x2fe>
 8006234:	2304      	movs	r3, #4
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623a:	e01a      	b.n	8006272 <UART_SetConfig+0x2fe>
 800623c:	2308      	movs	r3, #8
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006242:	e016      	b.n	8006272 <UART_SetConfig+0x2fe>
 8006244:	2310      	movs	r3, #16
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624a:	e012      	b.n	8006272 <UART_SetConfig+0x2fe>
 800624c:	cfff69f3 	.word	0xcfff69f3
 8006250:	40008000 	.word	0x40008000
 8006254:	40013800 	.word	0x40013800
 8006258:	40021000 	.word	0x40021000
 800625c:	40004400 	.word	0x40004400
 8006260:	40004800 	.word	0x40004800
 8006264:	40004c00 	.word	0x40004c00
 8006268:	40005000 	.word	0x40005000
 800626c:	2310      	movs	r3, #16
 800626e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4aae      	ldr	r2, [pc, #696]	@ (8006530 <UART_SetConfig+0x5bc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	f040 8097 	bne.w	80063ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800627e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006282:	2b08      	cmp	r3, #8
 8006284:	d823      	bhi.n	80062ce <UART_SetConfig+0x35a>
 8006286:	a201      	add	r2, pc, #4	@ (adr r2, 800628c <UART_SetConfig+0x318>)
 8006288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062cf 	.word	0x080062cf
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062cf 	.word	0x080062cf
 800629c:	080062bf 	.word	0x080062bf
 80062a0:	080062cf 	.word	0x080062cf
 80062a4:	080062cf 	.word	0x080062cf
 80062a8:	080062cf 	.word	0x080062cf
 80062ac:	080062c7 	.word	0x080062c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b0:	f7fe faf0 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 80062b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062b6:	e010      	b.n	80062da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b8:	4b9e      	ldr	r3, [pc, #632]	@ (8006534 <UART_SetConfig+0x5c0>)
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062bc:	e00d      	b.n	80062da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062be:	f7fe fa7b 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 80062c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062c4:	e009      	b.n	80062da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062cc:	e005      	b.n	80062da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8130 	beq.w	8006542 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	4a94      	ldr	r2, [pc, #592]	@ (8006538 <UART_SetConfig+0x5c4>)
 80062e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ec:	461a      	mov	r2, r3
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	4613      	mov	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	4413      	add	r3, r2
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	429a      	cmp	r2, r3
 8006304:	d305      	bcc.n	8006312 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	429a      	cmp	r2, r3
 8006310:	d903      	bls.n	800631a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006318:	e113      	b.n	8006542 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	2200      	movs	r2, #0
 800631e:	60bb      	str	r3, [r7, #8]
 8006320:	60fa      	str	r2, [r7, #12]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006326:	4a84      	ldr	r2, [pc, #528]	@ (8006538 <UART_SetConfig+0x5c4>)
 8006328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800632c:	b29b      	uxth	r3, r3
 800632e:	2200      	movs	r2, #0
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800633c:	f7fa fc94 	bl	8000c68 <__aeabi_uldivmod>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4610      	mov	r0, r2
 8006346:	4619      	mov	r1, r3
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	020b      	lsls	r3, r1, #8
 8006352:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006356:	0202      	lsls	r2, r0, #8
 8006358:	6979      	ldr	r1, [r7, #20]
 800635a:	6849      	ldr	r1, [r1, #4]
 800635c:	0849      	lsrs	r1, r1, #1
 800635e:	2000      	movs	r0, #0
 8006360:	460c      	mov	r4, r1
 8006362:	4605      	mov	r5, r0
 8006364:	eb12 0804 	adds.w	r8, r2, r4
 8006368:	eb43 0905 	adc.w	r9, r3, r5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	469a      	mov	sl, r3
 8006374:	4693      	mov	fp, r2
 8006376:	4652      	mov	r2, sl
 8006378:	465b      	mov	r3, fp
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	f7fa fc73 	bl	8000c68 <__aeabi_uldivmod>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4613      	mov	r3, r2
 8006388:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006390:	d308      	bcc.n	80063a4 <UART_SetConfig+0x430>
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006398:	d204      	bcs.n	80063a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6a3a      	ldr	r2, [r7, #32]
 80063a0:	60da      	str	r2, [r3, #12]
 80063a2:	e0ce      	b.n	8006542 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063aa:	e0ca      	b.n	8006542 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063b4:	d166      	bne.n	8006484 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80063b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d827      	bhi.n	800640e <UART_SetConfig+0x49a>
 80063be:	a201      	add	r2, pc, #4	@ (adr r2, 80063c4 <UART_SetConfig+0x450>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	080063e9 	.word	0x080063e9
 80063c8:	080063f1 	.word	0x080063f1
 80063cc:	080063f9 	.word	0x080063f9
 80063d0:	0800640f 	.word	0x0800640f
 80063d4:	080063ff 	.word	0x080063ff
 80063d8:	0800640f 	.word	0x0800640f
 80063dc:	0800640f 	.word	0x0800640f
 80063e0:	0800640f 	.word	0x0800640f
 80063e4:	08006407 	.word	0x08006407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e8:	f7fe fa54 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 80063ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063ee:	e014      	b.n	800641a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f0:	f7fe fa66 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 80063f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063f6:	e010      	b.n	800641a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063f8:	4b4e      	ldr	r3, [pc, #312]	@ (8006534 <UART_SetConfig+0x5c0>)
 80063fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063fc:	e00d      	b.n	800641a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063fe:	f7fe f9db 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 8006402:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006404:	e009      	b.n	800641a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800640c:	e005      	b.n	800641a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006418:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8090 	beq.w	8006542 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006426:	4a44      	ldr	r2, [pc, #272]	@ (8006538 <UART_SetConfig+0x5c4>)
 8006428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800642c:	461a      	mov	r2, r3
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	fbb3 f3f2 	udiv	r3, r3, r2
 8006434:	005a      	lsls	r2, r3, #1
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	441a      	add	r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	fbb2 f3f3 	udiv	r3, r2, r3
 8006446:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	2b0f      	cmp	r3, #15
 800644c:	d916      	bls.n	800647c <UART_SetConfig+0x508>
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006454:	d212      	bcs.n	800647c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	b29b      	uxth	r3, r3
 800645a:	f023 030f 	bic.w	r3, r3, #15
 800645e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	b29b      	uxth	r3, r3
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	b29a      	uxth	r2, r3
 800646c:	8bfb      	ldrh	r3, [r7, #30]
 800646e:	4313      	orrs	r3, r2
 8006470:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	8bfa      	ldrh	r2, [r7, #30]
 8006478:	60da      	str	r2, [r3, #12]
 800647a:	e062      	b.n	8006542 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006482:	e05e      	b.n	8006542 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006484:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006488:	2b08      	cmp	r3, #8
 800648a:	d828      	bhi.n	80064de <UART_SetConfig+0x56a>
 800648c:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <UART_SetConfig+0x520>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064c1 	.word	0x080064c1
 800649c:	080064c9 	.word	0x080064c9
 80064a0:	080064df 	.word	0x080064df
 80064a4:	080064cf 	.word	0x080064cf
 80064a8:	080064df 	.word	0x080064df
 80064ac:	080064df 	.word	0x080064df
 80064b0:	080064df 	.word	0x080064df
 80064b4:	080064d7 	.word	0x080064d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b8:	f7fe f9ec 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 80064bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064be:	e014      	b.n	80064ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c0:	f7fe f9fe 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 80064c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064c6:	e010      	b.n	80064ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006534 <UART_SetConfig+0x5c0>)
 80064ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064cc:	e00d      	b.n	80064ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ce:	f7fe f973 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 80064d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064d4:	e009      	b.n	80064ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064dc:	e005      	b.n	80064ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064e8:	bf00      	nop
    }

    if (pclk != 0U)
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d028      	beq.n	8006542 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	4a10      	ldr	r2, [pc, #64]	@ (8006538 <UART_SetConfig+0x5c4>)
 80064f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064fa:	461a      	mov	r2, r3
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	441a      	add	r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006512:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	2b0f      	cmp	r3, #15
 8006518:	d910      	bls.n	800653c <UART_SetConfig+0x5c8>
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006520:	d20c      	bcs.n	800653c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	b29a      	uxth	r2, r3
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60da      	str	r2, [r3, #12]
 800652c:	e009      	b.n	8006542 <UART_SetConfig+0x5ce>
 800652e:	bf00      	nop
 8006530:	40008000 	.word	0x40008000
 8006534:	00f42400 	.word	0x00f42400
 8006538:	08019a6c 	.word	0x08019a6c
      }
      else
      {
        ret = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2201      	movs	r2, #1
 8006546:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2201      	movs	r2, #1
 800654e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2200      	movs	r2, #0
 8006556:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2200      	movs	r2, #0
 800655c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800655e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006562:	4618      	mov	r0, r3
 8006564:	3730      	adds	r7, #48	@ 0x30
 8006566:	46bd      	mov	sp, r7
 8006568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800656c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01a      	beq.n	8006682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800666a:	d10a      	bne.n	8006682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
  }
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b098      	sub	sp, #96	@ 0x60
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066c0:	f7fb ff10 	bl	80024e4 <HAL_GetTick>
 80066c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d12f      	bne.n	8006734 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066dc:	2200      	movs	r2, #0
 80066de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f88e 	bl	8006804 <UART_WaitOnFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d022      	beq.n	8006734 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006702:	653b      	str	r3, [r7, #80]	@ 0x50
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800670c:	647b      	str	r3, [r7, #68]	@ 0x44
 800670e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800671a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e6      	bne.n	80066ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e063      	b.n	80067fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d149      	bne.n	80067d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006742:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800674a:	2200      	movs	r2, #0
 800674c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f857 	bl	8006804 <UART_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d03c      	beq.n	80067d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	623b      	str	r3, [r7, #32]
   return(result);
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800677a:	633b      	str	r3, [r7, #48]	@ 0x30
 800677c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e6      	bne.n	800675c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3308      	adds	r3, #8
 8006794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	60fb      	str	r3, [r7, #12]
   return(result);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067ae:	61fa      	str	r2, [r7, #28]
 80067b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	69b9      	ldr	r1, [r7, #24]
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	617b      	str	r3, [r7, #20]
   return(result);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e012      	b.n	80067fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3758      	adds	r7, #88	@ 0x58
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	4613      	mov	r3, r2
 8006812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006814:	e04f      	b.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800681c:	d04b      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681e:	f7fb fe61 	bl	80024e4 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	429a      	cmp	r2, r3
 800682c:	d302      	bcc.n	8006834 <UART_WaitOnFlagUntilTimeout+0x30>
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e04e      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	d037      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b80      	cmp	r3, #128	@ 0x80
 800684a:	d034      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b40      	cmp	r3, #64	@ 0x40
 8006850:	d031      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b08      	cmp	r3, #8
 800685e:	d110      	bne.n	8006882 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2208      	movs	r2, #8
 8006866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f920 	bl	8006aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2208      	movs	r2, #8
 8006872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e029      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800688c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006890:	d111      	bne.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800689a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f906 	bl	8006aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e00f      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4013      	ands	r3, r2
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	bf0c      	ite	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	2300      	movne	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d0a0      	beq.n	8006816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b096      	sub	sp, #88	@ 0x58
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2222      	movs	r2, #34	@ 0x22
 8006908:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006912:	2b00      	cmp	r3, #0
 8006914:	d02d      	beq.n	8006972 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800691c:	4a40      	ldr	r2, [pc, #256]	@ (8006a20 <UART_Start_Receive_DMA+0x140>)
 800691e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006926:	4a3f      	ldr	r2, [pc, #252]	@ (8006a24 <UART_Start_Receive_DMA+0x144>)
 8006928:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006930:	4a3d      	ldr	r2, [pc, #244]	@ (8006a28 <UART_Start_Receive_DMA+0x148>)
 8006932:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800693a:	2200      	movs	r2, #0
 800693c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3324      	adds	r3, #36	@ 0x24
 800694a:	4619      	mov	r1, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006950:	461a      	mov	r2, r3
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	f7fb ff5a 	bl	800280c <HAL_DMA_Start_IT>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d009      	beq.n	8006972 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2210      	movs	r2, #16
 8006962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e051      	b.n	8006a16 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d018      	beq.n	80069ac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800698e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006998:	64bb      	str	r3, [r7, #72]	@ 0x48
 800699a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800699e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80069a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e6      	bne.n	800697a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3308      	adds	r3, #8
 80069b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3308      	adds	r3, #8
 80069ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80069cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80069ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80069da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	613b      	str	r3, [r7, #16]
   return(result);
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3308      	adds	r3, #8
 80069fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a00:	623a      	str	r2, [r7, #32]
 8006a02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	69f9      	ldr	r1, [r7, #28]
 8006a06:	6a3a      	ldr	r2, [r7, #32]
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e5      	bne.n	80069e0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3758      	adds	r7, #88	@ 0x58
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	08006c31 	.word	0x08006c31
 8006a24:	08006d5d 	.word	0x08006d5d
 8006a28:	08006d9b 	.word	0x08006d9b

08006a2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b08f      	sub	sp, #60	@ 0x3c
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a54:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e6      	bne.n	8006a34 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3308      	adds	r3, #8
 8006a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a86:	61ba      	str	r2, [r7, #24]
 8006a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6979      	ldr	r1, [r7, #20]
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	613b      	str	r3, [r7, #16]
   return(result);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e5      	bne.n	8006a66 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006aa2:	bf00      	nop
 8006aa4:	373c      	adds	r7, #60	@ 0x3c
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b095      	sub	sp, #84	@ 0x54
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ad6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ada:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e6      	bne.n	8006ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3308      	adds	r3, #8
 8006aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006afe:	f023 0301 	bic.w	r3, r3, #1
 8006b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e3      	bne.n	8006ae8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d118      	bne.n	8006b5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f023 0310 	bic.w	r3, r3, #16
 8006b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6979      	ldr	r1, [r7, #20]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	613b      	str	r3, [r7, #16]
   return(result);
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e6      	bne.n	8006b28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b6e:	bf00      	nop
 8006b70:	3754      	adds	r7, #84	@ 0x54
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b090      	sub	sp, #64	@ 0x40
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d137      	bne.n	8006c06 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	623b      	str	r3, [r7, #32]
   return(result);
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e5      	bne.n	8006b9e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf0:	61fb      	str	r3, [r7, #28]
 8006bf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	69b9      	ldr	r1, [r7, #24]
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e6      	bne.n	8006bd2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c04:	e002      	b.n	8006c0c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c06:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c08:	f7ff f976 	bl	8005ef8 <HAL_UART_TxCpltCallback>
}
 8006c0c:	bf00      	nop
 8006c0e:	3740      	adds	r7, #64	@ 0x40
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c20:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f7ff f972 	bl	8005f0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b09c      	sub	sp, #112	@ 0x70
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d171      	bne.n	8006d30 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e6      	bne.n	8006c54 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ca6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ca8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e5      	bne.n	8006c86 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006cda:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e5      	bne.n	8006cba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d118      	bne.n	8006d30 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0310 	bic.w	r3, r3, #16
 8006d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	69b9      	ldr	r1, [r7, #24]
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	617b      	str	r3, [r7, #20]
   return(result);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e6      	bne.n	8006cfe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d32:	2200      	movs	r2, #0
 8006d34:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d107      	bne.n	8006d4e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d44:	4619      	mov	r1, r3
 8006d46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d48:	f7ff f908 	bl	8005f5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d4c:	e002      	b.n	8006d54 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d50:	f7ff f8e6 	bl	8005f20 <HAL_UART_RxCpltCallback>
}
 8006d54:	bf00      	nop
 8006d56:	3770      	adds	r7, #112	@ 0x70
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d109      	bne.n	8006d8c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d7e:	085b      	lsrs	r3, r3, #1
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	4619      	mov	r1, r3
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f7ff f8e9 	bl	8005f5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d8a:	e002      	b.n	8006d92 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff f8d1 	bl	8005f34 <HAL_UART_RxHalfCpltCallback>
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc2:	2b80      	cmp	r3, #128	@ 0x80
 8006dc4:	d109      	bne.n	8006dda <UART_DMAError+0x40>
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b21      	cmp	r3, #33	@ 0x21
 8006dca:	d106      	bne.n	8006dda <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006dd4:	6978      	ldr	r0, [r7, #20]
 8006dd6:	f7ff fe29 	bl	8006a2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de4:	2b40      	cmp	r3, #64	@ 0x40
 8006de6:	d109      	bne.n	8006dfc <UART_DMAError+0x62>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b22      	cmp	r3, #34	@ 0x22
 8006dec:	d106      	bne.n	8006dfc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006df6:	6978      	ldr	r0, [r7, #20]
 8006df8:	f7ff fe59 	bl	8006aae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e02:	f043 0210 	orr.w	r2, r3, #16
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e0c:	6978      	ldr	r0, [r7, #20]
 8006e0e:	f7ff f89b 	bl	8005f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e12:	bf00      	nop
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff f889 	bl	8005f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b088      	sub	sp, #32
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e5a:	61fb      	str	r3, [r7, #28]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6979      	ldr	r1, [r7, #20]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	613b      	str	r3, [r7, #16]
   return(result);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e6      	bne.n	8006e46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff f836 	bl	8005ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8c:	bf00      	nop
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d101      	bne.n	8006ee6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e027      	b.n	8006f36 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2224      	movs	r2, #36	@ 0x24
 8006ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0201 	bic.w	r2, r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f56:	2302      	movs	r3, #2
 8006f58:	e02d      	b.n	8006fb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2224      	movs	r2, #36	@ 0x24
 8006f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0201 	bic.w	r2, r2, #1
 8006f80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f850 	bl	800703c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d101      	bne.n	8006fd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e02d      	b.n	8007032 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2224      	movs	r2, #36	@ 0x24
 8006fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0201 	bic.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f812 	bl	800703c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007048:	2b00      	cmp	r3, #0
 800704a:	d108      	bne.n	800705e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800705c:	e031      	b.n	80070c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800705e:	2308      	movs	r3, #8
 8007060:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007062:	2308      	movs	r3, #8
 8007064:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	0e5b      	lsrs	r3, r3, #25
 800706e:	b2db      	uxtb	r3, r3
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	0f5b      	lsrs	r3, r3, #29
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	7b3a      	ldrb	r2, [r7, #12]
 800708a:	4911      	ldr	r1, [pc, #68]	@ (80070d0 <UARTEx_SetNbDataToProcess+0x94>)
 800708c:	5c8a      	ldrb	r2, [r1, r2]
 800708e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007092:	7b3a      	ldrb	r2, [r7, #12]
 8007094:	490f      	ldr	r1, [pc, #60]	@ (80070d4 <UARTEx_SetNbDataToProcess+0x98>)
 8007096:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007098:	fb93 f3f2 	sdiv	r3, r3, r2
 800709c:	b29a      	uxth	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	7b7a      	ldrb	r2, [r7, #13]
 80070a8:	4909      	ldr	r1, [pc, #36]	@ (80070d0 <UARTEx_SetNbDataToProcess+0x94>)
 80070aa:	5c8a      	ldrb	r2, [r1, r2]
 80070ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070b0:	7b7a      	ldrb	r2, [r7, #13]
 80070b2:	4908      	ldr	r1, [pc, #32]	@ (80070d4 <UARTEx_SetNbDataToProcess+0x98>)
 80070b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80070c2:	bf00      	nop
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	08019a84 	.word	0x08019a84
 80070d4:	08019a8c 	.word	0x08019a8c

080070d8 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af04      	add	r7, sp, #16
 80070de:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80070e0:	2364      	movs	r3, #100	@ 0x64
 80070e2:	9302      	str	r3, [sp, #8]
 80070e4:	2301      	movs	r3, #1
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	f107 030f 	add.w	r3, r7, #15
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	2301      	movs	r3, #1
 80070f0:	2275      	movs	r2, #117	@ 0x75
 80070f2:	21d0      	movs	r1, #208	@ 0xd0
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7fc f98b 	bl	8003410 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	2b68      	cmp	r3, #104	@ 0x68
 80070fe:	d13d      	bne.n	800717c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8007104:	2364      	movs	r3, #100	@ 0x64
 8007106:	9302      	str	r3, [sp, #8]
 8007108:	2301      	movs	r3, #1
 800710a:	9301      	str	r3, [sp, #4]
 800710c:	f107 030e 	add.w	r3, r7, #14
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	2301      	movs	r3, #1
 8007114:	226b      	movs	r2, #107	@ 0x6b
 8007116:	21d0      	movs	r1, #208	@ 0xd0
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7fc f865 	bl	80031e8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800711e:	2307      	movs	r3, #7
 8007120:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8007122:	2364      	movs	r3, #100	@ 0x64
 8007124:	9302      	str	r3, [sp, #8]
 8007126:	2301      	movs	r3, #1
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	f107 030e 	add.w	r3, r7, #14
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	2301      	movs	r3, #1
 8007132:	2219      	movs	r2, #25
 8007134:	21d0      	movs	r1, #208	@ 0xd0
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fc f856 	bl	80031e8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800713c:	2300      	movs	r3, #0
 800713e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8007140:	2364      	movs	r3, #100	@ 0x64
 8007142:	9302      	str	r3, [sp, #8]
 8007144:	2301      	movs	r3, #1
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	f107 030e 	add.w	r3, r7, #14
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	2301      	movs	r3, #1
 8007150:	221c      	movs	r2, #28
 8007152:	21d0      	movs	r1, #208	@ 0xd0
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7fc f847 	bl	80031e8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800715a:	2300      	movs	r3, #0
 800715c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800715e:	2364      	movs	r3, #100	@ 0x64
 8007160:	9302      	str	r3, [sp, #8]
 8007162:	2301      	movs	r3, #1
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	f107 030e 	add.w	r3, r7, #14
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	2301      	movs	r3, #1
 800716e:	221b      	movs	r2, #27
 8007170:	21d0      	movs	r1, #208	@ 0xd0
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7fc f838 	bl	80031e8 <HAL_I2C_Mem_Write>
        return 0;
 8007178:	2300      	movs	r3, #0
 800717a:	e000      	b.n	800717e <MPU6050_Init+0xa6>
    }
    return 1;
 800717c:	2301      	movs	r3, #1
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8007188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800718c:	b094      	sub	sp, #80	@ 0x50
 800718e:	af04      	add	r7, sp, #16
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8007194:	2364      	movs	r3, #100	@ 0x64
 8007196:	9302      	str	r3, [sp, #8]
 8007198:	230e      	movs	r3, #14
 800719a:	9301      	str	r3, [sp, #4]
 800719c:	f107 0308 	add.w	r3, r7, #8
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	2301      	movs	r3, #1
 80071a4:	223b      	movs	r2, #59	@ 0x3b
 80071a6:	21d0      	movs	r1, #208	@ 0xd0
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fc f931 	bl	8003410 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80071ae:	7a3b      	ldrb	r3, [r7, #8]
 80071b0:	021b      	lsls	r3, r3, #8
 80071b2:	b21a      	sxth	r2, r3
 80071b4:	7a7b      	ldrb	r3, [r7, #9]
 80071b6:	b21b      	sxth	r3, r3
 80071b8:	4313      	orrs	r3, r2
 80071ba:	b21a      	sxth	r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80071c0:	7abb      	ldrb	r3, [r7, #10]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	b21a      	sxth	r2, r3
 80071c6:	7afb      	ldrb	r3, [r7, #11]
 80071c8:	b21b      	sxth	r3, r3
 80071ca:	4313      	orrs	r3, r2
 80071cc:	b21a      	sxth	r2, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80071d2:	7b3b      	ldrb	r3, [r7, #12]
 80071d4:	021b      	lsls	r3, r3, #8
 80071d6:	b21a      	sxth	r2, r3
 80071d8:	7b7b      	ldrb	r3, [r7, #13]
 80071da:	b21b      	sxth	r3, r3
 80071dc:	4313      	orrs	r3, r2
 80071de:	b21a      	sxth	r2, r3
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	b21a      	sxth	r2, r3
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	b21b      	sxth	r3, r3
 80071ee:	4313      	orrs	r3, r2
 80071f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80071f2:	7c3b      	ldrb	r3, [r7, #16]
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	b21a      	sxth	r2, r3
 80071f8:	7c7b      	ldrb	r3, [r7, #17]
 80071fa:	b21b      	sxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b21a      	sxth	r2, r3
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8007204:	7cbb      	ldrb	r3, [r7, #18]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	b21a      	sxth	r2, r3
 800720a:	7cfb      	ldrb	r3, [r7, #19]
 800720c:	b21b      	sxth	r3, r3
 800720e:	4313      	orrs	r3, r2
 8007210:	b21a      	sxth	r2, r3
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8007216:	7d3b      	ldrb	r3, [r7, #20]
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	b21a      	sxth	r2, r3
 800721c:	7d7b      	ldrb	r3, [r7, #21]
 800721e:	b21b      	sxth	r3, r3
 8007220:	4313      	orrs	r3, r2
 8007222:	b21a      	sxth	r2, r3
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800722e:	4618      	mov	r0, r3
 8007230:	f7f9 f9b0 	bl	8000594 <__aeabi_i2d>
 8007234:	f04f 0200 	mov.w	r2, #0
 8007238:	4bbd      	ldr	r3, [pc, #756]	@ (8007530 <MPU6050_Read_All+0x3a8>)
 800723a:	f7f9 fb3f 	bl	80008bc <__aeabi_ddiv>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800724e:	4618      	mov	r0, r3
 8007250:	f7f9 f9a0 	bl	8000594 <__aeabi_i2d>
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	4bb5      	ldr	r3, [pc, #724]	@ (8007530 <MPU6050_Read_All+0x3a8>)
 800725a:	f7f9 fb2f 	bl	80008bc <__aeabi_ddiv>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800726e:	4618      	mov	r0, r3
 8007270:	f7f9 f990 	bl	8000594 <__aeabi_i2d>
 8007274:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007518 <MPU6050_Read_All+0x390>)
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	f7f9 fb1f 	bl	80008bc <__aeabi_ddiv>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8007288:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800728c:	ee07 3a90 	vmov	s15, r3
 8007290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007294:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8007534 <MPU6050_Read_All+0x3ac>
 8007298:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800729c:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8007538 <MPU6050_Read_All+0x3b0>
 80072a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7f9 f96f 	bl	8000594 <__aeabi_i2d>
 80072b6:	a39a      	add	r3, pc, #616	@ (adr r3, 8007520 <MPU6050_Read_All+0x398>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	f7f9 fafe 	bl	80008bc <__aeabi_ddiv>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7f9 f95f 	bl	8000594 <__aeabi_i2d>
 80072d6:	a392      	add	r3, pc, #584	@ (adr r3, 8007520 <MPU6050_Read_All+0x398>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f7f9 faee 	bl	80008bc <__aeabi_ddiv>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7f9 f94f 	bl	8000594 <__aeabi_i2d>
 80072f6:	a38a      	add	r3, pc, #552	@ (adr r3, 8007520 <MPU6050_Read_All+0x398>)
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f7f9 fade 	bl	80008bc <__aeabi_ddiv>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800730a:	f7fb f8eb 	bl	80024e4 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	4b8a      	ldr	r3, [pc, #552]	@ (800753c <MPU6050_Read_All+0x3b4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	4618      	mov	r0, r3
 8007318:	f7f9 f92c 	bl	8000574 <__aeabi_ui2d>
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	4b87      	ldr	r3, [pc, #540]	@ (8007540 <MPU6050_Read_All+0x3b8>)
 8007322:	f7f9 facb 	bl	80008bc <__aeabi_ddiv>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 800732e:	f7fb f8d9 	bl	80024e4 <HAL_GetTick>
 8007332:	4603      	mov	r3, r0
 8007334:	4a81      	ldr	r2, [pc, #516]	@ (800753c <MPU6050_Read_All+0x3b4>)
 8007336:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800733e:	461a      	mov	r2, r3
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007346:	fb03 f202 	mul.w	r2, r3, r2
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007350:	4619      	mov	r1, r3
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800735e:	4618      	mov	r0, r3
 8007360:	f7f9 f918 	bl	8000594 <__aeabi_i2d>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	ec43 2b10 	vmov	d0, r2, r3
 800736c:	f011 ffa0 	bl	80192b0 <sqrt>
 8007370:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007380:	f7f9 fbda 	bl	8000b38 <__aeabi_dcmpeq>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d11f      	bne.n	80073ca <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007390:	4618      	mov	r0, r3
 8007392:	f7f9 f8ff 	bl	8000594 <__aeabi_i2d>
 8007396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800739a:	f7f9 fa8f 	bl	80008bc <__aeabi_ddiv>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	ec43 2b17 	vmov	d7, r2, r3
 80073a6:	eeb0 0a47 	vmov.f32	s0, s14
 80073aa:	eef0 0a67 	vmov.f32	s1, s15
 80073ae:	f011 ffab 	bl	8019308 <atan>
 80073b2:	ec51 0b10 	vmov	r0, r1, d0
 80073b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8007528 <MPU6050_Read_All+0x3a0>)
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f7f9 f954 	bl	8000668 <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80073c8:	e005      	b.n	80073d6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 80073ca:	f04f 0200 	mov.w	r2, #0
 80073ce:	f04f 0300 	mov.w	r3, #0
 80073d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073dc:	425b      	negs	r3, r3
 80073de:	4618      	mov	r0, r3
 80073e0:	f7f9 f8d8 	bl	8000594 <__aeabi_i2d>
 80073e4:	4682      	mov	sl, r0
 80073e6:	468b      	mov	fp, r1
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7f9 f8d0 	bl	8000594 <__aeabi_i2d>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	ec43 2b11 	vmov	d1, r2, r3
 80073fc:	ec4b ab10 	vmov	d0, sl, fp
 8007400:	f011 ff54 	bl	80192ac <atan2>
 8007404:	ec51 0b10 	vmov	r0, r1, d0
 8007408:	a347      	add	r3, pc, #284	@ (adr r3, 8007528 <MPU6050_Read_All+0x3a0>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f7f9 f92b 	bl	8000668 <__aeabi_dmul>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	4b49      	ldr	r3, [pc, #292]	@ (8007544 <MPU6050_Read_All+0x3bc>)
 8007420:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007424:	f7f9 fb92 	bl	8000b4c <__aeabi_dcmplt>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <MPU6050_Read_All+0x2bc>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	4b43      	ldr	r3, [pc, #268]	@ (8007548 <MPU6050_Read_All+0x3c0>)
 800743a:	f7f9 fba5 	bl	8000b88 <__aeabi_dcmpgt>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d114      	bne.n	800746e <MPU6050_Read_All+0x2e6>
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	4b3f      	ldr	r3, [pc, #252]	@ (8007548 <MPU6050_Read_All+0x3c0>)
 800744a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800744e:	f7f9 fb9b 	bl	8000b88 <__aeabi_dcmpgt>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d015      	beq.n	8007484 <MPU6050_Read_All+0x2fc>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	4b38      	ldr	r3, [pc, #224]	@ (8007544 <MPU6050_Read_All+0x3bc>)
 8007464:	f7f9 fb72 	bl	8000b4c <__aeabi_dcmplt>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800746e:	4937      	ldr	r1, [pc, #220]	@ (800754c <MPU6050_Read_All+0x3c4>)
 8007470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007474:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800747e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8007482:	e014      	b.n	80074ae <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800748a:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800748e:	eeb0 1a47 	vmov.f32	s2, s14
 8007492:	eef0 1a67 	vmov.f32	s3, s15
 8007496:	ed97 0b06 	vldr	d0, [r7, #24]
 800749a:	482c      	ldr	r0, [pc, #176]	@ (800754c <MPU6050_Read_All+0x3c4>)
 800749c:	f000 f85a 	bl	8007554 <Kalman_getAngle>
 80074a0:	eeb0 7a40 	vmov.f32	s14, s0
 80074a4:	eef0 7a60 	vmov.f32	s15, s1
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80074b4:	4690      	mov	r8, r2
 80074b6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	4b22      	ldr	r3, [pc, #136]	@ (8007548 <MPU6050_Read_All+0x3c0>)
 80074c0:	4640      	mov	r0, r8
 80074c2:	4649      	mov	r1, r9
 80074c4:	f7f9 fb60 	bl	8000b88 <__aeabi_dcmpgt>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d008      	beq.n	80074e0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80074d4:	4614      	mov	r4, r2
 80074d6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80074e6:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80074ea:	eeb0 1a47 	vmov.f32	s2, s14
 80074ee:	eef0 1a67 	vmov.f32	s3, s15
 80074f2:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80074f6:	4816      	ldr	r0, [pc, #88]	@ (8007550 <MPU6050_Read_All+0x3c8>)
 80074f8:	f000 f82c 	bl	8007554 <Kalman_getAngle>
 80074fc:	eeb0 7a40 	vmov.f32	s14, s0
 8007500:	eef0 7a60 	vmov.f32	s15, s1
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800750a:	bf00      	nop
 800750c:	3740      	adds	r7, #64	@ 0x40
 800750e:	46bd      	mov	sp, r7
 8007510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007514:	f3af 8000 	nop.w
 8007518:	00000000 	.word	0x00000000
 800751c:	40cc2900 	.word	0x40cc2900
 8007520:	00000000 	.word	0x00000000
 8007524:	40606000 	.word	0x40606000
 8007528:	1a63c1f8 	.word	0x1a63c1f8
 800752c:	404ca5dc 	.word	0x404ca5dc
 8007530:	40d00000 	.word	0x40d00000
 8007534:	43aa0000 	.word	0x43aa0000
 8007538:	42121eb8 	.word	0x42121eb8
 800753c:	20004e94 	.word	0x20004e94
 8007540:	408f4000 	.word	0x408f4000
 8007544:	c0568000 	.word	0xc0568000
 8007548:	40568000 	.word	0x40568000
 800754c:	20000058 	.word	0x20000058
 8007550:	20000010 	.word	0x20000010

08007554 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8007554:	b5b0      	push	{r4, r5, r7, lr}
 8007556:	b096      	sub	sp, #88	@ 0x58
 8007558:	af00      	add	r7, sp, #0
 800755a:	61f8      	str	r0, [r7, #28]
 800755c:	ed87 0b04 	vstr	d0, [r7, #16]
 8007560:	ed87 1b02 	vstr	d1, [r7, #8]
 8007564:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800756e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007572:	f7f8 fec1 	bl	80002f8 <__aeabi_dsub>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800758c:	f7f9 f86c 	bl	8000668 <__aeabi_dmul>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4620      	mov	r0, r4
 8007596:	4629      	mov	r1, r5
 8007598:	f7f8 feb0 	bl	80002fc <__adddf3>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	69f9      	ldr	r1, [r7, #28]
 80075a2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80075b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b6:	f7f9 f857 	bl	8000668 <__aeabi_dmul>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4610      	mov	r0, r2
 80075c0:	4619      	mov	r1, r3
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80075c8:	f7f8 fe96 	bl	80002f8 <__aeabi_dsub>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4610      	mov	r0, r2
 80075d2:	4619      	mov	r1, r3
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80075da:	f7f8 fe8d 	bl	80002f8 <__aeabi_dsub>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4610      	mov	r0, r2
 80075e4:	4619      	mov	r1, r3
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f7f8 fe86 	bl	80002fc <__adddf3>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4610      	mov	r0, r2
 80075f6:	4619      	mov	r1, r3
 80075f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075fc:	f7f9 f834 	bl	8000668 <__aeabi_dmul>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4620      	mov	r0, r4
 8007606:	4629      	mov	r1, r5
 8007608:	f7f8 fe78 	bl	80002fc <__adddf3>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	69f9      	ldr	r1, [r7, #28]
 8007612:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007626:	f7f9 f81f 	bl	8000668 <__aeabi_dmul>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4620      	mov	r0, r4
 8007630:	4629      	mov	r1, r5
 8007632:	f7f8 fe61 	bl	80002f8 <__aeabi_dsub>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	69f9      	ldr	r1, [r7, #28]
 800763c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800764c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007650:	f7f9 f80a 	bl	8000668 <__aeabi_dmul>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4620      	mov	r0, r4
 800765a:	4629      	mov	r1, r5
 800765c:	f7f8 fe4c 	bl	80002f8 <__aeabi_dsub>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	69f9      	ldr	r1, [r7, #28]
 8007666:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800767a:	f7f8 fff5 	bl	8000668 <__aeabi_dmul>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4620      	mov	r0, r4
 8007684:	4629      	mov	r1, r5
 8007686:	f7f8 fe39 	bl	80002fc <__adddf3>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	69f9      	ldr	r1, [r7, #28]
 8007690:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80076a0:	f7f8 fe2c 	bl	80002fc <__adddf3>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80076b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80076b6:	f7f9 f901 	bl	80008bc <__aeabi_ddiv>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80076c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80076cc:	f7f9 f8f6 	bl	80008bc <__aeabi_ddiv>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80076de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80076e2:	f7f8 fe09 	bl	80002f8 <__aeabi_dsub>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80076f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80076f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80076fc:	f7f8 ffb4 	bl	8000668 <__aeabi_dmul>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4620      	mov	r0, r4
 8007706:	4629      	mov	r1, r5
 8007708:	f7f8 fdf8 	bl	80002fc <__adddf3>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	69f9      	ldr	r1, [r7, #28]
 8007712:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800771c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007720:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007724:	f7f8 ffa0 	bl	8000668 <__aeabi_dmul>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4620      	mov	r0, r4
 800772e:	4629      	mov	r1, r5
 8007730:	f7f8 fde4 	bl	80002fc <__adddf3>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	69f9      	ldr	r1, [r7, #28]
 800773a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007744:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800774e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007758:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800775c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007760:	f7f8 ff82 	bl	8000668 <__aeabi_dmul>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	4620      	mov	r0, r4
 800776a:	4629      	mov	r1, r5
 800776c:	f7f8 fdc4 	bl	80002f8 <__aeabi_dsub>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	69f9      	ldr	r1, [r7, #28]
 8007776:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8007780:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007784:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007788:	f7f8 ff6e 	bl	8000668 <__aeabi_dmul>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4620      	mov	r0, r4
 8007792:	4629      	mov	r1, r5
 8007794:	f7f8 fdb0 	bl	80002f8 <__aeabi_dsub>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	69f9      	ldr	r1, [r7, #28]
 800779e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80077a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80077ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80077b0:	f7f8 ff5a 	bl	8000668 <__aeabi_dmul>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4620      	mov	r0, r4
 80077ba:	4629      	mov	r1, r5
 80077bc:	f7f8 fd9c 	bl	80002f8 <__aeabi_dsub>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	69f9      	ldr	r1, [r7, #28]
 80077c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80077d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80077d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80077d8:	f7f8 ff46 	bl	8000668 <__aeabi_dmul>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f8 fd88 	bl	80002f8 <__aeabi_dsub>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	69f9      	ldr	r1, [r7, #28]
 80077ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80077f8:	ec43 2b17 	vmov	d7, r2, r3
};
 80077fc:	eeb0 0a47 	vmov.f32	s0, s14
 8007800:	eef0 0a67 	vmov.f32	s1, s15
 8007804:	3758      	adds	r7, #88	@ 0x58
 8007806:	46bd      	mov	sp, r7
 8007808:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800780c <__NVIC_SetPriority>:
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	6039      	str	r1, [r7, #0]
 8007816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800781c:	2b00      	cmp	r3, #0
 800781e:	db0a      	blt.n	8007836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	b2da      	uxtb	r2, r3
 8007824:	490c      	ldr	r1, [pc, #48]	@ (8007858 <__NVIC_SetPriority+0x4c>)
 8007826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800782a:	0112      	lsls	r2, r2, #4
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	440b      	add	r3, r1
 8007830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007834:	e00a      	b.n	800784c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	b2da      	uxtb	r2, r3
 800783a:	4908      	ldr	r1, [pc, #32]	@ (800785c <__NVIC_SetPriority+0x50>)
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	3b04      	subs	r3, #4
 8007844:	0112      	lsls	r2, r2, #4
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	440b      	add	r3, r1
 800784a:	761a      	strb	r2, [r3, #24]
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	e000e100 	.word	0xe000e100
 800785c:	e000ed00 	.word	0xe000ed00

08007860 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007864:	4b05      	ldr	r3, [pc, #20]	@ (800787c <SysTick_Handler+0x1c>)
 8007866:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007868:	f001 fd40 	bl	80092ec <xTaskGetSchedulerState>
 800786c:	4603      	mov	r3, r0
 800786e:	2b01      	cmp	r3, #1
 8007870:	d001      	beq.n	8007876 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007872:	f002 fb39 	bl	8009ee8 <xPortSysTickHandler>
  }
}
 8007876:	bf00      	nop
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	e000e010 	.word	0xe000e010

08007880 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007884:	2100      	movs	r1, #0
 8007886:	f06f 0004 	mvn.w	r0, #4
 800788a:	f7ff ffbf 	bl	800780c <__NVIC_SetPriority>
#endif
}
 800788e:	bf00      	nop
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800789a:	f3ef 8305 	mrs	r3, IPSR
 800789e:	603b      	str	r3, [r7, #0]
  return(result);
 80078a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80078a6:	f06f 0305 	mvn.w	r3, #5
 80078aa:	607b      	str	r3, [r7, #4]
 80078ac:	e00c      	b.n	80078c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078ae:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <osKernelInitialize+0x44>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d105      	bne.n	80078c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80078b6:	4b08      	ldr	r3, [pc, #32]	@ (80078d8 <osKernelInitialize+0x44>)
 80078b8:	2201      	movs	r2, #1
 80078ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078bc:	2300      	movs	r3, #0
 80078be:	607b      	str	r3, [r7, #4]
 80078c0:	e002      	b.n	80078c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80078c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078c8:	687b      	ldr	r3, [r7, #4]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	20004e98 	.word	0x20004e98

080078dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078e2:	f3ef 8305 	mrs	r3, IPSR
 80078e6:	603b      	str	r3, [r7, #0]
  return(result);
 80078e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80078ee:	f06f 0305 	mvn.w	r3, #5
 80078f2:	607b      	str	r3, [r7, #4]
 80078f4:	e010      	b.n	8007918 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007924 <osKernelStart+0x48>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d109      	bne.n	8007912 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078fe:	f7ff ffbf 	bl	8007880 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007902:	4b08      	ldr	r3, [pc, #32]	@ (8007924 <osKernelStart+0x48>)
 8007904:	2202      	movs	r2, #2
 8007906:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007908:	f001 f87a 	bl	8008a00 <vTaskStartScheduler>
      stat = osOK;
 800790c:	2300      	movs	r3, #0
 800790e:	607b      	str	r3, [r7, #4]
 8007910:	e002      	b.n	8007918 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007912:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007916:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007918:	687b      	ldr	r3, [r7, #4]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20004e98 	.word	0x20004e98

08007928 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007928:	b580      	push	{r7, lr}
 800792a:	b08e      	sub	sp, #56	@ 0x38
 800792c:	af04      	add	r7, sp, #16
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007938:	f3ef 8305 	mrs	r3, IPSR
 800793c:	617b      	str	r3, [r7, #20]
  return(result);
 800793e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007940:	2b00      	cmp	r3, #0
 8007942:	d17e      	bne.n	8007a42 <osThreadNew+0x11a>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d07b      	beq.n	8007a42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800794a:	2380      	movs	r3, #128	@ 0x80
 800794c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800794e:	2318      	movs	r3, #24
 8007950:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007952:	2300      	movs	r3, #0
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007956:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800795a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d045      	beq.n	80079ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <osThreadNew+0x48>
        name = attr->name;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d008      	beq.n	8007996 <osThreadNew+0x6e>
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	2b38      	cmp	r3, #56	@ 0x38
 8007988:	d805      	bhi.n	8007996 <osThreadNew+0x6e>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <osThreadNew+0x72>
        return (NULL);
 8007996:	2300      	movs	r3, #0
 8007998:	e054      	b.n	8007a44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	089b      	lsrs	r3, r3, #2
 80079a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00e      	beq.n	80079d0 <osThreadNew+0xa8>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	2b5b      	cmp	r3, #91	@ 0x5b
 80079b8:	d90a      	bls.n	80079d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d006      	beq.n	80079d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <osThreadNew+0xa8>
        mem = 1;
 80079ca:	2301      	movs	r3, #1
 80079cc:	61bb      	str	r3, [r7, #24]
 80079ce:	e010      	b.n	80079f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10c      	bne.n	80079f2 <osThreadNew+0xca>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d108      	bne.n	80079f2 <osThreadNew+0xca>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d104      	bne.n	80079f2 <osThreadNew+0xca>
          mem = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	e001      	b.n	80079f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d110      	bne.n	8007a1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a00:	9202      	str	r2, [sp, #8]
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	6a3a      	ldr	r2, [r7, #32]
 8007a0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 fe1a 	bl	8008648 <xTaskCreateStatic>
 8007a14:	4603      	mov	r3, r0
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	e013      	b.n	8007a42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d110      	bne.n	8007a42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	f107 0310 	add.w	r3, r7, #16
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 fe68 	bl	8008708 <xTaskCreate>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d001      	beq.n	8007a42 <osThreadNew+0x11a>
            hTask = NULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a42:	693b      	ldr	r3, [r7, #16]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3728      	adds	r7, #40	@ 0x28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a54:	f3ef 8305 	mrs	r3, IPSR
 8007a58:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <osDelay+0x1c>
    stat = osErrorISR;
 8007a60:	f06f 0305 	mvn.w	r3, #5
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	e007      	b.n	8007a78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 ff8e 	bl	8008994 <vTaskDelay>
    }
  }

  return (stat);
 8007a78:	68fb      	ldr	r3, [r7, #12]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4a07      	ldr	r2, [pc, #28]	@ (8007ab0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	4a06      	ldr	r2, [pc, #24]	@ (8007ab4 <vApplicationGetIdleTaskMemory+0x30>)
 8007a9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2280      	movs	r2, #128	@ 0x80
 8007aa0:	601a      	str	r2, [r3, #0]
}
 8007aa2:	bf00      	nop
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	20004e9c 	.word	0x20004e9c
 8007ab4:	20004ef8 	.word	0x20004ef8

08007ab8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4a07      	ldr	r2, [pc, #28]	@ (8007ae4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007ac8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4a06      	ldr	r2, [pc, #24]	@ (8007ae8 <vApplicationGetTimerTaskMemory+0x30>)
 8007ace:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ad6:	601a      	str	r2, [r3, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	200050f8 	.word	0x200050f8
 8007ae8:	20005154 	.word	0x20005154

08007aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f103 0208 	add.w	r2, r3, #8
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f103 0208 	add.w	r2, r3, #8
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f103 0208 	add.w	r2, r3, #8
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b46:	b480      	push	{r7}
 8007b48:	b085      	sub	sp, #20
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	601a      	str	r2, [r3, #0]
}
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b085      	sub	sp, #20
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ba4:	d103      	bne.n	8007bae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e00c      	b.n	8007bc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	e002      	b.n	8007bbc <vListInsert+0x2e>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d2f6      	bcs.n	8007bb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
}
 8007bf4:	bf00      	nop
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6892      	ldr	r2, [r2, #8]
 8007c16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6852      	ldr	r2, [r2, #4]
 8007c20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d103      	bne.n	8007c34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	1e5a      	subs	r2, r3, #1
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10b      	bne.n	8007c80 <xQueueGenericReset+0x2c>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	60bb      	str	r3, [r7, #8]
}
 8007c7a:	bf00      	nop
 8007c7c:	bf00      	nop
 8007c7e:	e7fd      	b.n	8007c7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c80:	f002 f8a2 	bl	8009dc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8c:	68f9      	ldr	r1, [r7, #12]
 8007c8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007c90:	fb01 f303 	mul.w	r3, r1, r3
 8007c94:	441a      	add	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	68f9      	ldr	r1, [r7, #12]
 8007cb4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007cb6:	fb01 f303 	mul.w	r3, r1, r3
 8007cba:	441a      	add	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	22ff      	movs	r2, #255	@ 0xff
 8007cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	22ff      	movs	r2, #255	@ 0xff
 8007ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d114      	bne.n	8007d00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d01a      	beq.n	8007d14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3310      	adds	r3, #16
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 f91a 	bl	8008f1c <xTaskRemoveFromEventList>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d012      	beq.n	8007d14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007cee:	4b0d      	ldr	r3, [pc, #52]	@ (8007d24 <xQueueGenericReset+0xd0>)
 8007cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	e009      	b.n	8007d14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3310      	adds	r3, #16
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff fef1 	bl	8007aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3324      	adds	r3, #36	@ 0x24
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff feec 	bl	8007aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d14:	f002 f88a 	bl	8009e2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d18:	2301      	movs	r3, #1
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	e000ed04 	.word	0xe000ed04

08007d28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b08e      	sub	sp, #56	@ 0x38
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10b      	bne.n	8007d54 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d4e:	bf00      	nop
 8007d50:	bf00      	nop
 8007d52:	e7fd      	b.n	8007d50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10b      	bne.n	8007d72 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	e7fd      	b.n	8007d6e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <xQueueGenericCreateStatic+0x56>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <xQueueGenericCreateStatic+0x5a>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e000      	b.n	8007d84 <xQueueGenericCreateStatic+0x5c>
 8007d82:	2300      	movs	r3, #0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10b      	bne.n	8007da0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	623b      	str	r3, [r7, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	bf00      	nop
 8007d9e:	e7fd      	b.n	8007d9c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d102      	bne.n	8007dac <xQueueGenericCreateStatic+0x84>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <xQueueGenericCreateStatic+0x88>
 8007dac:	2301      	movs	r3, #1
 8007dae:	e000      	b.n	8007db2 <xQueueGenericCreateStatic+0x8a>
 8007db0:	2300      	movs	r3, #0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10b      	bne.n	8007dce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	61fb      	str	r3, [r7, #28]
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	e7fd      	b.n	8007dca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007dce:	2350      	movs	r3, #80	@ 0x50
 8007dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2b50      	cmp	r3, #80	@ 0x50
 8007dd6:	d00b      	beq.n	8007df0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	61bb      	str	r3, [r7, #24]
}
 8007dea:	bf00      	nop
 8007dec:	bf00      	nop
 8007dee:	e7fd      	b.n	8007dec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007df0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00d      	beq.n	8007e18 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e04:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	68b9      	ldr	r1, [r7, #8]
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f805 	bl	8007e22 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3730      	adds	r7, #48	@ 0x30
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
 8007e2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d103      	bne.n	8007e3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	e002      	b.n	8007e44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e50:	2101      	movs	r1, #1
 8007e52:	69b8      	ldr	r0, [r7, #24]
 8007e54:	f7ff fefe 	bl	8007c54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	78fa      	ldrb	r2, [r7, #3]
 8007e5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08e      	sub	sp, #56	@ 0x38
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e76:	2300      	movs	r3, #0
 8007e78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10b      	bne.n	8007e9c <xQueueGenericSend+0x34>
	__asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	e7fd      	b.n	8007e98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d103      	bne.n	8007eaa <xQueueGenericSend+0x42>
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <xQueueGenericSend+0x46>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <xQueueGenericSend+0x48>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10b      	bne.n	8007ecc <xQueueGenericSend+0x64>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	e7fd      	b.n	8007ec8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d103      	bne.n	8007eda <xQueueGenericSend+0x72>
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d101      	bne.n	8007ede <xQueueGenericSend+0x76>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e000      	b.n	8007ee0 <xQueueGenericSend+0x78>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10b      	bne.n	8007efc <xQueueGenericSend+0x94>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	623b      	str	r3, [r7, #32]
}
 8007ef6:	bf00      	nop
 8007ef8:	bf00      	nop
 8007efa:	e7fd      	b.n	8007ef8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007efc:	f001 f9f6 	bl	80092ec <xTaskGetSchedulerState>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d102      	bne.n	8007f0c <xQueueGenericSend+0xa4>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <xQueueGenericSend+0xa8>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e000      	b.n	8007f12 <xQueueGenericSend+0xaa>
 8007f10:	2300      	movs	r3, #0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10b      	bne.n	8007f2e <xQueueGenericSend+0xc6>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	61fb      	str	r3, [r7, #28]
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	e7fd      	b.n	8007f2a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f2e:	f001 ff4b 	bl	8009dc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d302      	bcc.n	8007f44 <xQueueGenericSend+0xdc>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d129      	bne.n	8007f98 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f4a:	f000 fa0f 	bl	800836c <prvCopyDataToQueue>
 8007f4e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d010      	beq.n	8007f7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5a:	3324      	adds	r3, #36	@ 0x24
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 ffdd 	bl	8008f1c <xTaskRemoveFromEventList>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d013      	beq.n	8007f90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f68:	4b3f      	ldr	r3, [pc, #252]	@ (8008068 <xQueueGenericSend+0x200>)
 8007f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	e00a      	b.n	8007f90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f80:	4b39      	ldr	r3, [pc, #228]	@ (8008068 <xQueueGenericSend+0x200>)
 8007f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f90:	f001 ff4c 	bl	8009e2c <vPortExitCritical>
				return pdPASS;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e063      	b.n	8008060 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d103      	bne.n	8007fa6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f9e:	f001 ff45 	bl	8009e2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e05c      	b.n	8008060 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d106      	bne.n	8007fba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fac:	f107 0314 	add.w	r3, r7, #20
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f001 f83f 	bl	8009034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fba:	f001 ff37 	bl	8009e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fbe:	f000 fd87 	bl	8008ad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fc2:	f001 ff01 	bl	8009dc8 <vPortEnterCritical>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fcc:	b25b      	sxtb	r3, r3
 8007fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fd2:	d103      	bne.n	8007fdc <xQueueGenericSend+0x174>
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fe2:	b25b      	sxtb	r3, r3
 8007fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fe8:	d103      	bne.n	8007ff2 <xQueueGenericSend+0x18a>
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ff2:	f001 ff1b 	bl	8009e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ff6:	1d3a      	adds	r2, r7, #4
 8007ff8:	f107 0314 	add.w	r3, r7, #20
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 f82e 	bl	8009060 <xTaskCheckForTimeOut>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d124      	bne.n	8008054 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800800a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800800c:	f000 faa6 	bl	800855c <prvIsQueueFull>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d018      	beq.n	8008048 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	3310      	adds	r3, #16
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4611      	mov	r1, r2
 800801e:	4618      	mov	r0, r3
 8008020:	f000 ff2a 	bl	8008e78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008026:	f000 fa31 	bl	800848c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800802a:	f000 fd5f 	bl	8008aec <xTaskResumeAll>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	f47f af7c 	bne.w	8007f2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008036:	4b0c      	ldr	r3, [pc, #48]	@ (8008068 <xQueueGenericSend+0x200>)
 8008038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	e772      	b.n	8007f2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008048:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800804a:	f000 fa1f 	bl	800848c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800804e:	f000 fd4d 	bl	8008aec <xTaskResumeAll>
 8008052:	e76c      	b.n	8007f2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008056:	f000 fa19 	bl	800848c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800805a:	f000 fd47 	bl	8008aec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800805e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008060:	4618      	mov	r0, r3
 8008062:	3738      	adds	r7, #56	@ 0x38
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	e000ed04 	.word	0xe000ed04

0800806c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b090      	sub	sp, #64	@ 0x40
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10b      	bne.n	800809c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	e7fd      	b.n	8008098 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d103      	bne.n	80080aa <xQueueGenericSendFromISR+0x3e>
 80080a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <xQueueGenericSendFromISR+0x42>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e000      	b.n	80080b0 <xQueueGenericSendFromISR+0x44>
 80080ae:	2300      	movs	r3, #0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10b      	bne.n	80080cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080c6:	bf00      	nop
 80080c8:	bf00      	nop
 80080ca:	e7fd      	b.n	80080c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d103      	bne.n	80080da <xQueueGenericSendFromISR+0x6e>
 80080d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d101      	bne.n	80080de <xQueueGenericSendFromISR+0x72>
 80080da:	2301      	movs	r3, #1
 80080dc:	e000      	b.n	80080e0 <xQueueGenericSendFromISR+0x74>
 80080de:	2300      	movs	r3, #0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10b      	bne.n	80080fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	623b      	str	r3, [r7, #32]
}
 80080f6:	bf00      	nop
 80080f8:	bf00      	nop
 80080fa:	e7fd      	b.n	80080f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080fc:	f001 ff44 	bl	8009f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008100:	f3ef 8211 	mrs	r2, BASEPRI
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	61fa      	str	r2, [r7, #28]
 8008116:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008118:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800811a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800811c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008124:	429a      	cmp	r2, r3
 8008126:	d302      	bcc.n	800812e <xQueueGenericSendFromISR+0xc2>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d12f      	bne.n	800818e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800812e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008130:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008134:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	68b9      	ldr	r1, [r7, #8]
 8008142:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008144:	f000 f912 	bl	800836c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008148:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800814c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008150:	d112      	bne.n	8008178 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008156:	2b00      	cmp	r3, #0
 8008158:	d016      	beq.n	8008188 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800815a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815c:	3324      	adds	r3, #36	@ 0x24
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fedc 	bl	8008f1c <xTaskRemoveFromEventList>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00e      	beq.n	8008188 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00b      	beq.n	8008188 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	e007      	b.n	8008188 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008178:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800817c:	3301      	adds	r3, #1
 800817e:	b2db      	uxtb	r3, r3
 8008180:	b25a      	sxtb	r2, r3
 8008182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008188:	2301      	movs	r3, #1
 800818a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800818c:	e001      	b.n	8008192 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800818e:	2300      	movs	r3, #0
 8008190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008194:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800819c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800819e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3740      	adds	r7, #64	@ 0x40
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08c      	sub	sp, #48	@ 0x30
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081b4:	2300      	movs	r3, #0
 80081b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10b      	bne.n	80081da <xQueueReceive+0x32>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	623b      	str	r3, [r7, #32]
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	e7fd      	b.n	80081d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <xQueueReceive+0x40>
 80081e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <xQueueReceive+0x44>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e000      	b.n	80081ee <xQueueReceive+0x46>
 80081ec:	2300      	movs	r3, #0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10b      	bne.n	800820a <xQueueReceive+0x62>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	61fb      	str	r3, [r7, #28]
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	e7fd      	b.n	8008206 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800820a:	f001 f86f 	bl	80092ec <xTaskGetSchedulerState>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <xQueueReceive+0x72>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <xQueueReceive+0x76>
 800821a:	2301      	movs	r3, #1
 800821c:	e000      	b.n	8008220 <xQueueReceive+0x78>
 800821e:	2300      	movs	r3, #0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10b      	bne.n	800823c <xQueueReceive+0x94>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	61bb      	str	r3, [r7, #24]
}
 8008236:	bf00      	nop
 8008238:	bf00      	nop
 800823a:	e7fd      	b.n	8008238 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800823c:	f001 fdc4 	bl	8009dc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01f      	beq.n	800828c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800824c:	68b9      	ldr	r1, [r7, #8]
 800824e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008250:	f000 f8f6 	bl	8008440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008256:	1e5a      	subs	r2, r3, #1
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800825c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00f      	beq.n	8008284 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008266:	3310      	adds	r3, #16
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fe57 	bl	8008f1c <xTaskRemoveFromEventList>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d007      	beq.n	8008284 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008274:	4b3c      	ldr	r3, [pc, #240]	@ (8008368 <xQueueReceive+0x1c0>)
 8008276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008284:	f001 fdd2 	bl	8009e2c <vPortExitCritical>
				return pdPASS;
 8008288:	2301      	movs	r3, #1
 800828a:	e069      	b.n	8008360 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d103      	bne.n	800829a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008292:	f001 fdcb 	bl	8009e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008296:	2300      	movs	r3, #0
 8008298:	e062      	b.n	8008360 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800829a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d106      	bne.n	80082ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082a0:	f107 0310 	add.w	r3, r7, #16
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fec5 	bl	8009034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082aa:	2301      	movs	r3, #1
 80082ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082ae:	f001 fdbd 	bl	8009e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082b2:	f000 fc0d 	bl	8008ad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082b6:	f001 fd87 	bl	8009dc8 <vPortEnterCritical>
 80082ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082c0:	b25b      	sxtb	r3, r3
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082c6:	d103      	bne.n	80082d0 <xQueueReceive+0x128>
 80082c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082d6:	b25b      	sxtb	r3, r3
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082dc:	d103      	bne.n	80082e6 <xQueueReceive+0x13e>
 80082de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082e6:	f001 fda1 	bl	8009e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082ea:	1d3a      	adds	r2, r7, #4
 80082ec:	f107 0310 	add.w	r3, r7, #16
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 feb4 	bl	8009060 <xTaskCheckForTimeOut>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d123      	bne.n	8008346 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008300:	f000 f916 	bl	8008530 <prvIsQueueEmpty>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d017      	beq.n	800833a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800830a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830c:	3324      	adds	r3, #36	@ 0x24
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	4611      	mov	r1, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fdb0 	bl	8008e78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008318:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800831a:	f000 f8b7 	bl	800848c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800831e:	f000 fbe5 	bl	8008aec <xTaskResumeAll>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d189      	bne.n	800823c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008328:	4b0f      	ldr	r3, [pc, #60]	@ (8008368 <xQueueReceive+0x1c0>)
 800832a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	e780      	b.n	800823c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800833a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800833c:	f000 f8a6 	bl	800848c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008340:	f000 fbd4 	bl	8008aec <xTaskResumeAll>
 8008344:	e77a      	b.n	800823c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008348:	f000 f8a0 	bl	800848c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800834c:	f000 fbce 	bl	8008aec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008352:	f000 f8ed 	bl	8008530 <prvIsQueueEmpty>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	f43f af6f 	beq.w	800823c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800835e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008360:	4618      	mov	r0, r3
 8008362:	3730      	adds	r7, #48	@ 0x30
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	e000ed04 	.word	0xe000ed04

0800836c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10d      	bne.n	80083a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d14d      	bne.n	800842e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	4618      	mov	r0, r3
 8008398:	f000 ffc6 	bl	8009328 <xTaskPriorityDisinherit>
 800839c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	609a      	str	r2, [r3, #8]
 80083a4:	e043      	b.n	800842e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d119      	bne.n	80083e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6858      	ldr	r0, [r3, #4]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b4:	461a      	mov	r2, r3
 80083b6:	68b9      	ldr	r1, [r7, #8]
 80083b8:	f010 f937 	bl	801862a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c4:	441a      	add	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d32b      	bcc.n	800842e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	605a      	str	r2, [r3, #4]
 80083de:	e026      	b.n	800842e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	68d8      	ldr	r0, [r3, #12]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e8:	461a      	mov	r2, r3
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	f010 f91d 	bl	801862a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68da      	ldr	r2, [r3, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f8:	425b      	negs	r3, r3
 80083fa:	441a      	add	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	429a      	cmp	r2, r3
 800840a:	d207      	bcs.n	800841c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008414:	425b      	negs	r3, r3
 8008416:	441a      	add	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d105      	bne.n	800842e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	3b01      	subs	r3, #1
 800842c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008436:	697b      	ldr	r3, [r7, #20]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844e:	2b00      	cmp	r3, #0
 8008450:	d018      	beq.n	8008484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845a:	441a      	add	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	429a      	cmp	r2, r3
 800846a:	d303      	bcc.n	8008474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68d9      	ldr	r1, [r3, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847c:	461a      	mov	r2, r3
 800847e:	6838      	ldr	r0, [r7, #0]
 8008480:	f010 f8d3 	bl	801862a <memcpy>
	}
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008494:	f001 fc98 	bl	8009dc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800849e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084a0:	e011      	b.n	80084c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d012      	beq.n	80084d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3324      	adds	r3, #36	@ 0x24
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fd34 	bl	8008f1c <xTaskRemoveFromEventList>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084ba:	f000 fe35 	bl	8009128 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	dce9      	bgt.n	80084a2 <prvUnlockQueue+0x16>
 80084ce:	e000      	b.n	80084d2 <prvUnlockQueue+0x46>
					break;
 80084d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	22ff      	movs	r2, #255	@ 0xff
 80084d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80084da:	f001 fca7 	bl	8009e2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084de:	f001 fc73 	bl	8009dc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084ea:	e011      	b.n	8008510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d012      	beq.n	800851a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3310      	adds	r3, #16
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fd0f 	bl	8008f1c <xTaskRemoveFromEventList>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008504:	f000 fe10 	bl	8009128 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	3b01      	subs	r3, #1
 800850c:	b2db      	uxtb	r3, r3
 800850e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008514:	2b00      	cmp	r3, #0
 8008516:	dce9      	bgt.n	80084ec <prvUnlockQueue+0x60>
 8008518:	e000      	b.n	800851c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800851a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	22ff      	movs	r2, #255	@ 0xff
 8008520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008524:	f001 fc82 	bl	8009e2c <vPortExitCritical>
}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008538:	f001 fc46 	bl	8009dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008540:	2b00      	cmp	r3, #0
 8008542:	d102      	bne.n	800854a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008544:	2301      	movs	r3, #1
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	e001      	b.n	800854e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800854a:	2300      	movs	r3, #0
 800854c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800854e:	f001 fc6d 	bl	8009e2c <vPortExitCritical>

	return xReturn;
 8008552:	68fb      	ldr	r3, [r7, #12]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008564:	f001 fc30 	bl	8009dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008570:	429a      	cmp	r2, r3
 8008572:	d102      	bne.n	800857a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008574:	2301      	movs	r3, #1
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	e001      	b.n	800857e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800857e:	f001 fc55 	bl	8009e2c <vPortExitCritical>

	return xReturn;
 8008582:	68fb      	ldr	r3, [r7, #12]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008596:	2300      	movs	r3, #0
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	e014      	b.n	80085c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800859c:	4a0f      	ldr	r2, [pc, #60]	@ (80085dc <vQueueAddToRegistry+0x50>)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10b      	bne.n	80085c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085a8:	490c      	ldr	r1, [pc, #48]	@ (80085dc <vQueueAddToRegistry+0x50>)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085b2:	4a0a      	ldr	r2, [pc, #40]	@ (80085dc <vQueueAddToRegistry+0x50>)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	4413      	add	r3, r2
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085be:	e006      	b.n	80085ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	3301      	adds	r3, #1
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b07      	cmp	r3, #7
 80085ca:	d9e7      	bls.n	800859c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	20005554 	.word	0x20005554

080085e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085f0:	f001 fbea 	bl	8009dc8 <vPortEnterCritical>
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085fa:	b25b      	sxtb	r3, r3
 80085fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008600:	d103      	bne.n	800860a <vQueueWaitForMessageRestricted+0x2a>
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008610:	b25b      	sxtb	r3, r3
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008616:	d103      	bne.n	8008620 <vQueueWaitForMessageRestricted+0x40>
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008620:	f001 fc04 	bl	8009e2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008628:	2b00      	cmp	r3, #0
 800862a:	d106      	bne.n	800863a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	3324      	adds	r3, #36	@ 0x24
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	68b9      	ldr	r1, [r7, #8]
 8008634:	4618      	mov	r0, r3
 8008636:	f000 fc45 	bl	8008ec4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800863a:	6978      	ldr	r0, [r7, #20]
 800863c:	f7ff ff26 	bl	800848c <prvUnlockQueue>
	}
 8008640:	bf00      	nop
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08e      	sub	sp, #56	@ 0x38
 800864c:	af04      	add	r7, sp, #16
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10b      	bne.n	8008674 <xTaskCreateStatic+0x2c>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	623b      	str	r3, [r7, #32]
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	e7fd      	b.n	8008670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10b      	bne.n	8008692 <xTaskCreateStatic+0x4a>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	61fb      	str	r3, [r7, #28]
}
 800868c:	bf00      	nop
 800868e:	bf00      	nop
 8008690:	e7fd      	b.n	800868e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008692:	235c      	movs	r3, #92	@ 0x5c
 8008694:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b5c      	cmp	r3, #92	@ 0x5c
 800869a:	d00b      	beq.n	80086b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	61bb      	str	r3, [r7, #24]
}
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
 80086b2:	e7fd      	b.n	80086b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01e      	beq.n	80086fa <xTaskCreateStatic+0xb2>
 80086bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d01b      	beq.n	80086fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086d4:	2300      	movs	r3, #0
 80086d6:	9303      	str	r3, [sp, #12]
 80086d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086da:	9302      	str	r3, [sp, #8]
 80086dc:	f107 0314 	add.w	r3, r7, #20
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	68b9      	ldr	r1, [r7, #8]
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 f850 	bl	8008792 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086f4:	f000 f8de 	bl	80088b4 <prvAddNewTaskToReadyList>
 80086f8:	e001      	b.n	80086fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086fe:	697b      	ldr	r3, [r7, #20]
	}
 8008700:	4618      	mov	r0, r3
 8008702:	3728      	adds	r7, #40	@ 0x28
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08c      	sub	sp, #48	@ 0x30
 800870c:	af04      	add	r7, sp, #16
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	4613      	mov	r3, r2
 8008716:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008718:	88fb      	ldrh	r3, [r7, #6]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4618      	mov	r0, r3
 800871e:	f001 fc75 	bl	800a00c <pvPortMalloc>
 8008722:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00e      	beq.n	8008748 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800872a:	205c      	movs	r0, #92	@ 0x5c
 800872c:	f001 fc6e 	bl	800a00c <pvPortMalloc>
 8008730:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	631a      	str	r2, [r3, #48]	@ 0x30
 800873e:	e005      	b.n	800874c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008740:	6978      	ldr	r0, [r7, #20]
 8008742:	f001 fd31 	bl	800a1a8 <vPortFree>
 8008746:	e001      	b.n	800874c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008748:	2300      	movs	r3, #0
 800874a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d017      	beq.n	8008782 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800875a:	88fa      	ldrh	r2, [r7, #6]
 800875c:	2300      	movs	r3, #0
 800875e:	9303      	str	r3, [sp, #12]
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	9302      	str	r3, [sp, #8]
 8008764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	68b9      	ldr	r1, [r7, #8]
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 f80e 	bl	8008792 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008776:	69f8      	ldr	r0, [r7, #28]
 8008778:	f000 f89c 	bl	80088b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800877c:	2301      	movs	r3, #1
 800877e:	61bb      	str	r3, [r7, #24]
 8008780:	e002      	b.n	8008788 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008782:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008786:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008788:	69bb      	ldr	r3, [r7, #24]
	}
 800878a:	4618      	mov	r0, r3
 800878c:	3720      	adds	r7, #32
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b088      	sub	sp, #32
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	607a      	str	r2, [r7, #4]
 800879e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	461a      	mov	r2, r3
 80087aa:	21a5      	movs	r1, #165	@ 0xa5
 80087ac:	f00f fe74 	bl	8018498 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80087ba:	3b01      	subs	r3, #1
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	f023 0307 	bic.w	r3, r3, #7
 80087c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00b      	beq.n	80087ec <prvInitialiseNewTask+0x5a>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	617b      	str	r3, [r7, #20]
}
 80087e6:	bf00      	nop
 80087e8:	bf00      	nop
 80087ea:	e7fd      	b.n	80087e8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d01f      	beq.n	8008832 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087f2:	2300      	movs	r3, #0
 80087f4:	61fb      	str	r3, [r7, #28]
 80087f6:	e012      	b.n	800881e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	7819      	ldrb	r1, [r3, #0]
 8008800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	4413      	add	r3, r2
 8008806:	3334      	adds	r3, #52	@ 0x34
 8008808:	460a      	mov	r2, r1
 800880a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	4413      	add	r3, r2
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d006      	beq.n	8008826 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	3301      	adds	r3, #1
 800881c:	61fb      	str	r3, [r7, #28]
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	2b0f      	cmp	r3, #15
 8008822:	d9e9      	bls.n	80087f8 <prvInitialiseNewTask+0x66>
 8008824:	e000      	b.n	8008828 <prvInitialiseNewTask+0x96>
			{
				break;
 8008826:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008830:	e003      	b.n	800883a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800883a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883c:	2b37      	cmp	r3, #55	@ 0x37
 800883e:	d901      	bls.n	8008844 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008840:	2337      	movs	r3, #55	@ 0x37
 8008842:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008848:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800884a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800884e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008852:	2200      	movs	r2, #0
 8008854:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008858:	3304      	adds	r3, #4
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff f966 	bl	8007b2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	3318      	adds	r3, #24
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff f961 	bl	8007b2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800886e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008872:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800887e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008882:	2200      	movs	r2, #0
 8008884:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	68f9      	ldr	r1, [r7, #12]
 8008892:	69b8      	ldr	r0, [r7, #24]
 8008894:	f001 f966 	bl	8009b64 <pxPortInitialiseStack>
 8008898:	4602      	mov	r2, r0
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800889e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088aa:	bf00      	nop
 80088ac:	3720      	adds	r7, #32
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088bc:	f001 fa84 	bl	8009dc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088c0:	4b2d      	ldr	r3, [pc, #180]	@ (8008978 <prvAddNewTaskToReadyList+0xc4>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3301      	adds	r3, #1
 80088c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008978 <prvAddNewTaskToReadyList+0xc4>)
 80088c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088ca:	4b2c      	ldr	r3, [pc, #176]	@ (800897c <prvAddNewTaskToReadyList+0xc8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d109      	bne.n	80088e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088d2:	4a2a      	ldr	r2, [pc, #168]	@ (800897c <prvAddNewTaskToReadyList+0xc8>)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088d8:	4b27      	ldr	r3, [pc, #156]	@ (8008978 <prvAddNewTaskToReadyList+0xc4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d110      	bne.n	8008902 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088e0:	f000 fc46 	bl	8009170 <prvInitialiseTaskLists>
 80088e4:	e00d      	b.n	8008902 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088e6:	4b26      	ldr	r3, [pc, #152]	@ (8008980 <prvAddNewTaskToReadyList+0xcc>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088ee:	4b23      	ldr	r3, [pc, #140]	@ (800897c <prvAddNewTaskToReadyList+0xc8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d802      	bhi.n	8008902 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088fc:	4a1f      	ldr	r2, [pc, #124]	@ (800897c <prvAddNewTaskToReadyList+0xc8>)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008902:	4b20      	ldr	r3, [pc, #128]	@ (8008984 <prvAddNewTaskToReadyList+0xd0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	4a1e      	ldr	r2, [pc, #120]	@ (8008984 <prvAddNewTaskToReadyList+0xd0>)
 800890a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800890c:	4b1d      	ldr	r3, [pc, #116]	@ (8008984 <prvAddNewTaskToReadyList+0xd0>)
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008918:	4b1b      	ldr	r3, [pc, #108]	@ (8008988 <prvAddNewTaskToReadyList+0xd4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	429a      	cmp	r2, r3
 800891e:	d903      	bls.n	8008928 <prvAddNewTaskToReadyList+0x74>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008924:	4a18      	ldr	r2, [pc, #96]	@ (8008988 <prvAddNewTaskToReadyList+0xd4>)
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800892c:	4613      	mov	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4a15      	ldr	r2, [pc, #84]	@ (800898c <prvAddNewTaskToReadyList+0xd8>)
 8008936:	441a      	add	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3304      	adds	r3, #4
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f7ff f901 	bl	8007b46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008944:	f001 fa72 	bl	8009e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008948:	4b0d      	ldr	r3, [pc, #52]	@ (8008980 <prvAddNewTaskToReadyList+0xcc>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00e      	beq.n	800896e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008950:	4b0a      	ldr	r3, [pc, #40]	@ (800897c <prvAddNewTaskToReadyList+0xc8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895a:	429a      	cmp	r2, r3
 800895c:	d207      	bcs.n	800896e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800895e:	4b0c      	ldr	r3, [pc, #48]	@ (8008990 <prvAddNewTaskToReadyList+0xdc>)
 8008960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20005a68 	.word	0x20005a68
 800897c:	20005594 	.word	0x20005594
 8008980:	20005a74 	.word	0x20005a74
 8008984:	20005a84 	.word	0x20005a84
 8008988:	20005a70 	.word	0x20005a70
 800898c:	20005598 	.word	0x20005598
 8008990:	e000ed04 	.word	0xe000ed04

08008994 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800899c:	2300      	movs	r3, #0
 800899e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d018      	beq.n	80089d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089a6:	4b14      	ldr	r3, [pc, #80]	@ (80089f8 <vTaskDelay+0x64>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00b      	beq.n	80089c6 <vTaskDelay+0x32>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	60bb      	str	r3, [r7, #8]
}
 80089c0:	bf00      	nop
 80089c2:	bf00      	nop
 80089c4:	e7fd      	b.n	80089c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089c6:	f000 f883 	bl	8008ad0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089ca:	2100      	movs	r1, #0
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fd1b 	bl	8009408 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089d2:	f000 f88b 	bl	8008aec <xTaskResumeAll>
 80089d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d107      	bne.n	80089ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80089de:	4b07      	ldr	r3, [pc, #28]	@ (80089fc <vTaskDelay+0x68>)
 80089e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089ee:	bf00      	nop
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20005a90 	.word	0x20005a90
 80089fc:	e000ed04 	.word	0xe000ed04

08008a00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08a      	sub	sp, #40	@ 0x28
 8008a04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a0e:	463a      	mov	r2, r7
 8008a10:	1d39      	adds	r1, r7, #4
 8008a12:	f107 0308 	add.w	r3, r7, #8
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff f834 	bl	8007a84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	9202      	str	r2, [sp, #8]
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	2300      	movs	r3, #0
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	460a      	mov	r2, r1
 8008a2e:	4922      	ldr	r1, [pc, #136]	@ (8008ab8 <vTaskStartScheduler+0xb8>)
 8008a30:	4822      	ldr	r0, [pc, #136]	@ (8008abc <vTaskStartScheduler+0xbc>)
 8008a32:	f7ff fe09 	bl	8008648 <xTaskCreateStatic>
 8008a36:	4603      	mov	r3, r0
 8008a38:	4a21      	ldr	r2, [pc, #132]	@ (8008ac0 <vTaskStartScheduler+0xc0>)
 8008a3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a3c:	4b20      	ldr	r3, [pc, #128]	@ (8008ac0 <vTaskStartScheduler+0xc0>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a44:	2301      	movs	r3, #1
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	e001      	b.n	8008a4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d102      	bne.n	8008a5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a54:	f000 fd2c 	bl	80094b0 <xTimerCreateTimerTask>
 8008a58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d116      	bne.n	8008a8e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	613b      	str	r3, [r7, #16]
}
 8008a72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a74:	4b13      	ldr	r3, [pc, #76]	@ (8008ac4 <vTaskStartScheduler+0xc4>)
 8008a76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a7c:	4b12      	ldr	r3, [pc, #72]	@ (8008ac8 <vTaskStartScheduler+0xc8>)
 8008a7e:	2201      	movs	r2, #1
 8008a80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a82:	4b12      	ldr	r3, [pc, #72]	@ (8008acc <vTaskStartScheduler+0xcc>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a88:	f001 f8fa 	bl	8009c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a8c:	e00f      	b.n	8008aae <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a94:	d10b      	bne.n	8008aae <vTaskStartScheduler+0xae>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	60fb      	str	r3, [r7, #12]
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	e7fd      	b.n	8008aaa <vTaskStartScheduler+0xaa>
}
 8008aae:	bf00      	nop
 8008ab0:	3718      	adds	r7, #24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	080199fc 	.word	0x080199fc
 8008abc:	08009141 	.word	0x08009141
 8008ac0:	20005a8c 	.word	0x20005a8c
 8008ac4:	20005a88 	.word	0x20005a88
 8008ac8:	20005a74 	.word	0x20005a74
 8008acc:	20005a6c 	.word	0x20005a6c

08008ad0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ad4:	4b04      	ldr	r3, [pc, #16]	@ (8008ae8 <vTaskSuspendAll+0x18>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	4a03      	ldr	r2, [pc, #12]	@ (8008ae8 <vTaskSuspendAll+0x18>)
 8008adc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ade:	bf00      	nop
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	20005a90 	.word	0x20005a90

08008aec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008afa:	4b42      	ldr	r3, [pc, #264]	@ (8008c04 <xTaskResumeAll+0x118>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10b      	bne.n	8008b1a <xTaskResumeAll+0x2e>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	603b      	str	r3, [r7, #0]
}
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop
 8008b18:	e7fd      	b.n	8008b16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b1a:	f001 f955 	bl	8009dc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b1e:	4b39      	ldr	r3, [pc, #228]	@ (8008c04 <xTaskResumeAll+0x118>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	4a37      	ldr	r2, [pc, #220]	@ (8008c04 <xTaskResumeAll+0x118>)
 8008b26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b28:	4b36      	ldr	r3, [pc, #216]	@ (8008c04 <xTaskResumeAll+0x118>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d162      	bne.n	8008bf6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b30:	4b35      	ldr	r3, [pc, #212]	@ (8008c08 <xTaskResumeAll+0x11c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d05e      	beq.n	8008bf6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b38:	e02f      	b.n	8008b9a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b3a:	4b34      	ldr	r3, [pc, #208]	@ (8008c0c <xTaskResumeAll+0x120>)
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3318      	adds	r3, #24
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff f85a 	bl	8007c00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff f855 	bl	8007c00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8008c10 <xTaskResumeAll+0x124>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d903      	bls.n	8008b6a <xTaskResumeAll+0x7e>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b66:	4a2a      	ldr	r2, [pc, #168]	@ (8008c10 <xTaskResumeAll+0x124>)
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6e:	4613      	mov	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4a27      	ldr	r2, [pc, #156]	@ (8008c14 <xTaskResumeAll+0x128>)
 8008b78:	441a      	add	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4610      	mov	r0, r2
 8008b82:	f7fe ffe0 	bl	8007b46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b8a:	4b23      	ldr	r3, [pc, #140]	@ (8008c18 <xTaskResumeAll+0x12c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d302      	bcc.n	8008b9a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008b94:	4b21      	ldr	r3, [pc, #132]	@ (8008c1c <xTaskResumeAll+0x130>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8008c0c <xTaskResumeAll+0x120>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1cb      	bne.n	8008b3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ba8:	f000 fb80 	bl	80092ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bac:	4b1c      	ldr	r3, [pc, #112]	@ (8008c20 <xTaskResumeAll+0x134>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d010      	beq.n	8008bda <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bb8:	f000 f846 	bl	8008c48 <xTaskIncrementTick>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008bc2:	4b16      	ldr	r3, [pc, #88]	@ (8008c1c <xTaskResumeAll+0x130>)
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1f1      	bne.n	8008bb8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008bd4:	4b12      	ldr	r3, [pc, #72]	@ (8008c20 <xTaskResumeAll+0x134>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bda:	4b10      	ldr	r3, [pc, #64]	@ (8008c1c <xTaskResumeAll+0x130>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d009      	beq.n	8008bf6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008be2:	2301      	movs	r3, #1
 8008be4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008be6:	4b0f      	ldr	r3, [pc, #60]	@ (8008c24 <xTaskResumeAll+0x138>)
 8008be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bf6:	f001 f919 	bl	8009e2c <vPortExitCritical>

	return xAlreadyYielded;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	20005a90 	.word	0x20005a90
 8008c08:	20005a68 	.word	0x20005a68
 8008c0c:	20005a28 	.word	0x20005a28
 8008c10:	20005a70 	.word	0x20005a70
 8008c14:	20005598 	.word	0x20005598
 8008c18:	20005594 	.word	0x20005594
 8008c1c:	20005a7c 	.word	0x20005a7c
 8008c20:	20005a78 	.word	0x20005a78
 8008c24:	e000ed04 	.word	0xe000ed04

08008c28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c2e:	4b05      	ldr	r3, [pc, #20]	@ (8008c44 <xTaskGetTickCount+0x1c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c34:	687b      	ldr	r3, [r7, #4]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	20005a6c 	.word	0x20005a6c

08008c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c52:	4b4f      	ldr	r3, [pc, #316]	@ (8008d90 <xTaskIncrementTick+0x148>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f040 8090 	bne.w	8008d7c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8008d94 <xTaskIncrementTick+0x14c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3301      	adds	r3, #1
 8008c62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c64:	4a4b      	ldr	r2, [pc, #300]	@ (8008d94 <xTaskIncrementTick+0x14c>)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d121      	bne.n	8008cb4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c70:	4b49      	ldr	r3, [pc, #292]	@ (8008d98 <xTaskIncrementTick+0x150>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00b      	beq.n	8008c92 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	603b      	str	r3, [r7, #0]
}
 8008c8c:	bf00      	nop
 8008c8e:	bf00      	nop
 8008c90:	e7fd      	b.n	8008c8e <xTaskIncrementTick+0x46>
 8008c92:	4b41      	ldr	r3, [pc, #260]	@ (8008d98 <xTaskIncrementTick+0x150>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	4b40      	ldr	r3, [pc, #256]	@ (8008d9c <xTaskIncrementTick+0x154>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a3e      	ldr	r2, [pc, #248]	@ (8008d98 <xTaskIncrementTick+0x150>)
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	4a3e      	ldr	r2, [pc, #248]	@ (8008d9c <xTaskIncrementTick+0x154>)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8008da0 <xTaskIncrementTick+0x158>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	4a3c      	ldr	r2, [pc, #240]	@ (8008da0 <xTaskIncrementTick+0x158>)
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	f000 fafc 	bl	80092ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8008da4 <xTaskIncrementTick+0x15c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d349      	bcc.n	8008d52 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cbe:	4b36      	ldr	r3, [pc, #216]	@ (8008d98 <xTaskIncrementTick+0x150>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d104      	bne.n	8008cd2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc8:	4b36      	ldr	r3, [pc, #216]	@ (8008da4 <xTaskIncrementTick+0x15c>)
 8008cca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cce:	601a      	str	r2, [r3, #0]
					break;
 8008cd0:	e03f      	b.n	8008d52 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd2:	4b31      	ldr	r3, [pc, #196]	@ (8008d98 <xTaskIncrementTick+0x150>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d203      	bcs.n	8008cf2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cea:	4a2e      	ldr	r2, [pc, #184]	@ (8008da4 <xTaskIncrementTick+0x15c>)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cf0:	e02f      	b.n	8008d52 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe ff82 	bl	8007c00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d004      	beq.n	8008d0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	3318      	adds	r3, #24
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe ff79 	bl	8007c00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d12:	4b25      	ldr	r3, [pc, #148]	@ (8008da8 <xTaskIncrementTick+0x160>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d903      	bls.n	8008d22 <xTaskIncrementTick+0xda>
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1e:	4a22      	ldr	r2, [pc, #136]	@ (8008da8 <xTaskIncrementTick+0x160>)
 8008d20:	6013      	str	r3, [r2, #0]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d26:	4613      	mov	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8008dac <xTaskIncrementTick+0x164>)
 8008d30:	441a      	add	r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	3304      	adds	r3, #4
 8008d36:	4619      	mov	r1, r3
 8008d38:	4610      	mov	r0, r2
 8008d3a:	f7fe ff04 	bl	8007b46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d42:	4b1b      	ldr	r3, [pc, #108]	@ (8008db0 <xTaskIncrementTick+0x168>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d3b8      	bcc.n	8008cbe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d50:	e7b5      	b.n	8008cbe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d52:	4b17      	ldr	r3, [pc, #92]	@ (8008db0 <xTaskIncrementTick+0x168>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d58:	4914      	ldr	r1, [pc, #80]	@ (8008dac <xTaskIncrementTick+0x164>)
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	440b      	add	r3, r1
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d901      	bls.n	8008d6e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d6e:	4b11      	ldr	r3, [pc, #68]	@ (8008db4 <xTaskIncrementTick+0x16c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d007      	beq.n	8008d86 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008d76:	2301      	movs	r3, #1
 8008d78:	617b      	str	r3, [r7, #20]
 8008d7a:	e004      	b.n	8008d86 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8008db8 <xTaskIncrementTick+0x170>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3301      	adds	r3, #1
 8008d82:	4a0d      	ldr	r2, [pc, #52]	@ (8008db8 <xTaskIncrementTick+0x170>)
 8008d84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d86:	697b      	ldr	r3, [r7, #20]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20005a90 	.word	0x20005a90
 8008d94:	20005a6c 	.word	0x20005a6c
 8008d98:	20005a20 	.word	0x20005a20
 8008d9c:	20005a24 	.word	0x20005a24
 8008da0:	20005a80 	.word	0x20005a80
 8008da4:	20005a88 	.word	0x20005a88
 8008da8:	20005a70 	.word	0x20005a70
 8008dac:	20005598 	.word	0x20005598
 8008db0:	20005594 	.word	0x20005594
 8008db4:	20005a7c 	.word	0x20005a7c
 8008db8:	20005a78 	.word	0x20005a78

08008dbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dc2:	4b28      	ldr	r3, [pc, #160]	@ (8008e64 <vTaskSwitchContext+0xa8>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dca:	4b27      	ldr	r3, [pc, #156]	@ (8008e68 <vTaskSwitchContext+0xac>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008dd0:	e042      	b.n	8008e58 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008dd2:	4b25      	ldr	r3, [pc, #148]	@ (8008e68 <vTaskSwitchContext+0xac>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd8:	4b24      	ldr	r3, [pc, #144]	@ (8008e6c <vTaskSwitchContext+0xb0>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	60fb      	str	r3, [r7, #12]
 8008dde:	e011      	b.n	8008e04 <vTaskSwitchContext+0x48>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10b      	bne.n	8008dfe <vTaskSwitchContext+0x42>
	__asm volatile
 8008de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	607b      	str	r3, [r7, #4]
}
 8008df8:	bf00      	nop
 8008dfa:	bf00      	nop
 8008dfc:	e7fd      	b.n	8008dfa <vTaskSwitchContext+0x3e>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	491a      	ldr	r1, [pc, #104]	@ (8008e70 <vTaskSwitchContext+0xb4>)
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	440b      	add	r3, r1
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0e3      	beq.n	8008de0 <vTaskSwitchContext+0x24>
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4a13      	ldr	r2, [pc, #76]	@ (8008e70 <vTaskSwitchContext+0xb4>)
 8008e24:	4413      	add	r3, r2
 8008e26:	60bb      	str	r3, [r7, #8]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	605a      	str	r2, [r3, #4]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	3308      	adds	r3, #8
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d104      	bne.n	8008e48 <vTaskSwitchContext+0x8c>
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	605a      	str	r2, [r3, #4]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	4a09      	ldr	r2, [pc, #36]	@ (8008e74 <vTaskSwitchContext+0xb8>)
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	4a06      	ldr	r2, [pc, #24]	@ (8008e6c <vTaskSwitchContext+0xb0>)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6013      	str	r3, [r2, #0]
}
 8008e58:	bf00      	nop
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	20005a90 	.word	0x20005a90
 8008e68:	20005a7c 	.word	0x20005a7c
 8008e6c:	20005a70 	.word	0x20005a70
 8008e70:	20005598 	.word	0x20005598
 8008e74:	20005594 	.word	0x20005594

08008e78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10b      	bne.n	8008ea0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	60fb      	str	r3, [r7, #12]
}
 8008e9a:	bf00      	nop
 8008e9c:	bf00      	nop
 8008e9e:	e7fd      	b.n	8008e9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ea0:	4b07      	ldr	r3, [pc, #28]	@ (8008ec0 <vTaskPlaceOnEventList+0x48>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3318      	adds	r3, #24
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7fe fe70 	bl	8007b8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008eae:	2101      	movs	r1, #1
 8008eb0:	6838      	ldr	r0, [r7, #0]
 8008eb2:	f000 faa9 	bl	8009408 <prvAddCurrentTaskToDelayedList>
}
 8008eb6:	bf00      	nop
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20005594 	.word	0x20005594

08008ec4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10b      	bne.n	8008eee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	617b      	str	r3, [r7, #20]
}
 8008ee8:	bf00      	nop
 8008eea:	bf00      	nop
 8008eec:	e7fd      	b.n	8008eea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008eee:	4b0a      	ldr	r3, [pc, #40]	@ (8008f18 <vTaskPlaceOnEventListRestricted+0x54>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3318      	adds	r3, #24
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f7fe fe25 	bl	8007b46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d002      	beq.n	8008f08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	68b8      	ldr	r0, [r7, #8]
 8008f0c:	f000 fa7c 	bl	8009408 <prvAddCurrentTaskToDelayedList>
	}
 8008f10:	bf00      	nop
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	20005594 	.word	0x20005594

08008f1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10b      	bne.n	8008f4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	60fb      	str	r3, [r7, #12]
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	e7fd      	b.n	8008f46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	3318      	adds	r3, #24
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe fe56 	bl	8007c00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f54:	4b1d      	ldr	r3, [pc, #116]	@ (8008fcc <xTaskRemoveFromEventList+0xb0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d11d      	bne.n	8008f98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe fe4d 	bl	8007c00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f6a:	4b19      	ldr	r3, [pc, #100]	@ (8008fd0 <xTaskRemoveFromEventList+0xb4>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d903      	bls.n	8008f7a <xTaskRemoveFromEventList+0x5e>
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f76:	4a16      	ldr	r2, [pc, #88]	@ (8008fd0 <xTaskRemoveFromEventList+0xb4>)
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f7e:	4613      	mov	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4a13      	ldr	r2, [pc, #76]	@ (8008fd4 <xTaskRemoveFromEventList+0xb8>)
 8008f88:	441a      	add	r2, r3
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4610      	mov	r0, r2
 8008f92:	f7fe fdd8 	bl	8007b46 <vListInsertEnd>
 8008f96:	e005      	b.n	8008fa4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	3318      	adds	r3, #24
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	480e      	ldr	r0, [pc, #56]	@ (8008fd8 <xTaskRemoveFromEventList+0xbc>)
 8008fa0:	f7fe fdd1 	bl	8007b46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8008fdc <xTaskRemoveFromEventList+0xc0>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d905      	bls.n	8008fbe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8008fe0 <xTaskRemoveFromEventList+0xc4>)
 8008fb8:	2201      	movs	r2, #1
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	e001      	b.n	8008fc2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008fc2:	697b      	ldr	r3, [r7, #20]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20005a90 	.word	0x20005a90
 8008fd0:	20005a70 	.word	0x20005a70
 8008fd4:	20005598 	.word	0x20005598
 8008fd8:	20005a28 	.word	0x20005a28
 8008fdc:	20005594 	.word	0x20005594
 8008fe0:	20005a7c 	.word	0x20005a7c

08008fe4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10b      	bne.n	800900a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	60fb      	str	r3, [r7, #12]
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	e7fd      	b.n	8009006 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800900a:	f000 fedd 	bl	8009dc8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800900e:	4b07      	ldr	r3, [pc, #28]	@ (800902c <vTaskSetTimeOutState+0x48>)
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009016:	4b06      	ldr	r3, [pc, #24]	@ (8009030 <vTaskSetTimeOutState+0x4c>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800901e:	f000 ff05 	bl	8009e2c <vPortExitCritical>
}
 8009022:	bf00      	nop
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20005a80 	.word	0x20005a80
 8009030:	20005a6c 	.word	0x20005a6c

08009034 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800903c:	4b06      	ldr	r3, [pc, #24]	@ (8009058 <vTaskInternalSetTimeOutState+0x24>)
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009044:	4b05      	ldr	r3, [pc, #20]	@ (800905c <vTaskInternalSetTimeOutState+0x28>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	605a      	str	r2, [r3, #4]
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	20005a80 	.word	0x20005a80
 800905c:	20005a6c 	.word	0x20005a6c

08009060 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10b      	bne.n	8009088 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	613b      	str	r3, [r7, #16]
}
 8009082:	bf00      	nop
 8009084:	bf00      	nop
 8009086:	e7fd      	b.n	8009084 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10b      	bne.n	80090a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	60fb      	str	r3, [r7, #12]
}
 80090a0:	bf00      	nop
 80090a2:	bf00      	nop
 80090a4:	e7fd      	b.n	80090a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80090a6:	f000 fe8f 	bl	8009dc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80090aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009120 <xTaskCheckForTimeOut+0xc0>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090c2:	d102      	bne.n	80090ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090c4:	2300      	movs	r3, #0
 80090c6:	61fb      	str	r3, [r7, #28]
 80090c8:	e023      	b.n	8009112 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	4b15      	ldr	r3, [pc, #84]	@ (8009124 <xTaskCheckForTimeOut+0xc4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d007      	beq.n	80090e6 <xTaskCheckForTimeOut+0x86>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d302      	bcc.n	80090e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090e0:	2301      	movs	r3, #1
 80090e2:	61fb      	str	r3, [r7, #28]
 80090e4:	e015      	b.n	8009112 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d20b      	bcs.n	8009108 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff ff99 	bl	8009034 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009102:	2300      	movs	r3, #0
 8009104:	61fb      	str	r3, [r7, #28]
 8009106:	e004      	b.n	8009112 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800910e:	2301      	movs	r3, #1
 8009110:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009112:	f000 fe8b 	bl	8009e2c <vPortExitCritical>

	return xReturn;
 8009116:	69fb      	ldr	r3, [r7, #28]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3720      	adds	r7, #32
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20005a6c 	.word	0x20005a6c
 8009124:	20005a80 	.word	0x20005a80

08009128 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800912c:	4b03      	ldr	r3, [pc, #12]	@ (800913c <vTaskMissedYield+0x14>)
 800912e:	2201      	movs	r2, #1
 8009130:	601a      	str	r2, [r3, #0]
}
 8009132:	bf00      	nop
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	20005a7c 	.word	0x20005a7c

08009140 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009148:	f000 f852 	bl	80091f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800914c:	4b06      	ldr	r3, [pc, #24]	@ (8009168 <prvIdleTask+0x28>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d9f9      	bls.n	8009148 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009154:	4b05      	ldr	r3, [pc, #20]	@ (800916c <prvIdleTask+0x2c>)
 8009156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009164:	e7f0      	b.n	8009148 <prvIdleTask+0x8>
 8009166:	bf00      	nop
 8009168:	20005598 	.word	0x20005598
 800916c:	e000ed04 	.word	0xe000ed04

08009170 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009176:	2300      	movs	r3, #0
 8009178:	607b      	str	r3, [r7, #4]
 800917a:	e00c      	b.n	8009196 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4a12      	ldr	r2, [pc, #72]	@ (80091d0 <prvInitialiseTaskLists+0x60>)
 8009188:	4413      	add	r3, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fcae 	bl	8007aec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3301      	adds	r3, #1
 8009194:	607b      	str	r3, [r7, #4]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b37      	cmp	r3, #55	@ 0x37
 800919a:	d9ef      	bls.n	800917c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800919c:	480d      	ldr	r0, [pc, #52]	@ (80091d4 <prvInitialiseTaskLists+0x64>)
 800919e:	f7fe fca5 	bl	8007aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091a2:	480d      	ldr	r0, [pc, #52]	@ (80091d8 <prvInitialiseTaskLists+0x68>)
 80091a4:	f7fe fca2 	bl	8007aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091a8:	480c      	ldr	r0, [pc, #48]	@ (80091dc <prvInitialiseTaskLists+0x6c>)
 80091aa:	f7fe fc9f 	bl	8007aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091ae:	480c      	ldr	r0, [pc, #48]	@ (80091e0 <prvInitialiseTaskLists+0x70>)
 80091b0:	f7fe fc9c 	bl	8007aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80091b4:	480b      	ldr	r0, [pc, #44]	@ (80091e4 <prvInitialiseTaskLists+0x74>)
 80091b6:	f7fe fc99 	bl	8007aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091ba:	4b0b      	ldr	r3, [pc, #44]	@ (80091e8 <prvInitialiseTaskLists+0x78>)
 80091bc:	4a05      	ldr	r2, [pc, #20]	@ (80091d4 <prvInitialiseTaskLists+0x64>)
 80091be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091c0:	4b0a      	ldr	r3, [pc, #40]	@ (80091ec <prvInitialiseTaskLists+0x7c>)
 80091c2:	4a05      	ldr	r2, [pc, #20]	@ (80091d8 <prvInitialiseTaskLists+0x68>)
 80091c4:	601a      	str	r2, [r3, #0]
}
 80091c6:	bf00      	nop
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20005598 	.word	0x20005598
 80091d4:	200059f8 	.word	0x200059f8
 80091d8:	20005a0c 	.word	0x20005a0c
 80091dc:	20005a28 	.word	0x20005a28
 80091e0:	20005a3c 	.word	0x20005a3c
 80091e4:	20005a54 	.word	0x20005a54
 80091e8:	20005a20 	.word	0x20005a20
 80091ec:	20005a24 	.word	0x20005a24

080091f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091f6:	e019      	b.n	800922c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091f8:	f000 fde6 	bl	8009dc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091fc:	4b10      	ldr	r3, [pc, #64]	@ (8009240 <prvCheckTasksWaitingTermination+0x50>)
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3304      	adds	r3, #4
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe fcf9 	bl	8007c00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800920e:	4b0d      	ldr	r3, [pc, #52]	@ (8009244 <prvCheckTasksWaitingTermination+0x54>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3b01      	subs	r3, #1
 8009214:	4a0b      	ldr	r2, [pc, #44]	@ (8009244 <prvCheckTasksWaitingTermination+0x54>)
 8009216:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009218:	4b0b      	ldr	r3, [pc, #44]	@ (8009248 <prvCheckTasksWaitingTermination+0x58>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3b01      	subs	r3, #1
 800921e:	4a0a      	ldr	r2, [pc, #40]	@ (8009248 <prvCheckTasksWaitingTermination+0x58>)
 8009220:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009222:	f000 fe03 	bl	8009e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f810 	bl	800924c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800922c:	4b06      	ldr	r3, [pc, #24]	@ (8009248 <prvCheckTasksWaitingTermination+0x58>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e1      	bne.n	80091f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	20005a3c 	.word	0x20005a3c
 8009244:	20005a68 	.word	0x20005a68
 8009248:	20005a50 	.word	0x20005a50

0800924c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800925a:	2b00      	cmp	r3, #0
 800925c:	d108      	bne.n	8009270 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009262:	4618      	mov	r0, r3
 8009264:	f000 ffa0 	bl	800a1a8 <vPortFree>
				vPortFree( pxTCB );
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 ff9d 	bl	800a1a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800926e:	e019      	b.n	80092a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009276:	2b01      	cmp	r3, #1
 8009278:	d103      	bne.n	8009282 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 ff94 	bl	800a1a8 <vPortFree>
	}
 8009280:	e010      	b.n	80092a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009288:	2b02      	cmp	r3, #2
 800928a:	d00b      	beq.n	80092a4 <prvDeleteTCB+0x58>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	60fb      	str	r3, [r7, #12]
}
 800929e:	bf00      	nop
 80092a0:	bf00      	nop
 80092a2:	e7fd      	b.n	80092a0 <prvDeleteTCB+0x54>
	}
 80092a4:	bf00      	nop
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092b2:	4b0c      	ldr	r3, [pc, #48]	@ (80092e4 <prvResetNextTaskUnblockTime+0x38>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d104      	bne.n	80092c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80092bc:	4b0a      	ldr	r3, [pc, #40]	@ (80092e8 <prvResetNextTaskUnblockTime+0x3c>)
 80092be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092c4:	e008      	b.n	80092d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092c6:	4b07      	ldr	r3, [pc, #28]	@ (80092e4 <prvResetNextTaskUnblockTime+0x38>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	4a04      	ldr	r2, [pc, #16]	@ (80092e8 <prvResetNextTaskUnblockTime+0x3c>)
 80092d6:	6013      	str	r3, [r2, #0]
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	20005a20 	.word	0x20005a20
 80092e8:	20005a88 	.word	0x20005a88

080092ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009320 <xTaskGetSchedulerState+0x34>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d102      	bne.n	8009300 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092fa:	2301      	movs	r3, #1
 80092fc:	607b      	str	r3, [r7, #4]
 80092fe:	e008      	b.n	8009312 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009300:	4b08      	ldr	r3, [pc, #32]	@ (8009324 <xTaskGetSchedulerState+0x38>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d102      	bne.n	800930e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009308:	2302      	movs	r3, #2
 800930a:	607b      	str	r3, [r7, #4]
 800930c:	e001      	b.n	8009312 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800930e:	2300      	movs	r3, #0
 8009310:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009312:	687b      	ldr	r3, [r7, #4]
	}
 8009314:	4618      	mov	r0, r3
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	20005a74 	.word	0x20005a74
 8009324:	20005a90 	.word	0x20005a90

08009328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009334:	2300      	movs	r3, #0
 8009336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d058      	beq.n	80093f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800933e:	4b2f      	ldr	r3, [pc, #188]	@ (80093fc <xTaskPriorityDisinherit+0xd4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	429a      	cmp	r2, r3
 8009346:	d00b      	beq.n	8009360 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	60fb      	str	r3, [r7, #12]
}
 800935a:	bf00      	nop
 800935c:	bf00      	nop
 800935e:	e7fd      	b.n	800935c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10b      	bne.n	8009380 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	60bb      	str	r3, [r7, #8]
}
 800937a:	bf00      	nop
 800937c:	bf00      	nop
 800937e:	e7fd      	b.n	800937c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009384:	1e5a      	subs	r2, r3, #1
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009392:	429a      	cmp	r2, r3
 8009394:	d02c      	beq.n	80093f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800939a:	2b00      	cmp	r3, #0
 800939c:	d128      	bne.n	80093f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	3304      	adds	r3, #4
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe fc2c 	bl	8007c00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009400 <xTaskPriorityDisinherit+0xd8>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d903      	bls.n	80093d0 <xTaskPriorityDisinherit+0xa8>
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009400 <xTaskPriorityDisinherit+0xd8>)
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d4:	4613      	mov	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4413      	add	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4a09      	ldr	r2, [pc, #36]	@ (8009404 <xTaskPriorityDisinherit+0xdc>)
 80093de:	441a      	add	r2, r3
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	3304      	adds	r3, #4
 80093e4:	4619      	mov	r1, r3
 80093e6:	4610      	mov	r0, r2
 80093e8:	f7fe fbad 	bl	8007b46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093ec:	2301      	movs	r3, #1
 80093ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093f0:	697b      	ldr	r3, [r7, #20]
	}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20005594 	.word	0x20005594
 8009400:	20005a70 	.word	0x20005a70
 8009404:	20005598 	.word	0x20005598

08009408 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009412:	4b21      	ldr	r3, [pc, #132]	@ (8009498 <prvAddCurrentTaskToDelayedList+0x90>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009418:	4b20      	ldr	r3, [pc, #128]	@ (800949c <prvAddCurrentTaskToDelayedList+0x94>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3304      	adds	r3, #4
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe fbee 	bl	8007c00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800942a:	d10a      	bne.n	8009442 <prvAddCurrentTaskToDelayedList+0x3a>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d007      	beq.n	8009442 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009432:	4b1a      	ldr	r3, [pc, #104]	@ (800949c <prvAddCurrentTaskToDelayedList+0x94>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3304      	adds	r3, #4
 8009438:	4619      	mov	r1, r3
 800943a:	4819      	ldr	r0, [pc, #100]	@ (80094a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800943c:	f7fe fb83 	bl	8007b46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009440:	e026      	b.n	8009490 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800944a:	4b14      	ldr	r3, [pc, #80]	@ (800949c <prvAddCurrentTaskToDelayedList+0x94>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	429a      	cmp	r2, r3
 8009458:	d209      	bcs.n	800946e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800945a:	4b12      	ldr	r3, [pc, #72]	@ (80094a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	4b0f      	ldr	r3, [pc, #60]	@ (800949c <prvAddCurrentTaskToDelayedList+0x94>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3304      	adds	r3, #4
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f7fe fb91 	bl	8007b8e <vListInsert>
}
 800946c:	e010      	b.n	8009490 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800946e:	4b0e      	ldr	r3, [pc, #56]	@ (80094a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	4b0a      	ldr	r3, [pc, #40]	@ (800949c <prvAddCurrentTaskToDelayedList+0x94>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3304      	adds	r3, #4
 8009478:	4619      	mov	r1, r3
 800947a:	4610      	mov	r0, r2
 800947c:	f7fe fb87 	bl	8007b8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009480:	4b0a      	ldr	r3, [pc, #40]	@ (80094ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	429a      	cmp	r2, r3
 8009488:	d202      	bcs.n	8009490 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800948a:	4a08      	ldr	r2, [pc, #32]	@ (80094ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	6013      	str	r3, [r2, #0]
}
 8009490:	bf00      	nop
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	20005a6c 	.word	0x20005a6c
 800949c:	20005594 	.word	0x20005594
 80094a0:	20005a54 	.word	0x20005a54
 80094a4:	20005a24 	.word	0x20005a24
 80094a8:	20005a20 	.word	0x20005a20
 80094ac:	20005a88 	.word	0x20005a88

080094b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08a      	sub	sp, #40	@ 0x28
 80094b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094b6:	2300      	movs	r3, #0
 80094b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094ba:	f000 fb13 	bl	8009ae4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094be:	4b1d      	ldr	r3, [pc, #116]	@ (8009534 <xTimerCreateTimerTask+0x84>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d021      	beq.n	800950a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094ce:	1d3a      	adds	r2, r7, #4
 80094d0:	f107 0108 	add.w	r1, r7, #8
 80094d4:	f107 030c 	add.w	r3, r7, #12
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe faed 	bl	8007ab8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	9202      	str	r2, [sp, #8]
 80094e6:	9301      	str	r3, [sp, #4]
 80094e8:	2302      	movs	r3, #2
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	2300      	movs	r3, #0
 80094ee:	460a      	mov	r2, r1
 80094f0:	4911      	ldr	r1, [pc, #68]	@ (8009538 <xTimerCreateTimerTask+0x88>)
 80094f2:	4812      	ldr	r0, [pc, #72]	@ (800953c <xTimerCreateTimerTask+0x8c>)
 80094f4:	f7ff f8a8 	bl	8008648 <xTaskCreateStatic>
 80094f8:	4603      	mov	r3, r0
 80094fa:	4a11      	ldr	r2, [pc, #68]	@ (8009540 <xTimerCreateTimerTask+0x90>)
 80094fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094fe:	4b10      	ldr	r3, [pc, #64]	@ (8009540 <xTimerCreateTimerTask+0x90>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009506:	2301      	movs	r3, #1
 8009508:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10b      	bne.n	8009528 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	613b      	str	r3, [r7, #16]
}
 8009522:	bf00      	nop
 8009524:	bf00      	nop
 8009526:	e7fd      	b.n	8009524 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009528:	697b      	ldr	r3, [r7, #20]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	20005ac4 	.word	0x20005ac4
 8009538:	08019a04 	.word	0x08019a04
 800953c:	0800967d 	.word	0x0800967d
 8009540:	20005ac8 	.word	0x20005ac8

08009544 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b08a      	sub	sp, #40	@ 0x28
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
 8009550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009552:	2300      	movs	r3, #0
 8009554:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10b      	bne.n	8009574 <xTimerGenericCommand+0x30>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	623b      	str	r3, [r7, #32]
}
 800956e:	bf00      	nop
 8009570:	bf00      	nop
 8009572:	e7fd      	b.n	8009570 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009574:	4b19      	ldr	r3, [pc, #100]	@ (80095dc <xTimerGenericCommand+0x98>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d02a      	beq.n	80095d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2b05      	cmp	r3, #5
 800958c:	dc18      	bgt.n	80095c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800958e:	f7ff fead 	bl	80092ec <xTaskGetSchedulerState>
 8009592:	4603      	mov	r3, r0
 8009594:	2b02      	cmp	r3, #2
 8009596:	d109      	bne.n	80095ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009598:	4b10      	ldr	r3, [pc, #64]	@ (80095dc <xTimerGenericCommand+0x98>)
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	f107 0110 	add.w	r1, r7, #16
 80095a0:	2300      	movs	r3, #0
 80095a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095a4:	f7fe fc60 	bl	8007e68 <xQueueGenericSend>
 80095a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80095aa:	e012      	b.n	80095d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095ac:	4b0b      	ldr	r3, [pc, #44]	@ (80095dc <xTimerGenericCommand+0x98>)
 80095ae:	6818      	ldr	r0, [r3, #0]
 80095b0:	f107 0110 	add.w	r1, r7, #16
 80095b4:	2300      	movs	r3, #0
 80095b6:	2200      	movs	r2, #0
 80095b8:	f7fe fc56 	bl	8007e68 <xQueueGenericSend>
 80095bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80095be:	e008      	b.n	80095d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095c0:	4b06      	ldr	r3, [pc, #24]	@ (80095dc <xTimerGenericCommand+0x98>)
 80095c2:	6818      	ldr	r0, [r3, #0]
 80095c4:	f107 0110 	add.w	r1, r7, #16
 80095c8:	2300      	movs	r3, #0
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	f7fe fd4e 	bl	800806c <xQueueGenericSendFromISR>
 80095d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3728      	adds	r7, #40	@ 0x28
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20005ac4 	.word	0x20005ac4

080095e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b088      	sub	sp, #32
 80095e4:	af02      	add	r7, sp, #8
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ea:	4b23      	ldr	r3, [pc, #140]	@ (8009678 <prvProcessExpiredTimer+0x98>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	3304      	adds	r3, #4
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe fb01 	bl	8007c00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d023      	beq.n	8009654 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	699a      	ldr	r2, [r3, #24]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	18d1      	adds	r1, r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	6978      	ldr	r0, [r7, #20]
 800961a:	f000 f8d5 	bl	80097c8 <prvInsertTimerInActiveList>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d020      	beq.n	8009666 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009624:	2300      	movs	r3, #0
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	2300      	movs	r3, #0
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	2100      	movs	r1, #0
 800962e:	6978      	ldr	r0, [r7, #20]
 8009630:	f7ff ff88 	bl	8009544 <xTimerGenericCommand>
 8009634:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d114      	bne.n	8009666 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	60fb      	str	r3, [r7, #12]
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800965a:	f023 0301 	bic.w	r3, r3, #1
 800965e:	b2da      	uxtb	r2, r3
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	6978      	ldr	r0, [r7, #20]
 800966c:	4798      	blx	r3
}
 800966e:	bf00      	nop
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20005abc 	.word	0x20005abc

0800967c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009684:	f107 0308 	add.w	r3, r7, #8
 8009688:	4618      	mov	r0, r3
 800968a:	f000 f859 	bl	8009740 <prvGetNextExpireTime>
 800968e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	4619      	mov	r1, r3
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 f805 	bl	80096a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800969a:	f000 f8d7 	bl	800984c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800969e:	bf00      	nop
 80096a0:	e7f0      	b.n	8009684 <prvTimerTask+0x8>
	...

080096a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096ae:	f7ff fa0f 	bl	8008ad0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096b2:	f107 0308 	add.w	r3, r7, #8
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 f866 	bl	8009788 <prvSampleTimeNow>
 80096bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d130      	bne.n	8009726 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10a      	bne.n	80096e0 <prvProcessTimerOrBlockTask+0x3c>
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d806      	bhi.n	80096e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096d2:	f7ff fa0b 	bl	8008aec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096d6:	68f9      	ldr	r1, [r7, #12]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7ff ff81 	bl	80095e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096de:	e024      	b.n	800972a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d008      	beq.n	80096f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80096e6:	4b13      	ldr	r3, [pc, #76]	@ (8009734 <prvProcessTimerOrBlockTask+0x90>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <prvProcessTimerOrBlockTask+0x50>
 80096f0:	2301      	movs	r3, #1
 80096f2:	e000      	b.n	80096f6 <prvProcessTimerOrBlockTask+0x52>
 80096f4:	2300      	movs	r3, #0
 80096f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009738 <prvProcessTimerOrBlockTask+0x94>)
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	683a      	ldr	r2, [r7, #0]
 8009704:	4619      	mov	r1, r3
 8009706:	f7fe ff6b 	bl	80085e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800970a:	f7ff f9ef 	bl	8008aec <xTaskResumeAll>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009714:	4b09      	ldr	r3, [pc, #36]	@ (800973c <prvProcessTimerOrBlockTask+0x98>)
 8009716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	f3bf 8f6f 	isb	sy
}
 8009724:	e001      	b.n	800972a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009726:	f7ff f9e1 	bl	8008aec <xTaskResumeAll>
}
 800972a:	bf00      	nop
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20005ac0 	.word	0x20005ac0
 8009738:	20005ac4 	.word	0x20005ac4
 800973c:	e000ed04 	.word	0xe000ed04

08009740 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009748:	4b0e      	ldr	r3, [pc, #56]	@ (8009784 <prvGetNextExpireTime+0x44>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <prvGetNextExpireTime+0x16>
 8009752:	2201      	movs	r2, #1
 8009754:	e000      	b.n	8009758 <prvGetNextExpireTime+0x18>
 8009756:	2200      	movs	r2, #0
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d105      	bne.n	8009770 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009764:	4b07      	ldr	r3, [pc, #28]	@ (8009784 <prvGetNextExpireTime+0x44>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60fb      	str	r3, [r7, #12]
 800976e:	e001      	b.n	8009774 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009774:	68fb      	ldr	r3, [r7, #12]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20005abc 	.word	0x20005abc

08009788 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009790:	f7ff fa4a 	bl	8008c28 <xTaskGetTickCount>
 8009794:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009796:	4b0b      	ldr	r3, [pc, #44]	@ (80097c4 <prvSampleTimeNow+0x3c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	429a      	cmp	r2, r3
 800979e:	d205      	bcs.n	80097ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097a0:	f000 f93a 	bl	8009a18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	e002      	b.n	80097b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097b2:	4a04      	ldr	r2, [pc, #16]	@ (80097c4 <prvSampleTimeNow+0x3c>)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097b8:	68fb      	ldr	r3, [r7, #12]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	20005acc 	.word	0x20005acc

080097c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d812      	bhi.n	8009814 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	1ad2      	subs	r2, r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d302      	bcc.n	8009802 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097fc:	2301      	movs	r3, #1
 80097fe:	617b      	str	r3, [r7, #20]
 8009800:	e01b      	b.n	800983a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009802:	4b10      	ldr	r3, [pc, #64]	@ (8009844 <prvInsertTimerInActiveList+0x7c>)
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3304      	adds	r3, #4
 800980a:	4619      	mov	r1, r3
 800980c:	4610      	mov	r0, r2
 800980e:	f7fe f9be 	bl	8007b8e <vListInsert>
 8009812:	e012      	b.n	800983a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	d206      	bcs.n	800982a <prvInsertTimerInActiveList+0x62>
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	429a      	cmp	r2, r3
 8009822:	d302      	bcc.n	800982a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009824:	2301      	movs	r3, #1
 8009826:	617b      	str	r3, [r7, #20]
 8009828:	e007      	b.n	800983a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800982a:	4b07      	ldr	r3, [pc, #28]	@ (8009848 <prvInsertTimerInActiveList+0x80>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	3304      	adds	r3, #4
 8009832:	4619      	mov	r1, r3
 8009834:	4610      	mov	r0, r2
 8009836:	f7fe f9aa 	bl	8007b8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800983a:	697b      	ldr	r3, [r7, #20]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	20005ac0 	.word	0x20005ac0
 8009848:	20005abc 	.word	0x20005abc

0800984c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08e      	sub	sp, #56	@ 0x38
 8009850:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009852:	e0ce      	b.n	80099f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	da19      	bge.n	800988e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800985a:	1d3b      	adds	r3, r7, #4
 800985c:	3304      	adds	r3, #4
 800985e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10b      	bne.n	800987e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	61fb      	str	r3, [r7, #28]
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	e7fd      	b.n	800987a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800987e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009884:	6850      	ldr	r0, [r2, #4]
 8009886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009888:	6892      	ldr	r2, [r2, #8]
 800988a:	4611      	mov	r1, r2
 800988c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	f2c0 80ae 	blt.w	80099f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800989a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d004      	beq.n	80098ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a4:	3304      	adds	r3, #4
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe f9aa 	bl	8007c00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098ac:	463b      	mov	r3, r7
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7ff ff6a 	bl	8009788 <prvSampleTimeNow>
 80098b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b09      	cmp	r3, #9
 80098ba:	f200 8097 	bhi.w	80099ec <prvProcessReceivedCommands+0x1a0>
 80098be:	a201      	add	r2, pc, #4	@ (adr r2, 80098c4 <prvProcessReceivedCommands+0x78>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098ed 	.word	0x080098ed
 80098c8:	080098ed 	.word	0x080098ed
 80098cc:	080098ed 	.word	0x080098ed
 80098d0:	08009963 	.word	0x08009963
 80098d4:	08009977 	.word	0x08009977
 80098d8:	080099c3 	.word	0x080099c3
 80098dc:	080098ed 	.word	0x080098ed
 80098e0:	080098ed 	.word	0x080098ed
 80098e4:	08009963 	.word	0x08009963
 80098e8:	08009977 	.word	0x08009977
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098f2:	f043 0301 	orr.w	r3, r3, #1
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	18d1      	adds	r1, r2, r3
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800990a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800990c:	f7ff ff5c 	bl	80097c8 <prvInsertTimerInActiveList>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d06c      	beq.n	80099f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800991c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800991e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	2b00      	cmp	r3, #0
 800992a:	d061      	beq.n	80099f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	441a      	add	r2, r3
 8009934:	2300      	movs	r3, #0
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	2300      	movs	r3, #0
 800993a:	2100      	movs	r1, #0
 800993c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800993e:	f7ff fe01 	bl	8009544 <xTimerGenericCommand>
 8009942:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d152      	bne.n	80099f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	61bb      	str	r3, [r7, #24]
}
 800995c:	bf00      	nop
 800995e:	bf00      	nop
 8009960:	e7fd      	b.n	800995e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009968:	f023 0301 	bic.w	r3, r3, #1
 800996c:	b2da      	uxtb	r2, r3
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009974:	e03d      	b.n	80099f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800997c:	f043 0301 	orr.w	r3, r3, #1
 8009980:	b2da      	uxtb	r2, r3
 8009982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009984:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800998e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10b      	bne.n	80099ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	617b      	str	r3, [r7, #20]
}
 80099a8:	bf00      	nop
 80099aa:	bf00      	nop
 80099ac:	e7fd      	b.n	80099aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b0:	699a      	ldr	r2, [r3, #24]
 80099b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b4:	18d1      	adds	r1, r2, r3
 80099b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099bc:	f7ff ff04 	bl	80097c8 <prvInsertTimerInActiveList>
					break;
 80099c0:	e017      	b.n	80099f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c8:	f003 0302 	and.w	r3, r3, #2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d103      	bne.n	80099d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80099d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099d2:	f000 fbe9 	bl	800a1a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099d6:	e00c      	b.n	80099f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099de:	f023 0301 	bic.w	r3, r3, #1
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099ea:	e002      	b.n	80099f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80099ec:	bf00      	nop
 80099ee:	e000      	b.n	80099f2 <prvProcessReceivedCommands+0x1a6>
					break;
 80099f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099f2:	4b08      	ldr	r3, [pc, #32]	@ (8009a14 <prvProcessReceivedCommands+0x1c8>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	1d39      	adds	r1, r7, #4
 80099f8:	2200      	movs	r2, #0
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe fbd4 	bl	80081a8 <xQueueReceive>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f47f af26 	bne.w	8009854 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	3730      	adds	r7, #48	@ 0x30
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20005ac4 	.word	0x20005ac4

08009a18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a1e:	e049      	b.n	8009ab4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a20:	4b2e      	ldr	r3, [pc, #184]	@ (8009adc <prvSwitchTimerLists+0xc4>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8009adc <prvSwitchTimerLists+0xc4>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3304      	adds	r3, #4
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe f8e1 	bl	8007c00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d02f      	beq.n	8009ab4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d90e      	bls.n	8009a84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a72:	4b1a      	ldr	r3, [pc, #104]	@ (8009adc <prvSwitchTimerLists+0xc4>)
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f7fe f886 	bl	8007b8e <vListInsert>
 8009a82:	e017      	b.n	8009ab4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a84:	2300      	movs	r3, #0
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f7ff fd58 	bl	8009544 <xTimerGenericCommand>
 8009a94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10b      	bne.n	8009ab4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	603b      	str	r3, [r7, #0]
}
 8009aae:	bf00      	nop
 8009ab0:	bf00      	nop
 8009ab2:	e7fd      	b.n	8009ab0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ab4:	4b09      	ldr	r3, [pc, #36]	@ (8009adc <prvSwitchTimerLists+0xc4>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1b0      	bne.n	8009a20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009abe:	4b07      	ldr	r3, [pc, #28]	@ (8009adc <prvSwitchTimerLists+0xc4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ac4:	4b06      	ldr	r3, [pc, #24]	@ (8009ae0 <prvSwitchTimerLists+0xc8>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a04      	ldr	r2, [pc, #16]	@ (8009adc <prvSwitchTimerLists+0xc4>)
 8009aca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009acc:	4a04      	ldr	r2, [pc, #16]	@ (8009ae0 <prvSwitchTimerLists+0xc8>)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	6013      	str	r3, [r2, #0]
}
 8009ad2:	bf00      	nop
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	20005abc 	.word	0x20005abc
 8009ae0:	20005ac0 	.word	0x20005ac0

08009ae4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009aea:	f000 f96d 	bl	8009dc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009aee:	4b15      	ldr	r3, [pc, #84]	@ (8009b44 <prvCheckForValidListAndQueue+0x60>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d120      	bne.n	8009b38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009af6:	4814      	ldr	r0, [pc, #80]	@ (8009b48 <prvCheckForValidListAndQueue+0x64>)
 8009af8:	f7fd fff8 	bl	8007aec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009afc:	4813      	ldr	r0, [pc, #76]	@ (8009b4c <prvCheckForValidListAndQueue+0x68>)
 8009afe:	f7fd fff5 	bl	8007aec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b02:	4b13      	ldr	r3, [pc, #76]	@ (8009b50 <prvCheckForValidListAndQueue+0x6c>)
 8009b04:	4a10      	ldr	r2, [pc, #64]	@ (8009b48 <prvCheckForValidListAndQueue+0x64>)
 8009b06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b08:	4b12      	ldr	r3, [pc, #72]	@ (8009b54 <prvCheckForValidListAndQueue+0x70>)
 8009b0a:	4a10      	ldr	r2, [pc, #64]	@ (8009b4c <prvCheckForValidListAndQueue+0x68>)
 8009b0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b0e:	2300      	movs	r3, #0
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	4b11      	ldr	r3, [pc, #68]	@ (8009b58 <prvCheckForValidListAndQueue+0x74>)
 8009b14:	4a11      	ldr	r2, [pc, #68]	@ (8009b5c <prvCheckForValidListAndQueue+0x78>)
 8009b16:	2110      	movs	r1, #16
 8009b18:	200a      	movs	r0, #10
 8009b1a:	f7fe f905 	bl	8007d28 <xQueueGenericCreateStatic>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	4a08      	ldr	r2, [pc, #32]	@ (8009b44 <prvCheckForValidListAndQueue+0x60>)
 8009b22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b24:	4b07      	ldr	r3, [pc, #28]	@ (8009b44 <prvCheckForValidListAndQueue+0x60>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b2c:	4b05      	ldr	r3, [pc, #20]	@ (8009b44 <prvCheckForValidListAndQueue+0x60>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	490b      	ldr	r1, [pc, #44]	@ (8009b60 <prvCheckForValidListAndQueue+0x7c>)
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fd2a 	bl	800858c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b38:	f000 f978 	bl	8009e2c <vPortExitCritical>
}
 8009b3c:	bf00      	nop
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20005ac4 	.word	0x20005ac4
 8009b48:	20005a94 	.word	0x20005a94
 8009b4c:	20005aa8 	.word	0x20005aa8
 8009b50:	20005abc 	.word	0x20005abc
 8009b54:	20005ac0 	.word	0x20005ac0
 8009b58:	20005b70 	.word	0x20005b70
 8009b5c:	20005ad0 	.word	0x20005ad0
 8009b60:	08019a0c 	.word	0x08019a0c

08009b64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3b04      	subs	r3, #4
 8009b74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3b04      	subs	r3, #4
 8009b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	f023 0201 	bic.w	r2, r3, #1
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3b04      	subs	r3, #4
 8009b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b94:	4a0c      	ldr	r2, [pc, #48]	@ (8009bc8 <pxPortInitialiseStack+0x64>)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3b14      	subs	r3, #20
 8009b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3b04      	subs	r3, #4
 8009baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f06f 0202 	mvn.w	r2, #2
 8009bb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	3b20      	subs	r3, #32
 8009bb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bba:	68fb      	ldr	r3, [r7, #12]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	08009bcd 	.word	0x08009bcd

08009bcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bd6:	4b13      	ldr	r3, [pc, #76]	@ (8009c24 <prvTaskExitError+0x58>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bde:	d00b      	beq.n	8009bf8 <prvTaskExitError+0x2c>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	60fb      	str	r3, [r7, #12]
}
 8009bf2:	bf00      	nop
 8009bf4:	bf00      	nop
 8009bf6:	e7fd      	b.n	8009bf4 <prvTaskExitError+0x28>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	60bb      	str	r3, [r7, #8]
}
 8009c0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c0c:	bf00      	nop
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0fc      	beq.n	8009c0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	200000a0 	.word	0x200000a0
	...

08009c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c30:	4b07      	ldr	r3, [pc, #28]	@ (8009c50 <pxCurrentTCBConst2>)
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	6808      	ldr	r0, [r1, #0]
 8009c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	f380 8809 	msr	PSP, r0
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f04f 0000 	mov.w	r0, #0
 8009c46:	f380 8811 	msr	BASEPRI, r0
 8009c4a:	4770      	bx	lr
 8009c4c:	f3af 8000 	nop.w

08009c50 <pxCurrentTCBConst2>:
 8009c50:	20005594 	.word	0x20005594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop

08009c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c58:	4808      	ldr	r0, [pc, #32]	@ (8009c7c <prvPortStartFirstTask+0x24>)
 8009c5a:	6800      	ldr	r0, [r0, #0]
 8009c5c:	6800      	ldr	r0, [r0, #0]
 8009c5e:	f380 8808 	msr	MSP, r0
 8009c62:	f04f 0000 	mov.w	r0, #0
 8009c66:	f380 8814 	msr	CONTROL, r0
 8009c6a:	b662      	cpsie	i
 8009c6c:	b661      	cpsie	f
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	df00      	svc	0
 8009c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c7a:	bf00      	nop
 8009c7c:	e000ed08 	.word	0xe000ed08

08009c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c86:	4b47      	ldr	r3, [pc, #284]	@ (8009da4 <xPortStartScheduler+0x124>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a47      	ldr	r2, [pc, #284]	@ (8009da8 <xPortStartScheduler+0x128>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d10b      	bne.n	8009ca8 <xPortStartScheduler+0x28>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	613b      	str	r3, [r7, #16]
}
 8009ca2:	bf00      	nop
 8009ca4:	bf00      	nop
 8009ca6:	e7fd      	b.n	8009ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8009da4 <xPortStartScheduler+0x124>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a3f      	ldr	r2, [pc, #252]	@ (8009dac <xPortStartScheduler+0x12c>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d10b      	bne.n	8009cca <xPortStartScheduler+0x4a>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	60fb      	str	r3, [r7, #12]
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	e7fd      	b.n	8009cc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cca:	4b39      	ldr	r3, [pc, #228]	@ (8009db0 <xPortStartScheduler+0x130>)
 8009ccc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	22ff      	movs	r2, #255	@ 0xff
 8009cda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	4b31      	ldr	r3, [pc, #196]	@ (8009db4 <xPortStartScheduler+0x134>)
 8009cf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cf2:	4b31      	ldr	r3, [pc, #196]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009cf4:	2207      	movs	r2, #7
 8009cf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cf8:	e009      	b.n	8009d0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	4a2d      	ldr	r2, [pc, #180]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d0e:	78fb      	ldrb	r3, [r7, #3]
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d16:	2b80      	cmp	r3, #128	@ 0x80
 8009d18:	d0ef      	beq.n	8009cfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d1a:	4b27      	ldr	r3, [pc, #156]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f1c3 0307 	rsb	r3, r3, #7
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	d00b      	beq.n	8009d3e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	60bb      	str	r3, [r7, #8]
}
 8009d38:	bf00      	nop
 8009d3a:	bf00      	nop
 8009d3c:	e7fd      	b.n	8009d3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	021b      	lsls	r3, r3, #8
 8009d44:	4a1c      	ldr	r2, [pc, #112]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d48:	4b1b      	ldr	r3, [pc, #108]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d50:	4a19      	ldr	r2, [pc, #100]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d5c:	4b17      	ldr	r3, [pc, #92]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a16      	ldr	r2, [pc, #88]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d68:	4b14      	ldr	r3, [pc, #80]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a13      	ldr	r2, [pc, #76]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d74:	f000 f8da 	bl	8009f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d78:	4b11      	ldr	r3, [pc, #68]	@ (8009dc0 <xPortStartScheduler+0x140>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d7e:	f000 f8f9 	bl	8009f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d82:	4b10      	ldr	r3, [pc, #64]	@ (8009dc4 <xPortStartScheduler+0x144>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a0f      	ldr	r2, [pc, #60]	@ (8009dc4 <xPortStartScheduler+0x144>)
 8009d88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009d8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d8e:	f7ff ff63 	bl	8009c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d92:	f7ff f813 	bl	8008dbc <vTaskSwitchContext>
	prvTaskExitError();
 8009d96:	f7ff ff19 	bl	8009bcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	e000ed00 	.word	0xe000ed00
 8009da8:	410fc271 	.word	0x410fc271
 8009dac:	410fc270 	.word	0x410fc270
 8009db0:	e000e400 	.word	0xe000e400
 8009db4:	20005bc0 	.word	0x20005bc0
 8009db8:	20005bc4 	.word	0x20005bc4
 8009dbc:	e000ed20 	.word	0xe000ed20
 8009dc0:	200000a0 	.word	0x200000a0
 8009dc4:	e000ef34 	.word	0xe000ef34

08009dc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	607b      	str	r3, [r7, #4]
}
 8009de0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009de2:	4b10      	ldr	r3, [pc, #64]	@ (8009e24 <vPortEnterCritical+0x5c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3301      	adds	r3, #1
 8009de8:	4a0e      	ldr	r2, [pc, #56]	@ (8009e24 <vPortEnterCritical+0x5c>)
 8009dea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dec:	4b0d      	ldr	r3, [pc, #52]	@ (8009e24 <vPortEnterCritical+0x5c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d110      	bne.n	8009e16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009df4:	4b0c      	ldr	r3, [pc, #48]	@ (8009e28 <vPortEnterCritical+0x60>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00b      	beq.n	8009e16 <vPortEnterCritical+0x4e>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	603b      	str	r3, [r7, #0]
}
 8009e10:	bf00      	nop
 8009e12:	bf00      	nop
 8009e14:	e7fd      	b.n	8009e12 <vPortEnterCritical+0x4a>
	}
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	200000a0 	.word	0x200000a0
 8009e28:	e000ed04 	.word	0xe000ed04

08009e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e32:	4b12      	ldr	r3, [pc, #72]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10b      	bne.n	8009e52 <vPortExitCritical+0x26>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	607b      	str	r3, [r7, #4]
}
 8009e4c:	bf00      	nop
 8009e4e:	bf00      	nop
 8009e50:	e7fd      	b.n	8009e4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e52:	4b0a      	ldr	r3, [pc, #40]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3b01      	subs	r3, #1
 8009e58:	4a08      	ldr	r2, [pc, #32]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e5c:	4b07      	ldr	r3, [pc, #28]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d105      	bne.n	8009e70 <vPortExitCritical+0x44>
 8009e64:	2300      	movs	r3, #0
 8009e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	f383 8811 	msr	BASEPRI, r3
}
 8009e6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	200000a0 	.word	0x200000a0

08009e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e80:	f3ef 8009 	mrs	r0, PSP
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4b15      	ldr	r3, [pc, #84]	@ (8009ee0 <pxCurrentTCBConst>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	f01e 0f10 	tst.w	lr, #16
 8009e90:	bf08      	it	eq
 8009e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9a:	6010      	str	r0, [r2, #0]
 8009e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ea0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ea4:	f380 8811 	msr	BASEPRI, r0
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f7fe ff84 	bl	8008dbc <vTaskSwitchContext>
 8009eb4:	f04f 0000 	mov.w	r0, #0
 8009eb8:	f380 8811 	msr	BASEPRI, r0
 8009ebc:	bc09      	pop	{r0, r3}
 8009ebe:	6819      	ldr	r1, [r3, #0]
 8009ec0:	6808      	ldr	r0, [r1, #0]
 8009ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec6:	f01e 0f10 	tst.w	lr, #16
 8009eca:	bf08      	it	eq
 8009ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ed0:	f380 8809 	msr	PSP, r0
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	f3af 8000 	nop.w

08009ee0 <pxCurrentTCBConst>:
 8009ee0:	20005594 	.word	0x20005594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop

08009ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	607b      	str	r3, [r7, #4]
}
 8009f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f02:	f7fe fea1 	bl	8008c48 <xTaskIncrementTick>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f0c:	4b06      	ldr	r3, [pc, #24]	@ (8009f28 <xPortSysTickHandler+0x40>)
 8009f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	2300      	movs	r3, #0
 8009f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	f383 8811 	msr	BASEPRI, r3
}
 8009f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f20:	bf00      	nop
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	e000ed04 	.word	0xe000ed04

08009f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f30:	4b0b      	ldr	r3, [pc, #44]	@ (8009f60 <vPortSetupTimerInterrupt+0x34>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f36:	4b0b      	ldr	r3, [pc, #44]	@ (8009f64 <vPortSetupTimerInterrupt+0x38>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f68 <vPortSetupTimerInterrupt+0x3c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a0a      	ldr	r2, [pc, #40]	@ (8009f6c <vPortSetupTimerInterrupt+0x40>)
 8009f42:	fba2 2303 	umull	r2, r3, r2, r3
 8009f46:	099b      	lsrs	r3, r3, #6
 8009f48:	4a09      	ldr	r2, [pc, #36]	@ (8009f70 <vPortSetupTimerInterrupt+0x44>)
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f4e:	4b04      	ldr	r3, [pc, #16]	@ (8009f60 <vPortSetupTimerInterrupt+0x34>)
 8009f50:	2207      	movs	r2, #7
 8009f52:	601a      	str	r2, [r3, #0]
}
 8009f54:	bf00      	nop
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	e000e010 	.word	0xe000e010
 8009f64:	e000e018 	.word	0xe000e018
 8009f68:	20000004 	.word	0x20000004
 8009f6c:	10624dd3 	.word	0x10624dd3
 8009f70:	e000e014 	.word	0xe000e014

08009f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009f84 <vPortEnableVFP+0x10>
 8009f78:	6801      	ldr	r1, [r0, #0]
 8009f7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009f7e:	6001      	str	r1, [r0, #0]
 8009f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f82:	bf00      	nop
 8009f84:	e000ed88 	.word	0xe000ed88

08009f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f8e:	f3ef 8305 	mrs	r3, IPSR
 8009f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b0f      	cmp	r3, #15
 8009f98:	d915      	bls.n	8009fc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f9a:	4a18      	ldr	r2, [pc, #96]	@ (8009ffc <vPortValidateInterruptPriority+0x74>)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fa4:	4b16      	ldr	r3, [pc, #88]	@ (800a000 <vPortValidateInterruptPriority+0x78>)
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	7afa      	ldrb	r2, [r7, #11]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d20b      	bcs.n	8009fc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	607b      	str	r3, [r7, #4]
}
 8009fc0:	bf00      	nop
 8009fc2:	bf00      	nop
 8009fc4:	e7fd      	b.n	8009fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fc6:	4b0f      	ldr	r3, [pc, #60]	@ (800a004 <vPortValidateInterruptPriority+0x7c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009fce:	4b0e      	ldr	r3, [pc, #56]	@ (800a008 <vPortValidateInterruptPriority+0x80>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d90b      	bls.n	8009fee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	603b      	str	r3, [r7, #0]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <vPortValidateInterruptPriority+0x62>
	}
 8009fee:	bf00      	nop
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	e000e3f0 	.word	0xe000e3f0
 800a000:	20005bc0 	.word	0x20005bc0
 800a004:	e000ed0c 	.word	0xe000ed0c
 800a008:	20005bc4 	.word	0x20005bc4

0800a00c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08a      	sub	sp, #40	@ 0x28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a014:	2300      	movs	r3, #0
 800a016:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a018:	f7fe fd5a 	bl	8008ad0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a01c:	4b5c      	ldr	r3, [pc, #368]	@ (800a190 <pvPortMalloc+0x184>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a024:	f000 f924 	bl	800a270 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a028:	4b5a      	ldr	r3, [pc, #360]	@ (800a194 <pvPortMalloc+0x188>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4013      	ands	r3, r2
 800a030:	2b00      	cmp	r3, #0
 800a032:	f040 8095 	bne.w	800a160 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d01e      	beq.n	800a07a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a03c:	2208      	movs	r2, #8
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4413      	add	r3, r2
 800a042:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d015      	beq.n	800a07a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f023 0307 	bic.w	r3, r3, #7
 800a054:	3308      	adds	r3, #8
 800a056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f003 0307 	and.w	r3, r3, #7
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00b      	beq.n	800a07a <pvPortMalloc+0x6e>
	__asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	617b      	str	r3, [r7, #20]
}
 800a074:	bf00      	nop
 800a076:	bf00      	nop
 800a078:	e7fd      	b.n	800a076 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d06f      	beq.n	800a160 <pvPortMalloc+0x154>
 800a080:	4b45      	ldr	r3, [pc, #276]	@ (800a198 <pvPortMalloc+0x18c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	429a      	cmp	r2, r3
 800a088:	d86a      	bhi.n	800a160 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a08a:	4b44      	ldr	r3, [pc, #272]	@ (800a19c <pvPortMalloc+0x190>)
 800a08c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a08e:	4b43      	ldr	r3, [pc, #268]	@ (800a19c <pvPortMalloc+0x190>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a094:	e004      	b.n	800a0a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d903      	bls.n	800a0b2 <pvPortMalloc+0xa6>
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f1      	bne.n	800a096 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0b2:	4b37      	ldr	r3, [pc, #220]	@ (800a190 <pvPortMalloc+0x184>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d051      	beq.n	800a160 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2208      	movs	r2, #8
 800a0c2:	4413      	add	r3, r2
 800a0c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	1ad2      	subs	r2, r2, r3
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d920      	bls.n	800a120 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	f003 0307 	and.w	r3, r3, #7
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <pvPortMalloc+0xfc>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	613b      	str	r3, [r7, #16]
}
 800a102:	bf00      	nop
 800a104:	bf00      	nop
 800a106:	e7fd      	b.n	800a104 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	1ad2      	subs	r2, r2, r3
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a11a:	69b8      	ldr	r0, [r7, #24]
 800a11c:	f000 f90a 	bl	800a334 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a120:	4b1d      	ldr	r3, [pc, #116]	@ (800a198 <pvPortMalloc+0x18c>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	4a1b      	ldr	r2, [pc, #108]	@ (800a198 <pvPortMalloc+0x18c>)
 800a12c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a12e:	4b1a      	ldr	r3, [pc, #104]	@ (800a198 <pvPortMalloc+0x18c>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	4b1b      	ldr	r3, [pc, #108]	@ (800a1a0 <pvPortMalloc+0x194>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d203      	bcs.n	800a142 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a13a:	4b17      	ldr	r3, [pc, #92]	@ (800a198 <pvPortMalloc+0x18c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a18      	ldr	r2, [pc, #96]	@ (800a1a0 <pvPortMalloc+0x194>)
 800a140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	4b13      	ldr	r3, [pc, #76]	@ (800a194 <pvPortMalloc+0x188>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	431a      	orrs	r2, r3
 800a14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a156:	4b13      	ldr	r3, [pc, #76]	@ (800a1a4 <pvPortMalloc+0x198>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3301      	adds	r3, #1
 800a15c:	4a11      	ldr	r2, [pc, #68]	@ (800a1a4 <pvPortMalloc+0x198>)
 800a15e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a160:	f7fe fcc4 	bl	8008aec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00b      	beq.n	800a186 <pvPortMalloc+0x17a>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	60fb      	str	r3, [r7, #12]
}
 800a180:	bf00      	nop
 800a182:	bf00      	nop
 800a184:	e7fd      	b.n	800a182 <pvPortMalloc+0x176>
	return pvReturn;
 800a186:	69fb      	ldr	r3, [r7, #28]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3728      	adds	r7, #40	@ 0x28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	200067d0 	.word	0x200067d0
 800a194:	200067e4 	.word	0x200067e4
 800a198:	200067d4 	.word	0x200067d4
 800a19c:	200067c8 	.word	0x200067c8
 800a1a0:	200067d8 	.word	0x200067d8
 800a1a4:	200067dc 	.word	0x200067dc

0800a1a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d04f      	beq.n	800a25a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1ba:	2308      	movs	r3, #8
 800a1bc:	425b      	negs	r3, r3
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	4b25      	ldr	r3, [pc, #148]	@ (800a264 <vPortFree+0xbc>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <vPortFree+0x46>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	60fb      	str	r3, [r7, #12]
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	e7fd      	b.n	800a1ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00b      	beq.n	800a20e <vPortFree+0x66>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	60bb      	str	r3, [r7, #8]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	4b14      	ldr	r3, [pc, #80]	@ (800a264 <vPortFree+0xbc>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4013      	ands	r3, r2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d01e      	beq.n	800a25a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d11a      	bne.n	800a25a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	685a      	ldr	r2, [r3, #4]
 800a228:	4b0e      	ldr	r3, [pc, #56]	@ (800a264 <vPortFree+0xbc>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	43db      	mvns	r3, r3
 800a22e:	401a      	ands	r2, r3
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a234:	f7fe fc4c 	bl	8008ad0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	4b0a      	ldr	r3, [pc, #40]	@ (800a268 <vPortFree+0xc0>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4413      	add	r3, r2
 800a242:	4a09      	ldr	r2, [pc, #36]	@ (800a268 <vPortFree+0xc0>)
 800a244:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a246:	6938      	ldr	r0, [r7, #16]
 800a248:	f000 f874 	bl	800a334 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a24c:	4b07      	ldr	r3, [pc, #28]	@ (800a26c <vPortFree+0xc4>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3301      	adds	r3, #1
 800a252:	4a06      	ldr	r2, [pc, #24]	@ (800a26c <vPortFree+0xc4>)
 800a254:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a256:	f7fe fc49 	bl	8008aec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a25a:	bf00      	nop
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	200067e4 	.word	0x200067e4
 800a268:	200067d4 	.word	0x200067d4
 800a26c:	200067e0 	.word	0x200067e0

0800a270 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a276:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a27a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a27c:	4b27      	ldr	r3, [pc, #156]	@ (800a31c <prvHeapInit+0xac>)
 800a27e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f003 0307 	and.w	r3, r3, #7
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00c      	beq.n	800a2a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3307      	adds	r3, #7
 800a28e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 0307 	bic.w	r3, r3, #7
 800a296:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	4a1f      	ldr	r2, [pc, #124]	@ (800a31c <prvHeapInit+0xac>)
 800a2a0:	4413      	add	r3, r2
 800a2a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a320 <prvHeapInit+0xb0>)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a320 <prvHeapInit+0xb0>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2bc:	2208      	movs	r2, #8
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	1a9b      	subs	r3, r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f023 0307 	bic.w	r3, r3, #7
 800a2ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4a15      	ldr	r2, [pc, #84]	@ (800a324 <prvHeapInit+0xb4>)
 800a2d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2d2:	4b14      	ldr	r3, [pc, #80]	@ (800a324 <prvHeapInit+0xb4>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2da:	4b12      	ldr	r3, [pc, #72]	@ (800a324 <prvHeapInit+0xb4>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	1ad2      	subs	r2, r2, r3
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a324 <prvHeapInit+0xb4>)
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a328 <prvHeapInit+0xb8>)
 800a2fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	4a09      	ldr	r2, [pc, #36]	@ (800a32c <prvHeapInit+0xbc>)
 800a306:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a308:	4b09      	ldr	r3, [pc, #36]	@ (800a330 <prvHeapInit+0xc0>)
 800a30a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a30e:	601a      	str	r2, [r3, #0]
}
 800a310:	bf00      	nop
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	20005bc8 	.word	0x20005bc8
 800a320:	200067c8 	.word	0x200067c8
 800a324:	200067d0 	.word	0x200067d0
 800a328:	200067d8 	.word	0x200067d8
 800a32c:	200067d4 	.word	0x200067d4
 800a330:	200067e4 	.word	0x200067e4

0800a334 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a33c:	4b28      	ldr	r3, [pc, #160]	@ (800a3e0 <prvInsertBlockIntoFreeList+0xac>)
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	e002      	b.n	800a348 <prvInsertBlockIntoFreeList+0x14>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d8f7      	bhi.n	800a342 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	4413      	add	r3, r2
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	429a      	cmp	r2, r3
 800a362:	d108      	bne.n	800a376 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	441a      	add	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	441a      	add	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d118      	bne.n	800a3bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	4b15      	ldr	r3, [pc, #84]	@ (800a3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d00d      	beq.n	800a3b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	441a      	add	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	e008      	b.n	800a3c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	e003      	b.n	800a3c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d002      	beq.n	800a3d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3d2:	bf00      	nop
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	200067c8 	.word	0x200067c8
 800a3e4:	200067d0 	.word	0x200067d0

0800a3e8 <micro_ros_string_utilities_init>:
 800a3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ec:	b086      	sub	sp, #24
 800a3ee:	460f      	mov	r7, r1
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	a801      	add	r0, sp, #4
 800a3f4:	f001 f954 	bl	800b6a0 <rcutils_get_default_allocator>
 800a3f8:	4638      	mov	r0, r7
 800a3fa:	f7f5 ff1b 	bl	8000234 <strlen>
 800a3fe:	f100 0801 	add.w	r8, r0, #1
 800a402:	9b01      	ldr	r3, [sp, #4]
 800a404:	9905      	ldr	r1, [sp, #20]
 800a406:	4605      	mov	r5, r0
 800a408:	4640      	mov	r0, r8
 800a40a:	4798      	blx	r3
 800a40c:	4642      	mov	r2, r8
 800a40e:	4606      	mov	r6, r0
 800a410:	2100      	movs	r1, #0
 800a412:	f00e f841 	bl	8018498 <memset>
 800a416:	462a      	mov	r2, r5
 800a418:	4639      	mov	r1, r7
 800a41a:	4630      	mov	r0, r6
 800a41c:	f00e f905 	bl	801862a <memcpy>
 800a420:	4620      	mov	r0, r4
 800a422:	e9c4 6500 	strd	r6, r5, [r4]
 800a426:	f8c4 8008 	str.w	r8, [r4, #8]
 800a42a:	b006      	add	sp, #24
 800a42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a430 <rcl_get_zero_initialized_init_options>:
 800a430:	2000      	movs	r0, #0
 800a432:	4770      	bx	lr

0800a434 <rcl_init_options_init>:
 800a434:	b084      	sub	sp, #16
 800a436:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a438:	b097      	sub	sp, #92	@ 0x5c
 800a43a:	ae1d      	add	r6, sp, #116	@ 0x74
 800a43c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800a440:	2800      	cmp	r0, #0
 800a442:	d058      	beq.n	800a4f6 <rcl_init_options_init+0xc2>
 800a444:	6803      	ldr	r3, [r0, #0]
 800a446:	4605      	mov	r5, r0
 800a448:	b133      	cbz	r3, 800a458 <rcl_init_options_init+0x24>
 800a44a:	2464      	movs	r4, #100	@ 0x64
 800a44c:	4620      	mov	r0, r4
 800a44e:	b017      	add	sp, #92	@ 0x5c
 800a450:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a454:	b004      	add	sp, #16
 800a456:	4770      	bx	lr
 800a458:	4630      	mov	r0, r6
 800a45a:	f001 f92f 	bl	800b6bc <rcutils_allocator_is_valid>
 800a45e:	2800      	cmp	r0, #0
 800a460:	d049      	beq.n	800a4f6 <rcl_init_options_init+0xc2>
 800a462:	46b4      	mov	ip, r6
 800a464:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a468:	ac11      	add	r4, sp, #68	@ 0x44
 800a46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a46c:	f8dc 3000 	ldr.w	r3, [ip]
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a474:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a476:	2050      	movs	r0, #80	@ 0x50
 800a478:	4798      	blx	r3
 800a47a:	4604      	mov	r4, r0
 800a47c:	6028      	str	r0, [r5, #0]
 800a47e:	2800      	cmp	r0, #0
 800a480:	d03b      	beq.n	800a4fa <rcl_init_options_init+0xc6>
 800a482:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800a486:	4686      	mov	lr, r0
 800a488:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a48c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a490:	f8dc 3000 	ldr.w	r3, [ip]
 800a494:	f8ce 3000 	str.w	r3, [lr]
 800a498:	a802      	add	r0, sp, #8
 800a49a:	f001 f9a1 	bl	800b7e0 <rmw_get_zero_initialized_init_options>
 800a49e:	f10d 0e08 	add.w	lr, sp, #8
 800a4a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a4a6:	f104 0c18 	add.w	ip, r4, #24
 800a4aa:	682f      	ldr	r7, [r5, #0]
 800a4ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a4b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a4b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a4b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a4bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a4c0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a4c4:	ac20      	add	r4, sp, #128	@ 0x80
 800a4c6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a4ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a4ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a4d2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a4d6:	f107 0018 	add.w	r0, r7, #24
 800a4da:	f001 f9af 	bl	800b83c <rmw_init_options_init>
 800a4de:	4604      	mov	r4, r0
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d0b3      	beq.n	800a44c <rcl_init_options_init+0x18>
 800a4e4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a4e6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a4e8:	6828      	ldr	r0, [r5, #0]
 800a4ea:	4798      	blx	r3
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f008 f911 	bl	8012714 <rcl_convert_rmw_ret_to_rcl_ret>
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	e7aa      	b.n	800a44c <rcl_init_options_init+0x18>
 800a4f6:	240b      	movs	r4, #11
 800a4f8:	e7a8      	b.n	800a44c <rcl_init_options_init+0x18>
 800a4fa:	240a      	movs	r4, #10
 800a4fc:	e7a6      	b.n	800a44c <rcl_init_options_init+0x18>
 800a4fe:	bf00      	nop

0800a500 <rcl_init_options_fini>:
 800a500:	b530      	push	{r4, r5, lr}
 800a502:	b087      	sub	sp, #28
 800a504:	b1f0      	cbz	r0, 800a544 <rcl_init_options_fini+0x44>
 800a506:	6803      	ldr	r3, [r0, #0]
 800a508:	4604      	mov	r4, r0
 800a50a:	b1db      	cbz	r3, 800a544 <rcl_init_options_fini+0x44>
 800a50c:	469c      	mov	ip, r3
 800a50e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a512:	f10d 0e04 	add.w	lr, sp, #4
 800a516:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a51a:	f8dc 3000 	ldr.w	r3, [ip]
 800a51e:	f8ce 3000 	str.w	r3, [lr]
 800a522:	a801      	add	r0, sp, #4
 800a524:	f001 f8ca 	bl	800b6bc <rcutils_allocator_is_valid>
 800a528:	b160      	cbz	r0, 800a544 <rcl_init_options_fini+0x44>
 800a52a:	6820      	ldr	r0, [r4, #0]
 800a52c:	3018      	adds	r0, #24
 800a52e:	f001 fa35 	bl	800b99c <rmw_init_options_fini>
 800a532:	4605      	mov	r5, r0
 800a534:	b950      	cbnz	r0, 800a54c <rcl_init_options_fini+0x4c>
 800a536:	6820      	ldr	r0, [r4, #0]
 800a538:	9b02      	ldr	r3, [sp, #8]
 800a53a:	9905      	ldr	r1, [sp, #20]
 800a53c:	4798      	blx	r3
 800a53e:	4628      	mov	r0, r5
 800a540:	b007      	add	sp, #28
 800a542:	bd30      	pop	{r4, r5, pc}
 800a544:	250b      	movs	r5, #11
 800a546:	4628      	mov	r0, r5
 800a548:	b007      	add	sp, #28
 800a54a:	bd30      	pop	{r4, r5, pc}
 800a54c:	f008 f8e2 	bl	8012714 <rcl_convert_rmw_ret_to_rcl_ret>
 800a550:	4605      	mov	r5, r0
 800a552:	e7f8      	b.n	800a546 <rcl_init_options_fini+0x46>

0800a554 <rcl_init_options_copy>:
 800a554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a558:	b094      	sub	sp, #80	@ 0x50
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d058      	beq.n	800a610 <rcl_init_options_copy+0xbc>
 800a55e:	4604      	mov	r4, r0
 800a560:	6800      	ldr	r0, [r0, #0]
 800a562:	2800      	cmp	r0, #0
 800a564:	d054      	beq.n	800a610 <rcl_init_options_copy+0xbc>
 800a566:	460e      	mov	r6, r1
 800a568:	f001 f8a8 	bl	800b6bc <rcutils_allocator_is_valid>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d04f      	beq.n	800a610 <rcl_init_options_copy+0xbc>
 800a570:	2e00      	cmp	r6, #0
 800a572:	d04d      	beq.n	800a610 <rcl_init_options_copy+0xbc>
 800a574:	6833      	ldr	r3, [r6, #0]
 800a576:	b123      	cbz	r3, 800a582 <rcl_init_options_copy+0x2e>
 800a578:	2464      	movs	r4, #100	@ 0x64
 800a57a:	4620      	mov	r0, r4
 800a57c:	b014      	add	sp, #80	@ 0x50
 800a57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a582:	6827      	ldr	r7, [r4, #0]
 800a584:	46bc      	mov	ip, r7
 800a586:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a58a:	ad0f      	add	r5, sp, #60	@ 0x3c
 800a58c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a58e:	f8dc 3000 	ldr.w	r3, [ip]
 800a592:	f8d7 8000 	ldr.w	r8, [r7]
 800a596:	602b      	str	r3, [r5, #0]
 800a598:	4619      	mov	r1, r3
 800a59a:	2050      	movs	r0, #80	@ 0x50
 800a59c:	47c0      	blx	r8
 800a59e:	4605      	mov	r5, r0
 800a5a0:	6030      	str	r0, [r6, #0]
 800a5a2:	b3d0      	cbz	r0, 800a61a <rcl_init_options_copy+0xc6>
 800a5a4:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800a5a8:	4686      	mov	lr, r0
 800a5aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a5ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a5b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a5b6:	f8ce 3000 	str.w	r3, [lr]
 800a5ba:	4668      	mov	r0, sp
 800a5bc:	f001 f910 	bl	800b7e0 <rmw_get_zero_initialized_init_options>
 800a5c0:	46ee      	mov	lr, sp
 800a5c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a5c6:	f105 0c18 	add.w	ip, r5, #24
 800a5ca:	6824      	ldr	r4, [r4, #0]
 800a5cc:	6835      	ldr	r5, [r6, #0]
 800a5ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a5d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a5d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a5da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a5de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a5e2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a5e6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a5ea:	f104 0018 	add.w	r0, r4, #24
 800a5ee:	f105 0118 	add.w	r1, r5, #24
 800a5f2:	f001 f98b 	bl	800b90c <rmw_init_options_copy>
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d0be      	beq.n	800a57a <rcl_init_options_copy+0x26>
 800a5fc:	f001 f86c 	bl	800b6d8 <rcutils_get_error_string>
 800a600:	f001 f882 	bl	800b708 <rcutils_reset_error>
 800a604:	4630      	mov	r0, r6
 800a606:	f7ff ff7b 	bl	800a500 <rcl_init_options_fini>
 800a60a:	b140      	cbz	r0, 800a61e <rcl_init_options_copy+0xca>
 800a60c:	4604      	mov	r4, r0
 800a60e:	e7b4      	b.n	800a57a <rcl_init_options_copy+0x26>
 800a610:	240b      	movs	r4, #11
 800a612:	4620      	mov	r0, r4
 800a614:	b014      	add	sp, #80	@ 0x50
 800a616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61a:	240a      	movs	r4, #10
 800a61c:	e7ad      	b.n	800a57a <rcl_init_options_copy+0x26>
 800a61e:	4620      	mov	r0, r4
 800a620:	b014      	add	sp, #80	@ 0x50
 800a622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a626:	f008 b875 	b.w	8012714 <rcl_convert_rmw_ret_to_rcl_ret>
 800a62a:	bf00      	nop

0800a62c <rcl_init_options_set_domain_id>:
 800a62c:	b120      	cbz	r0, 800a638 <rcl_init_options_set_domain_id+0xc>
 800a62e:	6803      	ldr	r3, [r0, #0]
 800a630:	b113      	cbz	r3, 800a638 <rcl_init_options_set_domain_id+0xc>
 800a632:	6259      	str	r1, [r3, #36]	@ 0x24
 800a634:	2000      	movs	r0, #0
 800a636:	4770      	bx	lr
 800a638:	200b      	movs	r0, #11
 800a63a:	4770      	bx	lr

0800a63c <rcl_get_zero_initialized_publisher>:
 800a63c:	4b01      	ldr	r3, [pc, #4]	@ (800a644 <rcl_get_zero_initialized_publisher+0x8>)
 800a63e:	6818      	ldr	r0, [r3, #0]
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	08019a94 	.word	0x08019a94

0800a648 <rcl_publisher_init>:
 800a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	b088      	sub	sp, #32
 800a64e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a650:	2d00      	cmp	r5, #0
 800a652:	d069      	beq.n	800a728 <rcl_publisher_init+0xe0>
 800a654:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a658:	4604      	mov	r4, r0
 800a65a:	4648      	mov	r0, r9
 800a65c:	460e      	mov	r6, r1
 800a65e:	4690      	mov	r8, r2
 800a660:	461f      	mov	r7, r3
 800a662:	f001 f82b 	bl	800b6bc <rcutils_allocator_is_valid>
 800a666:	2800      	cmp	r0, #0
 800a668:	d05e      	beq.n	800a728 <rcl_publisher_init+0xe0>
 800a66a:	2c00      	cmp	r4, #0
 800a66c:	d05c      	beq.n	800a728 <rcl_publisher_init+0xe0>
 800a66e:	f8d4 a000 	ldr.w	sl, [r4]
 800a672:	f1ba 0f00 	cmp.w	sl, #0
 800a676:	d004      	beq.n	800a682 <rcl_publisher_init+0x3a>
 800a678:	2764      	movs	r7, #100	@ 0x64
 800a67a:	4638      	mov	r0, r7
 800a67c:	b008      	add	sp, #32
 800a67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a682:	4630      	mov	r0, r6
 800a684:	f008 fb40 	bl	8012d08 <rcl_node_is_valid>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d052      	beq.n	800a732 <rcl_publisher_init+0xea>
 800a68c:	f1b8 0f00 	cmp.w	r8, #0
 800a690:	d04a      	beq.n	800a728 <rcl_publisher_init+0xe0>
 800a692:	2f00      	cmp	r7, #0
 800a694:	d048      	beq.n	800a728 <rcl_publisher_init+0xe0>
 800a696:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a69a:	aa07      	add	r2, sp, #28
 800a69c:	9205      	str	r2, [sp, #20]
 800a69e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a6a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a6aa:	f8cd a01c 	str.w	sl, [sp, #28]
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f008 fb7b 	bl	8012db0 <rcl_node_resolve_name>
 800a6ba:	4607      	mov	r7, r0
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d14f      	bne.n	800a760 <rcl_publisher_init+0x118>
 800a6c0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a6c2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a6c4:	20c8      	movs	r0, #200	@ 0xc8
 800a6c6:	4798      	blx	r3
 800a6c8:	6020      	str	r0, [r4, #0]
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d04e      	beq.n	800a76c <rcl_publisher_init+0x124>
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f008 fb3c 	bl	8012d4c <rcl_node_get_rmw_handle>
 800a6d4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	9a07      	ldr	r2, [sp, #28]
 800a6dc:	6827      	ldr	r7, [r4, #0]
 800a6de:	462b      	mov	r3, r5
 800a6e0:	4641      	mov	r1, r8
 800a6e2:	f001 fc83 	bl	800bfec <rmw_create_publisher>
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a6ec:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a6f0:	b370      	cbz	r0, 800a750 <rcl_publisher_init+0x108>
 800a6f2:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a6f6:	f001 fd57 	bl	800c1a8 <rmw_publisher_get_actual_qos>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	4607      	mov	r7, r0
 800a6fe:	b9d0      	cbnz	r0, 800a736 <rcl_publisher_init+0xee>
 800a700:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a704:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a708:	4629      	mov	r1, r5
 800a70a:	2270      	movs	r2, #112	@ 0x70
 800a70c:	4618      	mov	r0, r3
 800a70e:	f00d ff8c 	bl	801862a <memcpy>
 800a712:	6832      	ldr	r2, [r6, #0]
 800a714:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a718:	9807      	ldr	r0, [sp, #28]
 800a71a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a71c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a71e:	4798      	blx	r3
 800a720:	4638      	mov	r0, r7
 800a722:	b008      	add	sp, #32
 800a724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a728:	270b      	movs	r7, #11
 800a72a:	4638      	mov	r0, r7
 800a72c:	b008      	add	sp, #32
 800a72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a732:	27c8      	movs	r7, #200	@ 0xc8
 800a734:	e7a1      	b.n	800a67a <rcl_publisher_init+0x32>
 800a736:	b18b      	cbz	r3, 800a75c <rcl_publisher_init+0x114>
 800a738:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a73c:	b142      	cbz	r2, 800a750 <rcl_publisher_init+0x108>
 800a73e:	4630      	mov	r0, r6
 800a740:	f008 fb04 	bl	8012d4c <rcl_node_get_rmw_handle>
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a74a:	f001 fd3d 	bl	800c1c8 <rmw_destroy_publisher>
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a752:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a754:	4618      	mov	r0, r3
 800a756:	4790      	blx	r2
 800a758:	2300      	movs	r3, #0
 800a75a:	6023      	str	r3, [r4, #0]
 800a75c:	2701      	movs	r7, #1
 800a75e:	e7db      	b.n	800a718 <rcl_publisher_init+0xd0>
 800a760:	2867      	cmp	r0, #103	@ 0x67
 800a762:	d0d9      	beq.n	800a718 <rcl_publisher_init+0xd0>
 800a764:	2869      	cmp	r0, #105	@ 0x69
 800a766:	d003      	beq.n	800a770 <rcl_publisher_init+0x128>
 800a768:	280a      	cmp	r0, #10
 800a76a:	d1f7      	bne.n	800a75c <rcl_publisher_init+0x114>
 800a76c:	270a      	movs	r7, #10
 800a76e:	e7d3      	b.n	800a718 <rcl_publisher_init+0xd0>
 800a770:	2767      	movs	r7, #103	@ 0x67
 800a772:	e7d1      	b.n	800a718 <rcl_publisher_init+0xd0>

0800a774 <rcl_publisher_get_default_options>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	4d14      	ldr	r5, [pc, #80]	@ (800a7c8 <rcl_publisher_get_default_options+0x54>)
 800a778:	4914      	ldr	r1, [pc, #80]	@ (800a7cc <rcl_publisher_get_default_options+0x58>)
 800a77a:	b088      	sub	sp, #32
 800a77c:	4604      	mov	r4, r0
 800a77e:	2250      	movs	r2, #80	@ 0x50
 800a780:	4628      	mov	r0, r5
 800a782:	f00d ff52 	bl	801862a <memcpy>
 800a786:	a802      	add	r0, sp, #8
 800a788:	f000 ff8a 	bl	800b6a0 <rcutils_get_default_allocator>
 800a78c:	f10d 0c08 	add.w	ip, sp, #8
 800a790:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a794:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a798:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a79c:	466e      	mov	r6, sp
 800a79e:	f8dc 3000 	ldr.w	r3, [ip]
 800a7a2:	f8ce 3000 	str.w	r3, [lr]
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f001 f82a 	bl	800b800 <rmw_get_default_publisher_options>
 800a7ac:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a7b0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a7b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a7b8:	2270      	movs	r2, #112	@ 0x70
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f00d ff34 	bl	801862a <memcpy>
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	b008      	add	sp, #32
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
 800a7c8:	200067e8 	.word	0x200067e8
 800a7cc:	08019a98 	.word	0x08019a98

0800a7d0 <rcl_publish>:
 800a7d0:	b1f8      	cbz	r0, 800a812 <rcl_publish+0x42>
 800a7d2:	6803      	ldr	r3, [r0, #0]
 800a7d4:	b570      	push	{r4, r5, r6, lr}
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	b1b3      	cbz	r3, 800a808 <rcl_publish+0x38>
 800a7da:	4616      	mov	r6, r2
 800a7dc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a7e0:	b192      	cbz	r2, 800a808 <rcl_publish+0x38>
 800a7e2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a7e6:	460d      	mov	r5, r1
 800a7e8:	f007 ffb2 	bl	8012750 <rcl_context_is_valid>
 800a7ec:	b160      	cbz	r0, 800a808 <rcl_publish+0x38>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a7f4:	b140      	cbz	r0, 800a808 <rcl_publish+0x38>
 800a7f6:	b155      	cbz	r5, 800a80e <rcl_publish+0x3e>
 800a7f8:	4632      	mov	r2, r6
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	f001 fb96 	bl	800bf2c <rmw_publish>
 800a800:	3800      	subs	r0, #0
 800a802:	bf18      	it	ne
 800a804:	2001      	movne	r0, #1
 800a806:	bd70      	pop	{r4, r5, r6, pc}
 800a808:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a80c:	bd70      	pop	{r4, r5, r6, pc}
 800a80e:	200b      	movs	r0, #11
 800a810:	bd70      	pop	{r4, r5, r6, pc}
 800a812:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a816:	4770      	bx	lr

0800a818 <rcl_publisher_is_valid>:
 800a818:	b1a0      	cbz	r0, 800a844 <rcl_publisher_is_valid+0x2c>
 800a81a:	6803      	ldr	r3, [r0, #0]
 800a81c:	b510      	push	{r4, lr}
 800a81e:	4604      	mov	r4, r0
 800a820:	b173      	cbz	r3, 800a840 <rcl_publisher_is_valid+0x28>
 800a822:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a826:	b15a      	cbz	r2, 800a840 <rcl_publisher_is_valid+0x28>
 800a828:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a82c:	f007 ff90 	bl	8012750 <rcl_context_is_valid>
 800a830:	b130      	cbz	r0, 800a840 <rcl_publisher_is_valid+0x28>
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a838:	3800      	subs	r0, #0
 800a83a:	bf18      	it	ne
 800a83c:	2001      	movne	r0, #1
 800a83e:	bd10      	pop	{r4, pc}
 800a840:	2000      	movs	r0, #0
 800a842:	bd10      	pop	{r4, pc}
 800a844:	2000      	movs	r0, #0
 800a846:	4770      	bx	lr

0800a848 <rcl_publisher_is_valid_except_context>:
 800a848:	b130      	cbz	r0, 800a858 <rcl_publisher_is_valid_except_context+0x10>
 800a84a:	6800      	ldr	r0, [r0, #0]
 800a84c:	b120      	cbz	r0, 800a858 <rcl_publisher_is_valid_except_context+0x10>
 800a84e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a852:	3800      	subs	r0, #0
 800a854:	bf18      	it	ne
 800a856:	2001      	movne	r0, #1
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop

0800a85c <_rclc_check_for_new_data>:
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d046      	beq.n	800a8ee <_rclc_check_for_new_data+0x92>
 800a860:	b510      	push	{r4, lr}
 800a862:	7802      	ldrb	r2, [r0, #0]
 800a864:	b084      	sub	sp, #16
 800a866:	4603      	mov	r3, r0
 800a868:	2a0a      	cmp	r2, #10
 800a86a:	d842      	bhi.n	800a8f2 <_rclc_check_for_new_data+0x96>
 800a86c:	e8df f002 	tbb	[pc, r2]
 800a870:	14181212 	.word	0x14181212
 800a874:	06060614 	.word	0x06060614
 800a878:	2e1a      	.short	0x2e1a
 800a87a:	16          	.byte	0x16
 800a87b:	00          	.byte	0x00
 800a87c:	6a0a      	ldr	r2, [r1, #32]
 800a87e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a880:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a884:	2000      	movs	r0, #0
 800a886:	1a12      	subs	r2, r2, r0
 800a888:	bf18      	it	ne
 800a88a:	2201      	movne	r2, #1
 800a88c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a890:	b004      	add	sp, #16
 800a892:	bd10      	pop	{r4, pc}
 800a894:	680a      	ldr	r2, [r1, #0]
 800a896:	e7f2      	b.n	800a87e <_rclc_check_for_new_data+0x22>
 800a898:	698a      	ldr	r2, [r1, #24]
 800a89a:	e7f0      	b.n	800a87e <_rclc_check_for_new_data+0x22>
 800a89c:	688a      	ldr	r2, [r1, #8]
 800a89e:	e7ee      	b.n	800a87e <_rclc_check_for_new_data+0x22>
 800a8a0:	690a      	ldr	r2, [r1, #16]
 800a8a2:	e7ec      	b.n	800a87e <_rclc_check_for_new_data+0x22>
 800a8a4:	685c      	ldr	r4, [r3, #4]
 800a8a6:	4608      	mov	r0, r1
 800a8a8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a8ac:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a8b0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a8b4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a8be:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a8c2:	f104 0110 	add.w	r1, r4, #16
 800a8c6:	f00a f86f 	bl	80149a8 <rcl_action_client_wait_set_get_entities_ready>
 800a8ca:	e7e1      	b.n	800a890 <_rclc_check_for_new_data+0x34>
 800a8cc:	685c      	ldr	r4, [r3, #4]
 800a8ce:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a8d2:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a8d6:	e9cd 3200 	strd	r3, r2, [sp]
 800a8da:	4608      	mov	r0, r1
 800a8dc:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a8e0:	f104 0220 	add.w	r2, r4, #32
 800a8e4:	f104 0110 	add.w	r1, r4, #16
 800a8e8:	f00a fa76 	bl	8014dd8 <rcl_action_server_wait_set_get_entities_ready>
 800a8ec:	e7d0      	b.n	800a890 <_rclc_check_for_new_data+0x34>
 800a8ee:	200b      	movs	r0, #11
 800a8f0:	4770      	bx	lr
 800a8f2:	2001      	movs	r0, #1
 800a8f4:	e7cc      	b.n	800a890 <_rclc_check_for_new_data+0x34>
 800a8f6:	bf00      	nop

0800a8f8 <_rclc_take_new_data>:
 800a8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8fa:	b09b      	sub	sp, #108	@ 0x6c
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	f000 8088 	beq.w	800aa12 <_rclc_take_new_data+0x11a>
 800a902:	7803      	ldrb	r3, [r0, #0]
 800a904:	4604      	mov	r4, r0
 800a906:	2b0a      	cmp	r3, #10
 800a908:	f200 8167 	bhi.w	800abda <_rclc_take_new_data+0x2e2>
 800a90c:	e8df f003 	tbb	[pc, r3]
 800a910:	44152d2d 	.word	0x44152d2d
 800a914:	19191944 	.word	0x19191944
 800a918:	065a      	.short	0x065a
 800a91a:	15          	.byte	0x15
 800a91b:	00          	.byte	0x00
 800a91c:	6840      	ldr	r0, [r0, #4]
 800a91e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a922:	2b00      	cmp	r3, #0
 800a924:	f040 80b2 	bne.w	800aa8c <_rclc_take_new_data+0x194>
 800a928:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f040 80e4 	bne.w	800aafa <_rclc_take_new_data+0x202>
 800a932:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a936:	2b00      	cmp	r3, #0
 800a938:	d16f      	bne.n	800aa1a <_rclc_take_new_data+0x122>
 800a93a:	2500      	movs	r5, #0
 800a93c:	4628      	mov	r0, r5
 800a93e:	b01b      	add	sp, #108	@ 0x6c
 800a940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a942:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a944:	6a0b      	ldr	r3, [r1, #32]
 800a946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0f5      	beq.n	800a93a <_rclc_take_new_data+0x42>
 800a94e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a952:	f104 0110 	add.w	r1, r4, #16
 800a956:	f008 fbd5 	bl	8013104 <rcl_take_request>
 800a95a:	4605      	mov	r5, r0
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d0ec      	beq.n	800a93a <_rclc_take_new_data+0x42>
 800a960:	f240 2359 	movw	r3, #601	@ 0x259
 800a964:	4298      	cmp	r0, r3
 800a966:	d013      	beq.n	800a990 <_rclc_take_new_data+0x98>
 800a968:	e029      	b.n	800a9be <_rclc_take_new_data+0xc6>
 800a96a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a96c:	680b      	ldr	r3, [r1, #0]
 800a96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0e1      	beq.n	800a93a <_rclc_take_new_data+0x42>
 800a976:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a97a:	2300      	movs	r3, #0
 800a97c:	aa0a      	add	r2, sp, #40	@ 0x28
 800a97e:	f008 fc23 	bl	80131c8 <rcl_take>
 800a982:	4605      	mov	r5, r0
 800a984:	2800      	cmp	r0, #0
 800a986:	d0d9      	beq.n	800a93c <_rclc_take_new_data+0x44>
 800a988:	f240 1391 	movw	r3, #401	@ 0x191
 800a98c:	4298      	cmp	r0, r3
 800a98e:	d116      	bne.n	800a9be <_rclc_take_new_data+0xc6>
 800a990:	2300      	movs	r3, #0
 800a992:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a996:	e7d1      	b.n	800a93c <_rclc_take_new_data+0x44>
 800a998:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a99a:	698b      	ldr	r3, [r1, #24]
 800a99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0ca      	beq.n	800a93a <_rclc_take_new_data+0x42>
 800a9a4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a9a8:	f104 0110 	add.w	r1, r4, #16
 800a9ac:	f007 fe60 	bl	8012670 <rcl_take_response>
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d0c1      	beq.n	800a93a <_rclc_take_new_data+0x42>
 800a9b6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800a9ba:	4298      	cmp	r0, r3
 800a9bc:	d0be      	beq.n	800a93c <_rclc_take_new_data+0x44>
 800a9be:	f000 fea3 	bl	800b708 <rcutils_reset_error>
 800a9c2:	e7bb      	b.n	800a93c <_rclc_take_new_data+0x44>
 800a9c4:	6840      	ldr	r0, [r0, #4]
 800a9c6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d17d      	bne.n	800aaca <_rclc_take_new_data+0x1d2>
 800a9ce:	69c3      	ldr	r3, [r0, #28]
 800a9d0:	b11b      	cbz	r3, 800a9da <_rclc_take_new_data+0xe2>
 800a9d2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d144      	bne.n	800aa64 <_rclc_take_new_data+0x16c>
 800a9da:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f040 80ac 	bne.w	800ab3c <_rclc_take_new_data+0x244>
 800a9e4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d0a6      	beq.n	800a93a <_rclc_take_new_data+0x42>
 800a9ec:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a9ee:	a90a      	add	r1, sp, #40	@ 0x28
 800a9f0:	3010      	adds	r0, #16
 800a9f2:	f009 feb1 	bl	8014758 <rcl_action_take_result_response>
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d1e0      	bne.n	800a9be <_rclc_take_new_data+0xc6>
 800a9fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa00:	6860      	ldr	r0, [r4, #4]
 800aa02:	f00a fb0d 	bl	8015020 <rclc_action_find_handle_by_result_request_sequence_number>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d098      	beq.n	800a93c <_rclc_take_new_data+0x44>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800aa10:	e794      	b.n	800a93c <_rclc_take_new_data+0x44>
 800aa12:	250b      	movs	r5, #11
 800aa14:	4628      	mov	r0, r5
 800aa16:	b01b      	add	sp, #108	@ 0x6c
 800aa18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa1a:	ae04      	add	r6, sp, #16
 800aa1c:	aa0a      	add	r2, sp, #40	@ 0x28
 800aa1e:	3010      	adds	r0, #16
 800aa20:	4631      	mov	r1, r6
 800aa22:	f00a f90d 	bl	8014c40 <rcl_action_take_cancel_request>
 800aa26:	4605      	mov	r5, r0
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d1c8      	bne.n	800a9be <_rclc_take_new_data+0xc6>
 800aa2c:	6860      	ldr	r0, [r4, #4]
 800aa2e:	a90a      	add	r1, sp, #40	@ 0x28
 800aa30:	f00a fab4 	bl	8014f9c <rclc_action_find_goal_handle_by_uuid>
 800aa34:	4607      	mov	r7, r0
 800aa36:	2800      	cmp	r0, #0
 800aa38:	f000 80bb 	beq.w	800abb2 <_rclc_take_new_data+0x2ba>
 800aa3c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800aa40:	2101      	movs	r1, #1
 800aa42:	f00a fa35 	bl	8014eb0 <rcl_action_transition_goal_state>
 800aa46:	2803      	cmp	r0, #3
 800aa48:	4684      	mov	ip, r0
 800aa4a:	f040 80a7 	bne.w	800ab9c <_rclc_take_new_data+0x2a4>
 800aa4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800aa50:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800aa54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa56:	e896 0003 	ldmia.w	r6, {r0, r1}
 800aa5a:	e884 0003 	stmia.w	r4, {r0, r1}
 800aa5e:	f887 c008 	strb.w	ip, [r7, #8]
 800aa62:	e76b      	b.n	800a93c <_rclc_take_new_data+0x44>
 800aa64:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aa66:	3010      	adds	r0, #16
 800aa68:	f009 fef6 	bl	8014858 <rcl_action_take_feedback>
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d1a5      	bne.n	800a9be <_rclc_take_new_data+0xc6>
 800aa72:	6860      	ldr	r0, [r4, #4]
 800aa74:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aa76:	f00a fa91 	bl	8014f9c <rclc_action_find_goal_handle_by_uuid>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	f000 80a3 	beq.w	800abc8 <_rclc_take_new_data+0x2d0>
 800aa82:	2201      	movs	r2, #1
 800aa84:	6860      	ldr	r0, [r4, #4]
 800aa86:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800aa8a:	e7a6      	b.n	800a9da <_rclc_take_new_data+0xe2>
 800aa8c:	f00a fa60 	bl	8014f50 <rclc_action_take_goal_handle>
 800aa90:	4606      	mov	r6, r0
 800aa92:	6860      	ldr	r0, [r4, #4]
 800aa94:	2e00      	cmp	r6, #0
 800aa96:	f43f af47 	beq.w	800a928 <_rclc_take_new_data+0x30>
 800aa9a:	6070      	str	r0, [r6, #4]
 800aa9c:	69f2      	ldr	r2, [r6, #28]
 800aa9e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800aaa2:	3010      	adds	r0, #16
 800aaa4:	f00a f814 	bl	8014ad0 <rcl_action_take_goal_request>
 800aaa8:	4605      	mov	r5, r0
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	f040 808e 	bne.w	800abcc <_rclc_take_new_data+0x2d4>
 800aab0:	69f7      	ldr	r7, [r6, #28]
 800aab2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aab4:	7235      	strb	r5, [r6, #8]
 800aab6:	f8c6 0009 	str.w	r0, [r6, #9]
 800aaba:	f8c6 100d 	str.w	r1, [r6, #13]
 800aabe:	6860      	ldr	r0, [r4, #4]
 800aac0:	f8c6 2011 	str.w	r2, [r6, #17]
 800aac4:	f8c6 3015 	str.w	r3, [r6, #21]
 800aac8:	e72e      	b.n	800a928 <_rclc_take_new_data+0x30>
 800aaca:	aa04      	add	r2, sp, #16
 800aacc:	a90a      	add	r1, sp, #40	@ 0x28
 800aace:	3010      	adds	r0, #16
 800aad0:	f009 fdca 	bl	8014668 <rcl_action_take_goal_response>
 800aad4:	4605      	mov	r5, r0
 800aad6:	2800      	cmp	r0, #0
 800aad8:	f47f af71 	bne.w	800a9be <_rclc_take_new_data+0xc6>
 800aadc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aae0:	6860      	ldr	r0, [r4, #4]
 800aae2:	f00a fa8b 	bl	8014ffc <rclc_action_find_handle_by_goal_request_sequence_number>
 800aae6:	b130      	cbz	r0, 800aaf6 <_rclc_take_new_data+0x1fe>
 800aae8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800aaec:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f880 2020 	strb.w	r2, [r0, #32]
 800aaf6:	6860      	ldr	r0, [r4, #4]
 800aaf8:	e769      	b.n	800a9ce <_rclc_take_new_data+0xd6>
 800aafa:	aa04      	add	r2, sp, #16
 800aafc:	3010      	adds	r0, #16
 800aafe:	a90a      	add	r1, sp, #40	@ 0x28
 800ab00:	f00a f85e 	bl	8014bc0 <rcl_action_take_result_request>
 800ab04:	4605      	mov	r5, r0
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f47f af59 	bne.w	800a9be <_rclc_take_new_data+0xc6>
 800ab0c:	6860      	ldr	r0, [r4, #4]
 800ab0e:	a904      	add	r1, sp, #16
 800ab10:	f00a fa44 	bl	8014f9c <rclc_action_find_goal_handle_by_uuid>
 800ab14:	4607      	mov	r7, r0
 800ab16:	b160      	cbz	r0, 800ab32 <_rclc_take_new_data+0x23a>
 800ab18:	ad0a      	add	r5, sp, #40	@ 0x28
 800ab1a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ab1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ab22:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ab26:	f04f 0c02 	mov.w	ip, #2
 800ab2a:	e886 0003 	stmia.w	r6, {r0, r1}
 800ab2e:	f887 c008 	strb.w	ip, [r7, #8]
 800ab32:	6860      	ldr	r0, [r4, #4]
 800ab34:	2300      	movs	r3, #0
 800ab36:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ab3a:	e6fa      	b.n	800a932 <_rclc_take_new_data+0x3a>
 800ab3c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ab40:	a90a      	add	r1, sp, #40	@ 0x28
 800ab42:	3010      	adds	r0, #16
 800ab44:	f009 fe48 	bl	80147d8 <rcl_action_take_cancel_response>
 800ab48:	4605      	mov	r5, r0
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	f47f af37 	bne.w	800a9be <_rclc_take_new_data+0xc6>
 800ab50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab54:	6860      	ldr	r0, [r4, #4]
 800ab56:	f00a fa75 	bl	8015044 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	6860      	ldr	r0, [r4, #4]
 800ab5e:	2e00      	cmp	r6, #0
 800ab60:	f43f af40 	beq.w	800a9e4 <_rclc_take_new_data+0xec>
 800ab64:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ab66:	2701      	movs	r7, #1
 800ab68:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f43f af3a 	beq.w	800a9e4 <_rclc_take_new_data+0xec>
 800ab70:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ab72:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ab76:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ab7a:	f00a fa0f 	bl	8014f9c <rclc_action_find_goal_handle_by_uuid>
 800ab7e:	b138      	cbz	r0, 800ab90 <_rclc_take_new_data+0x298>
 800ab80:	6860      	ldr	r0, [r4, #4]
 800ab82:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ab84:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ab88:	3501      	adds	r5, #1
 800ab8a:	42ab      	cmp	r3, r5
 800ab8c:	d8f0      	bhi.n	800ab70 <_rclc_take_new_data+0x278>
 800ab8e:	e729      	b.n	800a9e4 <_rclc_take_new_data+0xec>
 800ab90:	6860      	ldr	r0, [r4, #4]
 800ab92:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ab94:	3501      	adds	r5, #1
 800ab96:	42ab      	cmp	r3, r5
 800ab98:	d8ea      	bhi.n	800ab70 <_rclc_take_new_data+0x278>
 800ab9a:	e723      	b.n	800a9e4 <_rclc_take_new_data+0xec>
 800ab9c:	ab06      	add	r3, sp, #24
 800ab9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aba0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aba4:	2103      	movs	r1, #3
 800aba6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800abaa:	6860      	ldr	r0, [r4, #4]
 800abac:	f00a fac0 	bl	8015130 <rclc_action_server_goal_cancel_reject>
 800abb0:	e6c4      	b.n	800a93c <_rclc_take_new_data+0x44>
 800abb2:	ab06      	add	r3, sp, #24
 800abb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800abb6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800abba:	2102      	movs	r1, #2
 800abbc:	e896 000c 	ldmia.w	r6, {r2, r3}
 800abc0:	6860      	ldr	r0, [r4, #4]
 800abc2:	f00a fab5 	bl	8015130 <rclc_action_server_goal_cancel_reject>
 800abc6:	e6b9      	b.n	800a93c <_rclc_take_new_data+0x44>
 800abc8:	6860      	ldr	r0, [r4, #4]
 800abca:	e706      	b.n	800a9da <_rclc_take_new_data+0xe2>
 800abcc:	6860      	ldr	r0, [r4, #4]
 800abce:	4631      	mov	r1, r6
 800abd0:	f00a f9ce 	bl	8014f70 <rclc_action_remove_used_goal_handle>
 800abd4:	f000 fd98 	bl	800b708 <rcutils_reset_error>
 800abd8:	e6b0      	b.n	800a93c <_rclc_take_new_data+0x44>
 800abda:	2501      	movs	r5, #1
 800abdc:	e6ae      	b.n	800a93c <_rclc_take_new_data+0x44>
 800abde:	bf00      	nop

0800abe0 <_rclc_execute.part.0>:
 800abe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abe2:	7803      	ldrb	r3, [r0, #0]
 800abe4:	b087      	sub	sp, #28
 800abe6:	4604      	mov	r4, r0
 800abe8:	2b0a      	cmp	r3, #10
 800abea:	f200 8136 	bhi.w	800ae5a <_rclc_execute.part.0+0x27a>
 800abee:	e8df f003 	tbb	[pc, r3]
 800abf2:	435e      	.short	0x435e
 800abf4:	06a1664f 	.word	0x06a1664f
 800abf8:	6c1e0606 	.word	0x6c1e0606
 800abfc:	59          	.byte	0x59
 800abfd:	00          	.byte	0x00
 800abfe:	2b06      	cmp	r3, #6
 800ac00:	f000 8122 	beq.w	800ae48 <_rclc_execute.part.0+0x268>
 800ac04:	2b07      	cmp	r3, #7
 800ac06:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ac08:	f040 8118 	bne.w	800ae3c <_rclc_execute.part.0+0x25c>
 800ac0c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ac10:	6880      	ldr	r0, [r0, #8]
 800ac12:	4798      	blx	r3
 800ac14:	f104 0110 	add.w	r1, r4, #16
 800ac18:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ac1a:	6860      	ldr	r0, [r4, #4]
 800ac1c:	f008 fab2 	bl	8013184 <rcl_send_response>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d033      	beq.n	800ac8c <_rclc_execute.part.0+0xac>
 800ac24:	9005      	str	r0, [sp, #20]
 800ac26:	f000 fd6f 	bl	800b708 <rcutils_reset_error>
 800ac2a:	9805      	ldr	r0, [sp, #20]
 800ac2c:	e02e      	b.n	800ac8c <_rclc_execute.part.0+0xac>
 800ac2e:	6840      	ldr	r0, [r0, #4]
 800ac30:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 8086 	beq.w	800ad46 <_rclc_execute.part.0+0x166>
 800ac3a:	2600      	movs	r6, #0
 800ac3c:	2701      	movs	r7, #1
 800ac3e:	e004      	b.n	800ac4a <_rclc_execute.part.0+0x6a>
 800ac40:	f00a f960 	bl	8014f04 <rclc_action_send_result_request>
 800ac44:	b998      	cbnz	r0, 800ac6e <_rclc_execute.part.0+0x8e>
 800ac46:	722f      	strb	r7, [r5, #8]
 800ac48:	6860      	ldr	r0, [r4, #4]
 800ac4a:	f00a fa0d 	bl	8015068 <rclc_action_find_first_handle_with_goal_response>
 800ac4e:	4605      	mov	r5, r0
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d077      	beq.n	800ad44 <_rclc_execute.part.0+0x164>
 800ac54:	6863      	ldr	r3, [r4, #4]
 800ac56:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ac5e:	f885 6020 	strb.w	r6, [r5, #32]
 800ac62:	4798      	blx	r3
 800ac64:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ac68:	4628      	mov	r0, r5
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1e8      	bne.n	800ac40 <_rclc_execute.part.0+0x60>
 800ac6e:	6860      	ldr	r0, [r4, #4]
 800ac70:	4629      	mov	r1, r5
 800ac72:	f00a f97d 	bl	8014f70 <rclc_action_remove_used_goal_handle>
 800ac76:	e7e7      	b.n	800ac48 <_rclc_execute.part.0+0x68>
 800ac78:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ac7c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800ac80:	2d00      	cmp	r5, #0
 800ac82:	f000 80c9 	beq.w	800ae18 <_rclc_execute.part.0+0x238>
 800ac86:	6880      	ldr	r0, [r0, #8]
 800ac88:	4798      	blx	r3
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	b007      	add	sp, #28
 800ac8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac90:	6840      	ldr	r0, [r0, #4]
 800ac92:	f008 fda7 	bl	80137e4 <rcl_timer_call>
 800ac96:	f240 3321 	movw	r3, #801	@ 0x321
 800ac9a:	4298      	cmp	r0, r3
 800ac9c:	d004      	beq.n	800aca8 <_rclc_execute.part.0+0xc8>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d0f4      	beq.n	800ac8c <_rclc_execute.part.0+0xac>
 800aca2:	e7bf      	b.n	800ac24 <_rclc_execute.part.0+0x44>
 800aca4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aca6:	4798      	blx	r3
 800aca8:	2000      	movs	r0, #0
 800acaa:	b007      	add	sp, #28
 800acac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acae:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800acb2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800acb4:	b925      	cbnz	r5, 800acc0 <_rclc_execute.part.0+0xe0>
 800acb6:	4628      	mov	r0, r5
 800acb8:	4798      	blx	r3
 800acba:	4628      	mov	r0, r5
 800acbc:	e7e6      	b.n	800ac8c <_rclc_execute.part.0+0xac>
 800acbe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800acc0:	68a0      	ldr	r0, [r4, #8]
 800acc2:	4798      	blx	r3
 800acc4:	2000      	movs	r0, #0
 800acc6:	b007      	add	sp, #28
 800acc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acca:	6840      	ldr	r0, [r0, #4]
 800accc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800acd0:	bb3b      	cbnz	r3, 800ad22 <_rclc_execute.part.0+0x142>
 800acd2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d07b      	beq.n	800add2 <_rclc_execute.part.0+0x1f2>
 800acda:	f640 0634 	movw	r6, #2100	@ 0x834
 800acde:	2701      	movs	r7, #1
 800ace0:	e007      	b.n	800acf2 <_rclc_execute.part.0+0x112>
 800ace2:	4628      	mov	r0, r5
 800ace4:	f00a f9d8 	bl	8015098 <rclc_action_server_response_goal_request>
 800ace8:	6860      	ldr	r0, [r4, #4]
 800acea:	4629      	mov	r1, r5
 800acec:	f00a f940 	bl	8014f70 <rclc_action_remove_used_goal_handle>
 800acf0:	6860      	ldr	r0, [r4, #4]
 800acf2:	2100      	movs	r1, #0
 800acf4:	f00a f96a 	bl	8014fcc <rclc_action_find_first_handle_by_status>
 800acf8:	4605      	mov	r5, r0
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d066      	beq.n	800adcc <_rclc_execute.part.0+0x1ec>
 800acfe:	6863      	ldr	r3, [r4, #4]
 800ad00:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	4798      	blx	r3
 800ad06:	42b0      	cmp	r0, r6
 800ad08:	f04f 0100 	mov.w	r1, #0
 800ad0c:	d1e9      	bne.n	800ace2 <_rclc_execute.part.0+0x102>
 800ad0e:	2101      	movs	r1, #1
 800ad10:	4628      	mov	r0, r5
 800ad12:	f00a f9c1 	bl	8015098 <rclc_action_server_response_goal_request>
 800ad16:	722f      	strb	r7, [r5, #8]
 800ad18:	e7ea      	b.n	800acf0 <_rclc_execute.part.0+0x110>
 800ad1a:	6848      	ldr	r0, [r1, #4]
 800ad1c:	f00a f928 	bl	8014f70 <rclc_action_remove_used_goal_handle>
 800ad20:	6860      	ldr	r0, [r4, #4]
 800ad22:	f00a f95f 	bl	8014fe4 <rclc_action_find_first_terminated_handle>
 800ad26:	4601      	mov	r1, r0
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d1f6      	bne.n	800ad1a <_rclc_execute.part.0+0x13a>
 800ad2c:	6860      	ldr	r0, [r4, #4]
 800ad2e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ad32:	e7ce      	b.n	800acd2 <_rclc_execute.part.0+0xf2>
 800ad34:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ad36:	6880      	ldr	r0, [r0, #8]
 800ad38:	f104 0110 	add.w	r1, r4, #16
 800ad3c:	4798      	blx	r3
 800ad3e:	2000      	movs	r0, #0
 800ad40:	b007      	add	sp, #28
 800ad42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad44:	6860      	ldr	r0, [r4, #4]
 800ad46:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ad4a:	b18b      	cbz	r3, 800ad70 <_rclc_execute.part.0+0x190>
 800ad4c:	68c5      	ldr	r5, [r0, #12]
 800ad4e:	b32d      	cbz	r5, 800ad9c <_rclc_execute.part.0+0x1bc>
 800ad50:	2600      	movs	r6, #0
 800ad52:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ad56:	b143      	cbz	r3, 800ad6a <_rclc_execute.part.0+0x18a>
 800ad58:	69c3      	ldr	r3, [r0, #28]
 800ad5a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800ad5e:	b123      	cbz	r3, 800ad6a <_rclc_execute.part.0+0x18a>
 800ad60:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ad62:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ad64:	4628      	mov	r0, r5
 800ad66:	4798      	blx	r3
 800ad68:	6860      	ldr	r0, [r4, #4]
 800ad6a:	682d      	ldr	r5, [r5, #0]
 800ad6c:	2d00      	cmp	r5, #0
 800ad6e:	d1f0      	bne.n	800ad52 <_rclc_execute.part.0+0x172>
 800ad70:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ad74:	b193      	cbz	r3, 800ad9c <_rclc_execute.part.0+0x1bc>
 800ad76:	68c5      	ldr	r5, [r0, #12]
 800ad78:	b185      	cbz	r5, 800ad9c <_rclc_execute.part.0+0x1bc>
 800ad7a:	2600      	movs	r6, #0
 800ad7c:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800ad80:	b14b      	cbz	r3, 800ad96 <_rclc_execute.part.0+0x1b6>
 800ad82:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ad84:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800ad88:	b12b      	cbz	r3, 800ad96 <_rclc_execute.part.0+0x1b6>
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800ad90:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ad92:	4798      	blx	r3
 800ad94:	6860      	ldr	r0, [r4, #4]
 800ad96:	682d      	ldr	r5, [r5, #0]
 800ad98:	2d00      	cmp	r5, #0
 800ad9a:	d1ef      	bne.n	800ad7c <_rclc_execute.part.0+0x19c>
 800ad9c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d081      	beq.n	800aca8 <_rclc_execute.part.0+0xc8>
 800ada4:	2700      	movs	r7, #0
 800ada6:	e00b      	b.n	800adc0 <_rclc_execute.part.0+0x1e0>
 800ada8:	6863      	ldr	r3, [r4, #4]
 800adaa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800adac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800adae:	6a1e      	ldr	r6, [r3, #32]
 800adb0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800adb4:	47b0      	blx	r6
 800adb6:	6860      	ldr	r0, [r4, #4]
 800adb8:	4629      	mov	r1, r5
 800adba:	f00a f8d9 	bl	8014f70 <rclc_action_remove_used_goal_handle>
 800adbe:	6860      	ldr	r0, [r4, #4]
 800adc0:	f00a f95e 	bl	8015080 <rclc_action_find_first_handle_with_result_response>
 800adc4:	4605      	mov	r5, r0
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d1ee      	bne.n	800ada8 <_rclc_execute.part.0+0x1c8>
 800adca:	e76d      	b.n	800aca8 <_rclc_execute.part.0+0xc8>
 800adcc:	6860      	ldr	r0, [r4, #4]
 800adce:	f880 5020 	strb.w	r5, [r0, #32]
 800add2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800add6:	2b00      	cmp	r3, #0
 800add8:	f43f af66 	beq.w	800aca8 <_rclc_execute.part.0+0xc8>
 800addc:	68c5      	ldr	r5, [r0, #12]
 800adde:	b1b5      	cbz	r5, 800ae0e <_rclc_execute.part.0+0x22e>
 800ade0:	2602      	movs	r6, #2
 800ade2:	e001      	b.n	800ade8 <_rclc_execute.part.0+0x208>
 800ade4:	682d      	ldr	r5, [r5, #0]
 800ade6:	b195      	cbz	r5, 800ae0e <_rclc_execute.part.0+0x22e>
 800ade8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800adec:	2b03      	cmp	r3, #3
 800adee:	d1f9      	bne.n	800ade4 <_rclc_execute.part.0+0x204>
 800adf0:	69c3      	ldr	r3, [r0, #28]
 800adf2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800adf4:	4628      	mov	r0, r5
 800adf6:	4798      	blx	r3
 800adf8:	4603      	mov	r3, r0
 800adfa:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800adfe:	4628      	mov	r0, r5
 800ae00:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ae04:	b163      	cbz	r3, 800ae20 <_rclc_execute.part.0+0x240>
 800ae06:	f00a f967 	bl	80150d8 <rclc_action_server_goal_cancel_accept>
 800ae0a:	6860      	ldr	r0, [r4, #4]
 800ae0c:	e7ea      	b.n	800ade4 <_rclc_execute.part.0+0x204>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ae14:	4618      	mov	r0, r3
 800ae16:	e739      	b.n	800ac8c <_rclc_execute.part.0+0xac>
 800ae18:	4628      	mov	r0, r5
 800ae1a:	4798      	blx	r3
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	e735      	b.n	800ac8c <_rclc_execute.part.0+0xac>
 800ae20:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ae22:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ae26:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ae2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae2e:	6860      	ldr	r0, [r4, #4]
 800ae30:	2101      	movs	r1, #1
 800ae32:	f00a f97d 	bl	8015130 <rclc_action_server_goal_cancel_reject>
 800ae36:	722e      	strb	r6, [r5, #8]
 800ae38:	6860      	ldr	r0, [r4, #4]
 800ae3a:	e7d3      	b.n	800ade4 <_rclc_execute.part.0+0x204>
 800ae3c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ae3e:	6880      	ldr	r0, [r0, #8]
 800ae40:	4798      	blx	r3
 800ae42:	f104 0110 	add.w	r1, r4, #16
 800ae46:	e6e7      	b.n	800ac18 <_rclc_execute.part.0+0x38>
 800ae48:	f100 0110 	add.w	r1, r0, #16
 800ae4c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ae4e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ae50:	6880      	ldr	r0, [r0, #8]
 800ae52:	9105      	str	r1, [sp, #20]
 800ae54:	4798      	blx	r3
 800ae56:	9905      	ldr	r1, [sp, #20]
 800ae58:	e6de      	b.n	800ac18 <_rclc_execute.part.0+0x38>
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	e716      	b.n	800ac8c <_rclc_execute.part.0+0xac>
 800ae5e:	bf00      	nop

0800ae60 <rclc_executor_trigger_any>:
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d03f      	beq.n	800aee4 <rclc_executor_trigger_any+0x84>
 800ae64:	2900      	cmp	r1, #0
 800ae66:	d03e      	beq.n	800aee6 <rclc_executor_trigger_any+0x86>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ae6e:	2200      	movs	r2, #0
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d037      	beq.n	800aee4 <rclc_executor_trigger_any+0x84>
 800ae74:	b430      	push	{r4, r5}
 800ae76:	f893 c000 	ldrb.w	ip, [r3]
 800ae7a:	f1bc 0f08 	cmp.w	ip, #8
 800ae7e:	d11e      	bne.n	800aebe <rclc_executor_trigger_any+0x5e>
 800ae80:	685c      	ldr	r4, [r3, #4]
 800ae82:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800ae84:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800ae88:	d105      	bne.n	800ae96 <rclc_executor_trigger_any+0x36>
 800ae8a:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800ae8e:	b910      	cbnz	r0, 800ae96 <rclc_executor_trigger_any+0x36>
 800ae90:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800ae94:	b128      	cbz	r0, 800aea2 <rclc_executor_trigger_any+0x42>
 800ae96:	bc30      	pop	{r4, r5}
 800ae98:	4770      	bx	lr
 800ae9a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d1f9      	bne.n	800ae96 <rclc_executor_trigger_any+0x36>
 800aea2:	3201      	adds	r2, #1
 800aea4:	4291      	cmp	r1, r2
 800aea6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800aeaa:	d018      	beq.n	800aede <rclc_executor_trigger_any+0x7e>
 800aeac:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d0f0      	beq.n	800ae96 <rclc_executor_trigger_any+0x36>
 800aeb4:	f893 c000 	ldrb.w	ip, [r3]
 800aeb8:	f1bc 0f08 	cmp.w	ip, #8
 800aebc:	d0e0      	beq.n	800ae80 <rclc_executor_trigger_any+0x20>
 800aebe:	f1bc 0f09 	cmp.w	ip, #9
 800aec2:	d1ea      	bne.n	800ae9a <rclc_executor_trigger_any+0x3a>
 800aec4:	685c      	ldr	r4, [r3, #4]
 800aec6:	6a25      	ldr	r5, [r4, #32]
 800aec8:	2d00      	cmp	r5, #0
 800aeca:	d1e4      	bne.n	800ae96 <rclc_executor_trigger_any+0x36>
 800aecc:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d1e0      	bne.n	800ae96 <rclc_executor_trigger_any+0x36>
 800aed4:	3201      	adds	r2, #1
 800aed6:	4291      	cmp	r1, r2
 800aed8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800aedc:	d1e6      	bne.n	800aeac <rclc_executor_trigger_any+0x4c>
 800aede:	2000      	movs	r0, #0
 800aee0:	bc30      	pop	{r4, r5}
 800aee2:	4770      	bx	lr
 800aee4:	4770      	bx	lr
 800aee6:	4608      	mov	r0, r1
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop

0800aeec <rclc_executor_get_zero_initialized_executor>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	4903      	ldr	r1, [pc, #12]	@ (800aefc <rclc_executor_get_zero_initialized_executor+0x10>)
 800aef0:	4604      	mov	r4, r0
 800aef2:	2288      	movs	r2, #136	@ 0x88
 800aef4:	f00d fb99 	bl	801862a <memcpy>
 800aef8:	4620      	mov	r0, r4
 800aefa:	bd10      	pop	{r4, pc}
 800aefc:	08019ae8 	.word	0x08019ae8

0800af00 <rclc_executor_init>:
 800af00:	2800      	cmp	r0, #0
 800af02:	d05f      	beq.n	800afc4 <rclc_executor_init+0xc4>
 800af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af08:	460c      	mov	r4, r1
 800af0a:	b0b0      	sub	sp, #192	@ 0xc0
 800af0c:	2900      	cmp	r1, #0
 800af0e:	d051      	beq.n	800afb4 <rclc_executor_init+0xb4>
 800af10:	4605      	mov	r5, r0
 800af12:	4618      	mov	r0, r3
 800af14:	4616      	mov	r6, r2
 800af16:	461f      	mov	r7, r3
 800af18:	f000 fbd0 	bl	800b6bc <rcutils_allocator_is_valid>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d049      	beq.n	800afb4 <rclc_executor_init+0xb4>
 800af20:	2e00      	cmp	r6, #0
 800af22:	d047      	beq.n	800afb4 <rclc_executor_init+0xb4>
 800af24:	492c      	ldr	r1, [pc, #176]	@ (800afd8 <rclc_executor_init+0xd8>)
 800af26:	2288      	movs	r2, #136	@ 0x88
 800af28:	a80e      	add	r0, sp, #56	@ 0x38
 800af2a:	f00d fb7e 	bl	801862a <memcpy>
 800af2e:	a90e      	add	r1, sp, #56	@ 0x38
 800af30:	2288      	movs	r2, #136	@ 0x88
 800af32:	4628      	mov	r0, r5
 800af34:	f00d fb79 	bl	801862a <memcpy>
 800af38:	602c      	str	r4, [r5, #0]
 800af3a:	4668      	mov	r0, sp
 800af3c:	60ae      	str	r6, [r5, #8]
 800af3e:	466c      	mov	r4, sp
 800af40:	f008 fdc2 	bl	8013ac8 <rcl_get_zero_initialized_wait_set>
 800af44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af46:	f105 0c14 	add.w	ip, r5, #20
 800af4a:	f8d7 8000 	ldr.w	r8, [r7]
 800af4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800af52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800af58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800af5e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800afd0 <rclc_executor_init+0xd0>
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	f8cc 3000 	str.w	r3, [ip]
 800af68:	6939      	ldr	r1, [r7, #16]
 800af6a:	612f      	str	r7, [r5, #16]
 800af6c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800af70:	01b0      	lsls	r0, r6, #6
 800af72:	47c0      	blx	r8
 800af74:	6068      	str	r0, [r5, #4]
 800af76:	b338      	cbz	r0, 800afc8 <rclc_executor_init+0xc8>
 800af78:	2400      	movs	r4, #0
 800af7a:	e000      	b.n	800af7e <rclc_executor_init+0x7e>
 800af7c:	6868      	ldr	r0, [r5, #4]
 800af7e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800af82:	4631      	mov	r1, r6
 800af84:	3401      	adds	r4, #1
 800af86:	f000 fa6b 	bl	800b460 <rclc_executor_handle_init>
 800af8a:	42a6      	cmp	r6, r4
 800af8c:	d1f6      	bne.n	800af7c <rclc_executor_init+0x7c>
 800af8e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800af92:	f000 fa59 	bl	800b448 <rclc_executor_handle_counters_zero_init>
 800af96:	4a11      	ldr	r2, [pc, #68]	@ (800afdc <rclc_executor_init+0xdc>)
 800af98:	686b      	ldr	r3, [r5, #4]
 800af9a:	2000      	movs	r0, #0
 800af9c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800afa0:	b163      	cbz	r3, 800afbc <rclc_executor_init+0xbc>
 800afa2:	692b      	ldr	r3, [r5, #16]
 800afa4:	b153      	cbz	r3, 800afbc <rclc_executor_init+0xbc>
 800afa6:	68ab      	ldr	r3, [r5, #8]
 800afa8:	b143      	cbz	r3, 800afbc <rclc_executor_init+0xbc>
 800afaa:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800afae:	b030      	add	sp, #192	@ 0xc0
 800afb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb4:	200b      	movs	r0, #11
 800afb6:	b030      	add	sp, #192	@ 0xc0
 800afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afbc:	4618      	mov	r0, r3
 800afbe:	b030      	add	sp, #192	@ 0xc0
 800afc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc4:	200b      	movs	r0, #11
 800afc6:	4770      	bx	lr
 800afc8:	200a      	movs	r0, #10
 800afca:	e7f4      	b.n	800afb6 <rclc_executor_init+0xb6>
 800afcc:	f3af 8000 	nop.w
 800afd0:	3b9aca00 	.word	0x3b9aca00
 800afd4:	00000000 	.word	0x00000000
 800afd8:	08019ae8 	.word	0x08019ae8
 800afdc:	0800ae61 	.word	0x0800ae61

0800afe0 <rclc_executor_add_timer>:
 800afe0:	b300      	cbz	r0, 800b024 <rclc_executor_add_timer+0x44>
 800afe2:	b1f9      	cbz	r1, 800b024 <rclc_executor_add_timer+0x44>
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800afea:	4293      	cmp	r3, r2
 800afec:	4604      	mov	r4, r0
 800afee:	d301      	bcc.n	800aff4 <rclc_executor_add_timer+0x14>
 800aff0:	2001      	movs	r0, #1
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
 800aff4:	6840      	ldr	r0, [r0, #4]
 800aff6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800affa:	019d      	lsls	r5, r3, #6
 800affc:	6051      	str	r1, [r2, #4]
 800affe:	2102      	movs	r1, #2
 800b000:	5341      	strh	r1, [r0, r5]
 800b002:	3301      	adds	r3, #1
 800b004:	2000      	movs	r0, #0
 800b006:	2101      	movs	r1, #1
 800b008:	f104 0514 	add.w	r5, r4, #20
 800b00c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800b00e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800b010:	4628      	mov	r0, r5
 800b012:	60e3      	str	r3, [r4, #12]
 800b014:	f008 fd6c 	bl	8013af0 <rcl_wait_set_is_valid>
 800b018:	b930      	cbnz	r0, 800b028 <rclc_executor_add_timer+0x48>
 800b01a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800b01c:	3301      	adds	r3, #1
 800b01e:	2000      	movs	r0, #0
 800b020:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800b022:	bd38      	pop	{r3, r4, r5, pc}
 800b024:	200b      	movs	r0, #11
 800b026:	4770      	bx	lr
 800b028:	4628      	mov	r0, r5
 800b02a:	f008 fd67 	bl	8013afc <rcl_wait_set_fini>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d0f3      	beq.n	800b01a <rclc_executor_add_timer+0x3a>
 800b032:	bd38      	pop	{r3, r4, r5, pc}

0800b034 <rclc_executor_prepare>:
 800b034:	2800      	cmp	r0, #0
 800b036:	d044      	beq.n	800b0c2 <rclc_executor_prepare+0x8e>
 800b038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b03a:	f100 0514 	add.w	r5, r0, #20
 800b03e:	b09b      	sub	sp, #108	@ 0x6c
 800b040:	4604      	mov	r4, r0
 800b042:	4628      	mov	r0, r5
 800b044:	f008 fd54 	bl	8013af0 <rcl_wait_set_is_valid>
 800b048:	b110      	cbz	r0, 800b050 <rclc_executor_prepare+0x1c>
 800b04a:	2000      	movs	r0, #0
 800b04c:	b01b      	add	sp, #108	@ 0x6c
 800b04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b050:	4628      	mov	r0, r5
 800b052:	f008 fd53 	bl	8013afc <rcl_wait_set_fini>
 800b056:	2800      	cmp	r0, #0
 800b058:	d130      	bne.n	800b0bc <rclc_executor_prepare+0x88>
 800b05a:	a80c      	add	r0, sp, #48	@ 0x30
 800b05c:	f008 fd34 	bl	8013ac8 <rcl_get_zero_initialized_wait_set>
 800b060:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b064:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b068:	46ae      	mov	lr, r5
 800b06a:	6927      	ldr	r7, [r4, #16]
 800b06c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b070:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b074:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b078:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b07c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b080:	f8dc 3000 	ldr.w	r3, [ip]
 800b084:	f8ce 3000 	str.w	r3, [lr]
 800b088:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b08a:	ae04      	add	r6, sp, #16
 800b08c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	6822      	ldr	r2, [r4, #0]
 800b092:	6033      	str	r3, [r6, #0]
 800b094:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b096:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b098:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b09c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800b0a0:	e9cd 2100 	strd	r2, r1, [sp]
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800b0a8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b0aa:	f009 f825 	bl	80140f8 <rcl_wait_set_init>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d0cc      	beq.n	800b04c <rclc_executor_prepare+0x18>
 800b0b2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b0b4:	f000 fb28 	bl	800b708 <rcutils_reset_error>
 800b0b8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b0ba:	e7c7      	b.n	800b04c <rclc_executor_prepare+0x18>
 800b0bc:	f000 fb24 	bl	800b708 <rcutils_reset_error>
 800b0c0:	e7cb      	b.n	800b05a <rclc_executor_prepare+0x26>
 800b0c2:	200b      	movs	r0, #11
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop

0800b0c8 <rclc_executor_spin_some.part.0>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	f100 0614 	add.w	r6, r0, #20
 800b0d0:	b083      	sub	sp, #12
 800b0d2:	4691      	mov	r9, r2
 800b0d4:	4698      	mov	r8, r3
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	f7ff ffac 	bl	800b034 <rclc_executor_prepare>
 800b0dc:	4630      	mov	r0, r6
 800b0de:	f008 fdd9 	bl	8013c94 <rcl_wait_set_clear>
 800b0e2:	4607      	mov	r7, r0
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	f040 80ed 	bne.w	800b2c4 <rclc_executor_spin_some.part.0+0x1fc>
 800b0ea:	68ab      	ldr	r3, [r5, #8]
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	b303      	cbz	r3, 800b132 <rclc_executor_spin_some.part.0+0x6a>
 800b0f0:	6869      	ldr	r1, [r5, #4]
 800b0f2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800b0f6:	01a2      	lsls	r2, r4, #6
 800b0f8:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800b0fc:	b1cb      	cbz	r3, 800b132 <rclc_executor_spin_some.part.0+0x6a>
 800b0fe:	5c8b      	ldrb	r3, [r1, r2]
 800b100:	2b0a      	cmp	r3, #10
 800b102:	f200 80d8 	bhi.w	800b2b6 <rclc_executor_spin_some.part.0+0x1ee>
 800b106:	e8df f003 	tbb	[pc, r3]
 800b10a:	9c9c      	.short	0x9c9c
 800b10c:	068c8ca7 	.word	0x068c8ca7
 800b110:	bdc90606 	.word	0xbdc90606
 800b114:	b2          	.byte	0xb2
 800b115:	00          	.byte	0x00
 800b116:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b11a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b11e:	4630      	mov	r0, r6
 800b120:	f009 f900 	bl	8014324 <rcl_wait_set_add_service>
 800b124:	2800      	cmp	r0, #0
 800b126:	f040 8086 	bne.w	800b236 <rclc_executor_spin_some.part.0+0x16e>
 800b12a:	68ab      	ldr	r3, [r5, #8]
 800b12c:	3401      	adds	r4, #1
 800b12e:	429c      	cmp	r4, r3
 800b130:	d3de      	bcc.n	800b0f0 <rclc_executor_spin_some.part.0+0x28>
 800b132:	4643      	mov	r3, r8
 800b134:	464a      	mov	r2, r9
 800b136:	4630      	mov	r0, r6
 800b138:	f009 f922 	bl	8014380 <rcl_wait>
 800b13c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 80c7 	beq.w	800b2d4 <rclc_executor_spin_some.part.0+0x20c>
 800b146:	2b01      	cmp	r3, #1
 800b148:	f040 80b5 	bne.w	800b2b6 <rclc_executor_spin_some.part.0+0x1ee>
 800b14c:	68ab      	ldr	r3, [r5, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 8159 	beq.w	800b406 <rclc_executor_spin_some.part.0+0x33e>
 800b154:	2400      	movs	r4, #0
 800b156:	46a0      	mov	r8, r4
 800b158:	f240 1991 	movw	r9, #401	@ 0x191
 800b15c:	e00a      	b.n	800b174 <rclc_executor_spin_some.part.0+0xac>
 800b15e:	f7ff fb7d 	bl	800a85c <_rclc_check_for_new_data>
 800b162:	4604      	mov	r4, r0
 800b164:	b110      	cbz	r0, 800b16c <rclc_executor_spin_some.part.0+0xa4>
 800b166:	4548      	cmp	r0, r9
 800b168:	f040 80b2 	bne.w	800b2d0 <rclc_executor_spin_some.part.0+0x208>
 800b16c:	68ab      	ldr	r3, [r5, #8]
 800b16e:	4598      	cmp	r8, r3
 800b170:	f080 8126 	bcs.w	800b3c0 <rclc_executor_spin_some.part.0+0x2f8>
 800b174:	686a      	ldr	r2, [r5, #4]
 800b176:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b17a:	4631      	mov	r1, r6
 800b17c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b180:	f108 0801 	add.w	r8, r8, #1
 800b184:	f1bc 0f00 	cmp.w	ip, #0
 800b188:	d1e9      	bne.n	800b15e <rclc_executor_spin_some.part.0+0x96>
 800b18a:	4619      	mov	r1, r3
 800b18c:	4610      	mov	r0, r2
 800b18e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b192:	4798      	blx	r3
 800b194:	2800      	cmp	r0, #0
 800b196:	f000 809b 	beq.w	800b2d0 <rclc_executor_spin_some.part.0+0x208>
 800b19a:	68ab      	ldr	r3, [r5, #8]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f000 8097 	beq.w	800b2d0 <rclc_executor_spin_some.part.0+0x208>
 800b1a2:	f04f 0800 	mov.w	r8, #0
 800b1a6:	f240 1991 	movw	r9, #401	@ 0x191
 800b1aa:	e009      	b.n	800b1c0 <rclc_executor_spin_some.part.0+0xf8>
 800b1ac:	f7ff fba4 	bl	800a8f8 <_rclc_take_new_data>
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	b110      	cbz	r0, 800b1ba <rclc_executor_spin_some.part.0+0xf2>
 800b1b4:	4548      	cmp	r0, r9
 800b1b6:	f040 808b 	bne.w	800b2d0 <rclc_executor_spin_some.part.0+0x208>
 800b1ba:	68ab      	ldr	r3, [r5, #8]
 800b1bc:	4598      	cmp	r8, r3
 800b1be:	d209      	bcs.n	800b1d4 <rclc_executor_spin_some.part.0+0x10c>
 800b1c0:	6868      	ldr	r0, [r5, #4]
 800b1c2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b1cc:	f108 0801 	add.w	r8, r8, #1
 800b1d0:	2a00      	cmp	r2, #0
 800b1d2:	d1eb      	bne.n	800b1ac <rclc_executor_spin_some.part.0+0xe4>
 800b1d4:	2600      	movs	r6, #0
 800b1d6:	b97b      	cbnz	r3, 800b1f8 <rclc_executor_spin_some.part.0+0x130>
 800b1d8:	e07a      	b.n	800b2d0 <rclc_executor_spin_some.part.0+0x208>
 800b1da:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b1de:	2a08      	cmp	r2, #8
 800b1e0:	f000 80fd 	beq.w	800b3de <rclc_executor_spin_some.part.0+0x316>
 800b1e4:	2a09      	cmp	r2, #9
 800b1e6:	f000 80ef 	beq.w	800b3c8 <rclc_executor_spin_some.part.0+0x300>
 800b1ea:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800b1ee:	b98a      	cbnz	r2, 800b214 <rclc_executor_spin_some.part.0+0x14c>
 800b1f0:	3601      	adds	r6, #1
 800b1f2:	429e      	cmp	r6, r3
 800b1f4:	d262      	bcs.n	800b2bc <rclc_executor_spin_some.part.0+0x1f4>
 800b1f6:	2400      	movs	r4, #0
 800b1f8:	686a      	ldr	r2, [r5, #4]
 800b1fa:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b1fe:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b202:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800b206:	2900      	cmp	r1, #0
 800b208:	d062      	beq.n	800b2d0 <rclc_executor_spin_some.part.0+0x208>
 800b20a:	7841      	ldrb	r1, [r0, #1]
 800b20c:	2900      	cmp	r1, #0
 800b20e:	d0e4      	beq.n	800b1da <rclc_executor_spin_some.part.0+0x112>
 800b210:	2901      	cmp	r1, #1
 800b212:	d1ed      	bne.n	800b1f0 <rclc_executor_spin_some.part.0+0x128>
 800b214:	f7ff fce4 	bl	800abe0 <_rclc_execute.part.0>
 800b218:	2800      	cmp	r0, #0
 800b21a:	f040 80b6 	bne.w	800b38a <rclc_executor_spin_some.part.0+0x2c2>
 800b21e:	68ab      	ldr	r3, [r5, #8]
 800b220:	e7e6      	b.n	800b1f0 <rclc_executor_spin_some.part.0+0x128>
 800b222:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b226:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b22a:	4630      	mov	r0, r6
 800b22c:	f009 f84e 	bl	80142cc <rcl_wait_set_add_client>
 800b230:	2800      	cmp	r0, #0
 800b232:	f43f af7a 	beq.w	800b12a <rclc_executor_spin_some.part.0+0x62>
 800b236:	9001      	str	r0, [sp, #4]
 800b238:	f000 fa66 	bl	800b708 <rcutils_reset_error>
 800b23c:	9801      	ldr	r0, [sp, #4]
 800b23e:	4607      	mov	r7, r0
 800b240:	e03c      	b.n	800b2bc <rclc_executor_spin_some.part.0+0x1f4>
 800b242:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b246:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b24a:	4630      	mov	r0, r6
 800b24c:	f008 fcf6 	bl	8013c3c <rcl_wait_set_add_subscription>
 800b250:	2800      	cmp	r0, #0
 800b252:	f43f af6a 	beq.w	800b12a <rclc_executor_spin_some.part.0+0x62>
 800b256:	e7ee      	b.n	800b236 <rclc_executor_spin_some.part.0+0x16e>
 800b258:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b25c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b260:	4630      	mov	r0, r6
 800b262:	f009 f803 	bl	801426c <rcl_wait_set_add_timer>
 800b266:	2800      	cmp	r0, #0
 800b268:	f43f af5f 	beq.w	800b12a <rclc_executor_spin_some.part.0+0x62>
 800b26c:	e7e3      	b.n	800b236 <rclc_executor_spin_some.part.0+0x16e>
 800b26e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b272:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b276:	4630      	mov	r0, r6
 800b278:	f008 ffcc 	bl	8014214 <rcl_wait_set_add_guard_condition>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	f43f af54 	beq.w	800b12a <rclc_executor_spin_some.part.0+0x62>
 800b282:	e7d8      	b.n	800b236 <rclc_executor_spin_some.part.0+0x16e>
 800b284:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b288:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b28c:	3110      	adds	r1, #16
 800b28e:	4630      	mov	r0, r6
 800b290:	f009 fd4e 	bl	8014d30 <rcl_action_wait_set_add_action_server>
 800b294:	2800      	cmp	r0, #0
 800b296:	f43f af48 	beq.w	800b12a <rclc_executor_spin_some.part.0+0x62>
 800b29a:	e7cc      	b.n	800b236 <rclc_executor_spin_some.part.0+0x16e>
 800b29c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b2a0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b2a4:	3110      	adds	r1, #16
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f009 fb19 	bl	80148e0 <rcl_action_wait_set_add_action_client>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	f43f af3b 	beq.w	800b12a <rclc_executor_spin_some.part.0+0x62>
 800b2b4:	e7bf      	b.n	800b236 <rclc_executor_spin_some.part.0+0x16e>
 800b2b6:	f000 fa27 	bl	800b708 <rcutils_reset_error>
 800b2ba:	2701      	movs	r7, #1
 800b2bc:	4638      	mov	r0, r7
 800b2be:	b003      	add	sp, #12
 800b2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c4:	f000 fa20 	bl	800b708 <rcutils_reset_error>
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	b003      	add	sp, #12
 800b2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d0:	4627      	mov	r7, r4
 800b2d2:	e7f3      	b.n	800b2bc <rclc_executor_spin_some.part.0+0x1f4>
 800b2d4:	68ab      	ldr	r3, [r5, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 8092 	beq.w	800b400 <rclc_executor_spin_some.part.0+0x338>
 800b2dc:	2400      	movs	r4, #0
 800b2de:	46a0      	mov	r8, r4
 800b2e0:	f240 1991 	movw	r9, #401	@ 0x191
 800b2e4:	e008      	b.n	800b2f8 <rclc_executor_spin_some.part.0+0x230>
 800b2e6:	f7ff fab9 	bl	800a85c <_rclc_check_for_new_data>
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	b108      	cbz	r0, 800b2f2 <rclc_executor_spin_some.part.0+0x22a>
 800b2ee:	4548      	cmp	r0, r9
 800b2f0:	d1ee      	bne.n	800b2d0 <rclc_executor_spin_some.part.0+0x208>
 800b2f2:	68ab      	ldr	r3, [r5, #8]
 800b2f4:	4598      	cmp	r8, r3
 800b2f6:	d265      	bcs.n	800b3c4 <rclc_executor_spin_some.part.0+0x2fc>
 800b2f8:	686a      	ldr	r2, [r5, #4]
 800b2fa:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b2fe:	4631      	mov	r1, r6
 800b300:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b304:	f108 0801 	add.w	r8, r8, #1
 800b308:	f1bc 0f00 	cmp.w	ip, #0
 800b30c:	d1eb      	bne.n	800b2e6 <rclc_executor_spin_some.part.0+0x21e>
 800b30e:	4619      	mov	r1, r3
 800b310:	4610      	mov	r0, r2
 800b312:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b316:	4798      	blx	r3
 800b318:	2800      	cmp	r0, #0
 800b31a:	d0d9      	beq.n	800b2d0 <rclc_executor_spin_some.part.0+0x208>
 800b31c:	68ab      	ldr	r3, [r5, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0d6      	beq.n	800b2d0 <rclc_executor_spin_some.part.0+0x208>
 800b322:	f04f 0800 	mov.w	r8, #0
 800b326:	f240 1991 	movw	r9, #401	@ 0x191
 800b32a:	f240 2a59 	movw	sl, #601	@ 0x259
 800b32e:	e00e      	b.n	800b34e <rclc_executor_spin_some.part.0+0x286>
 800b330:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b334:	2b08      	cmp	r3, #8
 800b336:	d033      	beq.n	800b3a0 <rclc_executor_spin_some.part.0+0x2d8>
 800b338:	2b09      	cmp	r3, #9
 800b33a:	d028      	beq.n	800b38e <rclc_executor_spin_some.part.0+0x2c6>
 800b33c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b340:	b9fb      	cbnz	r3, 800b382 <rclc_executor_spin_some.part.0+0x2ba>
 800b342:	68ab      	ldr	r3, [r5, #8]
 800b344:	f108 0801 	add.w	r8, r8, #1
 800b348:	4598      	cmp	r8, r3
 800b34a:	d2b7      	bcs.n	800b2bc <rclc_executor_spin_some.part.0+0x1f4>
 800b34c:	2400      	movs	r4, #0
 800b34e:	6868      	ldr	r0, [r5, #4]
 800b350:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b354:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b358:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d0b7      	beq.n	800b2d0 <rclc_executor_spin_some.part.0+0x208>
 800b360:	4631      	mov	r1, r6
 800b362:	f7ff fac9 	bl	800a8f8 <_rclc_take_new_data>
 800b366:	b118      	cbz	r0, 800b370 <rclc_executor_spin_some.part.0+0x2a8>
 800b368:	4548      	cmp	r0, r9
 800b36a:	d001      	beq.n	800b370 <rclc_executor_spin_some.part.0+0x2a8>
 800b36c:	4550      	cmp	r0, sl
 800b36e:	d10c      	bne.n	800b38a <rclc_executor_spin_some.part.0+0x2c2>
 800b370:	686b      	ldr	r3, [r5, #4]
 800b372:	eb13 000b 	adds.w	r0, r3, fp
 800b376:	d021      	beq.n	800b3bc <rclc_executor_spin_some.part.0+0x2f4>
 800b378:	7842      	ldrb	r2, [r0, #1]
 800b37a:	2a00      	cmp	r2, #0
 800b37c:	d0d8      	beq.n	800b330 <rclc_executor_spin_some.part.0+0x268>
 800b37e:	2a01      	cmp	r2, #1
 800b380:	d1df      	bne.n	800b342 <rclc_executor_spin_some.part.0+0x27a>
 800b382:	f7ff fc2d 	bl	800abe0 <_rclc_execute.part.0>
 800b386:	2800      	cmp	r0, #0
 800b388:	d0db      	beq.n	800b342 <rclc_executor_spin_some.part.0+0x27a>
 800b38a:	4607      	mov	r7, r0
 800b38c:	e796      	b.n	800b2bc <rclc_executor_spin_some.part.0+0x1f4>
 800b38e:	6843      	ldr	r3, [r0, #4]
 800b390:	6a1a      	ldr	r2, [r3, #32]
 800b392:	2a00      	cmp	r2, #0
 800b394:	d1f5      	bne.n	800b382 <rclc_executor_spin_some.part.0+0x2ba>
 800b396:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d0d1      	beq.n	800b342 <rclc_executor_spin_some.part.0+0x27a>
 800b39e:	e7f0      	b.n	800b382 <rclc_executor_spin_some.part.0+0x2ba>
 800b3a0:	6843      	ldr	r3, [r0, #4]
 800b3a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3a4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b3a8:	d1eb      	bne.n	800b382 <rclc_executor_spin_some.part.0+0x2ba>
 800b3aa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b3ae:	2a00      	cmp	r2, #0
 800b3b0:	d1e7      	bne.n	800b382 <rclc_executor_spin_some.part.0+0x2ba>
 800b3b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0c3      	beq.n	800b342 <rclc_executor_spin_some.part.0+0x27a>
 800b3ba:	e7e2      	b.n	800b382 <rclc_executor_spin_some.part.0+0x2ba>
 800b3bc:	270b      	movs	r7, #11
 800b3be:	e77d      	b.n	800b2bc <rclc_executor_spin_some.part.0+0x1f4>
 800b3c0:	686a      	ldr	r2, [r5, #4]
 800b3c2:	e6e2      	b.n	800b18a <rclc_executor_spin_some.part.0+0xc2>
 800b3c4:	686a      	ldr	r2, [r5, #4]
 800b3c6:	e7a2      	b.n	800b30e <rclc_executor_spin_some.part.0+0x246>
 800b3c8:	6842      	ldr	r2, [r0, #4]
 800b3ca:	6a11      	ldr	r1, [r2, #32]
 800b3cc:	2900      	cmp	r1, #0
 800b3ce:	f47f af21 	bne.w	800b214 <rclc_executor_spin_some.part.0+0x14c>
 800b3d2:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b3d6:	2a00      	cmp	r2, #0
 800b3d8:	f43f af0a 	beq.w	800b1f0 <rclc_executor_spin_some.part.0+0x128>
 800b3dc:	e71a      	b.n	800b214 <rclc_executor_spin_some.part.0+0x14c>
 800b3de:	6842      	ldr	r2, [r0, #4]
 800b3e0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b3e2:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b3e6:	f47f af15 	bne.w	800b214 <rclc_executor_spin_some.part.0+0x14c>
 800b3ea:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b3ee:	2900      	cmp	r1, #0
 800b3f0:	f47f af10 	bne.w	800b214 <rclc_executor_spin_some.part.0+0x14c>
 800b3f4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b3f8:	2a00      	cmp	r2, #0
 800b3fa:	f43f aef9 	beq.w	800b1f0 <rclc_executor_spin_some.part.0+0x128>
 800b3fe:	e709      	b.n	800b214 <rclc_executor_spin_some.part.0+0x14c>
 800b400:	686a      	ldr	r2, [r5, #4]
 800b402:	461c      	mov	r4, r3
 800b404:	e783      	b.n	800b30e <rclc_executor_spin_some.part.0+0x246>
 800b406:	686a      	ldr	r2, [r5, #4]
 800b408:	461c      	mov	r4, r3
 800b40a:	e6be      	b.n	800b18a <rclc_executor_spin_some.part.0+0xc2>

0800b40c <rclc_executor_spin>:
 800b40c:	b1d0      	cbz	r0, 800b444 <rclc_executor_spin+0x38>
 800b40e:	b510      	push	{r4, lr}
 800b410:	4604      	mov	r4, r0
 800b412:	b082      	sub	sp, #8
 800b414:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800b418:	6820      	ldr	r0, [r4, #0]
 800b41a:	e9cd 2300 	strd	r2, r3, [sp]
 800b41e:	f007 f997 	bl	8012750 <rcl_context_is_valid>
 800b422:	4601      	mov	r1, r0
 800b424:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b428:	4620      	mov	r0, r4
 800b42a:	b131      	cbz	r1, 800b43a <rclc_executor_spin+0x2e>
 800b42c:	f7ff fe4c 	bl	800b0c8 <rclc_executor_spin_some.part.0>
 800b430:	f030 0302 	bics.w	r3, r0, #2
 800b434:	d0ee      	beq.n	800b414 <rclc_executor_spin+0x8>
 800b436:	b002      	add	sp, #8
 800b438:	bd10      	pop	{r4, pc}
 800b43a:	f000 f965 	bl	800b708 <rcutils_reset_error>
 800b43e:	2001      	movs	r0, #1
 800b440:	b002      	add	sp, #8
 800b442:	bd10      	pop	{r4, pc}
 800b444:	200b      	movs	r0, #11
 800b446:	4770      	bx	lr

0800b448 <rclc_executor_handle_counters_zero_init>:
 800b448:	b130      	cbz	r0, 800b458 <rclc_executor_handle_counters_zero_init+0x10>
 800b44a:	b508      	push	{r3, lr}
 800b44c:	2220      	movs	r2, #32
 800b44e:	2100      	movs	r1, #0
 800b450:	f00d f822 	bl	8018498 <memset>
 800b454:	2000      	movs	r0, #0
 800b456:	bd08      	pop	{r3, pc}
 800b458:	200b      	movs	r0, #11
 800b45a:	4770      	bx	lr
 800b45c:	0000      	movs	r0, r0
	...

0800b460 <rclc_executor_handle_init>:
 800b460:	b168      	cbz	r0, 800b47e <rclc_executor_handle_init+0x1e>
 800b462:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b488 <rclc_executor_handle_init+0x28>
 800b466:	2300      	movs	r3, #0
 800b468:	220b      	movs	r2, #11
 800b46a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b46e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b472:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b476:	8002      	strh	r2, [r0, #0]
 800b478:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b47a:	4618      	mov	r0, r3
 800b47c:	4770      	bx	lr
 800b47e:	200b      	movs	r0, #11
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	f3af 8000 	nop.w
	...

0800b490 <rclc_support_init_with_options>:
 800b490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b494:	b083      	sub	sp, #12
 800b496:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b498:	b340      	cbz	r0, 800b4ec <rclc_support_init_with_options+0x5c>
 800b49a:	461d      	mov	r5, r3
 800b49c:	b333      	cbz	r3, 800b4ec <rclc_support_init_with_options+0x5c>
 800b49e:	b32e      	cbz	r6, 800b4ec <rclc_support_init_with_options+0x5c>
 800b4a0:	46e9      	mov	r9, sp
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4648      	mov	r0, r9
 800b4a6:	460f      	mov	r7, r1
 800b4a8:	4690      	mov	r8, r2
 800b4aa:	f007 f947 	bl	801273c <rcl_get_zero_initialized_context>
 800b4ae:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	e884 0003 	stmia.w	r4, {r0, r1}
 800b4b8:	4623      	mov	r3, r4
 800b4ba:	4641      	mov	r1, r8
 800b4bc:	4638      	mov	r0, r7
 800b4be:	f007 f9ad 	bl	801281c <rcl_init>
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	b960      	cbnz	r0, 800b4e0 <rclc_support_init_with_options+0x50>
 800b4c6:	60a6      	str	r6, [r4, #8]
 800b4c8:	4632      	mov	r2, r6
 800b4ca:	f104 010c 	add.w	r1, r4, #12
 800b4ce:	2003      	movs	r0, #3
 800b4d0:	f007 fefa 	bl	80132c8 <rcl_clock_init>
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	b918      	cbnz	r0, 800b4e0 <rclc_support_init_with_options+0x50>
 800b4d8:	4628      	mov	r0, r5
 800b4da:	b003      	add	sp, #12
 800b4dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4e0:	f000 f912 	bl	800b708 <rcutils_reset_error>
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	b003      	add	sp, #12
 800b4e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4ec:	250b      	movs	r5, #11
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	b003      	add	sp, #12
 800b4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4f6:	bf00      	nop

0800b4f8 <rclc_node_init_default>:
 800b4f8:	b3b8      	cbz	r0, 800b56a <rclc_node_init_default+0x72>
 800b4fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4fe:	460d      	mov	r5, r1
 800b500:	b0a1      	sub	sp, #132	@ 0x84
 800b502:	b329      	cbz	r1, 800b550 <rclc_node_init_default+0x58>
 800b504:	4616      	mov	r6, r2
 800b506:	b31a      	cbz	r2, 800b550 <rclc_node_init_default+0x58>
 800b508:	461f      	mov	r7, r3
 800b50a:	b30b      	cbz	r3, 800b550 <rclc_node_init_default+0x58>
 800b50c:	f10d 0810 	add.w	r8, sp, #16
 800b510:	4604      	mov	r4, r0
 800b512:	4640      	mov	r0, r8
 800b514:	f007 faa8 	bl	8012a68 <rcl_get_zero_initialized_node>
 800b518:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b51c:	f10d 0918 	add.w	r9, sp, #24
 800b520:	e884 0003 	stmia.w	r4, {r0, r1}
 800b524:	4648      	mov	r0, r9
 800b526:	f007 fc17 	bl	8012d58 <rcl_node_get_default_options>
 800b52a:	4640      	mov	r0, r8
 800b52c:	f007 fa9c 	bl	8012a68 <rcl_get_zero_initialized_node>
 800b530:	f8cd 9000 	str.w	r9, [sp]
 800b534:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b538:	463b      	mov	r3, r7
 800b53a:	e884 0003 	stmia.w	r4, {r0, r1}
 800b53e:	4632      	mov	r2, r6
 800b540:	4629      	mov	r1, r5
 800b542:	4620      	mov	r0, r4
 800b544:	f007 fa9a 	bl	8012a7c <rcl_node_init>
 800b548:	b930      	cbnz	r0, 800b558 <rclc_node_init_default+0x60>
 800b54a:	b021      	add	sp, #132	@ 0x84
 800b54c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b550:	200b      	movs	r0, #11
 800b552:	b021      	add	sp, #132	@ 0x84
 800b554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b558:	9003      	str	r0, [sp, #12]
 800b55a:	f000 f8d5 	bl	800b708 <rcutils_reset_error>
 800b55e:	f000 f8d3 	bl	800b708 <rcutils_reset_error>
 800b562:	9803      	ldr	r0, [sp, #12]
 800b564:	b021      	add	sp, #132	@ 0x84
 800b566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b56a:	200b      	movs	r0, #11
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop

0800b570 <rclc_publisher_init_best_effort>:
 800b570:	b368      	cbz	r0, 800b5ce <rclc_publisher_init_best_effort+0x5e>
 800b572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b576:	460d      	mov	r5, r1
 800b578:	b0a0      	sub	sp, #128	@ 0x80
 800b57a:	b321      	cbz	r1, 800b5c6 <rclc_publisher_init_best_effort+0x56>
 800b57c:	4616      	mov	r6, r2
 800b57e:	b312      	cbz	r2, 800b5c6 <rclc_publisher_init_best_effort+0x56>
 800b580:	461f      	mov	r7, r3
 800b582:	b303      	cbz	r3, 800b5c6 <rclc_publisher_init_best_effort+0x56>
 800b584:	4604      	mov	r4, r0
 800b586:	f7ff f859 	bl	800a63c <rcl_get_zero_initialized_publisher>
 800b58a:	f10d 0810 	add.w	r8, sp, #16
 800b58e:	6020      	str	r0, [r4, #0]
 800b590:	4640      	mov	r0, r8
 800b592:	f7ff f8ef 	bl	800a774 <rcl_publisher_get_default_options>
 800b596:	490f      	ldr	r1, [pc, #60]	@ (800b5d4 <rclc_publisher_init_best_effort+0x64>)
 800b598:	2250      	movs	r2, #80	@ 0x50
 800b59a:	4640      	mov	r0, r8
 800b59c:	f00d f845 	bl	801862a <memcpy>
 800b5a0:	f8cd 8000 	str.w	r8, [sp]
 800b5a4:	463b      	mov	r3, r7
 800b5a6:	4632      	mov	r2, r6
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f7ff f84c 	bl	800a648 <rcl_publisher_init>
 800b5b0:	b910      	cbnz	r0, 800b5b8 <rclc_publisher_init_best_effort+0x48>
 800b5b2:	b020      	add	sp, #128	@ 0x80
 800b5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b8:	9003      	str	r0, [sp, #12]
 800b5ba:	f000 f8a5 	bl	800b708 <rcutils_reset_error>
 800b5be:	9803      	ldr	r0, [sp, #12]
 800b5c0:	b020      	add	sp, #128	@ 0x80
 800b5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c6:	200b      	movs	r0, #11
 800b5c8:	b020      	add	sp, #128	@ 0x80
 800b5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ce:	200b      	movs	r0, #11
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	08019b70 	.word	0x08019b70

0800b5d8 <rclc_timer_init_default>:
 800b5d8:	b360      	cbz	r0, 800b634 <rclc_timer_init_default+0x5c>
 800b5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5de:	460e      	mov	r6, r1
 800b5e0:	b08a      	sub	sp, #40	@ 0x28
 800b5e2:	b319      	cbz	r1, 800b62c <rclc_timer_init_default+0x54>
 800b5e4:	4690      	mov	r8, r2
 800b5e6:	461f      	mov	r7, r3
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	f008 f84b 	bl	8013684 <rcl_get_zero_initialized_timer>
 800b5ee:	68b4      	ldr	r4, [r6, #8]
 800b5f0:	6028      	str	r0, [r5, #0]
 800b5f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b5f4:	f10d 0c0c 	add.w	ip, sp, #12
 800b5f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	f8cc 3000 	str.w	r3, [ip]
 800b602:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b604:	9302      	str	r3, [sp, #8]
 800b606:	e9cd 8700 	strd	r8, r7, [sp]
 800b60a:	4628      	mov	r0, r5
 800b60c:	4632      	mov	r2, r6
 800b60e:	f106 010c 	add.w	r1, r6, #12
 800b612:	f008 f83d 	bl	8013690 <rcl_timer_init>
 800b616:	b910      	cbnz	r0, 800b61e <rclc_timer_init_default+0x46>
 800b618:	b00a      	add	sp, #40	@ 0x28
 800b61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b61e:	9009      	str	r0, [sp, #36]	@ 0x24
 800b620:	f000 f872 	bl	800b708 <rcutils_reset_error>
 800b624:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b626:	b00a      	add	sp, #40	@ 0x28
 800b628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b62c:	200b      	movs	r0, #11
 800b62e:	b00a      	add	sp, #40	@ 0x28
 800b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b634:	200b      	movs	r0, #11
 800b636:	4770      	bx	lr

0800b638 <__default_zero_allocate>:
 800b638:	f00c ba44 	b.w	8017ac4 <calloc>

0800b63c <__default_reallocate>:
 800b63c:	f00c bbe2 	b.w	8017e04 <realloc>

0800b640 <__default_deallocate>:
 800b640:	f00c babe 	b.w	8017bc0 <free>

0800b644 <__default_allocate>:
 800b644:	f00c bab4 	b.w	8017bb0 <malloc>

0800b648 <rcutils_get_zero_initialized_allocator>:
 800b648:	b510      	push	{r4, lr}
 800b64a:	4c05      	ldr	r4, [pc, #20]	@ (800b660 <rcutils_get_zero_initialized_allocator+0x18>)
 800b64c:	4686      	mov	lr, r0
 800b64e:	4684      	mov	ip, r0
 800b650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b652:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	f8cc 3000 	str.w	r3, [ip]
 800b65c:	4670      	mov	r0, lr
 800b65e:	bd10      	pop	{r4, pc}
 800b660:	08019bc0 	.word	0x08019bc0

0800b664 <rcutils_set_default_allocator>:
 800b664:	b1a8      	cbz	r0, 800b692 <rcutils_set_default_allocator+0x2e>
 800b666:	6802      	ldr	r2, [r0, #0]
 800b668:	b1a2      	cbz	r2, 800b694 <rcutils_set_default_allocator+0x30>
 800b66a:	6841      	ldr	r1, [r0, #4]
 800b66c:	b1a1      	cbz	r1, 800b698 <rcutils_set_default_allocator+0x34>
 800b66e:	b410      	push	{r4}
 800b670:	68c4      	ldr	r4, [r0, #12]
 800b672:	b164      	cbz	r4, 800b68e <rcutils_set_default_allocator+0x2a>
 800b674:	6880      	ldr	r0, [r0, #8]
 800b676:	b138      	cbz	r0, 800b688 <rcutils_set_default_allocator+0x24>
 800b678:	4b08      	ldr	r3, [pc, #32]	@ (800b69c <rcutils_set_default_allocator+0x38>)
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	2200      	movs	r2, #0
 800b67e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b682:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b686:	2001      	movs	r0, #1
 800b688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	4620      	mov	r0, r4
 800b690:	e7fa      	b.n	800b688 <rcutils_set_default_allocator+0x24>
 800b692:	4770      	bx	lr
 800b694:	4610      	mov	r0, r2
 800b696:	4770      	bx	lr
 800b698:	4608      	mov	r0, r1
 800b69a:	4770      	bx	lr
 800b69c:	200000a4 	.word	0x200000a4

0800b6a0 <rcutils_get_default_allocator>:
 800b6a0:	b510      	push	{r4, lr}
 800b6a2:	4c05      	ldr	r4, [pc, #20]	@ (800b6b8 <rcutils_get_default_allocator+0x18>)
 800b6a4:	4686      	mov	lr, r0
 800b6a6:	4684      	mov	ip, r0
 800b6a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	f8cc 3000 	str.w	r3, [ip]
 800b6b4:	4670      	mov	r0, lr
 800b6b6:	bd10      	pop	{r4, pc}
 800b6b8:	200000a4 	.word	0x200000a4

0800b6bc <rcutils_allocator_is_valid>:
 800b6bc:	b158      	cbz	r0, 800b6d6 <rcutils_allocator_is_valid+0x1a>
 800b6be:	6803      	ldr	r3, [r0, #0]
 800b6c0:	b143      	cbz	r3, 800b6d4 <rcutils_allocator_is_valid+0x18>
 800b6c2:	6843      	ldr	r3, [r0, #4]
 800b6c4:	b133      	cbz	r3, 800b6d4 <rcutils_allocator_is_valid+0x18>
 800b6c6:	68c3      	ldr	r3, [r0, #12]
 800b6c8:	b123      	cbz	r3, 800b6d4 <rcutils_allocator_is_valid+0x18>
 800b6ca:	6880      	ldr	r0, [r0, #8]
 800b6cc:	3800      	subs	r0, #0
 800b6ce:	bf18      	it	ne
 800b6d0:	2001      	movne	r0, #1
 800b6d2:	4770      	bx	lr
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	4770      	bx	lr

0800b6d8 <rcutils_get_error_string>:
 800b6d8:	4b06      	ldr	r3, [pc, #24]	@ (800b6f4 <rcutils_get_error_string+0x1c>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	b13b      	cbz	r3, 800b6ee <rcutils_get_error_string+0x16>
 800b6de:	4b06      	ldr	r3, [pc, #24]	@ (800b6f8 <rcutils_get_error_string+0x20>)
 800b6e0:	781a      	ldrb	r2, [r3, #0]
 800b6e2:	b90a      	cbnz	r2, 800b6e8 <rcutils_get_error_string+0x10>
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	701a      	strb	r2, [r3, #0]
 800b6e8:	4b04      	ldr	r3, [pc, #16]	@ (800b6fc <rcutils_get_error_string+0x24>)
 800b6ea:	7818      	ldrb	r0, [r3, #0]
 800b6ec:	4770      	bx	lr
 800b6ee:	4b04      	ldr	r3, [pc, #16]	@ (800b700 <rcutils_get_error_string+0x28>)
 800b6f0:	7818      	ldrb	r0, [r3, #0]
 800b6f2:	4770      	bx	lr
 800b6f4:	20006858 	.word	0x20006858
 800b6f8:	20006871 	.word	0x20006871
 800b6fc:	20006870 	.word	0x20006870
 800b700:	08019bd4 	.word	0x08019bd4
 800b704:	00000000 	.word	0x00000000

0800b708 <rcutils_reset_error>:
 800b708:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b728 <rcutils_reset_error+0x20>
 800b70c:	4a08      	ldr	r2, [pc, #32]	@ (800b730 <rcutils_reset_error+0x28>)
 800b70e:	4809      	ldr	r0, [pc, #36]	@ (800b734 <rcutils_reset_error+0x2c>)
 800b710:	4909      	ldr	r1, [pc, #36]	@ (800b738 <rcutils_reset_error+0x30>)
 800b712:	2300      	movs	r3, #0
 800b714:	8013      	strh	r3, [r2, #0]
 800b716:	ed82 7b02 	vstr	d7, [r2, #8]
 800b71a:	4a08      	ldr	r2, [pc, #32]	@ (800b73c <rcutils_reset_error+0x34>)
 800b71c:	7003      	strb	r3, [r0, #0]
 800b71e:	700b      	strb	r3, [r1, #0]
 800b720:	7013      	strb	r3, [r2, #0]
 800b722:	4770      	bx	lr
 800b724:	f3af 8000 	nop.w
	...
 800b730:	20006860 	.word	0x20006860
 800b734:	20006871 	.word	0x20006871
 800b738:	20006870 	.word	0x20006870
 800b73c:	20006858 	.word	0x20006858

0800b740 <rcutils_system_time_now>:
 800b740:	b308      	cbz	r0, 800b786 <rcutils_system_time_now+0x46>
 800b742:	b570      	push	{r4, r5, r6, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	4604      	mov	r4, r0
 800b748:	4669      	mov	r1, sp
 800b74a:	2001      	movs	r0, #1
 800b74c:	f7f6 fb3c 	bl	8001dc8 <clock_gettime>
 800b750:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b754:	2d00      	cmp	r5, #0
 800b756:	db13      	blt.n	800b780 <rcutils_system_time_now+0x40>
 800b758:	9902      	ldr	r1, [sp, #8]
 800b75a:	2900      	cmp	r1, #0
 800b75c:	db0d      	blt.n	800b77a <rcutils_system_time_now+0x3a>
 800b75e:	4e0b      	ldr	r6, [pc, #44]	@ (800b78c <rcutils_system_time_now+0x4c>)
 800b760:	fba3 3206 	umull	r3, r2, r3, r6
 800b764:	185b      	adds	r3, r3, r1
 800b766:	fb06 2205 	mla	r2, r6, r5, r2
 800b76a:	f04f 0000 	mov.w	r0, #0
 800b76e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b772:	e9c4 3200 	strd	r3, r2, [r4]
 800b776:	b004      	add	sp, #16
 800b778:	bd70      	pop	{r4, r5, r6, pc}
 800b77a:	ea53 0205 	orrs.w	r2, r3, r5
 800b77e:	d1ee      	bne.n	800b75e <rcutils_system_time_now+0x1e>
 800b780:	2002      	movs	r0, #2
 800b782:	b004      	add	sp, #16
 800b784:	bd70      	pop	{r4, r5, r6, pc}
 800b786:	200b      	movs	r0, #11
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	3b9aca00 	.word	0x3b9aca00

0800b790 <rcutils_steady_time_now>:
 800b790:	b308      	cbz	r0, 800b7d6 <rcutils_steady_time_now+0x46>
 800b792:	b570      	push	{r4, r5, r6, lr}
 800b794:	b084      	sub	sp, #16
 800b796:	4604      	mov	r4, r0
 800b798:	4669      	mov	r1, sp
 800b79a:	2000      	movs	r0, #0
 800b79c:	f7f6 fb14 	bl	8001dc8 <clock_gettime>
 800b7a0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b7a4:	2d00      	cmp	r5, #0
 800b7a6:	db13      	blt.n	800b7d0 <rcutils_steady_time_now+0x40>
 800b7a8:	9902      	ldr	r1, [sp, #8]
 800b7aa:	2900      	cmp	r1, #0
 800b7ac:	db0d      	blt.n	800b7ca <rcutils_steady_time_now+0x3a>
 800b7ae:	4e0b      	ldr	r6, [pc, #44]	@ (800b7dc <rcutils_steady_time_now+0x4c>)
 800b7b0:	fba3 3206 	umull	r3, r2, r3, r6
 800b7b4:	185b      	adds	r3, r3, r1
 800b7b6:	fb06 2205 	mla	r2, r6, r5, r2
 800b7ba:	f04f 0000 	mov.w	r0, #0
 800b7be:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b7c2:	e9c4 3200 	strd	r3, r2, [r4]
 800b7c6:	b004      	add	sp, #16
 800b7c8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ca:	ea53 0205 	orrs.w	r2, r3, r5
 800b7ce:	d1ee      	bne.n	800b7ae <rcutils_steady_time_now+0x1e>
 800b7d0:	2002      	movs	r0, #2
 800b7d2:	b004      	add	sp, #16
 800b7d4:	bd70      	pop	{r4, r5, r6, pc}
 800b7d6:	200b      	movs	r0, #11
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	3b9aca00 	.word	0x3b9aca00

0800b7e0 <rmw_get_zero_initialized_init_options>:
 800b7e0:	b510      	push	{r4, lr}
 800b7e2:	2238      	movs	r2, #56	@ 0x38
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	f00c fe56 	bl	8018498 <memset>
 800b7ec:	f104 0010 	add.w	r0, r4, #16
 800b7f0:	f000 f80a 	bl	800b808 <rmw_get_default_security_options>
 800b7f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7f8:	60e3      	str	r3, [r4, #12]
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	bd10      	pop	{r4, pc}
 800b7fe:	bf00      	nop

0800b800 <rmw_get_default_publisher_options>:
 800b800:	2200      	movs	r2, #0
 800b802:	6002      	str	r2, [r0, #0]
 800b804:	7102      	strb	r2, [r0, #4]
 800b806:	4770      	bx	lr

0800b808 <rmw_get_default_security_options>:
 800b808:	2200      	movs	r2, #0
 800b80a:	7002      	strb	r2, [r0, #0]
 800b80c:	6042      	str	r2, [r0, #4]
 800b80e:	4770      	bx	lr

0800b810 <rmw_uros_set_custom_transport>:
 800b810:	b470      	push	{r4, r5, r6}
 800b812:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b816:	b162      	cbz	r2, 800b832 <rmw_uros_set_custom_transport+0x22>
 800b818:	b15b      	cbz	r3, 800b832 <rmw_uros_set_custom_transport+0x22>
 800b81a:	b155      	cbz	r5, 800b832 <rmw_uros_set_custom_transport+0x22>
 800b81c:	b14e      	cbz	r6, 800b832 <rmw_uros_set_custom_transport+0x22>
 800b81e:	4c06      	ldr	r4, [pc, #24]	@ (800b838 <rmw_uros_set_custom_transport+0x28>)
 800b820:	7020      	strb	r0, [r4, #0]
 800b822:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b826:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b82a:	6166      	str	r6, [r4, #20]
 800b82c:	2000      	movs	r0, #0
 800b82e:	bc70      	pop	{r4, r5, r6}
 800b830:	4770      	bx	lr
 800b832:	200b      	movs	r0, #11
 800b834:	bc70      	pop	{r4, r5, r6}
 800b836:	4770      	bx	lr
 800b838:	20006874 	.word	0x20006874

0800b83c <rmw_init_options_init>:
 800b83c:	b084      	sub	sp, #16
 800b83e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b840:	b083      	sub	sp, #12
 800b842:	ad09      	add	r5, sp, #36	@ 0x24
 800b844:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b848:	b130      	cbz	r0, 800b858 <rmw_init_options_init+0x1c>
 800b84a:	4604      	mov	r4, r0
 800b84c:	4628      	mov	r0, r5
 800b84e:	f7ff ff35 	bl	800b6bc <rcutils_allocator_is_valid>
 800b852:	b108      	cbz	r0, 800b858 <rmw_init_options_init+0x1c>
 800b854:	68a6      	ldr	r6, [r4, #8]
 800b856:	b12e      	cbz	r6, 800b864 <rmw_init_options_init+0x28>
 800b858:	200b      	movs	r0, #11
 800b85a:	b003      	add	sp, #12
 800b85c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b860:	b004      	add	sp, #16
 800b862:	4770      	bx	lr
 800b864:	2200      	movs	r2, #0
 800b866:	2300      	movs	r3, #0
 800b868:	e9c4 2300 	strd	r2, r3, [r4]
 800b86c:	4b22      	ldr	r3, [pc, #136]	@ (800b8f8 <rmw_init_options_init+0xbc>)
 800b86e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800b908 <rmw_init_options_init+0xcc>
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	60a3      	str	r3, [r4, #8]
 800b876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b878:	f104 0c20 	add.w	ip, r4, #32
 800b87c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b880:	466f      	mov	r7, sp
 800b882:	682b      	ldr	r3, [r5, #0]
 800b884:	f8cc 3000 	str.w	r3, [ip]
 800b888:	4638      	mov	r0, r7
 800b88a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800b88e:	60e6      	str	r6, [r4, #12]
 800b890:	f7ff ffba 	bl	800b808 <rmw_get_default_security_options>
 800b894:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b898:	f104 0310 	add.w	r3, r4, #16
 800b89c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b8a0:	2203      	movs	r2, #3
 800b8a2:	4816      	ldr	r0, [pc, #88]	@ (800b8fc <rmw_init_options_init+0xc0>)
 800b8a4:	4916      	ldr	r1, [pc, #88]	@ (800b900 <rmw_init_options_init+0xc4>)
 800b8a6:	7626      	strb	r6, [r4, #24]
 800b8a8:	f000 feca 	bl	800c640 <rmw_uxrce_init_init_options_impl_memory>
 800b8ac:	4813      	ldr	r0, [pc, #76]	@ (800b8fc <rmw_init_options_init+0xc0>)
 800b8ae:	f00a fa73 	bl	8015d98 <get_memory>
 800b8b2:	b1f0      	cbz	r0, 800b8f2 <rmw_init_options_init+0xb6>
 800b8b4:	4a13      	ldr	r2, [pc, #76]	@ (800b904 <rmw_init_options_init+0xc8>)
 800b8b6:	6883      	ldr	r3, [r0, #8]
 800b8b8:	6851      	ldr	r1, [r2, #4]
 800b8ba:	7810      	ldrb	r0, [r2, #0]
 800b8bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8be:	7418      	strb	r0, [r3, #16]
 800b8c0:	6159      	str	r1, [r3, #20]
 800b8c2:	68d1      	ldr	r1, [r2, #12]
 800b8c4:	61d9      	str	r1, [r3, #28]
 800b8c6:	6911      	ldr	r1, [r2, #16]
 800b8c8:	6219      	str	r1, [r3, #32]
 800b8ca:	6951      	ldr	r1, [r2, #20]
 800b8cc:	6892      	ldr	r2, [r2, #8]
 800b8ce:	619a      	str	r2, [r3, #24]
 800b8d0:	6259      	str	r1, [r3, #36]	@ 0x24
 800b8d2:	f005 fd47 	bl	8011364 <uxr_nanos>
 800b8d6:	f00c fa29 	bl	8017d2c <srand>
 800b8da:	f00c fa55 	bl	8017d88 <rand>
 800b8de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8e0:	6298      	str	r0, [r3, #40]	@ 0x28
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d0f9      	beq.n	800b8da <rmw_init_options_init+0x9e>
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	b003      	add	sp, #12
 800b8ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b8ee:	b004      	add	sp, #16
 800b8f0:	4770      	bx	lr
 800b8f2:	2001      	movs	r0, #1
 800b8f4:	e7b1      	b.n	800b85a <rmw_init_options_init+0x1e>
 800b8f6:	bf00      	nop
 800b8f8:	0801a6a8 	.word	0x0801a6a8
 800b8fc:	2000b18c 	.word	0x2000b18c
 800b900:	20006a28 	.word	0x20006a28
 800b904:	20006874 	.word	0x20006874
 800b908:	08019bd8 	.word	0x08019bd8

0800b90c <rmw_init_options_copy>:
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	b158      	cbz	r0, 800b928 <rmw_init_options_copy+0x1c>
 800b910:	460d      	mov	r5, r1
 800b912:	b149      	cbz	r1, 800b928 <rmw_init_options_copy+0x1c>
 800b914:	4604      	mov	r4, r0
 800b916:	6880      	ldr	r0, [r0, #8]
 800b918:	b120      	cbz	r0, 800b924 <rmw_init_options_copy+0x18>
 800b91a:	4b1e      	ldr	r3, [pc, #120]	@ (800b994 <rmw_init_options_copy+0x88>)
 800b91c:	6819      	ldr	r1, [r3, #0]
 800b91e:	f7f4 fc7f 	bl	8000220 <strcmp>
 800b922:	bb90      	cbnz	r0, 800b98a <rmw_init_options_copy+0x7e>
 800b924:	68ab      	ldr	r3, [r5, #8]
 800b926:	b113      	cbz	r3, 800b92e <rmw_init_options_copy+0x22>
 800b928:	250b      	movs	r5, #11
 800b92a:	4628      	mov	r0, r5
 800b92c:	bd70      	pop	{r4, r5, r6, pc}
 800b92e:	4623      	mov	r3, r4
 800b930:	462a      	mov	r2, r5
 800b932:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800b936:	f8d3 c000 	ldr.w	ip, [r3]
 800b93a:	6858      	ldr	r0, [r3, #4]
 800b93c:	6899      	ldr	r1, [r3, #8]
 800b93e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800b942:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b946:	3310      	adds	r3, #16
 800b948:	42b3      	cmp	r3, r6
 800b94a:	f8c2 c000 	str.w	ip, [r2]
 800b94e:	6050      	str	r0, [r2, #4]
 800b950:	6091      	str	r1, [r2, #8]
 800b952:	f102 0210 	add.w	r2, r2, #16
 800b956:	d1ee      	bne.n	800b936 <rmw_init_options_copy+0x2a>
 800b958:	6819      	ldr	r1, [r3, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	480e      	ldr	r0, [pc, #56]	@ (800b998 <rmw_init_options_copy+0x8c>)
 800b95e:	6053      	str	r3, [r2, #4]
 800b960:	6011      	str	r1, [r2, #0]
 800b962:	f00a fa19 	bl	8015d98 <get_memory>
 800b966:	b198      	cbz	r0, 800b990 <rmw_init_options_copy+0x84>
 800b968:	6883      	ldr	r3, [r0, #8]
 800b96a:	636b      	str	r3, [r5, #52]	@ 0x34
 800b96c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b96e:	f102 0c10 	add.w	ip, r2, #16
 800b972:	f103 0410 	add.w	r4, r3, #16
 800b976:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b97a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b97c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800b980:	2500      	movs	r5, #0
 800b982:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b986:	4628      	mov	r0, r5
 800b988:	bd70      	pop	{r4, r5, r6, pc}
 800b98a:	250c      	movs	r5, #12
 800b98c:	4628      	mov	r0, r5
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	2501      	movs	r5, #1
 800b992:	e7ca      	b.n	800b92a <rmw_init_options_copy+0x1e>
 800b994:	0801a6a8 	.word	0x0801a6a8
 800b998:	2000b18c 	.word	0x2000b18c

0800b99c <rmw_init_options_fini>:
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d03d      	beq.n	800ba1c <rmw_init_options_fini+0x80>
 800b9a0:	b510      	push	{r4, lr}
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	b08e      	sub	sp, #56	@ 0x38
 800b9a6:	3020      	adds	r0, #32
 800b9a8:	f7ff fe88 	bl	800b6bc <rcutils_allocator_is_valid>
 800b9ac:	b360      	cbz	r0, 800ba08 <rmw_init_options_fini+0x6c>
 800b9ae:	68a0      	ldr	r0, [r4, #8]
 800b9b0:	b120      	cbz	r0, 800b9bc <rmw_init_options_fini+0x20>
 800b9b2:	4b1c      	ldr	r3, [pc, #112]	@ (800ba24 <rmw_init_options_fini+0x88>)
 800b9b4:	6819      	ldr	r1, [r3, #0]
 800b9b6:	f7f4 fc33 	bl	8000220 <strcmp>
 800b9ba:	bb68      	cbnz	r0, 800ba18 <rmw_init_options_fini+0x7c>
 800b9bc:	4b1a      	ldr	r3, [pc, #104]	@ (800ba28 <rmw_init_options_fini+0x8c>)
 800b9be:	6819      	ldr	r1, [r3, #0]
 800b9c0:	b331      	cbz	r1, 800ba10 <rmw_init_options_fini+0x74>
 800b9c2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b9c4:	e001      	b.n	800b9ca <rmw_init_options_fini+0x2e>
 800b9c6:	6849      	ldr	r1, [r1, #4]
 800b9c8:	b311      	cbz	r1, 800ba10 <rmw_init_options_fini+0x74>
 800b9ca:	688b      	ldr	r3, [r1, #8]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d1fa      	bne.n	800b9c6 <rmw_init_options_fini+0x2a>
 800b9d0:	4815      	ldr	r0, [pc, #84]	@ (800ba28 <rmw_init_options_fini+0x8c>)
 800b9d2:	f00a f9f1 	bl	8015db8 <put_memory>
 800b9d6:	4668      	mov	r0, sp
 800b9d8:	f7ff ff02 	bl	800b7e0 <rmw_get_zero_initialized_init_options>
 800b9dc:	46ee      	mov	lr, sp
 800b9de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b9e2:	46a4      	mov	ip, r4
 800b9e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b9e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b9ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b9f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b9f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b9f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b9fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ba00:	2300      	movs	r3, #0
 800ba02:	4618      	mov	r0, r3
 800ba04:	b00e      	add	sp, #56	@ 0x38
 800ba06:	bd10      	pop	{r4, pc}
 800ba08:	230b      	movs	r3, #11
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	b00e      	add	sp, #56	@ 0x38
 800ba0e:	bd10      	pop	{r4, pc}
 800ba10:	2301      	movs	r3, #1
 800ba12:	4618      	mov	r0, r3
 800ba14:	b00e      	add	sp, #56	@ 0x38
 800ba16:	bd10      	pop	{r4, pc}
 800ba18:	230c      	movs	r3, #12
 800ba1a:	e7f2      	b.n	800ba02 <rmw_init_options_fini+0x66>
 800ba1c:	230b      	movs	r3, #11
 800ba1e:	4618      	mov	r0, r3
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	0801a6a8 	.word	0x0801a6a8
 800ba28:	2000b18c 	.word	0x2000b18c

0800ba2c <rmw_init>:
 800ba2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba30:	b083      	sub	sp, #12
 800ba32:	2800      	cmp	r0, #0
 800ba34:	f000 80d3 	beq.w	800bbde <rmw_init+0x1b2>
 800ba38:	460e      	mov	r6, r1
 800ba3a:	2900      	cmp	r1, #0
 800ba3c:	f000 80cf 	beq.w	800bbde <rmw_init+0x1b2>
 800ba40:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ba42:	4605      	mov	r5, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f000 80ca 	beq.w	800bbde <rmw_init+0x1b2>
 800ba4a:	4b78      	ldr	r3, [pc, #480]	@ (800bc2c <rmw_init+0x200>)
 800ba4c:	6880      	ldr	r0, [r0, #8]
 800ba4e:	681f      	ldr	r7, [r3, #0]
 800ba50:	b128      	cbz	r0, 800ba5e <rmw_init+0x32>
 800ba52:	4639      	mov	r1, r7
 800ba54:	f7f4 fbe4 	bl	8000220 <strcmp>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	f040 80ca 	bne.w	800bbf2 <rmw_init+0x1c6>
 800ba5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba62:	4c73      	ldr	r4, [pc, #460]	@ (800bc30 <rmw_init+0x204>)
 800ba64:	4973      	ldr	r1, [pc, #460]	@ (800bc34 <rmw_init+0x208>)
 800ba66:	4874      	ldr	r0, [pc, #464]	@ (800bc38 <rmw_init+0x20c>)
 800ba68:	60b7      	str	r7, [r6, #8]
 800ba6a:	e9c6 2300 	strd	r2, r3, [r6]
 800ba6e:	68eb      	ldr	r3, [r5, #12]
 800ba70:	64b3      	str	r3, [r6, #72]	@ 0x48
 800ba72:	2201      	movs	r2, #1
 800ba74:	f000 fd84 	bl	800c580 <rmw_uxrce_init_session_memory>
 800ba78:	4620      	mov	r0, r4
 800ba7a:	4970      	ldr	r1, [pc, #448]	@ (800bc3c <rmw_init+0x210>)
 800ba7c:	2204      	movs	r2, #4
 800ba7e:	f000 fdbf 	bl	800c600 <rmw_uxrce_init_static_input_buffer_memory>
 800ba82:	f04f 0800 	mov.w	r8, #0
 800ba86:	486c      	ldr	r0, [pc, #432]	@ (800bc38 <rmw_init+0x20c>)
 800ba88:	f884 800d 	strb.w	r8, [r4, #13]
 800ba8c:	f00a f984 	bl	8015d98 <get_memory>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	f000 80a9 	beq.w	800bbe8 <rmw_init+0x1bc>
 800ba96:	6884      	ldr	r4, [r0, #8]
 800ba98:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800ba9a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800ba9c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800baa0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800baa4:	9101      	str	r1, [sp, #4]
 800baa6:	6a00      	ldr	r0, [r0, #32]
 800baa8:	9000      	str	r0, [sp, #0]
 800baaa:	f104 0910 	add.w	r9, r4, #16
 800baae:	4661      	mov	r1, ip
 800bab0:	4648      	mov	r0, r9
 800bab2:	f003 fbc5 	bl	800f240 <uxr_set_custom_transport_callbacks>
 800bab6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800baba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800babe:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800bac2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800bac6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800baca:	495d      	ldr	r1, [pc, #372]	@ (800bc40 <rmw_init+0x214>)
 800bacc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800bad0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800bad4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800bad8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800badc:	4859      	ldr	r0, [pc, #356]	@ (800bc44 <rmw_init+0x218>)
 800bade:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800bae2:	2201      	movs	r2, #1
 800bae4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800bae6:	f000 fd2b 	bl	800c540 <rmw_uxrce_init_node_memory>
 800baea:	4957      	ldr	r1, [pc, #348]	@ (800bc48 <rmw_init+0x21c>)
 800baec:	4857      	ldr	r0, [pc, #348]	@ (800bc4c <rmw_init+0x220>)
 800baee:	2205      	movs	r2, #5
 800baf0:	f000 fd06 	bl	800c500 <rmw_uxrce_init_subscription_memory>
 800baf4:	4956      	ldr	r1, [pc, #344]	@ (800bc50 <rmw_init+0x224>)
 800baf6:	4857      	ldr	r0, [pc, #348]	@ (800bc54 <rmw_init+0x228>)
 800baf8:	220a      	movs	r2, #10
 800bafa:	f000 fce1 	bl	800c4c0 <rmw_uxrce_init_publisher_memory>
 800bafe:	4956      	ldr	r1, [pc, #344]	@ (800bc58 <rmw_init+0x22c>)
 800bb00:	4856      	ldr	r0, [pc, #344]	@ (800bc5c <rmw_init+0x230>)
 800bb02:	2201      	movs	r2, #1
 800bb04:	f000 fc9c 	bl	800c440 <rmw_uxrce_init_service_memory>
 800bb08:	4955      	ldr	r1, [pc, #340]	@ (800bc60 <rmw_init+0x234>)
 800bb0a:	4856      	ldr	r0, [pc, #344]	@ (800bc64 <rmw_init+0x238>)
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f000 fcb7 	bl	800c480 <rmw_uxrce_init_client_memory>
 800bb12:	4955      	ldr	r1, [pc, #340]	@ (800bc68 <rmw_init+0x23c>)
 800bb14:	4855      	ldr	r0, [pc, #340]	@ (800bc6c <rmw_init+0x240>)
 800bb16:	220f      	movs	r2, #15
 800bb18:	f000 fd52 	bl	800c5c0 <rmw_uxrce_init_topic_memory>
 800bb1c:	4954      	ldr	r1, [pc, #336]	@ (800bc70 <rmw_init+0x244>)
 800bb1e:	4855      	ldr	r0, [pc, #340]	@ (800bc74 <rmw_init+0x248>)
 800bb20:	2203      	movs	r2, #3
 800bb22:	f000 fd8d 	bl	800c640 <rmw_uxrce_init_init_options_impl_memory>
 800bb26:	4954      	ldr	r1, [pc, #336]	@ (800bc78 <rmw_init+0x24c>)
 800bb28:	4854      	ldr	r0, [pc, #336]	@ (800bc7c <rmw_init+0x250>)
 800bb2a:	2204      	movs	r2, #4
 800bb2c:	f000 fda8 	bl	800c680 <rmw_uxrce_init_wait_set_memory>
 800bb30:	4953      	ldr	r1, [pc, #332]	@ (800bc80 <rmw_init+0x254>)
 800bb32:	4854      	ldr	r0, [pc, #336]	@ (800bc84 <rmw_init+0x258>)
 800bb34:	2204      	movs	r2, #4
 800bb36:	f000 fdc3 	bl	800c6c0 <rmw_uxrce_init_guard_condition_memory>
 800bb3a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800bb3c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800bb3e:	4642      	mov	r2, r8
 800bb40:	f000 fc38 	bl	800c3b4 <rmw_uxrce_transport_init>
 800bb44:	4607      	mov	r7, r0
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d158      	bne.n	800bbfc <rmw_init+0x1d0>
 800bb4a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800bb4c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800bb50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb52:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800bb56:	4628      	mov	r0, r5
 800bb58:	f003 fd6e 	bl	800f638 <uxr_init_session>
 800bb5c:	494a      	ldr	r1, [pc, #296]	@ (800bc88 <rmw_init+0x25c>)
 800bb5e:	4622      	mov	r2, r4
 800bb60:	4628      	mov	r0, r5
 800bb62:	f003 fd8d 	bl	800f680 <uxr_set_topic_callback>
 800bb66:	4949      	ldr	r1, [pc, #292]	@ (800bc8c <rmw_init+0x260>)
 800bb68:	463a      	mov	r2, r7
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f003 fd84 	bl	800f678 <uxr_set_status_callback>
 800bb70:	4947      	ldr	r1, [pc, #284]	@ (800bc90 <rmw_init+0x264>)
 800bb72:	463a      	mov	r2, r7
 800bb74:	4628      	mov	r0, r5
 800bb76:	f003 fd87 	bl	800f688 <uxr_set_request_callback>
 800bb7a:	4946      	ldr	r1, [pc, #280]	@ (800bc94 <rmw_init+0x268>)
 800bb7c:	463a      	mov	r2, r7
 800bb7e:	4628      	mov	r0, r5
 800bb80:	f003 fd86 	bl	800f690 <uxr_set_reply_callback>
 800bb84:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bb88:	2304      	movs	r3, #4
 800bb8a:	0092      	lsls	r2, r2, #2
 800bb8c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800bb90:	4628      	mov	r0, r5
 800bb92:	f003 fdbb 	bl	800f70c <uxr_create_input_reliable_stream>
 800bb96:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bb9a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800bb9e:	0092      	lsls	r2, r2, #2
 800bba0:	2304      	movs	r3, #4
 800bba2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800bba6:	4628      	mov	r0, r5
 800bba8:	f003 fd88 	bl	800f6bc <uxr_create_output_reliable_stream>
 800bbac:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	f003 fda5 	bl	800f700 <uxr_create_input_best_effort_stream>
 800bbb6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800bbba:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800bbbe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bbc2:	3114      	adds	r1, #20
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f003 fd67 	bl	800f698 <uxr_create_output_best_effort_stream>
 800bbca:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f004 fb5a 	bl	8010288 <uxr_create_session>
 800bbd4:	b1f8      	cbz	r0, 800bc16 <rmw_init+0x1ea>
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	b003      	add	sp, #12
 800bbda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbde:	270b      	movs	r7, #11
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	b003      	add	sp, #12
 800bbe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbe8:	2701      	movs	r7, #1
 800bbea:	4638      	mov	r0, r7
 800bbec:	b003      	add	sp, #12
 800bbee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf2:	270c      	movs	r7, #12
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	b003      	add	sp, #12
 800bbf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbfc:	4648      	mov	r0, r9
 800bbfe:	f003 fb61 	bl	800f2c4 <uxr_close_custom_transport>
 800bc02:	480d      	ldr	r0, [pc, #52]	@ (800bc38 <rmw_init+0x20c>)
 800bc04:	4621      	mov	r1, r4
 800bc06:	f00a f8d7 	bl	8015db8 <put_memory>
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800bc10:	b003      	add	sp, #12
 800bc12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc16:	4648      	mov	r0, r9
 800bc18:	f003 fb54 	bl	800f2c4 <uxr_close_custom_transport>
 800bc1c:	4806      	ldr	r0, [pc, #24]	@ (800bc38 <rmw_init+0x20c>)
 800bc1e:	4621      	mov	r1, r4
 800bc20:	f00a f8ca 	bl	8015db8 <put_memory>
 800bc24:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800bc26:	2701      	movs	r7, #1
 800bc28:	e7d5      	b.n	800bbd6 <rmw_init+0x1aa>
 800bc2a:	bf00      	nop
 800bc2c:	0801a6a8 	.word	0x0801a6a8
 800bc30:	2000b1dc 	.word	0x2000b1dc
 800bc34:	20007488 	.word	0x20007488
 800bc38:	2000b1cc 	.word	0x2000b1cc
 800bc3c:	20008a30 	.word	0x20008a30
 800bc40:	20006aac 	.word	0x20006aac
 800bc44:	2000b19c 	.word	0x2000b19c
 800bc48:	2000ab30 	.word	0x2000ab30
 800bc4c:	2000b1ec 	.word	0x2000b1ec
 800bc50:	20006b50 	.word	0x20006b50
 800bc54:	2000b1ac 	.word	0x2000b1ac
 800bc58:	200073c0 	.word	0x200073c0
 800bc5c:	2000b1bc 	.word	0x2000b1bc
 800bc60:	200068e0 	.word	0x200068e0
 800bc64:	200068cc 	.word	0x200068cc
 800bc68:	2000af68 	.word	0x2000af68
 800bc6c:	2000b1fc 	.word	0x2000b1fc
 800bc70:	20006a28 	.word	0x20006a28
 800bc74:	2000b18c 	.word	0x2000b18c
 800bc78:	2000b10c 	.word	0x2000b10c
 800bc7c:	2000b20c 	.word	0x2000b20c
 800bc80:	200069a8 	.word	0x200069a8
 800bc84:	2000b17c 	.word	0x2000b17c
 800bc88:	08015bd1 	.word	0x08015bd1
 800bc8c:	08015bc9 	.word	0x08015bc9
 800bc90:	08015c69 	.word	0x08015c69
 800bc94:	08015d05 	.word	0x08015d05

0800bc98 <rmw_context_fini>:
 800bc98:	4b17      	ldr	r3, [pc, #92]	@ (800bcf8 <rmw_context_fini+0x60>)
 800bc9a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800bc9c:	b570      	push	{r4, r5, r6, lr}
 800bc9e:	681c      	ldr	r4, [r3, #0]
 800bca0:	4605      	mov	r5, r0
 800bca2:	b334      	cbz	r4, 800bcf2 <rmw_context_fini+0x5a>
 800bca4:	2600      	movs	r6, #0
 800bca6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800bcaa:	6902      	ldr	r2, [r0, #16]
 800bcac:	428a      	cmp	r2, r1
 800bcae:	d018      	beq.n	800bce2 <rmw_context_fini+0x4a>
 800bcb0:	2c00      	cmp	r4, #0
 800bcb2:	d1f8      	bne.n	800bca6 <rmw_context_fini+0xe>
 800bcb4:	b189      	cbz	r1, 800bcda <rmw_context_fini+0x42>
 800bcb6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800bcba:	789b      	ldrb	r3, [r3, #2]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800bcc2:	bf14      	ite	ne
 800bcc4:	210a      	movne	r1, #10
 800bcc6:	2100      	moveq	r1, #0
 800bcc8:	f004 fab6 	bl	8010238 <uxr_delete_session_retries>
 800bccc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800bcce:	f000 fd17 	bl	800c700 <rmw_uxrce_fini_session_memory>
 800bcd2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800bcd4:	3010      	adds	r0, #16
 800bcd6:	f003 faf5 	bl	800f2c4 <uxr_close_custom_transport>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800bcde:	4630      	mov	r0, r6
 800bce0:	bd70      	pop	{r4, r5, r6, pc}
 800bce2:	3018      	adds	r0, #24
 800bce4:	f000 f89c 	bl	800be20 <rmw_destroy_node>
 800bce8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bcea:	4606      	mov	r6, r0
 800bcec:	2c00      	cmp	r4, #0
 800bcee:	d1da      	bne.n	800bca6 <rmw_context_fini+0xe>
 800bcf0:	e7e0      	b.n	800bcb4 <rmw_context_fini+0x1c>
 800bcf2:	4626      	mov	r6, r4
 800bcf4:	e7de      	b.n	800bcb4 <rmw_context_fini+0x1c>
 800bcf6:	bf00      	nop
 800bcf8:	2000b19c 	.word	0x2000b19c

0800bcfc <create_node>:
 800bcfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd00:	b083      	sub	sp, #12
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d05f      	beq.n	800bdc6 <create_node+0xca>
 800bd06:	4606      	mov	r6, r0
 800bd08:	4835      	ldr	r0, [pc, #212]	@ (800bde0 <create_node+0xe4>)
 800bd0a:	460f      	mov	r7, r1
 800bd0c:	4690      	mov	r8, r2
 800bd0e:	461d      	mov	r5, r3
 800bd10:	f00a f842 	bl	8015d98 <get_memory>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d056      	beq.n	800bdc6 <create_node+0xca>
 800bd18:	6884      	ldr	r4, [r0, #8]
 800bd1a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800bd1c:	6123      	str	r3, [r4, #16]
 800bd1e:	f00a f8a3 	bl	8015e68 <rmw_get_implementation_identifier>
 800bd22:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800bd26:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800bd2a:	f8c4 9020 	str.w	r9, [r4, #32]
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f7f4 fa80 	bl	8000234 <strlen>
 800bd34:	1c42      	adds	r2, r0, #1
 800bd36:	2a3c      	cmp	r2, #60	@ 0x3c
 800bd38:	f104 0518 	add.w	r5, r4, #24
 800bd3c:	d840      	bhi.n	800bdc0 <create_node+0xc4>
 800bd3e:	4648      	mov	r0, r9
 800bd40:	4631      	mov	r1, r6
 800bd42:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800bd46:	f00c fc70 	bl	801862a <memcpy>
 800bd4a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800bd4e:	4638      	mov	r0, r7
 800bd50:	f7f4 fa70 	bl	8000234 <strlen>
 800bd54:	1c42      	adds	r2, r0, #1
 800bd56:	2a3c      	cmp	r2, #60	@ 0x3c
 800bd58:	d832      	bhi.n	800bdc0 <create_node+0xc4>
 800bd5a:	4639      	mov	r1, r7
 800bd5c:	4648      	mov	r0, r9
 800bd5e:	f00c fc64 	bl	801862a <memcpy>
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd68:	2101      	movs	r1, #1
 800bd6a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800bd6e:	1842      	adds	r2, r0, r1
 800bd70:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800bd74:	f003 faaa 	bl	800f2cc <uxr_object_id>
 800bd78:	6160      	str	r0, [r4, #20]
 800bd7a:	783b      	ldrb	r3, [r7, #0]
 800bd7c:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd7e:	d127      	bne.n	800bdd0 <create_node+0xd4>
 800bd80:	787b      	ldrb	r3, [r7, #1]
 800bd82:	bb2b      	cbnz	r3, 800bdd0 <create_node+0xd4>
 800bd84:	4a17      	ldr	r2, [pc, #92]	@ (800bde4 <create_node+0xe8>)
 800bd86:	4818      	ldr	r0, [pc, #96]	@ (800bde8 <create_node+0xec>)
 800bd88:	4633      	mov	r3, r6
 800bd8a:	213c      	movs	r1, #60	@ 0x3c
 800bd8c:	f00c fa16 	bl	80181bc <sniprintf>
 800bd90:	6920      	ldr	r0, [r4, #16]
 800bd92:	4915      	ldr	r1, [pc, #84]	@ (800bde8 <create_node+0xec>)
 800bd94:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800bd98:	9100      	str	r1, [sp, #0]
 800bd9a:	2106      	movs	r1, #6
 800bd9c:	9101      	str	r1, [sp, #4]
 800bd9e:	6811      	ldr	r1, [r2, #0]
 800bda0:	6962      	ldr	r2, [r4, #20]
 800bda2:	fa1f f388 	uxth.w	r3, r8
 800bda6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bdaa:	f003 f8bf 	bl	800ef2c <uxr_buffer_create_participant_bin>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	6920      	ldr	r0, [r4, #16]
 800bdb2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bdb6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bdba:	f000 fe17 	bl	800c9ec <run_xrce_session>
 800bdbe:	b918      	cbnz	r0, 800bdc8 <create_node+0xcc>
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	f000 fca3 	bl	800c70c <rmw_uxrce_fini_node_memory>
 800bdc6:	2500      	movs	r5, #0
 800bdc8:	4628      	mov	r0, r5
 800bdca:	b003      	add	sp, #12
 800bdcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdd0:	4a06      	ldr	r2, [pc, #24]	@ (800bdec <create_node+0xf0>)
 800bdd2:	9600      	str	r6, [sp, #0]
 800bdd4:	463b      	mov	r3, r7
 800bdd6:	213c      	movs	r1, #60	@ 0x3c
 800bdd8:	4803      	ldr	r0, [pc, #12]	@ (800bde8 <create_node+0xec>)
 800bdda:	f00c f9ef 	bl	80181bc <sniprintf>
 800bdde:	e7d7      	b.n	800bd90 <create_node+0x94>
 800bde0:	2000b19c 	.word	0x2000b19c
 800bde4:	08019c18 	.word	0x08019c18
 800bde8:	20006890 	.word	0x20006890
 800bdec:	08019bdc 	.word	0x08019bdc

0800bdf0 <rmw_create_node>:
 800bdf0:	b199      	cbz	r1, 800be1a <rmw_create_node+0x2a>
 800bdf2:	780b      	ldrb	r3, [r1, #0]
 800bdf4:	468c      	mov	ip, r1
 800bdf6:	b183      	cbz	r3, 800be1a <rmw_create_node+0x2a>
 800bdf8:	b410      	push	{r4}
 800bdfa:	4614      	mov	r4, r2
 800bdfc:	b14a      	cbz	r2, 800be12 <rmw_create_node+0x22>
 800bdfe:	7813      	ldrb	r3, [r2, #0]
 800be00:	b13b      	cbz	r3, 800be12 <rmw_create_node+0x22>
 800be02:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800be04:	4603      	mov	r3, r0
 800be06:	4621      	mov	r1, r4
 800be08:	4660      	mov	r0, ip
 800be0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be0e:	f7ff bf75 	b.w	800bcfc <create_node>
 800be12:	2000      	movs	r0, #0
 800be14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	2000      	movs	r0, #0
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop

0800be20 <rmw_destroy_node>:
 800be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be22:	b328      	cbz	r0, 800be70 <rmw_destroy_node+0x50>
 800be24:	4607      	mov	r7, r0
 800be26:	6800      	ldr	r0, [r0, #0]
 800be28:	b120      	cbz	r0, 800be34 <rmw_destroy_node+0x14>
 800be2a:	4b36      	ldr	r3, [pc, #216]	@ (800bf04 <rmw_destroy_node+0xe4>)
 800be2c:	6819      	ldr	r1, [r3, #0]
 800be2e:	f7f4 f9f7 	bl	8000220 <strcmp>
 800be32:	b9e8      	cbnz	r0, 800be70 <rmw_destroy_node+0x50>
 800be34:	687d      	ldr	r5, [r7, #4]
 800be36:	b1dd      	cbz	r5, 800be70 <rmw_destroy_node+0x50>
 800be38:	4b33      	ldr	r3, [pc, #204]	@ (800bf08 <rmw_destroy_node+0xe8>)
 800be3a:	681c      	ldr	r4, [r3, #0]
 800be3c:	2c00      	cmp	r4, #0
 800be3e:	d05f      	beq.n	800bf00 <rmw_destroy_node+0xe0>
 800be40:	2600      	movs	r6, #0
 800be42:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800be46:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800be4a:	429d      	cmp	r5, r3
 800be4c:	d013      	beq.n	800be76 <rmw_destroy_node+0x56>
 800be4e:	2c00      	cmp	r4, #0
 800be50:	d1f7      	bne.n	800be42 <rmw_destroy_node+0x22>
 800be52:	4b2e      	ldr	r3, [pc, #184]	@ (800bf0c <rmw_destroy_node+0xec>)
 800be54:	681c      	ldr	r4, [r3, #0]
 800be56:	b1c4      	cbz	r4, 800be8a <rmw_destroy_node+0x6a>
 800be58:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800be5c:	6a0b      	ldr	r3, [r1, #32]
 800be5e:	429d      	cmp	r5, r3
 800be60:	d1f9      	bne.n	800be56 <rmw_destroy_node+0x36>
 800be62:	317c      	adds	r1, #124	@ 0x7c
 800be64:	4638      	mov	r0, r7
 800be66:	f000 fa45 	bl	800c2f4 <rmw_destroy_subscription>
 800be6a:	2801      	cmp	r0, #1
 800be6c:	4606      	mov	r6, r0
 800be6e:	d1f2      	bne.n	800be56 <rmw_destroy_node+0x36>
 800be70:	2601      	movs	r6, #1
 800be72:	4630      	mov	r0, r6
 800be74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be76:	3184      	adds	r1, #132	@ 0x84
 800be78:	4638      	mov	r0, r7
 800be7a:	f000 f9a5 	bl	800c1c8 <rmw_destroy_publisher>
 800be7e:	2801      	cmp	r0, #1
 800be80:	4606      	mov	r6, r0
 800be82:	d0f5      	beq.n	800be70 <rmw_destroy_node+0x50>
 800be84:	2c00      	cmp	r4, #0
 800be86:	d1dc      	bne.n	800be42 <rmw_destroy_node+0x22>
 800be88:	e7e3      	b.n	800be52 <rmw_destroy_node+0x32>
 800be8a:	4b21      	ldr	r3, [pc, #132]	@ (800bf10 <rmw_destroy_node+0xf0>)
 800be8c:	681c      	ldr	r4, [r3, #0]
 800be8e:	b16c      	cbz	r4, 800beac <rmw_destroy_node+0x8c>
 800be90:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800be94:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800be96:	429d      	cmp	r5, r3
 800be98:	d1f9      	bne.n	800be8e <rmw_destroy_node+0x6e>
 800be9a:	317c      	adds	r1, #124	@ 0x7c
 800be9c:	4638      	mov	r0, r7
 800be9e:	f000 f9e5 	bl	800c26c <rmw_destroy_service>
 800bea2:	2801      	cmp	r0, #1
 800bea4:	4606      	mov	r6, r0
 800bea6:	d0e3      	beq.n	800be70 <rmw_destroy_node+0x50>
 800bea8:	2c00      	cmp	r4, #0
 800beaa:	d1f1      	bne.n	800be90 <rmw_destroy_node+0x70>
 800beac:	4b19      	ldr	r3, [pc, #100]	@ (800bf14 <rmw_destroy_node+0xf4>)
 800beae:	681c      	ldr	r4, [r3, #0]
 800beb0:	b16c      	cbz	r4, 800bece <rmw_destroy_node+0xae>
 800beb2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800beb6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800beb8:	429d      	cmp	r5, r3
 800beba:	d1f9      	bne.n	800beb0 <rmw_destroy_node+0x90>
 800bebc:	317c      	adds	r1, #124	@ 0x7c
 800bebe:	4638      	mov	r0, r7
 800bec0:	f009 ff8e 	bl	8015de0 <rmw_destroy_client>
 800bec4:	2801      	cmp	r0, #1
 800bec6:	4606      	mov	r6, r0
 800bec8:	d0d2      	beq.n	800be70 <rmw_destroy_node+0x50>
 800beca:	2c00      	cmp	r4, #0
 800becc:	d1f1      	bne.n	800beb2 <rmw_destroy_node+0x92>
 800bece:	6928      	ldr	r0, [r5, #16]
 800bed0:	696a      	ldr	r2, [r5, #20]
 800bed2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bed6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800beda:	6819      	ldr	r1, [r3, #0]
 800bedc:	f002 ffda 	bl	800ee94 <uxr_buffer_delete_entity>
 800bee0:	4602      	mov	r2, r0
 800bee2:	6928      	ldr	r0, [r5, #16]
 800bee4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800bee8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800beec:	f000 fd7e 	bl	800c9ec <run_xrce_session>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	bf08      	it	eq
 800bef4:	2602      	moveq	r6, #2
 800bef6:	4638      	mov	r0, r7
 800bef8:	f000 fc08 	bl	800c70c <rmw_uxrce_fini_node_memory>
 800befc:	4630      	mov	r0, r6
 800befe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf00:	4626      	mov	r6, r4
 800bf02:	e7a6      	b.n	800be52 <rmw_destroy_node+0x32>
 800bf04:	0801a6a8 	.word	0x0801a6a8
 800bf08:	2000b1ac 	.word	0x2000b1ac
 800bf0c:	2000b1ec 	.word	0x2000b1ec
 800bf10:	2000b1bc 	.word	0x2000b1bc
 800bf14:	200068cc 	.word	0x200068cc

0800bf18 <rmw_node_get_graph_guard_condition>:
 800bf18:	6843      	ldr	r3, [r0, #4]
 800bf1a:	6918      	ldr	r0, [r3, #16]
 800bf1c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop

0800bf24 <flush_session>:
 800bf24:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800bf26:	f003 bfe9 	b.w	800fefc <uxr_run_session_until_confirm_delivery>
 800bf2a:	bf00      	nop

0800bf2c <rmw_publish>:
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	d053      	beq.n	800bfd8 <rmw_publish+0xac>
 800bf30:	b570      	push	{r4, r5, r6, lr}
 800bf32:	460d      	mov	r5, r1
 800bf34:	b08e      	sub	sp, #56	@ 0x38
 800bf36:	2900      	cmp	r1, #0
 800bf38:	d04b      	beq.n	800bfd2 <rmw_publish+0xa6>
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	6800      	ldr	r0, [r0, #0]
 800bf3e:	f000 fdd5 	bl	800caec <is_uxrce_rmw_identifier_valid>
 800bf42:	2800      	cmp	r0, #0
 800bf44:	d045      	beq.n	800bfd2 <rmw_publish+0xa6>
 800bf46:	6866      	ldr	r6, [r4, #4]
 800bf48:	2e00      	cmp	r6, #0
 800bf4a:	d042      	beq.n	800bfd2 <rmw_publish+0xa6>
 800bf4c:	69b4      	ldr	r4, [r6, #24]
 800bf4e:	4628      	mov	r0, r5
 800bf50:	6923      	ldr	r3, [r4, #16]
 800bf52:	4798      	blx	r3
 800bf54:	69f3      	ldr	r3, [r6, #28]
 800bf56:	9005      	str	r0, [sp, #20]
 800bf58:	b113      	cbz	r3, 800bf60 <rmw_publish+0x34>
 800bf5a:	a805      	add	r0, sp, #20
 800bf5c:	4798      	blx	r3
 800bf5e:	9805      	ldr	r0, [sp, #20]
 800bf60:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	9000      	str	r0, [sp, #0]
 800bf68:	6972      	ldr	r2, [r6, #20]
 800bf6a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800bf6c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bf70:	ab06      	add	r3, sp, #24
 800bf72:	f005 fa97 	bl	80114a4 <uxr_prepare_output_stream>
 800bf76:	b1d8      	cbz	r0, 800bfb0 <rmw_publish+0x84>
 800bf78:	68a3      	ldr	r3, [r4, #8]
 800bf7a:	a906      	add	r1, sp, #24
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	4798      	blx	r3
 800bf80:	6a33      	ldr	r3, [r6, #32]
 800bf82:	4604      	mov	r4, r0
 800bf84:	b10b      	cbz	r3, 800bf8a <rmw_publish+0x5e>
 800bf86:	a806      	add	r0, sp, #24
 800bf88:	4798      	blx	r3
 800bf8a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bf94:	d022      	beq.n	800bfdc <rmw_publish+0xb0>
 800bf96:	6918      	ldr	r0, [r3, #16]
 800bf98:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800bf9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf9e:	f003 ffad 	bl	800fefc <uxr_run_session_until_confirm_delivery>
 800bfa2:	4020      	ands	r0, r4
 800bfa4:	b2c4      	uxtb	r4, r0
 800bfa6:	f084 0001 	eor.w	r0, r4, #1
 800bfaa:	b2c0      	uxtb	r0, r0
 800bfac:	b00e      	add	sp, #56	@ 0x38
 800bfae:	bd70      	pop	{r4, r5, r6, pc}
 800bfb0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bfb4:	6918      	ldr	r0, [r3, #16]
 800bfb6:	9b05      	ldr	r3, [sp, #20]
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	4b0b      	ldr	r3, [pc, #44]	@ (800bfe8 <rmw_publish+0xbc>)
 800bfbc:	9301      	str	r3, [sp, #4]
 800bfbe:	9602      	str	r6, [sp, #8]
 800bfc0:	6972      	ldr	r2, [r6, #20]
 800bfc2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800bfc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bfc8:	ab06      	add	r3, sp, #24
 800bfca:	f005 fa9b 	bl	8011504 <uxr_prepare_output_stream_fragmented>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d1d2      	bne.n	800bf78 <rmw_publish+0x4c>
 800bfd2:	2001      	movs	r0, #1
 800bfd4:	b00e      	add	sp, #56	@ 0x38
 800bfd6:	bd70      	pop	{r4, r5, r6, pc}
 800bfd8:	2001      	movs	r0, #1
 800bfda:	4770      	bx	lr
 800bfdc:	6918      	ldr	r0, [r3, #16]
 800bfde:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bfe2:	f003 fbcb 	bl	800f77c <uxr_flash_output_streams>
 800bfe6:	e7de      	b.n	800bfa6 <rmw_publish+0x7a>
 800bfe8:	0800bf25 	.word	0x0800bf25

0800bfec <rmw_create_publisher>:
 800bfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff0:	b087      	sub	sp, #28
 800bff2:	2800      	cmp	r0, #0
 800bff4:	f000 80cc 	beq.w	800c190 <rmw_create_publisher+0x1a4>
 800bff8:	460e      	mov	r6, r1
 800bffa:	2900      	cmp	r1, #0
 800bffc:	f000 80c8 	beq.w	800c190 <rmw_create_publisher+0x1a4>
 800c000:	4604      	mov	r4, r0
 800c002:	6800      	ldr	r0, [r0, #0]
 800c004:	4615      	mov	r5, r2
 800c006:	4698      	mov	r8, r3
 800c008:	f000 fd70 	bl	800caec <is_uxrce_rmw_identifier_valid>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	f000 80bf 	beq.w	800c190 <rmw_create_publisher+0x1a4>
 800c012:	2d00      	cmp	r5, #0
 800c014:	f000 80bc 	beq.w	800c190 <rmw_create_publisher+0x1a4>
 800c018:	782b      	ldrb	r3, [r5, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f000 80b8 	beq.w	800c190 <rmw_create_publisher+0x1a4>
 800c020:	f1b8 0f00 	cmp.w	r8, #0
 800c024:	f000 80b4 	beq.w	800c190 <rmw_create_publisher+0x1a4>
 800c028:	485c      	ldr	r0, [pc, #368]	@ (800c19c <rmw_create_publisher+0x1b0>)
 800c02a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c02e:	f009 feb3 	bl	8015d98 <get_memory>
 800c032:	2800      	cmp	r0, #0
 800c034:	f000 80ac 	beq.w	800c190 <rmw_create_publisher+0x1a4>
 800c038:	6884      	ldr	r4, [r0, #8]
 800c03a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800c03e:	f009 ff13 	bl	8015e68 <rmw_get_implementation_identifier>
 800c042:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800c046:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c04a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800c04e:	4628      	mov	r0, r5
 800c050:	f7f4 f8f0 	bl	8000234 <strlen>
 800c054:	3001      	adds	r0, #1
 800c056:	283c      	cmp	r0, #60	@ 0x3c
 800c058:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800c05c:	f200 8091 	bhi.w	800c182 <rmw_create_publisher+0x196>
 800c060:	4a4f      	ldr	r2, [pc, #316]	@ (800c1a0 <rmw_create_publisher+0x1b4>)
 800c062:	462b      	mov	r3, r5
 800c064:	213c      	movs	r1, #60	@ 0x3c
 800c066:	4650      	mov	r0, sl
 800c068:	f00c f8a8 	bl	80181bc <sniprintf>
 800c06c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c070:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800c072:	4641      	mov	r1, r8
 800c074:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800c078:	2250      	movs	r2, #80	@ 0x50
 800c07a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c07e:	f00c fad4 	bl	801862a <memcpy>
 800c082:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c086:	4947      	ldr	r1, [pc, #284]	@ (800c1a4 <rmw_create_publisher+0x1b8>)
 800c088:	2b02      	cmp	r3, #2
 800c08a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c08e:	bf0c      	ite	eq
 800c090:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800c094:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800c098:	67a3      	str	r3, [r4, #120]	@ 0x78
 800c09a:	2300      	movs	r3, #0
 800c09c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f000 fd31 	bl	800cb08 <get_message_typesupport_handle>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d06b      	beq.n	800c182 <rmw_create_publisher+0x196>
 800c0aa:	6842      	ldr	r2, [r0, #4]
 800c0ac:	61a2      	str	r2, [r4, #24]
 800c0ae:	2a00      	cmp	r2, #0
 800c0b0:	d067      	beq.n	800c182 <rmw_create_publisher+0x196>
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	4643      	mov	r3, r8
 800c0b6:	4648      	mov	r0, r9
 800c0b8:	f009 fedc 	bl	8015e74 <create_topic>
 800c0bc:	6260      	str	r0, [r4, #36]	@ 0x24
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d063      	beq.n	800c18a <rmw_create_publisher+0x19e>
 800c0c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0ca:	2103      	movs	r1, #3
 800c0cc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800c0d0:	1c42      	adds	r2, r0, #1
 800c0d2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800c0d6:	f003 f8f9 	bl	800f2cc <uxr_object_id>
 800c0da:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c0de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0e2:	6120      	str	r0, [r4, #16]
 800c0e4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800c0e8:	6910      	ldr	r0, [r2, #16]
 800c0ea:	2506      	movs	r5, #6
 800c0ec:	9500      	str	r5, [sp, #0]
 800c0ee:	6819      	ldr	r1, [r3, #0]
 800c0f0:	6922      	ldr	r2, [r4, #16]
 800c0f2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c0f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c0fa:	f002 ff7f 	bl	800effc <uxr_buffer_create_publisher_bin>
 800c0fe:	4602      	mov	r2, r0
 800c100:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c104:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c108:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c10c:	f000 fc6e 	bl	800c9ec <run_xrce_session>
 800c110:	b3b8      	cbz	r0, 800c182 <rmw_create_publisher+0x196>
 800c112:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c11a:	2105      	movs	r1, #5
 800c11c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800c120:	1c42      	adds	r2, r0, #1
 800c122:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800c126:	f003 f8d1 	bl	800f2cc <uxr_object_id>
 800c12a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c12e:	6160      	str	r0, [r4, #20]
 800c130:	691e      	ldr	r6, [r3, #16]
 800c132:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c136:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800c13a:	f10d 0a10 	add.w	sl, sp, #16
 800c13e:	4641      	mov	r1, r8
 800c140:	4650      	mov	r0, sl
 800c142:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800c146:	f000 fc6d 	bl	800ca24 <convert_qos_profile>
 800c14a:	9503      	str	r5, [sp, #12]
 800c14c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800c150:	9001      	str	r0, [sp, #4]
 800c152:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c156:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800c160:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c164:	f8d8 1000 	ldr.w	r1, [r8]
 800c168:	4630      	mov	r0, r6
 800c16a:	f002 ff77 	bl	800f05c <uxr_buffer_create_datawriter_bin>
 800c16e:	4602      	mov	r2, r0
 800c170:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c174:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c178:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c17c:	f000 fc36 	bl	800c9ec <run_xrce_session>
 800c180:	b938      	cbnz	r0, 800c192 <rmw_create_publisher+0x1a6>
 800c182:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c184:	b108      	cbz	r0, 800c18a <rmw_create_publisher+0x19e>
 800c186:	f000 fb31 	bl	800c7ec <rmw_uxrce_fini_topic_memory>
 800c18a:	4638      	mov	r0, r7
 800c18c:	f000 fad6 	bl	800c73c <rmw_uxrce_fini_publisher_memory>
 800c190:	2700      	movs	r7, #0
 800c192:	4638      	mov	r0, r7
 800c194:	b007      	add	sp, #28
 800c196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19a:	bf00      	nop
 800c19c:	2000b1ac 	.word	0x2000b1ac
 800c1a0:	08019c18 	.word	0x08019c18
 800c1a4:	08019be4 	.word	0x08019be4

0800c1a8 <rmw_publisher_get_actual_qos>:
 800c1a8:	b150      	cbz	r0, 800c1c0 <rmw_publisher_get_actual_qos+0x18>
 800c1aa:	b508      	push	{r3, lr}
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	b149      	cbz	r1, 800c1c4 <rmw_publisher_get_actual_qos+0x1c>
 800c1b0:	6841      	ldr	r1, [r0, #4]
 800c1b2:	2250      	movs	r2, #80	@ 0x50
 800c1b4:	3128      	adds	r1, #40	@ 0x28
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f00c fa37 	bl	801862a <memcpy>
 800c1bc:	2000      	movs	r0, #0
 800c1be:	bd08      	pop	{r3, pc}
 800c1c0:	200b      	movs	r0, #11
 800c1c2:	4770      	bx	lr
 800c1c4:	200b      	movs	r0, #11
 800c1c6:	bd08      	pop	{r3, pc}

0800c1c8 <rmw_destroy_publisher>:
 800c1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ca:	b128      	cbz	r0, 800c1d8 <rmw_destroy_publisher+0x10>
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	6800      	ldr	r0, [r0, #0]
 800c1d0:	460d      	mov	r5, r1
 800c1d2:	f000 fc8b 	bl	800caec <is_uxrce_rmw_identifier_valid>
 800c1d6:	b910      	cbnz	r0, 800c1de <rmw_destroy_publisher+0x16>
 800c1d8:	2401      	movs	r4, #1
 800c1da:	4620      	mov	r0, r4
 800c1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1de:	6863      	ldr	r3, [r4, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d0f9      	beq.n	800c1d8 <rmw_destroy_publisher+0x10>
 800c1e4:	2d00      	cmp	r5, #0
 800c1e6:	d0f7      	beq.n	800c1d8 <rmw_destroy_publisher+0x10>
 800c1e8:	6828      	ldr	r0, [r5, #0]
 800c1ea:	f000 fc7f 	bl	800caec <is_uxrce_rmw_identifier_valid>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d0f2      	beq.n	800c1d8 <rmw_destroy_publisher+0x10>
 800c1f2:	686c      	ldr	r4, [r5, #4]
 800c1f4:	2c00      	cmp	r4, #0
 800c1f6:	d0ef      	beq.n	800c1d8 <rmw_destroy_publisher+0x10>
 800c1f8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c1fa:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800c1fe:	f009 fe89 	bl	8015f14 <destroy_topic>
 800c202:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c206:	6962      	ldr	r2, [r4, #20]
 800c208:	6918      	ldr	r0, [r3, #16]
 800c20a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c20e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c212:	6819      	ldr	r1, [r3, #0]
 800c214:	f002 fe3e 	bl	800ee94 <uxr_buffer_delete_entity>
 800c218:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c21c:	6922      	ldr	r2, [r4, #16]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c224:	4604      	mov	r4, r0
 800c226:	6809      	ldr	r1, [r1, #0]
 800c228:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c22c:	f002 fe32 	bl	800ee94 <uxr_buffer_delete_entity>
 800c230:	693e      	ldr	r6, [r7, #16]
 800c232:	4622      	mov	r2, r4
 800c234:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c238:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c23c:	4604      	mov	r4, r0
 800c23e:	4630      	mov	r0, r6
 800c240:	f000 fbd4 	bl	800c9ec <run_xrce_session>
 800c244:	693e      	ldr	r6, [r7, #16]
 800c246:	4622      	mov	r2, r4
 800c248:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c24c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c250:	4604      	mov	r4, r0
 800c252:	4630      	mov	r0, r6
 800c254:	f000 fbca 	bl	800c9ec <run_xrce_session>
 800c258:	b12c      	cbz	r4, 800c266 <rmw_destroy_publisher+0x9e>
 800c25a:	b120      	cbz	r0, 800c266 <rmw_destroy_publisher+0x9e>
 800c25c:	2400      	movs	r4, #0
 800c25e:	4628      	mov	r0, r5
 800c260:	f000 fa6c 	bl	800c73c <rmw_uxrce_fini_publisher_memory>
 800c264:	e7b9      	b.n	800c1da <rmw_destroy_publisher+0x12>
 800c266:	2402      	movs	r4, #2
 800c268:	e7f9      	b.n	800c25e <rmw_destroy_publisher+0x96>
 800c26a:	bf00      	nop

0800c26c <rmw_destroy_service>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	b128      	cbz	r0, 800c27c <rmw_destroy_service+0x10>
 800c270:	4604      	mov	r4, r0
 800c272:	6800      	ldr	r0, [r0, #0]
 800c274:	460d      	mov	r5, r1
 800c276:	f000 fc39 	bl	800caec <is_uxrce_rmw_identifier_valid>
 800c27a:	b910      	cbnz	r0, 800c282 <rmw_destroy_service+0x16>
 800c27c:	2401      	movs	r4, #1
 800c27e:	4620      	mov	r0, r4
 800c280:	bd70      	pop	{r4, r5, r6, pc}
 800c282:	6863      	ldr	r3, [r4, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d0f9      	beq.n	800c27c <rmw_destroy_service+0x10>
 800c288:	2d00      	cmp	r5, #0
 800c28a:	d0f7      	beq.n	800c27c <rmw_destroy_service+0x10>
 800c28c:	6828      	ldr	r0, [r5, #0]
 800c28e:	f000 fc2d 	bl	800caec <is_uxrce_rmw_identifier_valid>
 800c292:	2800      	cmp	r0, #0
 800c294:	d0f2      	beq.n	800c27c <rmw_destroy_service+0x10>
 800c296:	686e      	ldr	r6, [r5, #4]
 800c298:	2e00      	cmp	r6, #0
 800c29a:	d0ef      	beq.n	800c27c <rmw_destroy_service+0x10>
 800c29c:	6864      	ldr	r4, [r4, #4]
 800c29e:	6932      	ldr	r2, [r6, #16]
 800c2a0:	6920      	ldr	r0, [r4, #16]
 800c2a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c2a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c2aa:	6819      	ldr	r1, [r3, #0]
 800c2ac:	f003 f83e 	bl	800f32c <uxr_buffer_cancel_data>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	6920      	ldr	r0, [r4, #16]
 800c2b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c2b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c2bc:	f000 fb96 	bl	800c9ec <run_xrce_session>
 800c2c0:	6920      	ldr	r0, [r4, #16]
 800c2c2:	6932      	ldr	r2, [r6, #16]
 800c2c4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c2c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c2cc:	6819      	ldr	r1, [r3, #0]
 800c2ce:	f002 fde1 	bl	800ee94 <uxr_buffer_delete_entity>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	6920      	ldr	r0, [r4, #16]
 800c2d6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c2da:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c2de:	f000 fb85 	bl	800c9ec <run_xrce_session>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	bf14      	ite	ne
 800c2e8:	2400      	movne	r4, #0
 800c2ea:	2402      	moveq	r4, #2
 800c2ec:	f000 fa52 	bl	800c794 <rmw_uxrce_fini_service_memory>
 800c2f0:	e7c5      	b.n	800c27e <rmw_destroy_service+0x12>
 800c2f2:	bf00      	nop

0800c2f4 <rmw_destroy_subscription>:
 800c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f6:	b128      	cbz	r0, 800c304 <rmw_destroy_subscription+0x10>
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	6800      	ldr	r0, [r0, #0]
 800c2fc:	460d      	mov	r5, r1
 800c2fe:	f000 fbf5 	bl	800caec <is_uxrce_rmw_identifier_valid>
 800c302:	b910      	cbnz	r0, 800c30a <rmw_destroy_subscription+0x16>
 800c304:	2401      	movs	r4, #1
 800c306:	4620      	mov	r0, r4
 800c308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c30a:	6863      	ldr	r3, [r4, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d0f9      	beq.n	800c304 <rmw_destroy_subscription+0x10>
 800c310:	2d00      	cmp	r5, #0
 800c312:	d0f7      	beq.n	800c304 <rmw_destroy_subscription+0x10>
 800c314:	6828      	ldr	r0, [r5, #0]
 800c316:	f000 fbe9 	bl	800caec <is_uxrce_rmw_identifier_valid>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d0f2      	beq.n	800c304 <rmw_destroy_subscription+0x10>
 800c31e:	686c      	ldr	r4, [r5, #4]
 800c320:	2c00      	cmp	r4, #0
 800c322:	d0ef      	beq.n	800c304 <rmw_destroy_subscription+0x10>
 800c324:	6a26      	ldr	r6, [r4, #32]
 800c326:	6962      	ldr	r2, [r4, #20]
 800c328:	6930      	ldr	r0, [r6, #16]
 800c32a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c32e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c332:	6819      	ldr	r1, [r3, #0]
 800c334:	f002 fffa 	bl	800f32c <uxr_buffer_cancel_data>
 800c338:	4602      	mov	r2, r0
 800c33a:	6930      	ldr	r0, [r6, #16]
 800c33c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c340:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c344:	f000 fb52 	bl	800c9ec <run_xrce_session>
 800c348:	69e0      	ldr	r0, [r4, #28]
 800c34a:	f009 fde3 	bl	8015f14 <destroy_topic>
 800c34e:	6a23      	ldr	r3, [r4, #32]
 800c350:	6962      	ldr	r2, [r4, #20]
 800c352:	6918      	ldr	r0, [r3, #16]
 800c354:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c358:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c35c:	6819      	ldr	r1, [r3, #0]
 800c35e:	f002 fd99 	bl	800ee94 <uxr_buffer_delete_entity>
 800c362:	6a23      	ldr	r3, [r4, #32]
 800c364:	6922      	ldr	r2, [r4, #16]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c36c:	4604      	mov	r4, r0
 800c36e:	6809      	ldr	r1, [r1, #0]
 800c370:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c374:	f002 fd8e 	bl	800ee94 <uxr_buffer_delete_entity>
 800c378:	6937      	ldr	r7, [r6, #16]
 800c37a:	4622      	mov	r2, r4
 800c37c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c380:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c384:	4604      	mov	r4, r0
 800c386:	4638      	mov	r0, r7
 800c388:	f000 fb30 	bl	800c9ec <run_xrce_session>
 800c38c:	6936      	ldr	r6, [r6, #16]
 800c38e:	4622      	mov	r2, r4
 800c390:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c394:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c398:	4604      	mov	r4, r0
 800c39a:	4630      	mov	r0, r6
 800c39c:	f000 fb26 	bl	800c9ec <run_xrce_session>
 800c3a0:	b12c      	cbz	r4, 800c3ae <rmw_destroy_subscription+0xba>
 800c3a2:	b120      	cbz	r0, 800c3ae <rmw_destroy_subscription+0xba>
 800c3a4:	2400      	movs	r4, #0
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f000 f9de 	bl	800c768 <rmw_uxrce_fini_subscription_memory>
 800c3ac:	e7ab      	b.n	800c306 <rmw_destroy_subscription+0x12>
 800c3ae:	2402      	movs	r4, #2
 800c3b0:	e7f9      	b.n	800c3a6 <rmw_destroy_subscription+0xb2>
 800c3b2:	bf00      	nop

0800c3b4 <rmw_uxrce_transport_init>:
 800c3b4:	b508      	push	{r3, lr}
 800c3b6:	b108      	cbz	r0, 800c3bc <rmw_uxrce_transport_init+0x8>
 800c3b8:	f100 0210 	add.w	r2, r0, #16
 800c3bc:	b139      	cbz	r1, 800c3ce <rmw_uxrce_transport_init+0x1a>
 800c3be:	6949      	ldr	r1, [r1, #20]
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	f002 ff4b 	bl	800f25c <uxr_init_custom_transport>
 800c3c6:	f080 0001 	eor.w	r0, r0, #1
 800c3ca:	b2c0      	uxtb	r0, r0
 800c3cc:	bd08      	pop	{r3, pc}
 800c3ce:	4b04      	ldr	r3, [pc, #16]	@ (800c3e0 <rmw_uxrce_transport_init+0x2c>)
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	6859      	ldr	r1, [r3, #4]
 800c3d4:	f002 ff42 	bl	800f25c <uxr_init_custom_transport>
 800c3d8:	f080 0001 	eor.w	r0, r0, #1
 800c3dc:	b2c0      	uxtb	r0, r0
 800c3de:	bd08      	pop	{r3, pc}
 800c3e0:	20006874 	.word	0x20006874

0800c3e4 <rmw_uros_epoch_millis>:
 800c3e4:	4b05      	ldr	r3, [pc, #20]	@ (800c3fc <rmw_uros_epoch_millis+0x18>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	b123      	cbz	r3, 800c3f4 <rmw_uros_epoch_millis+0x10>
 800c3ea:	6898      	ldr	r0, [r3, #8]
 800c3ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c3f0:	f003 b9a8 	b.w	800f744 <uxr_epoch_millis>
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	2000b1cc 	.word	0x2000b1cc

0800c400 <rmw_uros_epoch_nanos>:
 800c400:	4b05      	ldr	r3, [pc, #20]	@ (800c418 <rmw_uros_epoch_nanos+0x18>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	b123      	cbz	r3, 800c410 <rmw_uros_epoch_nanos+0x10>
 800c406:	6898      	ldr	r0, [r3, #8]
 800c408:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c40c:	f003 b9ac 	b.w	800f768 <uxr_epoch_nanos>
 800c410:	2000      	movs	r0, #0
 800c412:	2100      	movs	r1, #0
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	2000b1cc 	.word	0x2000b1cc

0800c41c <rmw_uros_sync_session>:
 800c41c:	b508      	push	{r3, lr}
 800c41e:	4b07      	ldr	r3, [pc, #28]	@ (800c43c <rmw_uros_sync_session+0x20>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	b14b      	cbz	r3, 800c438 <rmw_uros_sync_session+0x1c>
 800c424:	4601      	mov	r1, r0
 800c426:	6898      	ldr	r0, [r3, #8]
 800c428:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c42c:	f003 fde0 	bl	800fff0 <uxr_sync_session>
 800c430:	f080 0001 	eor.w	r0, r0, #1
 800c434:	b2c0      	uxtb	r0, r0
 800c436:	bd08      	pop	{r3, pc}
 800c438:	2001      	movs	r0, #1
 800c43a:	bd08      	pop	{r3, pc}
 800c43c:	2000b1cc 	.word	0x2000b1cc

0800c440 <rmw_uxrce_init_service_memory>:
 800c440:	b1e2      	cbz	r2, 800c47c <rmw_uxrce_init_service_memory+0x3c>
 800c442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c446:	7b05      	ldrb	r5, [r0, #12]
 800c448:	4606      	mov	r6, r0
 800c44a:	b9ad      	cbnz	r5, 800c478 <rmw_uxrce_init_service_memory+0x38>
 800c44c:	23c8      	movs	r3, #200	@ 0xc8
 800c44e:	e9c0 5500 	strd	r5, r5, [r0]
 800c452:	6083      	str	r3, [r0, #8]
 800c454:	f240 1301 	movw	r3, #257	@ 0x101
 800c458:	4617      	mov	r7, r2
 800c45a:	8183      	strh	r3, [r0, #12]
 800c45c:	460c      	mov	r4, r1
 800c45e:	46a8      	mov	r8, r5
 800c460:	4621      	mov	r1, r4
 800c462:	4630      	mov	r0, r6
 800c464:	3501      	adds	r5, #1
 800c466:	f009 fca7 	bl	8015db8 <put_memory>
 800c46a:	42af      	cmp	r7, r5
 800c46c:	60a4      	str	r4, [r4, #8]
 800c46e:	f884 800c 	strb.w	r8, [r4, #12]
 800c472:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c476:	d1f3      	bne.n	800c460 <rmw_uxrce_init_service_memory+0x20>
 800c478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop

0800c480 <rmw_uxrce_init_client_memory>:
 800c480:	b1e2      	cbz	r2, 800c4bc <rmw_uxrce_init_client_memory+0x3c>
 800c482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c486:	7b05      	ldrb	r5, [r0, #12]
 800c488:	4606      	mov	r6, r0
 800c48a:	b9ad      	cbnz	r5, 800c4b8 <rmw_uxrce_init_client_memory+0x38>
 800c48c:	23c8      	movs	r3, #200	@ 0xc8
 800c48e:	e9c0 5500 	strd	r5, r5, [r0]
 800c492:	6083      	str	r3, [r0, #8]
 800c494:	f240 1301 	movw	r3, #257	@ 0x101
 800c498:	4617      	mov	r7, r2
 800c49a:	8183      	strh	r3, [r0, #12]
 800c49c:	460c      	mov	r4, r1
 800c49e:	46a8      	mov	r8, r5
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	3501      	adds	r5, #1
 800c4a6:	f009 fc87 	bl	8015db8 <put_memory>
 800c4aa:	42af      	cmp	r7, r5
 800c4ac:	60a4      	str	r4, [r4, #8]
 800c4ae:	f884 800c 	strb.w	r8, [r4, #12]
 800c4b2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c4b6:	d1f3      	bne.n	800c4a0 <rmw_uxrce_init_client_memory+0x20>
 800c4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop

0800c4c0 <rmw_uxrce_init_publisher_memory>:
 800c4c0:	b1e2      	cbz	r2, 800c4fc <rmw_uxrce_init_publisher_memory+0x3c>
 800c4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c6:	7b05      	ldrb	r5, [r0, #12]
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	b9ad      	cbnz	r5, 800c4f8 <rmw_uxrce_init_publisher_memory+0x38>
 800c4cc:	23d8      	movs	r3, #216	@ 0xd8
 800c4ce:	e9c0 5500 	strd	r5, r5, [r0]
 800c4d2:	6083      	str	r3, [r0, #8]
 800c4d4:	f240 1301 	movw	r3, #257	@ 0x101
 800c4d8:	4617      	mov	r7, r2
 800c4da:	8183      	strh	r3, [r0, #12]
 800c4dc:	460c      	mov	r4, r1
 800c4de:	46a8      	mov	r8, r5
 800c4e0:	4621      	mov	r1, r4
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	3501      	adds	r5, #1
 800c4e6:	f009 fc67 	bl	8015db8 <put_memory>
 800c4ea:	42af      	cmp	r7, r5
 800c4ec:	60a4      	str	r4, [r4, #8]
 800c4ee:	f884 800c 	strb.w	r8, [r4, #12]
 800c4f2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c4f6:	d1f3      	bne.n	800c4e0 <rmw_uxrce_init_publisher_memory+0x20>
 800c4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop

0800c500 <rmw_uxrce_init_subscription_memory>:
 800c500:	b1e2      	cbz	r2, 800c53c <rmw_uxrce_init_subscription_memory+0x3c>
 800c502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c506:	7b05      	ldrb	r5, [r0, #12]
 800c508:	4606      	mov	r6, r0
 800c50a:	b9ad      	cbnz	r5, 800c538 <rmw_uxrce_init_subscription_memory+0x38>
 800c50c:	23d8      	movs	r3, #216	@ 0xd8
 800c50e:	e9c0 5500 	strd	r5, r5, [r0]
 800c512:	6083      	str	r3, [r0, #8]
 800c514:	f240 1301 	movw	r3, #257	@ 0x101
 800c518:	4617      	mov	r7, r2
 800c51a:	8183      	strh	r3, [r0, #12]
 800c51c:	460c      	mov	r4, r1
 800c51e:	46a8      	mov	r8, r5
 800c520:	4621      	mov	r1, r4
 800c522:	4630      	mov	r0, r6
 800c524:	3501      	adds	r5, #1
 800c526:	f009 fc47 	bl	8015db8 <put_memory>
 800c52a:	42af      	cmp	r7, r5
 800c52c:	60a4      	str	r4, [r4, #8]
 800c52e:	f884 800c 	strb.w	r8, [r4, #12]
 800c532:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c536:	d1f3      	bne.n	800c520 <rmw_uxrce_init_subscription_memory+0x20>
 800c538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop

0800c540 <rmw_uxrce_init_node_memory>:
 800c540:	b1e2      	cbz	r2, 800c57c <rmw_uxrce_init_node_memory+0x3c>
 800c542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c546:	7b05      	ldrb	r5, [r0, #12]
 800c548:	4606      	mov	r6, r0
 800c54a:	b9ad      	cbnz	r5, 800c578 <rmw_uxrce_init_node_memory+0x38>
 800c54c:	23a4      	movs	r3, #164	@ 0xa4
 800c54e:	e9c0 5500 	strd	r5, r5, [r0]
 800c552:	6083      	str	r3, [r0, #8]
 800c554:	f240 1301 	movw	r3, #257	@ 0x101
 800c558:	4617      	mov	r7, r2
 800c55a:	8183      	strh	r3, [r0, #12]
 800c55c:	460c      	mov	r4, r1
 800c55e:	46a8      	mov	r8, r5
 800c560:	4621      	mov	r1, r4
 800c562:	4630      	mov	r0, r6
 800c564:	3501      	adds	r5, #1
 800c566:	f009 fc27 	bl	8015db8 <put_memory>
 800c56a:	42af      	cmp	r7, r5
 800c56c:	60a4      	str	r4, [r4, #8]
 800c56e:	f884 800c 	strb.w	r8, [r4, #12]
 800c572:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c576:	d1f3      	bne.n	800c560 <rmw_uxrce_init_node_memory+0x20>
 800c578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop

0800c580 <rmw_uxrce_init_session_memory>:
 800c580:	b1ea      	cbz	r2, 800c5be <rmw_uxrce_init_session_memory+0x3e>
 800c582:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c586:	7b05      	ldrb	r5, [r0, #12]
 800c588:	4606      	mov	r6, r0
 800c58a:	b9b5      	cbnz	r5, 800c5ba <rmw_uxrce_init_session_memory+0x3a>
 800c58c:	e9c0 5500 	strd	r5, r5, [r0]
 800c590:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c594:	f240 1301 	movw	r3, #257	@ 0x101
 800c598:	4617      	mov	r7, r2
 800c59a:	f8c0 8008 	str.w	r8, [r0, #8]
 800c59e:	460c      	mov	r4, r1
 800c5a0:	8183      	strh	r3, [r0, #12]
 800c5a2:	46a9      	mov	r9, r5
 800c5a4:	4621      	mov	r1, r4
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	3501      	adds	r5, #1
 800c5aa:	f009 fc05 	bl	8015db8 <put_memory>
 800c5ae:	42af      	cmp	r7, r5
 800c5b0:	60a4      	str	r4, [r4, #8]
 800c5b2:	f884 900c 	strb.w	r9, [r4, #12]
 800c5b6:	4444      	add	r4, r8
 800c5b8:	d1f4      	bne.n	800c5a4 <rmw_uxrce_init_session_memory+0x24>
 800c5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5be:	4770      	bx	lr

0800c5c0 <rmw_uxrce_init_topic_memory>:
 800c5c0:	b1e2      	cbz	r2, 800c5fc <rmw_uxrce_init_topic_memory+0x3c>
 800c5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c6:	7b05      	ldrb	r5, [r0, #12]
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	b9ad      	cbnz	r5, 800c5f8 <rmw_uxrce_init_topic_memory+0x38>
 800c5cc:	231c      	movs	r3, #28
 800c5ce:	e9c0 5500 	strd	r5, r5, [r0]
 800c5d2:	6083      	str	r3, [r0, #8]
 800c5d4:	f240 1301 	movw	r3, #257	@ 0x101
 800c5d8:	4617      	mov	r7, r2
 800c5da:	8183      	strh	r3, [r0, #12]
 800c5dc:	460c      	mov	r4, r1
 800c5de:	46a8      	mov	r8, r5
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	3501      	adds	r5, #1
 800c5e6:	f009 fbe7 	bl	8015db8 <put_memory>
 800c5ea:	42af      	cmp	r7, r5
 800c5ec:	60a4      	str	r4, [r4, #8]
 800c5ee:	f884 800c 	strb.w	r8, [r4, #12]
 800c5f2:	f104 041c 	add.w	r4, r4, #28
 800c5f6:	d1f3      	bne.n	800c5e0 <rmw_uxrce_init_topic_memory+0x20>
 800c5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop

0800c600 <rmw_uxrce_init_static_input_buffer_memory>:
 800c600:	b1ea      	cbz	r2, 800c63e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c606:	7b05      	ldrb	r5, [r0, #12]
 800c608:	4606      	mov	r6, r0
 800c60a:	b9b5      	cbnz	r5, 800c63a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c60c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c610:	e9c0 5500 	strd	r5, r5, [r0]
 800c614:	6083      	str	r3, [r0, #8]
 800c616:	f240 1301 	movw	r3, #257	@ 0x101
 800c61a:	4617      	mov	r7, r2
 800c61c:	8183      	strh	r3, [r0, #12]
 800c61e:	460c      	mov	r4, r1
 800c620:	46a8      	mov	r8, r5
 800c622:	4621      	mov	r1, r4
 800c624:	4630      	mov	r0, r6
 800c626:	3501      	adds	r5, #1
 800c628:	f009 fbc6 	bl	8015db8 <put_memory>
 800c62c:	42af      	cmp	r7, r5
 800c62e:	60a4      	str	r4, [r4, #8]
 800c630:	f884 800c 	strb.w	r8, [r4, #12]
 800c634:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800c638:	d1f3      	bne.n	800c622 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c63e:	4770      	bx	lr

0800c640 <rmw_uxrce_init_init_options_impl_memory>:
 800c640:	b1e2      	cbz	r2, 800c67c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c646:	7b05      	ldrb	r5, [r0, #12]
 800c648:	4606      	mov	r6, r0
 800c64a:	b9ad      	cbnz	r5, 800c678 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c64c:	232c      	movs	r3, #44	@ 0x2c
 800c64e:	e9c0 5500 	strd	r5, r5, [r0]
 800c652:	6083      	str	r3, [r0, #8]
 800c654:	f240 1301 	movw	r3, #257	@ 0x101
 800c658:	4617      	mov	r7, r2
 800c65a:	8183      	strh	r3, [r0, #12]
 800c65c:	460c      	mov	r4, r1
 800c65e:	46a8      	mov	r8, r5
 800c660:	4621      	mov	r1, r4
 800c662:	4630      	mov	r0, r6
 800c664:	3501      	adds	r5, #1
 800c666:	f009 fba7 	bl	8015db8 <put_memory>
 800c66a:	42af      	cmp	r7, r5
 800c66c:	60a4      	str	r4, [r4, #8]
 800c66e:	f884 800c 	strb.w	r8, [r4, #12]
 800c672:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800c676:	d1f3      	bne.n	800c660 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop

0800c680 <rmw_uxrce_init_wait_set_memory>:
 800c680:	b1e2      	cbz	r2, 800c6bc <rmw_uxrce_init_wait_set_memory+0x3c>
 800c682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c686:	7b05      	ldrb	r5, [r0, #12]
 800c688:	4606      	mov	r6, r0
 800c68a:	b9ad      	cbnz	r5, 800c6b8 <rmw_uxrce_init_wait_set_memory+0x38>
 800c68c:	231c      	movs	r3, #28
 800c68e:	e9c0 5500 	strd	r5, r5, [r0]
 800c692:	6083      	str	r3, [r0, #8]
 800c694:	f240 1301 	movw	r3, #257	@ 0x101
 800c698:	4617      	mov	r7, r2
 800c69a:	8183      	strh	r3, [r0, #12]
 800c69c:	460c      	mov	r4, r1
 800c69e:	46a8      	mov	r8, r5
 800c6a0:	4621      	mov	r1, r4
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	3501      	adds	r5, #1
 800c6a6:	f009 fb87 	bl	8015db8 <put_memory>
 800c6aa:	42af      	cmp	r7, r5
 800c6ac:	60a4      	str	r4, [r4, #8]
 800c6ae:	f884 800c 	strb.w	r8, [r4, #12]
 800c6b2:	f104 041c 	add.w	r4, r4, #28
 800c6b6:	d1f3      	bne.n	800c6a0 <rmw_uxrce_init_wait_set_memory+0x20>
 800c6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop

0800c6c0 <rmw_uxrce_init_guard_condition_memory>:
 800c6c0:	b1e2      	cbz	r2, 800c6fc <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c6:	7b05      	ldrb	r5, [r0, #12]
 800c6c8:	4606      	mov	r6, r0
 800c6ca:	b9ad      	cbnz	r5, 800c6f8 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c6cc:	2320      	movs	r3, #32
 800c6ce:	e9c0 5500 	strd	r5, r5, [r0]
 800c6d2:	6083      	str	r3, [r0, #8]
 800c6d4:	f240 1301 	movw	r3, #257	@ 0x101
 800c6d8:	4617      	mov	r7, r2
 800c6da:	8183      	strh	r3, [r0, #12]
 800c6dc:	460c      	mov	r4, r1
 800c6de:	46a8      	mov	r8, r5
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	3501      	adds	r5, #1
 800c6e6:	f009 fb67 	bl	8015db8 <put_memory>
 800c6ea:	42af      	cmp	r7, r5
 800c6ec:	60a4      	str	r4, [r4, #8]
 800c6ee:	f884 800c 	strb.w	r8, [r4, #12]
 800c6f2:	f104 0420 	add.w	r4, r4, #32
 800c6f6:	d1f3      	bne.n	800c6e0 <rmw_uxrce_init_guard_condition_memory+0x20>
 800c6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop

0800c700 <rmw_uxrce_fini_session_memory>:
 800c700:	4601      	mov	r1, r0
 800c702:	4801      	ldr	r0, [pc, #4]	@ (800c708 <rmw_uxrce_fini_session_memory+0x8>)
 800c704:	f009 bb58 	b.w	8015db8 <put_memory>
 800c708:	2000b1cc 	.word	0x2000b1cc

0800c70c <rmw_uxrce_fini_node_memory>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	4604      	mov	r4, r0
 800c710:	6800      	ldr	r0, [r0, #0]
 800c712:	b128      	cbz	r0, 800c720 <rmw_uxrce_fini_node_memory+0x14>
 800c714:	4b07      	ldr	r3, [pc, #28]	@ (800c734 <rmw_uxrce_fini_node_memory+0x28>)
 800c716:	6819      	ldr	r1, [r3, #0]
 800c718:	f7f3 fd82 	bl	8000220 <strcmp>
 800c71c:	b940      	cbnz	r0, 800c730 <rmw_uxrce_fini_node_memory+0x24>
 800c71e:	6020      	str	r0, [r4, #0]
 800c720:	6861      	ldr	r1, [r4, #4]
 800c722:	b129      	cbz	r1, 800c730 <rmw_uxrce_fini_node_memory+0x24>
 800c724:	2500      	movs	r5, #0
 800c726:	4804      	ldr	r0, [pc, #16]	@ (800c738 <rmw_uxrce_fini_node_memory+0x2c>)
 800c728:	610d      	str	r5, [r1, #16]
 800c72a:	f009 fb45 	bl	8015db8 <put_memory>
 800c72e:	6065      	str	r5, [r4, #4]
 800c730:	bd38      	pop	{r3, r4, r5, pc}
 800c732:	bf00      	nop
 800c734:	0801a6a8 	.word	0x0801a6a8
 800c738:	2000b19c 	.word	0x2000b19c

0800c73c <rmw_uxrce_fini_publisher_memory>:
 800c73c:	b510      	push	{r4, lr}
 800c73e:	4604      	mov	r4, r0
 800c740:	6800      	ldr	r0, [r0, #0]
 800c742:	b128      	cbz	r0, 800c750 <rmw_uxrce_fini_publisher_memory+0x14>
 800c744:	4b06      	ldr	r3, [pc, #24]	@ (800c760 <rmw_uxrce_fini_publisher_memory+0x24>)
 800c746:	6819      	ldr	r1, [r3, #0]
 800c748:	f7f3 fd6a 	bl	8000220 <strcmp>
 800c74c:	b938      	cbnz	r0, 800c75e <rmw_uxrce_fini_publisher_memory+0x22>
 800c74e:	6020      	str	r0, [r4, #0]
 800c750:	6861      	ldr	r1, [r4, #4]
 800c752:	b121      	cbz	r1, 800c75e <rmw_uxrce_fini_publisher_memory+0x22>
 800c754:	4803      	ldr	r0, [pc, #12]	@ (800c764 <rmw_uxrce_fini_publisher_memory+0x28>)
 800c756:	f009 fb2f 	bl	8015db8 <put_memory>
 800c75a:	2300      	movs	r3, #0
 800c75c:	6063      	str	r3, [r4, #4]
 800c75e:	bd10      	pop	{r4, pc}
 800c760:	0801a6a8 	.word	0x0801a6a8
 800c764:	2000b1ac 	.word	0x2000b1ac

0800c768 <rmw_uxrce_fini_subscription_memory>:
 800c768:	b510      	push	{r4, lr}
 800c76a:	4604      	mov	r4, r0
 800c76c:	6800      	ldr	r0, [r0, #0]
 800c76e:	b128      	cbz	r0, 800c77c <rmw_uxrce_fini_subscription_memory+0x14>
 800c770:	4b06      	ldr	r3, [pc, #24]	@ (800c78c <rmw_uxrce_fini_subscription_memory+0x24>)
 800c772:	6819      	ldr	r1, [r3, #0]
 800c774:	f7f3 fd54 	bl	8000220 <strcmp>
 800c778:	b938      	cbnz	r0, 800c78a <rmw_uxrce_fini_subscription_memory+0x22>
 800c77a:	6020      	str	r0, [r4, #0]
 800c77c:	6861      	ldr	r1, [r4, #4]
 800c77e:	b121      	cbz	r1, 800c78a <rmw_uxrce_fini_subscription_memory+0x22>
 800c780:	4803      	ldr	r0, [pc, #12]	@ (800c790 <rmw_uxrce_fini_subscription_memory+0x28>)
 800c782:	f009 fb19 	bl	8015db8 <put_memory>
 800c786:	2300      	movs	r3, #0
 800c788:	6063      	str	r3, [r4, #4]
 800c78a:	bd10      	pop	{r4, pc}
 800c78c:	0801a6a8 	.word	0x0801a6a8
 800c790:	2000b1ec 	.word	0x2000b1ec

0800c794 <rmw_uxrce_fini_service_memory>:
 800c794:	b510      	push	{r4, lr}
 800c796:	4604      	mov	r4, r0
 800c798:	6800      	ldr	r0, [r0, #0]
 800c79a:	b128      	cbz	r0, 800c7a8 <rmw_uxrce_fini_service_memory+0x14>
 800c79c:	4b06      	ldr	r3, [pc, #24]	@ (800c7b8 <rmw_uxrce_fini_service_memory+0x24>)
 800c79e:	6819      	ldr	r1, [r3, #0]
 800c7a0:	f7f3 fd3e 	bl	8000220 <strcmp>
 800c7a4:	b938      	cbnz	r0, 800c7b6 <rmw_uxrce_fini_service_memory+0x22>
 800c7a6:	6020      	str	r0, [r4, #0]
 800c7a8:	6861      	ldr	r1, [r4, #4]
 800c7aa:	b121      	cbz	r1, 800c7b6 <rmw_uxrce_fini_service_memory+0x22>
 800c7ac:	4803      	ldr	r0, [pc, #12]	@ (800c7bc <rmw_uxrce_fini_service_memory+0x28>)
 800c7ae:	f009 fb03 	bl	8015db8 <put_memory>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	6063      	str	r3, [r4, #4]
 800c7b6:	bd10      	pop	{r4, pc}
 800c7b8:	0801a6a8 	.word	0x0801a6a8
 800c7bc:	2000b1bc 	.word	0x2000b1bc

0800c7c0 <rmw_uxrce_fini_client_memory>:
 800c7c0:	b510      	push	{r4, lr}
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	6800      	ldr	r0, [r0, #0]
 800c7c6:	b128      	cbz	r0, 800c7d4 <rmw_uxrce_fini_client_memory+0x14>
 800c7c8:	4b06      	ldr	r3, [pc, #24]	@ (800c7e4 <rmw_uxrce_fini_client_memory+0x24>)
 800c7ca:	6819      	ldr	r1, [r3, #0]
 800c7cc:	f7f3 fd28 	bl	8000220 <strcmp>
 800c7d0:	b938      	cbnz	r0, 800c7e2 <rmw_uxrce_fini_client_memory+0x22>
 800c7d2:	6020      	str	r0, [r4, #0]
 800c7d4:	6861      	ldr	r1, [r4, #4]
 800c7d6:	b121      	cbz	r1, 800c7e2 <rmw_uxrce_fini_client_memory+0x22>
 800c7d8:	4803      	ldr	r0, [pc, #12]	@ (800c7e8 <rmw_uxrce_fini_client_memory+0x28>)
 800c7da:	f009 faed 	bl	8015db8 <put_memory>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	6063      	str	r3, [r4, #4]
 800c7e2:	bd10      	pop	{r4, pc}
 800c7e4:	0801a6a8 	.word	0x0801a6a8
 800c7e8:	200068cc 	.word	0x200068cc

0800c7ec <rmw_uxrce_fini_topic_memory>:
 800c7ec:	b510      	push	{r4, lr}
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	4803      	ldr	r0, [pc, #12]	@ (800c800 <rmw_uxrce_fini_topic_memory+0x14>)
 800c7f4:	f009 fae0 	bl	8015db8 <put_memory>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	61a3      	str	r3, [r4, #24]
 800c7fc:	bd10      	pop	{r4, pc}
 800c7fe:	bf00      	nop
 800c800:	2000b1fc 	.word	0x2000b1fc

0800c804 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c804:	b082      	sub	sp, #8
 800c806:	b530      	push	{r4, r5, lr}
 800c808:	4925      	ldr	r1, [pc, #148]	@ (800c8a0 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c80a:	680d      	ldr	r5, [r1, #0]
 800c80c:	ac03      	add	r4, sp, #12
 800c80e:	e884 000c 	stmia.w	r4, {r2, r3}
 800c812:	461c      	mov	r4, r3
 800c814:	2d00      	cmp	r5, #0
 800c816:	d041      	beq.n	800c89c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800c818:	462b      	mov	r3, r5
 800c81a:	2100      	movs	r1, #0
 800c81c:	689a      	ldr	r2, [r3, #8]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800c824:	4290      	cmp	r0, r2
 800c826:	bf08      	it	eq
 800c828:	3101      	addeq	r1, #1
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1f6      	bne.n	800c81c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c82e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c832:	2b02      	cmp	r3, #2
 800c834:	d029      	beq.n	800c88a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c836:	d907      	bls.n	800c848 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c838:	2b03      	cmp	r3, #3
 800c83a:	d005      	beq.n	800c848 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c83c:	2100      	movs	r1, #0
 800c83e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c842:	4608      	mov	r0, r1
 800c844:	b002      	add	sp, #8
 800c846:	4770      	bx	lr
 800c848:	b314      	cbz	r4, 800c890 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c84a:	428c      	cmp	r4, r1
 800c84c:	d820      	bhi.n	800c890 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c84e:	2d00      	cmp	r5, #0
 800c850:	d0f4      	beq.n	800c83c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c852:	2100      	movs	r1, #0
 800c854:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800c858:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800c85c:	e002      	b.n	800c864 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800c85e:	686d      	ldr	r5, [r5, #4]
 800c860:	2d00      	cmp	r5, #0
 800c862:	d0ec      	beq.n	800c83e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c864:	68ab      	ldr	r3, [r5, #8]
 800c866:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800c86a:	4290      	cmp	r0, r2
 800c86c:	d1f7      	bne.n	800c85e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c86e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800c872:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800c876:	4562      	cmp	r2, ip
 800c878:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c87c:	eb73 0e04 	sbcs.w	lr, r3, r4
 800c880:	daed      	bge.n	800c85e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c882:	4694      	mov	ip, r2
 800c884:	461c      	mov	r4, r3
 800c886:	4629      	mov	r1, r5
 800c888:	e7e9      	b.n	800c85e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c88a:	b10c      	cbz	r4, 800c890 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c88c:	428c      	cmp	r4, r1
 800c88e:	d9d5      	bls.n	800c83c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c894:	4802      	ldr	r0, [pc, #8]	@ (800c8a0 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c896:	b002      	add	sp, #8
 800c898:	f009 ba7e 	b.w	8015d98 <get_memory>
 800c89c:	4629      	mov	r1, r5
 800c89e:	e7c6      	b.n	800c82e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c8a0:	2000b1dc 	.word	0x2000b1dc

0800c8a4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c8a4:	4b11      	ldr	r3, [pc, #68]	@ (800c8ec <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	b530      	push	{r4, r5, lr}
 800c8aa:	b1e3      	cbz	r3, 800c8e6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c8ac:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800c8b0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800c8b4:	2400      	movs	r4, #0
 800c8b6:	e001      	b.n	800c8bc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	b193      	cbz	r3, 800c8e2 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800c8bc:	689a      	ldr	r2, [r3, #8]
 800c8be:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800c8c2:	4288      	cmp	r0, r1
 800c8c4:	d1f8      	bne.n	800c8b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c8c6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800c8ca:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800c8ce:	4571      	cmp	r1, lr
 800c8d0:	eb72 050c 	sbcs.w	r5, r2, ip
 800c8d4:	daf0      	bge.n	800c8b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c8d6:	461c      	mov	r4, r3
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	468e      	mov	lr, r1
 800c8dc:	4694      	mov	ip, r2
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1ec      	bne.n	800c8bc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	bd30      	pop	{r4, r5, pc}
 800c8e6:	461c      	mov	r4, r3
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	bd30      	pop	{r4, r5, pc}
 800c8ec:	2000b1dc 	.word	0x2000b1dc

0800c8f0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	4b3c      	ldr	r3, [pc, #240]	@ (800c9e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c8f6:	ed2d 8b06 	vpush	{d8-d10}
 800c8fa:	681f      	ldr	r7, [r3, #0]
 800c8fc:	b08d      	sub	sp, #52	@ 0x34
 800c8fe:	f7ff fd7f 	bl	800c400 <rmw_uros_epoch_nanos>
 800c902:	2f00      	cmp	r7, #0
 800c904:	d05d      	beq.n	800c9c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c906:	46b8      	mov	r8, r7
 800c908:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800c9d0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c90c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c910:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c914:	2b04      	cmp	r3, #4
 800c916:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800c9d8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c91a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800c9e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c91e:	4681      	mov	r9, r0
 800c920:	468a      	mov	sl, r1
 800c922:	ac04      	add	r4, sp, #16
 800c924:	d03f      	beq.n	800c9a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c926:	2b05      	cmp	r3, #5
 800c928:	d044      	beq.n	800c9b4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c92a:	2b03      	cmp	r3, #3
 800c92c:	d03b      	beq.n	800c9a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c92e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c932:	ed8d ab06 	vstr	d10, [sp, #24]
 800c936:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c93a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800c93e:	ab08      	add	r3, sp, #32
 800c940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c942:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c946:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c94a:	f008 ff71 	bl	8015830 <rmw_time_equal>
 800c94e:	b118      	cbz	r0, 800c958 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800c950:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c954:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c958:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c95c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800c960:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800c964:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c968:	f008 ffb6 	bl	80158d8 <rmw_time_total_nsec>
 800c96c:	1830      	adds	r0, r6, r0
 800c96e:	eb47 0101 	adc.w	r1, r7, r1
 800c972:	4548      	cmp	r0, r9
 800c974:	eb71 030a 	sbcs.w	r3, r1, sl
 800c978:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800c97c:	db05      	blt.n	800c98a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c97e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c982:	4591      	cmp	r9, r2
 800c984:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c988:	da03      	bge.n	800c992 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c98a:	4817      	ldr	r0, [pc, #92]	@ (800c9e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c98c:	4641      	mov	r1, r8
 800c98e:	f009 fa13 	bl	8015db8 <put_memory>
 800c992:	f1bb 0f00 	cmp.w	fp, #0
 800c996:	d014      	beq.n	800c9c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c998:	46d8      	mov	r8, fp
 800c99a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c99e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c9a2:	2b04      	cmp	r3, #4
 800c9a4:	d1bf      	bne.n	800c926 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c9a6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c9aa:	3340      	adds	r3, #64	@ 0x40
 800c9ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c9b2:	e7c0      	b.n	800c936 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c9b4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c9b8:	3348      	adds	r3, #72	@ 0x48
 800c9ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c9c0:	e7b9      	b.n	800c936 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c9c2:	b00d      	add	sp, #52	@ 0x34
 800c9c4:	ecbd 8b06 	vpop	{d8-d10}
 800c9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9cc:	f3af 8000 	nop.w
	...
 800c9d8:	00000001 	.word	0x00000001
 800c9dc:	00000000 	.word	0x00000000
 800c9e0:	0000001e 	.word	0x0000001e
 800c9e4:	00000000 	.word	0x00000000
 800c9e8:	2000b1dc 	.word	0x2000b1dc

0800c9ec <run_xrce_session>:
 800c9ec:	b510      	push	{r4, lr}
 800c9ee:	788c      	ldrb	r4, [r1, #2]
 800c9f0:	b086      	sub	sp, #24
 800c9f2:	2c01      	cmp	r4, #1
 800c9f4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c9f8:	d00c      	beq.n	800ca14 <run_xrce_session+0x28>
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	f10d 020e 	add.w	r2, sp, #14
 800ca04:	f10d 0317 	add.w	r3, sp, #23
 800ca08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ca0c:	f003 fa9c 	bl	800ff48 <uxr_run_session_until_all_status>
 800ca10:	b006      	add	sp, #24
 800ca12:	bd10      	pop	{r4, pc}
 800ca14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ca18:	f002 feb0 	bl	800f77c <uxr_flash_output_streams>
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	b006      	add	sp, #24
 800ca20:	bd10      	pop	{r4, pc}
 800ca22:	bf00      	nop

0800ca24 <convert_qos_profile>:
 800ca24:	7a4a      	ldrb	r2, [r1, #9]
 800ca26:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ca2a:	2a02      	cmp	r2, #2
 800ca2c:	bf18      	it	ne
 800ca2e:	2200      	movne	r2, #0
 800ca30:	7002      	strb	r2, [r0, #0]
 800ca32:	780a      	ldrb	r2, [r1, #0]
 800ca34:	8889      	ldrh	r1, [r1, #4]
 800ca36:	8081      	strh	r1, [r0, #4]
 800ca38:	f1ac 0c02 	sub.w	ip, ip, #2
 800ca3c:	f1a2 0202 	sub.w	r2, r2, #2
 800ca40:	fabc fc8c 	clz	ip, ip
 800ca44:	fab2 f282 	clz	r2, r2
 800ca48:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ca4c:	0952      	lsrs	r2, r2, #5
 800ca4e:	f880 c001 	strb.w	ip, [r0, #1]
 800ca52:	7082      	strb	r2, [r0, #2]
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop

0800ca58 <generate_type_name>:
 800ca58:	b530      	push	{r4, r5, lr}
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	700b      	strb	r3, [r1, #0]
 800ca5e:	6803      	ldr	r3, [r0, #0]
 800ca60:	b087      	sub	sp, #28
 800ca62:	4614      	mov	r4, r2
 800ca64:	b1d3      	cbz	r3, 800ca9c <generate_type_name+0x44>
 800ca66:	4a0f      	ldr	r2, [pc, #60]	@ (800caa4 <generate_type_name+0x4c>)
 800ca68:	4615      	mov	r5, r2
 800ca6a:	9203      	str	r2, [sp, #12]
 800ca6c:	9500      	str	r5, [sp, #0]
 800ca6e:	6842      	ldr	r2, [r0, #4]
 800ca70:	480d      	ldr	r0, [pc, #52]	@ (800caa8 <generate_type_name+0x50>)
 800ca72:	9001      	str	r0, [sp, #4]
 800ca74:	4608      	mov	r0, r1
 800ca76:	490d      	ldr	r1, [pc, #52]	@ (800caac <generate_type_name+0x54>)
 800ca78:	9204      	str	r2, [sp, #16]
 800ca7a:	9105      	str	r1, [sp, #20]
 800ca7c:	9102      	str	r1, [sp, #8]
 800ca7e:	4a0c      	ldr	r2, [pc, #48]	@ (800cab0 <generate_type_name+0x58>)
 800ca80:	4621      	mov	r1, r4
 800ca82:	f00b fb9b 	bl	80181bc <sniprintf>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	db05      	blt.n	800ca96 <generate_type_name+0x3e>
 800ca8a:	4284      	cmp	r4, r0
 800ca8c:	bfd4      	ite	le
 800ca8e:	2000      	movle	r0, #0
 800ca90:	2001      	movgt	r0, #1
 800ca92:	b007      	add	sp, #28
 800ca94:	bd30      	pop	{r4, r5, pc}
 800ca96:	2000      	movs	r0, #0
 800ca98:	b007      	add	sp, #28
 800ca9a:	bd30      	pop	{r4, r5, pc}
 800ca9c:	4b05      	ldr	r3, [pc, #20]	@ (800cab4 <generate_type_name+0x5c>)
 800ca9e:	4a01      	ldr	r2, [pc, #4]	@ (800caa4 <generate_type_name+0x4c>)
 800caa0:	461d      	mov	r5, r3
 800caa2:	e7e2      	b.n	800ca6a <generate_type_name+0x12>
 800caa4:	08019c08 	.word	0x08019c08
 800caa8:	08019c20 	.word	0x08019c20
 800caac:	08019c1c 	.word	0x08019c1c
 800cab0:	08019c0c 	.word	0x08019c0c
 800cab4:	0801a74c 	.word	0x0801a74c

0800cab8 <generate_topic_name>:
 800cab8:	b510      	push	{r4, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	4614      	mov	r4, r2
 800cabe:	9000      	str	r0, [sp, #0]
 800cac0:	4b08      	ldr	r3, [pc, #32]	@ (800cae4 <generate_topic_name+0x2c>)
 800cac2:	4a09      	ldr	r2, [pc, #36]	@ (800cae8 <generate_topic_name+0x30>)
 800cac4:	4608      	mov	r0, r1
 800cac6:	4621      	mov	r1, r4
 800cac8:	f00b fb78 	bl	80181bc <sniprintf>
 800cacc:	2800      	cmp	r0, #0
 800cace:	db05      	blt.n	800cadc <generate_topic_name+0x24>
 800cad0:	4284      	cmp	r4, r0
 800cad2:	bfd4      	ite	le
 800cad4:	2000      	movle	r0, #0
 800cad6:	2001      	movgt	r0, #1
 800cad8:	b002      	add	sp, #8
 800cada:	bd10      	pop	{r4, pc}
 800cadc:	2000      	movs	r0, #0
 800cade:	b002      	add	sp, #8
 800cae0:	bd10      	pop	{r4, pc}
 800cae2:	bf00      	nop
 800cae4:	08019c2c 	.word	0x08019c2c
 800cae8:	08019c24 	.word	0x08019c24

0800caec <is_uxrce_rmw_identifier_valid>:
 800caec:	b510      	push	{r4, lr}
 800caee:	4604      	mov	r4, r0
 800caf0:	b140      	cbz	r0, 800cb04 <is_uxrce_rmw_identifier_valid+0x18>
 800caf2:	f009 f9b9 	bl	8015e68 <rmw_get_implementation_identifier>
 800caf6:	4601      	mov	r1, r0
 800caf8:	4620      	mov	r0, r4
 800cafa:	f7f3 fb91 	bl	8000220 <strcmp>
 800cafe:	fab0 f080 	clz	r0, r0
 800cb02:	0940      	lsrs	r0, r0, #5
 800cb04:	bd10      	pop	{r4, pc}
 800cb06:	bf00      	nop

0800cb08 <get_message_typesupport_handle>:
 800cb08:	6883      	ldr	r3, [r0, #8]
 800cb0a:	4718      	bx	r3

0800cb0c <get_message_typesupport_handle_function>:
 800cb0c:	b510      	push	{r4, lr}
 800cb0e:	4604      	mov	r4, r0
 800cb10:	6800      	ldr	r0, [r0, #0]
 800cb12:	f7f3 fb85 	bl	8000220 <strcmp>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	bf0c      	ite	eq
 800cb1a:	4620      	moveq	r0, r4
 800cb1c:	2000      	movne	r0, #0
 800cb1e:	bd10      	pop	{r4, pc}

0800cb20 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800cb20:	4b04      	ldr	r3, [pc, #16]	@ (800cb34 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	b10a      	cbz	r2, 800cb2a <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800cb26:	4803      	ldr	r0, [pc, #12]	@ (800cb34 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800cb28:	4770      	bx	lr
 800cb2a:	4a03      	ldr	r2, [pc, #12]	@ (800cb38 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800cb2c:	4801      	ldr	r0, [pc, #4]	@ (800cb34 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800cb2e:	6812      	ldr	r2, [r2, #0]
 800cb30:	601a      	str	r2, [r3, #0]
 800cb32:	4770      	bx	lr
 800cb34:	200000c0 	.word	0x200000c0
 800cb38:	20000608 	.word	0x20000608

0800cb3c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800cb3c:	4a02      	ldr	r2, [pc, #8]	@ (800cb48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800cb3e:	4b03      	ldr	r3, [pc, #12]	@ (800cb4c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800cb40:	6812      	ldr	r2, [r2, #0]
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	20000608 	.word	0x20000608
 800cb4c:	200000c0 	.word	0x200000c0

0800cb50 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800cb50:	2009      	movs	r0, #9
 800cb52:	4770      	bx	lr

0800cb54 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800cb54:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop

0800cb5c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800cb5c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cb60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb64:	e9c2 0100 	strd	r0, r1, [r2]
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop

0800cb6c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800cb6c:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cb70:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cb74:	e9c1 2300 	strd	r2, r3, [r1]
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop

0800cb7c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800cb7c:	f009 bd56 	b.w	801662c <sensor_msgs__msg__Imu__init>

0800cb80 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800cb80:	f009 bdaa 	b.w	80166d8 <sensor_msgs__msg__Imu__fini>

0800cb84 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800cb84:	2009      	movs	r0, #9
 800cb86:	4770      	bx	lr

0800cb88 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800cb88:	2009      	movs	r0, #9
 800cb8a:	4770      	bx	lr

0800cb8c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800cb8c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop

0800cb94 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800cb94:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop

0800cb9c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800cb9c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop

0800cba4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800cba4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop

0800cbac <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800cbac:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop

0800cbb4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800cbb4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cbb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbbc:	e9c2 0100 	strd	r0, r1, [r2]
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop

0800cbc4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800cbc4:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cbc8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cbcc:	e9c1 2300 	strd	r2, r3, [r1]
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop

0800cbd4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800cbd4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cbd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbdc:	e9c2 0100 	strd	r0, r1, [r2]
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop

0800cbe4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800cbe4:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cbe8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cbec:	e9c1 2300 	strd	r2, r3, [r1]
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop

0800cbf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800cbf4:	b510      	push	{r4, lr}
 800cbf6:	f000 f90f 	bl	800ce18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800cbfa:	4c0b      	ldr	r4, [pc, #44]	@ (800cc28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800cbfc:	60e0      	str	r0, [r4, #12]
 800cbfe:	f000 fa33 	bl	800d068 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800cc02:	64a0      	str	r0, [r4, #72]	@ 0x48
 800cc04:	f000 fa42 	bl	800d08c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cc08:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800cc0c:	f000 fa3e 	bl	800d08c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cc10:	4b06      	ldr	r3, [pc, #24]	@ (800cc2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800cc12:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	b10a      	cbz	r2, 800cc1e <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800cc1a:	4804      	ldr	r0, [pc, #16]	@ (800cc2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800cc1c:	bd10      	pop	{r4, pc}
 800cc1e:	4a04      	ldr	r2, [pc, #16]	@ (800cc30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800cc20:	4802      	ldr	r0, [pc, #8]	@ (800cc2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800cc22:	6812      	ldr	r2, [r2, #0]
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	bd10      	pop	{r4, pc}
 800cc28:	200000cc 	.word	0x200000cc
 800cc2c:	20000270 	.word	0x20000270
 800cc30:	2000060c 	.word	0x2000060c

0800cc34 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800cc34:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800cc38:	4680      	mov	r8, r0
 800cc3a:	460f      	mov	r7, r1
 800cc3c:	f000 f910 	bl	800ce60 <get_serialized_size_std_msgs__msg__Header>
 800cc40:	183c      	adds	r4, r7, r0
 800cc42:	4621      	mov	r1, r4
 800cc44:	f108 0018 	add.w	r0, r8, #24
 800cc48:	f000 fa2e 	bl	800d0a8 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800cc4c:	4404      	add	r4, r0
 800cc4e:	2108      	movs	r1, #8
 800cc50:	4620      	mov	r0, r4
 800cc52:	f002 f85b 	bl	800ed0c <ucdr_alignment>
 800cc56:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800cc5a:	4425      	add	r5, r4
 800cc5c:	4629      	mov	r1, r5
 800cc5e:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800cc62:	f000 fad9 	bl	800d218 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cc66:	4405      	add	r5, r0
 800cc68:	2108      	movs	r1, #8
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	f002 f84e 	bl	800ed0c <ucdr_alignment>
 800cc70:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800cc74:	4425      	add	r5, r4
 800cc76:	4629      	mov	r1, r5
 800cc78:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800cc7c:	f000 facc 	bl	800d218 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cc80:	4405      	add	r5, r0
 800cc82:	2108      	movs	r1, #8
 800cc84:	4628      	mov	r0, r5
 800cc86:	f002 f841 	bl	800ed0c <ucdr_alignment>
 800cc8a:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800cc8e:	4438      	add	r0, r7
 800cc90:	4428      	add	r0, r5
 800cc92:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800cc96:	bf00      	nop

0800cc98 <get_serialized_size_sensor_msgs__msg__Imu>:
 800cc98:	b108      	cbz	r0, 800cc9e <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800cc9a:	f7ff bfcb 	b.w	800cc34 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800cc9e:	4770      	bx	lr

0800cca0 <_Imu__get_serialized_size>:
 800cca0:	b110      	cbz	r0, 800cca8 <_Imu__get_serialized_size+0x8>
 800cca2:	2100      	movs	r1, #0
 800cca4:	f7ff bfc6 	b.w	800cc34 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop

0800ccac <_Imu__cdr_deserialize>:
 800ccac:	b538      	push	{r3, r4, r5, lr}
 800ccae:	460c      	mov	r4, r1
 800ccb0:	b399      	cbz	r1, 800cd1a <_Imu__cdr_deserialize+0x6e>
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	f000 f956 	bl	800cf64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ccb8:	6843      	ldr	r3, [r0, #4]
 800ccba:	4621      	mov	r1, r4
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	4798      	blx	r3
 800ccc2:	f000 faa5 	bl	800d210 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800ccc6:	6843      	ldr	r3, [r0, #4]
 800ccc8:	f104 0118 	add.w	r1, r4, #24
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	4628      	mov	r0, r5
 800ccd0:	4798      	blx	r3
 800ccd2:	2209      	movs	r2, #9
 800ccd4:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800ccd8:	4628      	mov	r0, r5
 800ccda:	f000 fcad 	bl	800d638 <ucdr_deserialize_array_double>
 800ccde:	f000 fb27 	bl	800d330 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cce2:	6843      	ldr	r3, [r0, #4]
 800cce4:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	4628      	mov	r0, r5
 800ccec:	4798      	blx	r3
 800ccee:	2209      	movs	r2, #9
 800ccf0:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	f000 fc9f 	bl	800d638 <ucdr_deserialize_array_double>
 800ccfa:	f000 fb19 	bl	800d330 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ccfe:	6843      	ldr	r3, [r0, #4]
 800cd00:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	4628      	mov	r0, r5
 800cd08:	4798      	blx	r3
 800cd0a:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800cd0e:	4628      	mov	r0, r5
 800cd10:	2209      	movs	r2, #9
 800cd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd16:	f000 bc8f 	b.w	800d638 <ucdr_deserialize_array_double>
 800cd1a:	4608      	mov	r0, r1
 800cd1c:	bd38      	pop	{r3, r4, r5, pc}
 800cd1e:	bf00      	nop

0800cd20 <_Imu__cdr_serialize>:
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d035      	beq.n	800cd90 <_Imu__cdr_serialize+0x70>
 800cd24:	b538      	push	{r3, r4, r5, lr}
 800cd26:	460d      	mov	r5, r1
 800cd28:	4604      	mov	r4, r0
 800cd2a:	f000 f91b 	bl	800cf64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800cd2e:	6843      	ldr	r3, [r0, #4]
 800cd30:	4629      	mov	r1, r5
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	4620      	mov	r0, r4
 800cd36:	4798      	blx	r3
 800cd38:	f000 fa6a 	bl	800d210 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800cd3c:	6843      	ldr	r3, [r0, #4]
 800cd3e:	4629      	mov	r1, r5
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	f104 0018 	add.w	r0, r4, #24
 800cd46:	4798      	blx	r3
 800cd48:	2209      	movs	r2, #9
 800cd4a:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800cd4e:	4628      	mov	r0, r5
 800cd50:	f000 fc1e 	bl	800d590 <ucdr_serialize_array_double>
 800cd54:	f000 faec 	bl	800d330 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cd58:	6843      	ldr	r3, [r0, #4]
 800cd5a:	4629      	mov	r1, r5
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800cd62:	4798      	blx	r3
 800cd64:	2209      	movs	r2, #9
 800cd66:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	f000 fc10 	bl	800d590 <ucdr_serialize_array_double>
 800cd70:	f000 fade 	bl	800d330 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cd74:	6843      	ldr	r3, [r0, #4]
 800cd76:	4629      	mov	r1, r5
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800cd7e:	4798      	blx	r3
 800cd80:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800cd84:	4628      	mov	r0, r5
 800cd86:	2209      	movs	r2, #9
 800cd88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd8c:	f000 bc00 	b.w	800d590 <ucdr_serialize_array_double>
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop

0800cd94 <max_serialized_size_sensor_msgs__msg__Imu>:
 800cd94:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800cd98:	2301      	movs	r3, #1
 800cd9a:	7003      	strb	r3, [r0, #0]
 800cd9c:	4680      	mov	r8, r0
 800cd9e:	460f      	mov	r7, r1
 800cda0:	f000 f8d6 	bl	800cf50 <max_serialized_size_std_msgs__msg__Header>
 800cda4:	183c      	adds	r4, r7, r0
 800cda6:	4621      	mov	r1, r4
 800cda8:	4640      	mov	r0, r8
 800cdaa:	f000 fa0f 	bl	800d1cc <max_serialized_size_geometry_msgs__msg__Quaternion>
 800cdae:	4404      	add	r4, r0
 800cdb0:	2108      	movs	r1, #8
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f001 ffaa 	bl	800ed0c <ucdr_alignment>
 800cdb8:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800cdbc:	4425      	add	r5, r4
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	4640      	mov	r0, r8
 800cdc2:	f000 fa99 	bl	800d2f8 <max_serialized_size_geometry_msgs__msg__Vector3>
 800cdc6:	4405      	add	r5, r0
 800cdc8:	2108      	movs	r1, #8
 800cdca:	4628      	mov	r0, r5
 800cdcc:	f001 ff9e 	bl	800ed0c <ucdr_alignment>
 800cdd0:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800cdd4:	4425      	add	r5, r4
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	4640      	mov	r0, r8
 800cdda:	f000 fa8d 	bl	800d2f8 <max_serialized_size_geometry_msgs__msg__Vector3>
 800cdde:	4405      	add	r5, r0
 800cde0:	2108      	movs	r1, #8
 800cde2:	4628      	mov	r0, r5
 800cde4:	f001 ff92 	bl	800ed0c <ucdr_alignment>
 800cde8:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800cdec:	4438      	add	r0, r7
 800cdee:	4428      	add	r0, r5
 800cdf0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800cdf4 <_Imu__max_serialized_size>:
 800cdf4:	b500      	push	{lr}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	f10d 0007 	add.w	r0, sp, #7
 800cdfe:	f7ff ffc9 	bl	800cd94 <max_serialized_size_sensor_msgs__msg__Imu>
 800ce02:	b003      	add	sp, #12
 800ce04:	f85d fb04 	ldr.w	pc, [sp], #4

0800ce08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ce08:	4800      	ldr	r0, [pc, #0]	@ (800ce0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800ce0a:	4770      	bx	lr
 800ce0c:	2000027c 	.word	0x2000027c

0800ce10 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800ce10:	f009 bc76 	b.w	8016700 <std_msgs__msg__Header__init>

0800ce14 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800ce14:	f009 bc98 	b.w	8016748 <std_msgs__msg__Header__fini>

0800ce18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800ce18:	b508      	push	{r3, lr}
 800ce1a:	f000 f8ab 	bl	800cf74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ce1e:	4b06      	ldr	r3, [pc, #24]	@ (800ce38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ce20:	4906      	ldr	r1, [pc, #24]	@ (800ce3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	60c8      	str	r0, [r1, #12]
 800ce26:	b10a      	cbz	r2, 800ce2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800ce28:	4803      	ldr	r0, [pc, #12]	@ (800ce38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ce2a:	bd08      	pop	{r3, pc}
 800ce2c:	4a04      	ldr	r2, [pc, #16]	@ (800ce40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800ce2e:	4802      	ldr	r0, [pc, #8]	@ (800ce38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ce30:	6812      	ldr	r2, [r2, #0]
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	bd08      	pop	{r3, pc}
 800ce36:	bf00      	nop
 800ce38:	2000031c 	.word	0x2000031c
 800ce3c:	200002a4 	.word	0x200002a4
 800ce40:	2000060c 	.word	0x2000060c

0800ce44 <_Header__max_serialized_size>:
 800ce44:	b500      	push	{lr}
 800ce46:	b083      	sub	sp, #12
 800ce48:	2301      	movs	r3, #1
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	f10d 0007 	add.w	r0, sp, #7
 800ce50:	f88d 3007 	strb.w	r3, [sp, #7]
 800ce54:	f000 f8ec 	bl	800d030 <max_serialized_size_builtin_interfaces__msg__Time>
 800ce58:	b003      	add	sp, #12
 800ce5a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce5e:	bf00      	nop

0800ce60 <get_serialized_size_std_msgs__msg__Header>:
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	4605      	mov	r5, r0
 800ce64:	b168      	cbz	r0, 800ce82 <get_serialized_size_std_msgs__msg__Header+0x22>
 800ce66:	460c      	mov	r4, r1
 800ce68:	f000 f892 	bl	800cf90 <get_serialized_size_builtin_interfaces__msg__Time>
 800ce6c:	1826      	adds	r6, r4, r0
 800ce6e:	2104      	movs	r1, #4
 800ce70:	4630      	mov	r0, r6
 800ce72:	f001 ff4b 	bl	800ed0c <ucdr_alignment>
 800ce76:	68e9      	ldr	r1, [r5, #12]
 800ce78:	f1c4 0405 	rsb	r4, r4, #5
 800ce7c:	440c      	add	r4, r1
 800ce7e:	4404      	add	r4, r0
 800ce80:	19a0      	adds	r0, r4, r6
 800ce82:	bd70      	pop	{r4, r5, r6, pc}

0800ce84 <_Header__cdr_deserialize>:
 800ce84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce86:	460c      	mov	r4, r1
 800ce88:	b083      	sub	sp, #12
 800ce8a:	b1e1      	cbz	r1, 800cec6 <_Header__cdr_deserialize+0x42>
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	f000 f8e3 	bl	800d058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ce92:	6843      	ldr	r3, [r0, #4]
 800ce94:	4621      	mov	r1, r4
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	4630      	mov	r0, r6
 800ce9a:	4798      	blx	r3
 800ce9c:	6927      	ldr	r7, [r4, #16]
 800ce9e:	68a1      	ldr	r1, [r4, #8]
 800cea0:	ab01      	add	r3, sp, #4
 800cea2:	463a      	mov	r2, r7
 800cea4:	4630      	mov	r0, r6
 800cea6:	f001 ffaf 	bl	800ee08 <ucdr_deserialize_sequence_char>
 800ceaa:	9b01      	ldr	r3, [sp, #4]
 800ceac:	4605      	mov	r5, r0
 800ceae:	b920      	cbnz	r0, 800ceba <_Header__cdr_deserialize+0x36>
 800ceb0:	429f      	cmp	r7, r3
 800ceb2:	d30c      	bcc.n	800cece <_Header__cdr_deserialize+0x4a>
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	b003      	add	sp, #12
 800ceb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceba:	b103      	cbz	r3, 800cebe <_Header__cdr_deserialize+0x3a>
 800cebc:	3b01      	subs	r3, #1
 800cebe:	4628      	mov	r0, r5
 800cec0:	60e3      	str	r3, [r4, #12]
 800cec2:	b003      	add	sp, #12
 800cec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cec6:	460d      	mov	r5, r1
 800cec8:	4628      	mov	r0, r5
 800ceca:	b003      	add	sp, #12
 800cecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cece:	2101      	movs	r1, #1
 800ced0:	75b0      	strb	r0, [r6, #22]
 800ced2:	7571      	strb	r1, [r6, #21]
 800ced4:	4630      	mov	r0, r6
 800ced6:	60e5      	str	r5, [r4, #12]
 800ced8:	f001 ff2e 	bl	800ed38 <ucdr_align_to>
 800cedc:	4630      	mov	r0, r6
 800cede:	9901      	ldr	r1, [sp, #4]
 800cee0:	f001 ff60 	bl	800eda4 <ucdr_advance_buffer>
 800cee4:	4628      	mov	r0, r5
 800cee6:	b003      	add	sp, #12
 800cee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceea:	bf00      	nop

0800ceec <_Header__cdr_serialize>:
 800ceec:	b1f8      	cbz	r0, 800cf2e <_Header__cdr_serialize+0x42>
 800ceee:	b570      	push	{r4, r5, r6, lr}
 800cef0:	4604      	mov	r4, r0
 800cef2:	460d      	mov	r5, r1
 800cef4:	f000 f8b0 	bl	800d058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800cef8:	6843      	ldr	r3, [r0, #4]
 800cefa:	4629      	mov	r1, r5
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	4620      	mov	r0, r4
 800cf00:	4798      	blx	r3
 800cf02:	68a6      	ldr	r6, [r4, #8]
 800cf04:	b156      	cbz	r6, 800cf1c <_Header__cdr_serialize+0x30>
 800cf06:	4630      	mov	r0, r6
 800cf08:	f7f3 f994 	bl	8000234 <strlen>
 800cf0c:	4631      	mov	r1, r6
 800cf0e:	60e0      	str	r0, [r4, #12]
 800cf10:	1c42      	adds	r2, r0, #1
 800cf12:	4628      	mov	r0, r5
 800cf14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf18:	f001 bf64 	b.w	800ede4 <ucdr_serialize_sequence_char>
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	60e0      	str	r0, [r4, #12]
 800cf20:	4632      	mov	r2, r6
 800cf22:	4631      	mov	r1, r6
 800cf24:	4628      	mov	r0, r5
 800cf26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf2a:	f001 bf5b 	b.w	800ede4 <ucdr_serialize_sequence_char>
 800cf2e:	4770      	bx	lr

0800cf30 <_Header__get_serialized_size>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4604      	mov	r4, r0
 800cf34:	b150      	cbz	r0, 800cf4c <_Header__get_serialized_size+0x1c>
 800cf36:	2100      	movs	r1, #0
 800cf38:	f000 f82a 	bl	800cf90 <get_serialized_size_builtin_interfaces__msg__Time>
 800cf3c:	2104      	movs	r1, #4
 800cf3e:	4605      	mov	r5, r0
 800cf40:	f001 fee4 	bl	800ed0c <ucdr_alignment>
 800cf44:	68e2      	ldr	r2, [r4, #12]
 800cf46:	3205      	adds	r2, #5
 800cf48:	1953      	adds	r3, r2, r5
 800cf4a:	4418      	add	r0, r3
 800cf4c:	bd38      	pop	{r3, r4, r5, pc}
 800cf4e:	bf00      	nop

0800cf50 <max_serialized_size_std_msgs__msg__Header>:
 800cf50:	b510      	push	{r4, lr}
 800cf52:	2301      	movs	r3, #1
 800cf54:	4604      	mov	r4, r0
 800cf56:	7003      	strb	r3, [r0, #0]
 800cf58:	f000 f86a 	bl	800d030 <max_serialized_size_builtin_interfaces__msg__Time>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	7023      	strb	r3, [r4, #0]
 800cf60:	bd10      	pop	{r4, pc}
 800cf62:	bf00      	nop

0800cf64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800cf64:	4800      	ldr	r0, [pc, #0]	@ (800cf68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800cf66:	4770      	bx	lr
 800cf68:	20000328 	.word	0x20000328

0800cf6c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800cf6c:	f009 bbf8 	b.w	8016760 <builtin_interfaces__msg__Time__init>

0800cf70 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800cf70:	f009 bbfa 	b.w	8016768 <builtin_interfaces__msg__Time__fini>

0800cf74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800cf74:	4b04      	ldr	r3, [pc, #16]	@ (800cf88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	b10a      	cbz	r2, 800cf7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800cf7a:	4803      	ldr	r0, [pc, #12]	@ (800cf88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800cf7c:	4770      	bx	lr
 800cf7e:	4a03      	ldr	r2, [pc, #12]	@ (800cf8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800cf80:	4801      	ldr	r0, [pc, #4]	@ (800cf88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800cf82:	6812      	ldr	r2, [r2, #0]
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	4770      	bx	lr
 800cf88:	200003c8 	.word	0x200003c8
 800cf8c:	2000060c 	.word	0x2000060c

0800cf90 <get_serialized_size_builtin_interfaces__msg__Time>:
 800cf90:	b180      	cbz	r0, 800cfb4 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800cf92:	b538      	push	{r3, r4, r5, lr}
 800cf94:	460d      	mov	r5, r1
 800cf96:	4628      	mov	r0, r5
 800cf98:	2104      	movs	r1, #4
 800cf9a:	f001 feb7 	bl	800ed0c <ucdr_alignment>
 800cf9e:	1d2b      	adds	r3, r5, #4
 800cfa0:	181c      	adds	r4, r3, r0
 800cfa2:	2104      	movs	r1, #4
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f001 feb1 	bl	800ed0c <ucdr_alignment>
 800cfaa:	f1c5 0504 	rsb	r5, r5, #4
 800cfae:	4428      	add	r0, r5
 800cfb0:	4420      	add	r0, r4
 800cfb2:	bd38      	pop	{r3, r4, r5, pc}
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop

0800cfb8 <_Time__cdr_deserialize>:
 800cfb8:	b538      	push	{r3, r4, r5, lr}
 800cfba:	460c      	mov	r4, r1
 800cfbc:	b141      	cbz	r1, 800cfd0 <_Time__cdr_deserialize+0x18>
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	f001 fa86 	bl	800e4d0 <ucdr_deserialize_int32_t>
 800cfc4:	1d21      	adds	r1, r4, #4
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfcc:	f000 befe 	b.w	800ddcc <ucdr_deserialize_uint32_t>
 800cfd0:	4608      	mov	r0, r1
 800cfd2:	bd38      	pop	{r3, r4, r5, pc}

0800cfd4 <_Time__cdr_serialize>:
 800cfd4:	b160      	cbz	r0, 800cff0 <_Time__cdr_serialize+0x1c>
 800cfd6:	b538      	push	{r3, r4, r5, lr}
 800cfd8:	460d      	mov	r5, r1
 800cfda:	4604      	mov	r4, r0
 800cfdc:	6801      	ldr	r1, [r0, #0]
 800cfde:	4628      	mov	r0, r5
 800cfe0:	f001 f9de 	bl	800e3a0 <ucdr_serialize_int32_t>
 800cfe4:	6861      	ldr	r1, [r4, #4]
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfec:	f000 bdbe 	b.w	800db6c <ucdr_serialize_uint32_t>
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop

0800cff4 <_Time__get_serialized_size>:
 800cff4:	b160      	cbz	r0, 800d010 <_Time__get_serialized_size+0x1c>
 800cff6:	b510      	push	{r4, lr}
 800cff8:	2104      	movs	r1, #4
 800cffa:	2000      	movs	r0, #0
 800cffc:	f001 fe86 	bl	800ed0c <ucdr_alignment>
 800d000:	1d04      	adds	r4, r0, #4
 800d002:	2104      	movs	r1, #4
 800d004:	4620      	mov	r0, r4
 800d006:	f001 fe81 	bl	800ed0c <ucdr_alignment>
 800d00a:	3004      	adds	r0, #4
 800d00c:	4420      	add	r0, r4
 800d00e:	bd10      	pop	{r4, pc}
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop

0800d014 <_Time__max_serialized_size>:
 800d014:	b510      	push	{r4, lr}
 800d016:	2104      	movs	r1, #4
 800d018:	2000      	movs	r0, #0
 800d01a:	f001 fe77 	bl	800ed0c <ucdr_alignment>
 800d01e:	1d04      	adds	r4, r0, #4
 800d020:	2104      	movs	r1, #4
 800d022:	4620      	mov	r0, r4
 800d024:	f001 fe72 	bl	800ed0c <ucdr_alignment>
 800d028:	3004      	adds	r0, #4
 800d02a:	4420      	add	r0, r4
 800d02c:	bd10      	pop	{r4, pc}
 800d02e:	bf00      	nop

0800d030 <max_serialized_size_builtin_interfaces__msg__Time>:
 800d030:	b538      	push	{r3, r4, r5, lr}
 800d032:	460c      	mov	r4, r1
 800d034:	2301      	movs	r3, #1
 800d036:	7003      	strb	r3, [r0, #0]
 800d038:	2104      	movs	r1, #4
 800d03a:	4620      	mov	r0, r4
 800d03c:	f001 fe66 	bl	800ed0c <ucdr_alignment>
 800d040:	1d25      	adds	r5, r4, #4
 800d042:	4405      	add	r5, r0
 800d044:	2104      	movs	r1, #4
 800d046:	4628      	mov	r0, r5
 800d048:	f001 fe60 	bl	800ed0c <ucdr_alignment>
 800d04c:	f1c4 0404 	rsb	r4, r4, #4
 800d050:	4420      	add	r0, r4
 800d052:	4428      	add	r0, r5
 800d054:	bd38      	pop	{r3, r4, r5, pc}
 800d056:	bf00      	nop

0800d058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800d058:	4800      	ldr	r0, [pc, #0]	@ (800d05c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800d05a:	4770      	bx	lr
 800d05c:	200003d4 	.word	0x200003d4

0800d060 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800d060:	f009 bb86 	b.w	8016770 <geometry_msgs__msg__Quaternion__init>

0800d064 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800d064:	f009 bb98 	b.w	8016798 <geometry_msgs__msg__Quaternion__fini>

0800d068 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800d068:	4b04      	ldr	r3, [pc, #16]	@ (800d07c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	b10a      	cbz	r2, 800d072 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800d06e:	4803      	ldr	r0, [pc, #12]	@ (800d07c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800d070:	4770      	bx	lr
 800d072:	4a03      	ldr	r2, [pc, #12]	@ (800d080 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800d074:	4801      	ldr	r0, [pc, #4]	@ (800d07c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800d076:	6812      	ldr	r2, [r2, #0]
 800d078:	601a      	str	r2, [r3, #0]
 800d07a:	4770      	bx	lr
 800d07c:	200004ec 	.word	0x200004ec
 800d080:	2000060c 	.word	0x2000060c

0800d084 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800d084:	f009 bb8a 	b.w	801679c <geometry_msgs__msg__Vector3__init>

0800d088 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800d088:	f009 bb8c 	b.w	80167a4 <geometry_msgs__msg__Vector3__fini>

0800d08c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d08c:	4b04      	ldr	r3, [pc, #16]	@ (800d0a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	b10a      	cbz	r2, 800d096 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800d092:	4803      	ldr	r0, [pc, #12]	@ (800d0a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d094:	4770      	bx	lr
 800d096:	4a03      	ldr	r2, [pc, #12]	@ (800d0a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800d098:	4801      	ldr	r0, [pc, #4]	@ (800d0a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d09a:	6812      	ldr	r2, [r2, #0]
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	4770      	bx	lr
 800d0a0:	200005ac 	.word	0x200005ac
 800d0a4:	2000060c 	.word	0x2000060c

0800d0a8 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800d0a8:	b1f0      	cbz	r0, 800d0e8 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800d0aa:	b570      	push	{r4, r5, r6, lr}
 800d0ac:	460d      	mov	r5, r1
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	2108      	movs	r1, #8
 800d0b2:	f001 fe2b 	bl	800ed0c <ucdr_alignment>
 800d0b6:	f105 0308 	add.w	r3, r5, #8
 800d0ba:	181e      	adds	r6, r3, r0
 800d0bc:	2108      	movs	r1, #8
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f001 fe24 	bl	800ed0c <ucdr_alignment>
 800d0c4:	f100 0408 	add.w	r4, r0, #8
 800d0c8:	4434      	add	r4, r6
 800d0ca:	2108      	movs	r1, #8
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	f001 fe1d 	bl	800ed0c <ucdr_alignment>
 800d0d2:	3008      	adds	r0, #8
 800d0d4:	4404      	add	r4, r0
 800d0d6:	2108      	movs	r1, #8
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f001 fe17 	bl	800ed0c <ucdr_alignment>
 800d0de:	f1c5 0508 	rsb	r5, r5, #8
 800d0e2:	4428      	add	r0, r5
 800d0e4:	4420      	add	r0, r4
 800d0e6:	bd70      	pop	{r4, r5, r6, pc}
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop

0800d0ec <_Quaternion__cdr_deserialize>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	b199      	cbz	r1, 800d11a <_Quaternion__cdr_deserialize+0x2e>
 800d0f2:	4605      	mov	r5, r0
 800d0f4:	f001 fc1e 	bl	800e934 <ucdr_deserialize_double>
 800d0f8:	f104 0108 	add.w	r1, r4, #8
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	f001 fc19 	bl	800e934 <ucdr_deserialize_double>
 800d102:	f104 0110 	add.w	r1, r4, #16
 800d106:	4628      	mov	r0, r5
 800d108:	f001 fc14 	bl	800e934 <ucdr_deserialize_double>
 800d10c:	f104 0118 	add.w	r1, r4, #24
 800d110:	4628      	mov	r0, r5
 800d112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d116:	f001 bc0d 	b.w	800e934 <ucdr_deserialize_double>
 800d11a:	4608      	mov	r0, r1
 800d11c:	bd38      	pop	{r3, r4, r5, pc}
 800d11e:	bf00      	nop

0800d120 <_Quaternion__cdr_serialize>:
 800d120:	b1c0      	cbz	r0, 800d154 <_Quaternion__cdr_serialize+0x34>
 800d122:	b538      	push	{r3, r4, r5, lr}
 800d124:	ed90 0b00 	vldr	d0, [r0]
 800d128:	460d      	mov	r5, r1
 800d12a:	4604      	mov	r4, r0
 800d12c:	4608      	mov	r0, r1
 800d12e:	f001 fa5f 	bl	800e5f0 <ucdr_serialize_double>
 800d132:	ed94 0b02 	vldr	d0, [r4, #8]
 800d136:	4628      	mov	r0, r5
 800d138:	f001 fa5a 	bl	800e5f0 <ucdr_serialize_double>
 800d13c:	ed94 0b04 	vldr	d0, [r4, #16]
 800d140:	4628      	mov	r0, r5
 800d142:	f001 fa55 	bl	800e5f0 <ucdr_serialize_double>
 800d146:	ed94 0b06 	vldr	d0, [r4, #24]
 800d14a:	4628      	mov	r0, r5
 800d14c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d150:	f001 ba4e 	b.w	800e5f0 <ucdr_serialize_double>
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop

0800d158 <_Quaternion__get_serialized_size>:
 800d158:	b1d0      	cbz	r0, 800d190 <_Quaternion__get_serialized_size+0x38>
 800d15a:	b538      	push	{r3, r4, r5, lr}
 800d15c:	2108      	movs	r1, #8
 800d15e:	2000      	movs	r0, #0
 800d160:	f001 fdd4 	bl	800ed0c <ucdr_alignment>
 800d164:	f100 0508 	add.w	r5, r0, #8
 800d168:	2108      	movs	r1, #8
 800d16a:	4628      	mov	r0, r5
 800d16c:	f001 fdce 	bl	800ed0c <ucdr_alignment>
 800d170:	f100 0408 	add.w	r4, r0, #8
 800d174:	442c      	add	r4, r5
 800d176:	2108      	movs	r1, #8
 800d178:	4620      	mov	r0, r4
 800d17a:	f001 fdc7 	bl	800ed0c <ucdr_alignment>
 800d17e:	3008      	adds	r0, #8
 800d180:	4404      	add	r4, r0
 800d182:	2108      	movs	r1, #8
 800d184:	4620      	mov	r0, r4
 800d186:	f001 fdc1 	bl	800ed0c <ucdr_alignment>
 800d18a:	3008      	adds	r0, #8
 800d18c:	4420      	add	r0, r4
 800d18e:	bd38      	pop	{r3, r4, r5, pc}
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop

0800d194 <_Quaternion__max_serialized_size>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	2108      	movs	r1, #8
 800d198:	2000      	movs	r0, #0
 800d19a:	f001 fdb7 	bl	800ed0c <ucdr_alignment>
 800d19e:	f100 0508 	add.w	r5, r0, #8
 800d1a2:	2108      	movs	r1, #8
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	f001 fdb1 	bl	800ed0c <ucdr_alignment>
 800d1aa:	f100 0408 	add.w	r4, r0, #8
 800d1ae:	442c      	add	r4, r5
 800d1b0:	2108      	movs	r1, #8
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f001 fdaa 	bl	800ed0c <ucdr_alignment>
 800d1b8:	3008      	adds	r0, #8
 800d1ba:	4404      	add	r4, r0
 800d1bc:	2108      	movs	r1, #8
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f001 fda4 	bl	800ed0c <ucdr_alignment>
 800d1c4:	3008      	adds	r0, #8
 800d1c6:	4420      	add	r0, r4
 800d1c8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ca:	bf00      	nop

0800d1cc <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800d1cc:	b570      	push	{r4, r5, r6, lr}
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	7003      	strb	r3, [r0, #0]
 800d1d4:	2108      	movs	r1, #8
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f001 fd98 	bl	800ed0c <ucdr_alignment>
 800d1dc:	f104 0508 	add.w	r5, r4, #8
 800d1e0:	1946      	adds	r6, r0, r5
 800d1e2:	2108      	movs	r1, #8
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	f001 fd91 	bl	800ed0c <ucdr_alignment>
 800d1ea:	f100 0508 	add.w	r5, r0, #8
 800d1ee:	4435      	add	r5, r6
 800d1f0:	2108      	movs	r1, #8
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f001 fd8a 	bl	800ed0c <ucdr_alignment>
 800d1f8:	3008      	adds	r0, #8
 800d1fa:	4405      	add	r5, r0
 800d1fc:	2108      	movs	r1, #8
 800d1fe:	4628      	mov	r0, r5
 800d200:	f001 fd84 	bl	800ed0c <ucdr_alignment>
 800d204:	f1c4 0408 	rsb	r4, r4, #8
 800d208:	4420      	add	r0, r4
 800d20a:	4428      	add	r0, r5
 800d20c:	bd70      	pop	{r4, r5, r6, pc}
 800d20e:	bf00      	nop

0800d210 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800d210:	4800      	ldr	r0, [pc, #0]	@ (800d214 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800d212:	4770      	bx	lr
 800d214:	200005b8 	.word	0x200005b8

0800d218 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800d218:	b1b8      	cbz	r0, 800d24a <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800d21a:	b538      	push	{r3, r4, r5, lr}
 800d21c:	460d      	mov	r5, r1
 800d21e:	4628      	mov	r0, r5
 800d220:	2108      	movs	r1, #8
 800d222:	f001 fd73 	bl	800ed0c <ucdr_alignment>
 800d226:	f105 0308 	add.w	r3, r5, #8
 800d22a:	181c      	adds	r4, r3, r0
 800d22c:	2108      	movs	r1, #8
 800d22e:	4620      	mov	r0, r4
 800d230:	f001 fd6c 	bl	800ed0c <ucdr_alignment>
 800d234:	3008      	adds	r0, #8
 800d236:	4404      	add	r4, r0
 800d238:	2108      	movs	r1, #8
 800d23a:	4620      	mov	r0, r4
 800d23c:	f001 fd66 	bl	800ed0c <ucdr_alignment>
 800d240:	f1c5 0508 	rsb	r5, r5, #8
 800d244:	4428      	add	r0, r5
 800d246:	4420      	add	r0, r4
 800d248:	bd38      	pop	{r3, r4, r5, pc}
 800d24a:	4770      	bx	lr

0800d24c <_Vector3__cdr_deserialize>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	460c      	mov	r4, r1
 800d250:	b171      	cbz	r1, 800d270 <_Vector3__cdr_deserialize+0x24>
 800d252:	4605      	mov	r5, r0
 800d254:	f001 fb6e 	bl	800e934 <ucdr_deserialize_double>
 800d258:	f104 0108 	add.w	r1, r4, #8
 800d25c:	4628      	mov	r0, r5
 800d25e:	f001 fb69 	bl	800e934 <ucdr_deserialize_double>
 800d262:	f104 0110 	add.w	r1, r4, #16
 800d266:	4628      	mov	r0, r5
 800d268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d26c:	f001 bb62 	b.w	800e934 <ucdr_deserialize_double>
 800d270:	4608      	mov	r0, r1
 800d272:	bd38      	pop	{r3, r4, r5, pc}

0800d274 <_Vector3__cdr_serialize>:
 800d274:	b198      	cbz	r0, 800d29e <_Vector3__cdr_serialize+0x2a>
 800d276:	b538      	push	{r3, r4, r5, lr}
 800d278:	ed90 0b00 	vldr	d0, [r0]
 800d27c:	460d      	mov	r5, r1
 800d27e:	4604      	mov	r4, r0
 800d280:	4608      	mov	r0, r1
 800d282:	f001 f9b5 	bl	800e5f0 <ucdr_serialize_double>
 800d286:	ed94 0b02 	vldr	d0, [r4, #8]
 800d28a:	4628      	mov	r0, r5
 800d28c:	f001 f9b0 	bl	800e5f0 <ucdr_serialize_double>
 800d290:	ed94 0b04 	vldr	d0, [r4, #16]
 800d294:	4628      	mov	r0, r5
 800d296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d29a:	f001 b9a9 	b.w	800e5f0 <ucdr_serialize_double>
 800d29e:	4770      	bx	lr

0800d2a0 <_Vector3__get_serialized_size>:
 800d2a0:	b198      	cbz	r0, 800d2ca <_Vector3__get_serialized_size+0x2a>
 800d2a2:	b510      	push	{r4, lr}
 800d2a4:	2108      	movs	r1, #8
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	f001 fd30 	bl	800ed0c <ucdr_alignment>
 800d2ac:	f100 0408 	add.w	r4, r0, #8
 800d2b0:	2108      	movs	r1, #8
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f001 fd2a 	bl	800ed0c <ucdr_alignment>
 800d2b8:	3008      	adds	r0, #8
 800d2ba:	4404      	add	r4, r0
 800d2bc:	2108      	movs	r1, #8
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f001 fd24 	bl	800ed0c <ucdr_alignment>
 800d2c4:	3008      	adds	r0, #8
 800d2c6:	4420      	add	r0, r4
 800d2c8:	bd10      	pop	{r4, pc}
 800d2ca:	4770      	bx	lr

0800d2cc <_Vector3__max_serialized_size>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	2108      	movs	r1, #8
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	f001 fd1b 	bl	800ed0c <ucdr_alignment>
 800d2d6:	f100 0508 	add.w	r5, r0, #8
 800d2da:	2108      	movs	r1, #8
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f001 fd15 	bl	800ed0c <ucdr_alignment>
 800d2e2:	f100 0408 	add.w	r4, r0, #8
 800d2e6:	442c      	add	r4, r5
 800d2e8:	2108      	movs	r1, #8
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f001 fd0e 	bl	800ed0c <ucdr_alignment>
 800d2f0:	3008      	adds	r0, #8
 800d2f2:	4420      	add	r0, r4
 800d2f4:	bd38      	pop	{r3, r4, r5, pc}
 800d2f6:	bf00      	nop

0800d2f8 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800d2f8:	b570      	push	{r4, r5, r6, lr}
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	460c      	mov	r4, r1
 800d2fe:	7003      	strb	r3, [r0, #0]
 800d300:	2108      	movs	r1, #8
 800d302:	4620      	mov	r0, r4
 800d304:	f001 fd02 	bl	800ed0c <ucdr_alignment>
 800d308:	f104 0508 	add.w	r5, r4, #8
 800d30c:	1946      	adds	r6, r0, r5
 800d30e:	2108      	movs	r1, #8
 800d310:	4630      	mov	r0, r6
 800d312:	f001 fcfb 	bl	800ed0c <ucdr_alignment>
 800d316:	f100 0508 	add.w	r5, r0, #8
 800d31a:	4435      	add	r5, r6
 800d31c:	2108      	movs	r1, #8
 800d31e:	4628      	mov	r0, r5
 800d320:	f001 fcf4 	bl	800ed0c <ucdr_alignment>
 800d324:	f1c4 0408 	rsb	r4, r4, #8
 800d328:	4420      	add	r0, r4
 800d32a:	4428      	add	r0, r5
 800d32c:	bd70      	pop	{r4, r5, r6, pc}
 800d32e:	bf00      	nop

0800d330 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d330:	4800      	ldr	r0, [pc, #0]	@ (800d334 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800d332:	4770      	bx	lr
 800d334:	200005e0 	.word	0x200005e0

0800d338 <ucdr_serialize_endian_array_char>:
 800d338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d33c:	4619      	mov	r1, r3
 800d33e:	461f      	mov	r7, r3
 800d340:	4605      	mov	r5, r0
 800d342:	4690      	mov	r8, r2
 800d344:	f001 fc8a 	bl	800ec5c <ucdr_check_buffer_available_for>
 800d348:	b9e0      	cbnz	r0, 800d384 <ucdr_serialize_endian_array_char+0x4c>
 800d34a:	463e      	mov	r6, r7
 800d34c:	e009      	b.n	800d362 <ucdr_serialize_endian_array_char+0x2a>
 800d34e:	68a8      	ldr	r0, [r5, #8]
 800d350:	f00b f96b 	bl	801862a <memcpy>
 800d354:	68ab      	ldr	r3, [r5, #8]
 800d356:	6928      	ldr	r0, [r5, #16]
 800d358:	4423      	add	r3, r4
 800d35a:	4420      	add	r0, r4
 800d35c:	1b36      	subs	r6, r6, r4
 800d35e:	60ab      	str	r3, [r5, #8]
 800d360:	6128      	str	r0, [r5, #16]
 800d362:	4631      	mov	r1, r6
 800d364:	2201      	movs	r2, #1
 800d366:	4628      	mov	r0, r5
 800d368:	f001 fd00 	bl	800ed6c <ucdr_check_final_buffer_behavior_array>
 800d36c:	1bb9      	subs	r1, r7, r6
 800d36e:	4441      	add	r1, r8
 800d370:	4604      	mov	r4, r0
 800d372:	4602      	mov	r2, r0
 800d374:	2800      	cmp	r0, #0
 800d376:	d1ea      	bne.n	800d34e <ucdr_serialize_endian_array_char+0x16>
 800d378:	2301      	movs	r3, #1
 800d37a:	7da8      	ldrb	r0, [r5, #22]
 800d37c:	756b      	strb	r3, [r5, #21]
 800d37e:	4058      	eors	r0, r3
 800d380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d384:	463a      	mov	r2, r7
 800d386:	68a8      	ldr	r0, [r5, #8]
 800d388:	4641      	mov	r1, r8
 800d38a:	f00b f94e 	bl	801862a <memcpy>
 800d38e:	68aa      	ldr	r2, [r5, #8]
 800d390:	692b      	ldr	r3, [r5, #16]
 800d392:	443a      	add	r2, r7
 800d394:	443b      	add	r3, r7
 800d396:	60aa      	str	r2, [r5, #8]
 800d398:	612b      	str	r3, [r5, #16]
 800d39a:	e7ed      	b.n	800d378 <ucdr_serialize_endian_array_char+0x40>

0800d39c <ucdr_deserialize_endian_array_char>:
 800d39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	461f      	mov	r7, r3
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	4690      	mov	r8, r2
 800d3a8:	f001 fc58 	bl	800ec5c <ucdr_check_buffer_available_for>
 800d3ac:	b9e0      	cbnz	r0, 800d3e8 <ucdr_deserialize_endian_array_char+0x4c>
 800d3ae:	463e      	mov	r6, r7
 800d3b0:	e009      	b.n	800d3c6 <ucdr_deserialize_endian_array_char+0x2a>
 800d3b2:	68a9      	ldr	r1, [r5, #8]
 800d3b4:	f00b f939 	bl	801862a <memcpy>
 800d3b8:	68ab      	ldr	r3, [r5, #8]
 800d3ba:	6928      	ldr	r0, [r5, #16]
 800d3bc:	4423      	add	r3, r4
 800d3be:	4420      	add	r0, r4
 800d3c0:	1b36      	subs	r6, r6, r4
 800d3c2:	60ab      	str	r3, [r5, #8]
 800d3c4:	6128      	str	r0, [r5, #16]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	4631      	mov	r1, r6
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	f001 fcce 	bl	800ed6c <ucdr_check_final_buffer_behavior_array>
 800d3d0:	4604      	mov	r4, r0
 800d3d2:	1bb8      	subs	r0, r7, r6
 800d3d4:	4440      	add	r0, r8
 800d3d6:	4622      	mov	r2, r4
 800d3d8:	2c00      	cmp	r4, #0
 800d3da:	d1ea      	bne.n	800d3b2 <ucdr_deserialize_endian_array_char+0x16>
 800d3dc:	2301      	movs	r3, #1
 800d3de:	7da8      	ldrb	r0, [r5, #22]
 800d3e0:	756b      	strb	r3, [r5, #21]
 800d3e2:	4058      	eors	r0, r3
 800d3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e8:	463a      	mov	r2, r7
 800d3ea:	68a9      	ldr	r1, [r5, #8]
 800d3ec:	4640      	mov	r0, r8
 800d3ee:	f00b f91c 	bl	801862a <memcpy>
 800d3f2:	68aa      	ldr	r2, [r5, #8]
 800d3f4:	692b      	ldr	r3, [r5, #16]
 800d3f6:	443a      	add	r2, r7
 800d3f8:	443b      	add	r3, r7
 800d3fa:	60aa      	str	r2, [r5, #8]
 800d3fc:	612b      	str	r3, [r5, #16]
 800d3fe:	e7ed      	b.n	800d3dc <ucdr_deserialize_endian_array_char+0x40>

0800d400 <ucdr_serialize_array_uint8_t>:
 800d400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d404:	4688      	mov	r8, r1
 800d406:	4611      	mov	r1, r2
 800d408:	4617      	mov	r7, r2
 800d40a:	4605      	mov	r5, r0
 800d40c:	f001 fc26 	bl	800ec5c <ucdr_check_buffer_available_for>
 800d410:	b9e0      	cbnz	r0, 800d44c <ucdr_serialize_array_uint8_t+0x4c>
 800d412:	463e      	mov	r6, r7
 800d414:	e009      	b.n	800d42a <ucdr_serialize_array_uint8_t+0x2a>
 800d416:	68a8      	ldr	r0, [r5, #8]
 800d418:	f00b f907 	bl	801862a <memcpy>
 800d41c:	68aa      	ldr	r2, [r5, #8]
 800d41e:	692b      	ldr	r3, [r5, #16]
 800d420:	4422      	add	r2, r4
 800d422:	4423      	add	r3, r4
 800d424:	1b36      	subs	r6, r6, r4
 800d426:	60aa      	str	r2, [r5, #8]
 800d428:	612b      	str	r3, [r5, #16]
 800d42a:	4631      	mov	r1, r6
 800d42c:	2201      	movs	r2, #1
 800d42e:	4628      	mov	r0, r5
 800d430:	f001 fc9c 	bl	800ed6c <ucdr_check_final_buffer_behavior_array>
 800d434:	1bb9      	subs	r1, r7, r6
 800d436:	4441      	add	r1, r8
 800d438:	4604      	mov	r4, r0
 800d43a:	4602      	mov	r2, r0
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d1ea      	bne.n	800d416 <ucdr_serialize_array_uint8_t+0x16>
 800d440:	2301      	movs	r3, #1
 800d442:	7da8      	ldrb	r0, [r5, #22]
 800d444:	756b      	strb	r3, [r5, #21]
 800d446:	4058      	eors	r0, r3
 800d448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d44c:	463a      	mov	r2, r7
 800d44e:	68a8      	ldr	r0, [r5, #8]
 800d450:	4641      	mov	r1, r8
 800d452:	f00b f8ea 	bl	801862a <memcpy>
 800d456:	68aa      	ldr	r2, [r5, #8]
 800d458:	692b      	ldr	r3, [r5, #16]
 800d45a:	443a      	add	r2, r7
 800d45c:	443b      	add	r3, r7
 800d45e:	60aa      	str	r2, [r5, #8]
 800d460:	612b      	str	r3, [r5, #16]
 800d462:	e7ed      	b.n	800d440 <ucdr_serialize_array_uint8_t+0x40>

0800d464 <ucdr_serialize_endian_array_uint8_t>:
 800d464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d468:	4619      	mov	r1, r3
 800d46a:	461f      	mov	r7, r3
 800d46c:	4605      	mov	r5, r0
 800d46e:	4690      	mov	r8, r2
 800d470:	f001 fbf4 	bl	800ec5c <ucdr_check_buffer_available_for>
 800d474:	b9e0      	cbnz	r0, 800d4b0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800d476:	463e      	mov	r6, r7
 800d478:	e009      	b.n	800d48e <ucdr_serialize_endian_array_uint8_t+0x2a>
 800d47a:	68a8      	ldr	r0, [r5, #8]
 800d47c:	f00b f8d5 	bl	801862a <memcpy>
 800d480:	68ab      	ldr	r3, [r5, #8]
 800d482:	6928      	ldr	r0, [r5, #16]
 800d484:	4423      	add	r3, r4
 800d486:	4420      	add	r0, r4
 800d488:	1b36      	subs	r6, r6, r4
 800d48a:	60ab      	str	r3, [r5, #8]
 800d48c:	6128      	str	r0, [r5, #16]
 800d48e:	4631      	mov	r1, r6
 800d490:	2201      	movs	r2, #1
 800d492:	4628      	mov	r0, r5
 800d494:	f001 fc6a 	bl	800ed6c <ucdr_check_final_buffer_behavior_array>
 800d498:	1bb9      	subs	r1, r7, r6
 800d49a:	4441      	add	r1, r8
 800d49c:	4604      	mov	r4, r0
 800d49e:	4602      	mov	r2, r0
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d1ea      	bne.n	800d47a <ucdr_serialize_endian_array_uint8_t+0x16>
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	7da8      	ldrb	r0, [r5, #22]
 800d4a8:	756b      	strb	r3, [r5, #21]
 800d4aa:	4058      	eors	r0, r3
 800d4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b0:	463a      	mov	r2, r7
 800d4b2:	68a8      	ldr	r0, [r5, #8]
 800d4b4:	4641      	mov	r1, r8
 800d4b6:	f00b f8b8 	bl	801862a <memcpy>
 800d4ba:	68aa      	ldr	r2, [r5, #8]
 800d4bc:	692b      	ldr	r3, [r5, #16]
 800d4be:	443a      	add	r2, r7
 800d4c0:	443b      	add	r3, r7
 800d4c2:	60aa      	str	r2, [r5, #8]
 800d4c4:	612b      	str	r3, [r5, #16]
 800d4c6:	e7ed      	b.n	800d4a4 <ucdr_serialize_endian_array_uint8_t+0x40>

0800d4c8 <ucdr_deserialize_array_uint8_t>:
 800d4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4cc:	4688      	mov	r8, r1
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	4617      	mov	r7, r2
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	f001 fbc2 	bl	800ec5c <ucdr_check_buffer_available_for>
 800d4d8:	b9e0      	cbnz	r0, 800d514 <ucdr_deserialize_array_uint8_t+0x4c>
 800d4da:	463e      	mov	r6, r7
 800d4dc:	e009      	b.n	800d4f2 <ucdr_deserialize_array_uint8_t+0x2a>
 800d4de:	68a9      	ldr	r1, [r5, #8]
 800d4e0:	f00b f8a3 	bl	801862a <memcpy>
 800d4e4:	68aa      	ldr	r2, [r5, #8]
 800d4e6:	692b      	ldr	r3, [r5, #16]
 800d4e8:	4422      	add	r2, r4
 800d4ea:	4423      	add	r3, r4
 800d4ec:	1b36      	subs	r6, r6, r4
 800d4ee:	60aa      	str	r2, [r5, #8]
 800d4f0:	612b      	str	r3, [r5, #16]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	f001 fc38 	bl	800ed6c <ucdr_check_final_buffer_behavior_array>
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	1bb8      	subs	r0, r7, r6
 800d500:	4440      	add	r0, r8
 800d502:	4622      	mov	r2, r4
 800d504:	2c00      	cmp	r4, #0
 800d506:	d1ea      	bne.n	800d4de <ucdr_deserialize_array_uint8_t+0x16>
 800d508:	2301      	movs	r3, #1
 800d50a:	7da8      	ldrb	r0, [r5, #22]
 800d50c:	756b      	strb	r3, [r5, #21]
 800d50e:	4058      	eors	r0, r3
 800d510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d514:	463a      	mov	r2, r7
 800d516:	68a9      	ldr	r1, [r5, #8]
 800d518:	4640      	mov	r0, r8
 800d51a:	f00b f886 	bl	801862a <memcpy>
 800d51e:	68aa      	ldr	r2, [r5, #8]
 800d520:	692b      	ldr	r3, [r5, #16]
 800d522:	443a      	add	r2, r7
 800d524:	443b      	add	r3, r7
 800d526:	60aa      	str	r2, [r5, #8]
 800d528:	612b      	str	r3, [r5, #16]
 800d52a:	e7ed      	b.n	800d508 <ucdr_deserialize_array_uint8_t+0x40>

0800d52c <ucdr_deserialize_endian_array_uint8_t>:
 800d52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d530:	4619      	mov	r1, r3
 800d532:	461f      	mov	r7, r3
 800d534:	4605      	mov	r5, r0
 800d536:	4690      	mov	r8, r2
 800d538:	f001 fb90 	bl	800ec5c <ucdr_check_buffer_available_for>
 800d53c:	b9e0      	cbnz	r0, 800d578 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800d53e:	463e      	mov	r6, r7
 800d540:	e009      	b.n	800d556 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800d542:	68a9      	ldr	r1, [r5, #8]
 800d544:	f00b f871 	bl	801862a <memcpy>
 800d548:	68ab      	ldr	r3, [r5, #8]
 800d54a:	6928      	ldr	r0, [r5, #16]
 800d54c:	4423      	add	r3, r4
 800d54e:	4420      	add	r0, r4
 800d550:	1b36      	subs	r6, r6, r4
 800d552:	60ab      	str	r3, [r5, #8]
 800d554:	6128      	str	r0, [r5, #16]
 800d556:	2201      	movs	r2, #1
 800d558:	4631      	mov	r1, r6
 800d55a:	4628      	mov	r0, r5
 800d55c:	f001 fc06 	bl	800ed6c <ucdr_check_final_buffer_behavior_array>
 800d560:	4604      	mov	r4, r0
 800d562:	1bb8      	subs	r0, r7, r6
 800d564:	4440      	add	r0, r8
 800d566:	4622      	mov	r2, r4
 800d568:	2c00      	cmp	r4, #0
 800d56a:	d1ea      	bne.n	800d542 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800d56c:	2301      	movs	r3, #1
 800d56e:	7da8      	ldrb	r0, [r5, #22]
 800d570:	756b      	strb	r3, [r5, #21]
 800d572:	4058      	eors	r0, r3
 800d574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d578:	463a      	mov	r2, r7
 800d57a:	68a9      	ldr	r1, [r5, #8]
 800d57c:	4640      	mov	r0, r8
 800d57e:	f00b f854 	bl	801862a <memcpy>
 800d582:	68aa      	ldr	r2, [r5, #8]
 800d584:	692b      	ldr	r3, [r5, #16]
 800d586:	443a      	add	r2, r7
 800d588:	443b      	add	r3, r7
 800d58a:	60aa      	str	r2, [r5, #8]
 800d58c:	612b      	str	r3, [r5, #16]
 800d58e:	e7ed      	b.n	800d56c <ucdr_deserialize_endian_array_uint8_t+0x40>

0800d590 <ucdr_serialize_array_double>:
 800d590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d594:	460e      	mov	r6, r1
 800d596:	2108      	movs	r1, #8
 800d598:	4604      	mov	r4, r0
 800d59a:	4617      	mov	r7, r2
 800d59c:	f001 fbbe 	bl	800ed1c <ucdr_buffer_alignment>
 800d5a0:	4601      	mov	r1, r0
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	7d65      	ldrb	r5, [r4, #21]
 800d5a6:	f001 fbfd 	bl	800eda4 <ucdr_advance_buffer>
 800d5aa:	7d21      	ldrb	r1, [r4, #20]
 800d5ac:	7565      	strb	r5, [r4, #21]
 800d5ae:	2901      	cmp	r1, #1
 800d5b0:	d010      	beq.n	800d5d4 <ucdr_serialize_array_double+0x44>
 800d5b2:	b157      	cbz	r7, 800d5ca <ucdr_serialize_array_double+0x3a>
 800d5b4:	2500      	movs	r5, #0
 800d5b6:	e000      	b.n	800d5ba <ucdr_serialize_array_double+0x2a>
 800d5b8:	7d21      	ldrb	r1, [r4, #20]
 800d5ba:	ecb6 0b02 	vldmia	r6!, {d0}
 800d5be:	4620      	mov	r0, r4
 800d5c0:	3501      	adds	r5, #1
 800d5c2:	f001 f8e5 	bl	800e790 <ucdr_serialize_endian_double>
 800d5c6:	42af      	cmp	r7, r5
 800d5c8:	d1f6      	bne.n	800d5b8 <ucdr_serialize_array_double+0x28>
 800d5ca:	7da0      	ldrb	r0, [r4, #22]
 800d5cc:	f080 0001 	eor.w	r0, r0, #1
 800d5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d4:	00ff      	lsls	r7, r7, #3
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f001 fb3f 	bl	800ec5c <ucdr_check_buffer_available_for>
 800d5de:	b9f8      	cbnz	r0, 800d620 <ucdr_serialize_array_double+0x90>
 800d5e0:	46b8      	mov	r8, r7
 800d5e2:	e00a      	b.n	800d5fa <ucdr_serialize_array_double+0x6a>
 800d5e4:	68a0      	ldr	r0, [r4, #8]
 800d5e6:	f00b f820 	bl	801862a <memcpy>
 800d5ea:	68a2      	ldr	r2, [r4, #8]
 800d5ec:	6923      	ldr	r3, [r4, #16]
 800d5ee:	442a      	add	r2, r5
 800d5f0:	442b      	add	r3, r5
 800d5f2:	eba8 0805 	sub.w	r8, r8, r5
 800d5f6:	60a2      	str	r2, [r4, #8]
 800d5f8:	6123      	str	r3, [r4, #16]
 800d5fa:	4641      	mov	r1, r8
 800d5fc:	2208      	movs	r2, #8
 800d5fe:	4620      	mov	r0, r4
 800d600:	f001 fbb4 	bl	800ed6c <ucdr_check_final_buffer_behavior_array>
 800d604:	eba7 0108 	sub.w	r1, r7, r8
 800d608:	4431      	add	r1, r6
 800d60a:	4605      	mov	r5, r0
 800d60c:	4602      	mov	r2, r0
 800d60e:	2800      	cmp	r0, #0
 800d610:	d1e8      	bne.n	800d5e4 <ucdr_serialize_array_double+0x54>
 800d612:	7da0      	ldrb	r0, [r4, #22]
 800d614:	2308      	movs	r3, #8
 800d616:	7563      	strb	r3, [r4, #21]
 800d618:	f080 0001 	eor.w	r0, r0, #1
 800d61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d620:	463a      	mov	r2, r7
 800d622:	68a0      	ldr	r0, [r4, #8]
 800d624:	4631      	mov	r1, r6
 800d626:	f00b f800 	bl	801862a <memcpy>
 800d62a:	68a2      	ldr	r2, [r4, #8]
 800d62c:	6923      	ldr	r3, [r4, #16]
 800d62e:	443a      	add	r2, r7
 800d630:	441f      	add	r7, r3
 800d632:	60a2      	str	r2, [r4, #8]
 800d634:	6127      	str	r7, [r4, #16]
 800d636:	e7ec      	b.n	800d612 <ucdr_serialize_array_double+0x82>

0800d638 <ucdr_deserialize_array_double>:
 800d638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d63c:	460e      	mov	r6, r1
 800d63e:	2108      	movs	r1, #8
 800d640:	4604      	mov	r4, r0
 800d642:	4617      	mov	r7, r2
 800d644:	f001 fb6a 	bl	800ed1c <ucdr_buffer_alignment>
 800d648:	4601      	mov	r1, r0
 800d64a:	4620      	mov	r0, r4
 800d64c:	7d65      	ldrb	r5, [r4, #21]
 800d64e:	f001 fba9 	bl	800eda4 <ucdr_advance_buffer>
 800d652:	7d21      	ldrb	r1, [r4, #20]
 800d654:	7565      	strb	r5, [r4, #21]
 800d656:	2901      	cmp	r1, #1
 800d658:	d011      	beq.n	800d67e <ucdr_deserialize_array_double+0x46>
 800d65a:	b15f      	cbz	r7, 800d674 <ucdr_deserialize_array_double+0x3c>
 800d65c:	2500      	movs	r5, #0
 800d65e:	e000      	b.n	800d662 <ucdr_deserialize_array_double+0x2a>
 800d660:	7d21      	ldrb	r1, [r4, #20]
 800d662:	4632      	mov	r2, r6
 800d664:	4620      	mov	r0, r4
 800d666:	3501      	adds	r5, #1
 800d668:	f001 fa2a 	bl	800eac0 <ucdr_deserialize_endian_double>
 800d66c:	42af      	cmp	r7, r5
 800d66e:	f106 0608 	add.w	r6, r6, #8
 800d672:	d1f5      	bne.n	800d660 <ucdr_deserialize_array_double+0x28>
 800d674:	7da0      	ldrb	r0, [r4, #22]
 800d676:	f080 0001 	eor.w	r0, r0, #1
 800d67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d67e:	00ff      	lsls	r7, r7, #3
 800d680:	4639      	mov	r1, r7
 800d682:	4620      	mov	r0, r4
 800d684:	f001 faea 	bl	800ec5c <ucdr_check_buffer_available_for>
 800d688:	b9f8      	cbnz	r0, 800d6ca <ucdr_deserialize_array_double+0x92>
 800d68a:	46b8      	mov	r8, r7
 800d68c:	e00a      	b.n	800d6a4 <ucdr_deserialize_array_double+0x6c>
 800d68e:	68a1      	ldr	r1, [r4, #8]
 800d690:	f00a ffcb 	bl	801862a <memcpy>
 800d694:	68a2      	ldr	r2, [r4, #8]
 800d696:	6923      	ldr	r3, [r4, #16]
 800d698:	442a      	add	r2, r5
 800d69a:	442b      	add	r3, r5
 800d69c:	eba8 0805 	sub.w	r8, r8, r5
 800d6a0:	60a2      	str	r2, [r4, #8]
 800d6a2:	6123      	str	r3, [r4, #16]
 800d6a4:	2208      	movs	r2, #8
 800d6a6:	4641      	mov	r1, r8
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f001 fb5f 	bl	800ed6c <ucdr_check_final_buffer_behavior_array>
 800d6ae:	4605      	mov	r5, r0
 800d6b0:	eba7 0008 	sub.w	r0, r7, r8
 800d6b4:	4430      	add	r0, r6
 800d6b6:	462a      	mov	r2, r5
 800d6b8:	2d00      	cmp	r5, #0
 800d6ba:	d1e8      	bne.n	800d68e <ucdr_deserialize_array_double+0x56>
 800d6bc:	7da0      	ldrb	r0, [r4, #22]
 800d6be:	2308      	movs	r3, #8
 800d6c0:	7563      	strb	r3, [r4, #21]
 800d6c2:	f080 0001 	eor.w	r0, r0, #1
 800d6c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ca:	463a      	mov	r2, r7
 800d6cc:	68a1      	ldr	r1, [r4, #8]
 800d6ce:	4630      	mov	r0, r6
 800d6d0:	f00a ffab 	bl	801862a <memcpy>
 800d6d4:	68a2      	ldr	r2, [r4, #8]
 800d6d6:	6923      	ldr	r3, [r4, #16]
 800d6d8:	443a      	add	r2, r7
 800d6da:	441f      	add	r7, r3
 800d6dc:	60a2      	str	r2, [r4, #8]
 800d6de:	6127      	str	r7, [r4, #16]
 800d6e0:	e7ec      	b.n	800d6bc <ucdr_deserialize_array_double+0x84>
 800d6e2:	bf00      	nop

0800d6e4 <ucdr_serialize_bool>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	460d      	mov	r5, r1
 800d6e8:	2101      	movs	r1, #1
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	f001 fac2 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800d6f0:	b148      	cbz	r0, 800d706 <ucdr_serialize_bool+0x22>
 800d6f2:	68a3      	ldr	r3, [r4, #8]
 800d6f4:	701d      	strb	r5, [r3, #0]
 800d6f6:	68a2      	ldr	r2, [r4, #8]
 800d6f8:	6923      	ldr	r3, [r4, #16]
 800d6fa:	2101      	movs	r1, #1
 800d6fc:	440a      	add	r2, r1
 800d6fe:	440b      	add	r3, r1
 800d700:	60a2      	str	r2, [r4, #8]
 800d702:	6123      	str	r3, [r4, #16]
 800d704:	7561      	strb	r1, [r4, #21]
 800d706:	7da0      	ldrb	r0, [r4, #22]
 800d708:	f080 0001 	eor.w	r0, r0, #1
 800d70c:	bd38      	pop	{r3, r4, r5, pc}
 800d70e:	bf00      	nop

0800d710 <ucdr_deserialize_bool>:
 800d710:	b538      	push	{r3, r4, r5, lr}
 800d712:	460d      	mov	r5, r1
 800d714:	2101      	movs	r1, #1
 800d716:	4604      	mov	r4, r0
 800d718:	f001 faac 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800d71c:	b160      	cbz	r0, 800d738 <ucdr_deserialize_bool+0x28>
 800d71e:	68a2      	ldr	r2, [r4, #8]
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d726:	3900      	subs	r1, #0
 800d728:	bf18      	it	ne
 800d72a:	2101      	movne	r1, #1
 800d72c:	7029      	strb	r1, [r5, #0]
 800d72e:	3301      	adds	r3, #1
 800d730:	2101      	movs	r1, #1
 800d732:	60a2      	str	r2, [r4, #8]
 800d734:	6123      	str	r3, [r4, #16]
 800d736:	7561      	strb	r1, [r4, #21]
 800d738:	7da0      	ldrb	r0, [r4, #22]
 800d73a:	f080 0001 	eor.w	r0, r0, #1
 800d73e:	bd38      	pop	{r3, r4, r5, pc}

0800d740 <ucdr_serialize_uint8_t>:
 800d740:	b538      	push	{r3, r4, r5, lr}
 800d742:	460d      	mov	r5, r1
 800d744:	2101      	movs	r1, #1
 800d746:	4604      	mov	r4, r0
 800d748:	f001 fa94 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800d74c:	b148      	cbz	r0, 800d762 <ucdr_serialize_uint8_t+0x22>
 800d74e:	68a3      	ldr	r3, [r4, #8]
 800d750:	701d      	strb	r5, [r3, #0]
 800d752:	68a2      	ldr	r2, [r4, #8]
 800d754:	6923      	ldr	r3, [r4, #16]
 800d756:	2101      	movs	r1, #1
 800d758:	440a      	add	r2, r1
 800d75a:	440b      	add	r3, r1
 800d75c:	60a2      	str	r2, [r4, #8]
 800d75e:	6123      	str	r3, [r4, #16]
 800d760:	7561      	strb	r1, [r4, #21]
 800d762:	7da0      	ldrb	r0, [r4, #22]
 800d764:	f080 0001 	eor.w	r0, r0, #1
 800d768:	bd38      	pop	{r3, r4, r5, pc}
 800d76a:	bf00      	nop

0800d76c <ucdr_deserialize_uint8_t>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	460d      	mov	r5, r1
 800d770:	2101      	movs	r1, #1
 800d772:	4604      	mov	r4, r0
 800d774:	f001 fa7e 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800d778:	b150      	cbz	r0, 800d790 <ucdr_deserialize_uint8_t+0x24>
 800d77a:	68a3      	ldr	r3, [r4, #8]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	702b      	strb	r3, [r5, #0]
 800d780:	68a2      	ldr	r2, [r4, #8]
 800d782:	6923      	ldr	r3, [r4, #16]
 800d784:	2101      	movs	r1, #1
 800d786:	440a      	add	r2, r1
 800d788:	440b      	add	r3, r1
 800d78a:	60a2      	str	r2, [r4, #8]
 800d78c:	6123      	str	r3, [r4, #16]
 800d78e:	7561      	strb	r1, [r4, #21]
 800d790:	7da0      	ldrb	r0, [r4, #22]
 800d792:	f080 0001 	eor.w	r0, r0, #1
 800d796:	bd38      	pop	{r3, r4, r5, pc}

0800d798 <ucdr_serialize_uint16_t>:
 800d798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d79c:	b082      	sub	sp, #8
 800d79e:	460b      	mov	r3, r1
 800d7a0:	2102      	movs	r1, #2
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d7a8:	f001 fab8 	bl	800ed1c <ucdr_buffer_alignment>
 800d7ac:	4601      	mov	r1, r0
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	7d67      	ldrb	r7, [r4, #21]
 800d7b2:	f001 faf7 	bl	800eda4 <ucdr_advance_buffer>
 800d7b6:	2102      	movs	r1, #2
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f001 fa4f 	bl	800ec5c <ucdr_check_buffer_available_for>
 800d7be:	bb78      	cbnz	r0, 800d820 <ucdr_serialize_uint16_t+0x88>
 800d7c0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d7c4:	42ab      	cmp	r3, r5
 800d7c6:	d926      	bls.n	800d816 <ucdr_serialize_uint16_t+0x7e>
 800d7c8:	1b5e      	subs	r6, r3, r5
 800d7ca:	60a3      	str	r3, [r4, #8]
 800d7cc:	6923      	ldr	r3, [r4, #16]
 800d7ce:	f1c6 0802 	rsb	r8, r6, #2
 800d7d2:	4433      	add	r3, r6
 800d7d4:	6123      	str	r3, [r4, #16]
 800d7d6:	4641      	mov	r1, r8
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f001 fa4b 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d03b      	beq.n	800d85a <ucdr_serialize_uint16_t+0xc2>
 800d7e2:	7d23      	ldrb	r3, [r4, #20]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d04a      	beq.n	800d87e <ucdr_serialize_uint16_t+0xe6>
 800d7e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d7ec:	702b      	strb	r3, [r5, #0]
 800d7ee:	2e00      	cmp	r6, #0
 800d7f0:	d040      	beq.n	800d874 <ucdr_serialize_uint16_t+0xdc>
 800d7f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d7f6:	706b      	strb	r3, [r5, #1]
 800d7f8:	6923      	ldr	r3, [r4, #16]
 800d7fa:	68a2      	ldr	r2, [r4, #8]
 800d7fc:	7da0      	ldrb	r0, [r4, #22]
 800d7fe:	3302      	adds	r3, #2
 800d800:	1b9e      	subs	r6, r3, r6
 800d802:	4442      	add	r2, r8
 800d804:	2302      	movs	r3, #2
 800d806:	f080 0001 	eor.w	r0, r0, #1
 800d80a:	60a2      	str	r2, [r4, #8]
 800d80c:	6126      	str	r6, [r4, #16]
 800d80e:	7563      	strb	r3, [r4, #21]
 800d810:	b002      	add	sp, #8
 800d812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d816:	2102      	movs	r1, #2
 800d818:	4620      	mov	r0, r4
 800d81a:	f001 fa2b 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800d81e:	b190      	cbz	r0, 800d846 <ucdr_serialize_uint16_t+0xae>
 800d820:	7d23      	ldrb	r3, [r4, #20]
 800d822:	2b01      	cmp	r3, #1
 800d824:	68a3      	ldr	r3, [r4, #8]
 800d826:	d014      	beq.n	800d852 <ucdr_serialize_uint16_t+0xba>
 800d828:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d82c:	701a      	strb	r2, [r3, #0]
 800d82e:	68a3      	ldr	r3, [r4, #8]
 800d830:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d834:	705a      	strb	r2, [r3, #1]
 800d836:	68a2      	ldr	r2, [r4, #8]
 800d838:	6923      	ldr	r3, [r4, #16]
 800d83a:	3202      	adds	r2, #2
 800d83c:	3302      	adds	r3, #2
 800d83e:	2102      	movs	r1, #2
 800d840:	60a2      	str	r2, [r4, #8]
 800d842:	6123      	str	r3, [r4, #16]
 800d844:	7561      	strb	r1, [r4, #21]
 800d846:	7da0      	ldrb	r0, [r4, #22]
 800d848:	f080 0001 	eor.w	r0, r0, #1
 800d84c:	b002      	add	sp, #8
 800d84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d852:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d856:	801a      	strh	r2, [r3, #0]
 800d858:	e7ed      	b.n	800d836 <ucdr_serialize_uint16_t+0x9e>
 800d85a:	68a2      	ldr	r2, [r4, #8]
 800d85c:	6923      	ldr	r3, [r4, #16]
 800d85e:	7da0      	ldrb	r0, [r4, #22]
 800d860:	7567      	strb	r7, [r4, #21]
 800d862:	1b92      	subs	r2, r2, r6
 800d864:	1b9b      	subs	r3, r3, r6
 800d866:	f080 0001 	eor.w	r0, r0, #1
 800d86a:	60a2      	str	r2, [r4, #8]
 800d86c:	6123      	str	r3, [r4, #16]
 800d86e:	b002      	add	sp, #8
 800d870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d874:	68a3      	ldr	r3, [r4, #8]
 800d876:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d87a:	701a      	strb	r2, [r3, #0]
 800d87c:	e7bc      	b.n	800d7f8 <ucdr_serialize_uint16_t+0x60>
 800d87e:	4628      	mov	r0, r5
 800d880:	f10d 0506 	add.w	r5, sp, #6
 800d884:	4629      	mov	r1, r5
 800d886:	4632      	mov	r2, r6
 800d888:	f00a fecf 	bl	801862a <memcpy>
 800d88c:	68a0      	ldr	r0, [r4, #8]
 800d88e:	4642      	mov	r2, r8
 800d890:	19a9      	adds	r1, r5, r6
 800d892:	f00a feca 	bl	801862a <memcpy>
 800d896:	e7af      	b.n	800d7f8 <ucdr_serialize_uint16_t+0x60>

0800d898 <ucdr_serialize_endian_uint16_t>:
 800d898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d89c:	b083      	sub	sp, #12
 800d89e:	460d      	mov	r5, r1
 800d8a0:	2102      	movs	r1, #2
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d8a8:	f001 fa38 	bl	800ed1c <ucdr_buffer_alignment>
 800d8ac:	4601      	mov	r1, r0
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d8b4:	f001 fa76 	bl	800eda4 <ucdr_advance_buffer>
 800d8b8:	2102      	movs	r1, #2
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f001 f9ce 	bl	800ec5c <ucdr_check_buffer_available_for>
 800d8c0:	bb70      	cbnz	r0, 800d920 <ucdr_serialize_endian_uint16_t+0x88>
 800d8c2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d8c6:	42be      	cmp	r6, r7
 800d8c8:	d925      	bls.n	800d916 <ucdr_serialize_endian_uint16_t+0x7e>
 800d8ca:	6923      	ldr	r3, [r4, #16]
 800d8cc:	60a6      	str	r6, [r4, #8]
 800d8ce:	1bf6      	subs	r6, r6, r7
 800d8d0:	4433      	add	r3, r6
 800d8d2:	f1c6 0902 	rsb	r9, r6, #2
 800d8d6:	6123      	str	r3, [r4, #16]
 800d8d8:	4649      	mov	r1, r9
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f001 f9ca 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d039      	beq.n	800d958 <ucdr_serialize_endian_uint16_t+0xc0>
 800d8e4:	2d01      	cmp	r5, #1
 800d8e6:	d04a      	beq.n	800d97e <ucdr_serialize_endian_uint16_t+0xe6>
 800d8e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d8ec:	703b      	strb	r3, [r7, #0]
 800d8ee:	2e00      	cmp	r6, #0
 800d8f0:	d040      	beq.n	800d974 <ucdr_serialize_endian_uint16_t+0xdc>
 800d8f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d8f6:	707b      	strb	r3, [r7, #1]
 800d8f8:	6923      	ldr	r3, [r4, #16]
 800d8fa:	68a2      	ldr	r2, [r4, #8]
 800d8fc:	7da0      	ldrb	r0, [r4, #22]
 800d8fe:	3302      	adds	r3, #2
 800d900:	444a      	add	r2, r9
 800d902:	1b9b      	subs	r3, r3, r6
 800d904:	2102      	movs	r1, #2
 800d906:	f080 0001 	eor.w	r0, r0, #1
 800d90a:	60a2      	str	r2, [r4, #8]
 800d90c:	6123      	str	r3, [r4, #16]
 800d90e:	7561      	strb	r1, [r4, #21]
 800d910:	b003      	add	sp, #12
 800d912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d916:	2102      	movs	r1, #2
 800d918:	4620      	mov	r0, r4
 800d91a:	f001 f9ab 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800d91e:	b188      	cbz	r0, 800d944 <ucdr_serialize_endian_uint16_t+0xac>
 800d920:	2d01      	cmp	r5, #1
 800d922:	68a3      	ldr	r3, [r4, #8]
 800d924:	d014      	beq.n	800d950 <ucdr_serialize_endian_uint16_t+0xb8>
 800d926:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d92a:	701a      	strb	r2, [r3, #0]
 800d92c:	68a3      	ldr	r3, [r4, #8]
 800d92e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d932:	705a      	strb	r2, [r3, #1]
 800d934:	68a2      	ldr	r2, [r4, #8]
 800d936:	6923      	ldr	r3, [r4, #16]
 800d938:	3202      	adds	r2, #2
 800d93a:	3302      	adds	r3, #2
 800d93c:	2102      	movs	r1, #2
 800d93e:	60a2      	str	r2, [r4, #8]
 800d940:	6123      	str	r3, [r4, #16]
 800d942:	7561      	strb	r1, [r4, #21]
 800d944:	7da0      	ldrb	r0, [r4, #22]
 800d946:	f080 0001 	eor.w	r0, r0, #1
 800d94a:	b003      	add	sp, #12
 800d94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d950:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d954:	801a      	strh	r2, [r3, #0]
 800d956:	e7ed      	b.n	800d934 <ucdr_serialize_endian_uint16_t+0x9c>
 800d958:	68a2      	ldr	r2, [r4, #8]
 800d95a:	6923      	ldr	r3, [r4, #16]
 800d95c:	7da0      	ldrb	r0, [r4, #22]
 800d95e:	f884 8015 	strb.w	r8, [r4, #21]
 800d962:	1b92      	subs	r2, r2, r6
 800d964:	1b9b      	subs	r3, r3, r6
 800d966:	f080 0001 	eor.w	r0, r0, #1
 800d96a:	60a2      	str	r2, [r4, #8]
 800d96c:	6123      	str	r3, [r4, #16]
 800d96e:	b003      	add	sp, #12
 800d970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d974:	68a3      	ldr	r3, [r4, #8]
 800d976:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d97a:	701a      	strb	r2, [r3, #0]
 800d97c:	e7bc      	b.n	800d8f8 <ucdr_serialize_endian_uint16_t+0x60>
 800d97e:	f10d 0506 	add.w	r5, sp, #6
 800d982:	4629      	mov	r1, r5
 800d984:	4632      	mov	r2, r6
 800d986:	4638      	mov	r0, r7
 800d988:	f00a fe4f 	bl	801862a <memcpy>
 800d98c:	68a0      	ldr	r0, [r4, #8]
 800d98e:	464a      	mov	r2, r9
 800d990:	19a9      	adds	r1, r5, r6
 800d992:	f00a fe4a 	bl	801862a <memcpy>
 800d996:	e7af      	b.n	800d8f8 <ucdr_serialize_endian_uint16_t+0x60>

0800d998 <ucdr_deserialize_uint16_t>:
 800d998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d99c:	460d      	mov	r5, r1
 800d99e:	2102      	movs	r1, #2
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	f001 f9bb 	bl	800ed1c <ucdr_buffer_alignment>
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d9ae:	f001 f9f9 	bl	800eda4 <ucdr_advance_buffer>
 800d9b2:	2102      	movs	r1, #2
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f001 f951 	bl	800ec5c <ucdr_check_buffer_available_for>
 800d9ba:	bb60      	cbnz	r0, 800da16 <ucdr_deserialize_uint16_t+0x7e>
 800d9bc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d9c0:	42be      	cmp	r6, r7
 800d9c2:	d923      	bls.n	800da0c <ucdr_deserialize_uint16_t+0x74>
 800d9c4:	6923      	ldr	r3, [r4, #16]
 800d9c6:	60a6      	str	r6, [r4, #8]
 800d9c8:	1bf6      	subs	r6, r6, r7
 800d9ca:	4433      	add	r3, r6
 800d9cc:	f1c6 0902 	rsb	r9, r6, #2
 800d9d0:	6123      	str	r3, [r4, #16]
 800d9d2:	4649      	mov	r1, r9
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f001 f94d 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d034      	beq.n	800da48 <ucdr_deserialize_uint16_t+0xb0>
 800d9de:	7d23      	ldrb	r3, [r4, #20]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d042      	beq.n	800da6a <ucdr_deserialize_uint16_t+0xd2>
 800d9e4:	787b      	ldrb	r3, [r7, #1]
 800d9e6:	702b      	strb	r3, [r5, #0]
 800d9e8:	2e00      	cmp	r6, #0
 800d9ea:	d03a      	beq.n	800da62 <ucdr_deserialize_uint16_t+0xca>
 800d9ec:	783b      	ldrb	r3, [r7, #0]
 800d9ee:	706b      	strb	r3, [r5, #1]
 800d9f0:	6923      	ldr	r3, [r4, #16]
 800d9f2:	68a2      	ldr	r2, [r4, #8]
 800d9f4:	7da0      	ldrb	r0, [r4, #22]
 800d9f6:	2102      	movs	r1, #2
 800d9f8:	3302      	adds	r3, #2
 800d9fa:	444a      	add	r2, r9
 800d9fc:	1b9b      	subs	r3, r3, r6
 800d9fe:	7561      	strb	r1, [r4, #21]
 800da00:	60a2      	str	r2, [r4, #8]
 800da02:	6123      	str	r3, [r4, #16]
 800da04:	f080 0001 	eor.w	r0, r0, #1
 800da08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da0c:	2102      	movs	r1, #2
 800da0e:	4620      	mov	r0, r4
 800da10:	f001 f930 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800da14:	b180      	cbz	r0, 800da38 <ucdr_deserialize_uint16_t+0xa0>
 800da16:	7d23      	ldrb	r3, [r4, #20]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	68a3      	ldr	r3, [r4, #8]
 800da1c:	d011      	beq.n	800da42 <ucdr_deserialize_uint16_t+0xaa>
 800da1e:	785b      	ldrb	r3, [r3, #1]
 800da20:	702b      	strb	r3, [r5, #0]
 800da22:	68a3      	ldr	r3, [r4, #8]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	706b      	strb	r3, [r5, #1]
 800da28:	68a2      	ldr	r2, [r4, #8]
 800da2a:	6923      	ldr	r3, [r4, #16]
 800da2c:	3202      	adds	r2, #2
 800da2e:	3302      	adds	r3, #2
 800da30:	2102      	movs	r1, #2
 800da32:	60a2      	str	r2, [r4, #8]
 800da34:	6123      	str	r3, [r4, #16]
 800da36:	7561      	strb	r1, [r4, #21]
 800da38:	7da0      	ldrb	r0, [r4, #22]
 800da3a:	f080 0001 	eor.w	r0, r0, #1
 800da3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da42:	881b      	ldrh	r3, [r3, #0]
 800da44:	802b      	strh	r3, [r5, #0]
 800da46:	e7ef      	b.n	800da28 <ucdr_deserialize_uint16_t+0x90>
 800da48:	68a2      	ldr	r2, [r4, #8]
 800da4a:	6923      	ldr	r3, [r4, #16]
 800da4c:	7da0      	ldrb	r0, [r4, #22]
 800da4e:	f884 8015 	strb.w	r8, [r4, #21]
 800da52:	1b92      	subs	r2, r2, r6
 800da54:	1b9b      	subs	r3, r3, r6
 800da56:	60a2      	str	r2, [r4, #8]
 800da58:	6123      	str	r3, [r4, #16]
 800da5a:	f080 0001 	eor.w	r0, r0, #1
 800da5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da62:	68a3      	ldr	r3, [r4, #8]
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	706b      	strb	r3, [r5, #1]
 800da68:	e7c2      	b.n	800d9f0 <ucdr_deserialize_uint16_t+0x58>
 800da6a:	4639      	mov	r1, r7
 800da6c:	4632      	mov	r2, r6
 800da6e:	4628      	mov	r0, r5
 800da70:	f00a fddb 	bl	801862a <memcpy>
 800da74:	68a1      	ldr	r1, [r4, #8]
 800da76:	464a      	mov	r2, r9
 800da78:	19a8      	adds	r0, r5, r6
 800da7a:	f00a fdd6 	bl	801862a <memcpy>
 800da7e:	e7b7      	b.n	800d9f0 <ucdr_deserialize_uint16_t+0x58>

0800da80 <ucdr_deserialize_endian_uint16_t>:
 800da80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da84:	460e      	mov	r6, r1
 800da86:	2102      	movs	r1, #2
 800da88:	4604      	mov	r4, r0
 800da8a:	4615      	mov	r5, r2
 800da8c:	f001 f946 	bl	800ed1c <ucdr_buffer_alignment>
 800da90:	4601      	mov	r1, r0
 800da92:	4620      	mov	r0, r4
 800da94:	f894 9015 	ldrb.w	r9, [r4, #21]
 800da98:	f001 f984 	bl	800eda4 <ucdr_advance_buffer>
 800da9c:	2102      	movs	r1, #2
 800da9e:	4620      	mov	r0, r4
 800daa0:	f001 f8dc 	bl	800ec5c <ucdr_check_buffer_available_for>
 800daa4:	bb70      	cbnz	r0, 800db04 <ucdr_deserialize_endian_uint16_t+0x84>
 800daa6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800daaa:	4547      	cmp	r7, r8
 800daac:	d925      	bls.n	800dafa <ucdr_deserialize_endian_uint16_t+0x7a>
 800daae:	6923      	ldr	r3, [r4, #16]
 800dab0:	60a7      	str	r7, [r4, #8]
 800dab2:	eba7 0708 	sub.w	r7, r7, r8
 800dab6:	443b      	add	r3, r7
 800dab8:	f1c7 0a02 	rsb	sl, r7, #2
 800dabc:	6123      	str	r3, [r4, #16]
 800dabe:	4651      	mov	r1, sl
 800dac0:	4620      	mov	r0, r4
 800dac2:	f001 f8d7 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d034      	beq.n	800db34 <ucdr_deserialize_endian_uint16_t+0xb4>
 800daca:	2e01      	cmp	r6, #1
 800dacc:	d043      	beq.n	800db56 <ucdr_deserialize_endian_uint16_t+0xd6>
 800dace:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dad2:	702b      	strb	r3, [r5, #0]
 800dad4:	2f00      	cmp	r7, #0
 800dad6:	d03a      	beq.n	800db4e <ucdr_deserialize_endian_uint16_t+0xce>
 800dad8:	f898 3000 	ldrb.w	r3, [r8]
 800dadc:	706b      	strb	r3, [r5, #1]
 800dade:	6923      	ldr	r3, [r4, #16]
 800dae0:	68a2      	ldr	r2, [r4, #8]
 800dae2:	7da0      	ldrb	r0, [r4, #22]
 800dae4:	2102      	movs	r1, #2
 800dae6:	3302      	adds	r3, #2
 800dae8:	4452      	add	r2, sl
 800daea:	1bdb      	subs	r3, r3, r7
 800daec:	7561      	strb	r1, [r4, #21]
 800daee:	60a2      	str	r2, [r4, #8]
 800daf0:	6123      	str	r3, [r4, #16]
 800daf2:	f080 0001 	eor.w	r0, r0, #1
 800daf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dafa:	2102      	movs	r1, #2
 800dafc:	4620      	mov	r0, r4
 800dafe:	f001 f8b9 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800db02:	b178      	cbz	r0, 800db24 <ucdr_deserialize_endian_uint16_t+0xa4>
 800db04:	2e01      	cmp	r6, #1
 800db06:	68a3      	ldr	r3, [r4, #8]
 800db08:	d011      	beq.n	800db2e <ucdr_deserialize_endian_uint16_t+0xae>
 800db0a:	785b      	ldrb	r3, [r3, #1]
 800db0c:	702b      	strb	r3, [r5, #0]
 800db0e:	68a3      	ldr	r3, [r4, #8]
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	706b      	strb	r3, [r5, #1]
 800db14:	68a2      	ldr	r2, [r4, #8]
 800db16:	6923      	ldr	r3, [r4, #16]
 800db18:	3202      	adds	r2, #2
 800db1a:	3302      	adds	r3, #2
 800db1c:	2102      	movs	r1, #2
 800db1e:	60a2      	str	r2, [r4, #8]
 800db20:	6123      	str	r3, [r4, #16]
 800db22:	7561      	strb	r1, [r4, #21]
 800db24:	7da0      	ldrb	r0, [r4, #22]
 800db26:	f080 0001 	eor.w	r0, r0, #1
 800db2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	802b      	strh	r3, [r5, #0]
 800db32:	e7ef      	b.n	800db14 <ucdr_deserialize_endian_uint16_t+0x94>
 800db34:	68a2      	ldr	r2, [r4, #8]
 800db36:	6923      	ldr	r3, [r4, #16]
 800db38:	7da0      	ldrb	r0, [r4, #22]
 800db3a:	f884 9015 	strb.w	r9, [r4, #21]
 800db3e:	1bd2      	subs	r2, r2, r7
 800db40:	1bdb      	subs	r3, r3, r7
 800db42:	60a2      	str	r2, [r4, #8]
 800db44:	6123      	str	r3, [r4, #16]
 800db46:	f080 0001 	eor.w	r0, r0, #1
 800db4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db4e:	68a3      	ldr	r3, [r4, #8]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	706b      	strb	r3, [r5, #1]
 800db54:	e7c3      	b.n	800dade <ucdr_deserialize_endian_uint16_t+0x5e>
 800db56:	4641      	mov	r1, r8
 800db58:	463a      	mov	r2, r7
 800db5a:	4628      	mov	r0, r5
 800db5c:	f00a fd65 	bl	801862a <memcpy>
 800db60:	68a1      	ldr	r1, [r4, #8]
 800db62:	4652      	mov	r2, sl
 800db64:	19e8      	adds	r0, r5, r7
 800db66:	f00a fd60 	bl	801862a <memcpy>
 800db6a:	e7b8      	b.n	800dade <ucdr_deserialize_endian_uint16_t+0x5e>

0800db6c <ucdr_serialize_uint32_t>:
 800db6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db70:	b082      	sub	sp, #8
 800db72:	4604      	mov	r4, r0
 800db74:	9101      	str	r1, [sp, #4]
 800db76:	2104      	movs	r1, #4
 800db78:	f001 f8d0 	bl	800ed1c <ucdr_buffer_alignment>
 800db7c:	4601      	mov	r1, r0
 800db7e:	4620      	mov	r0, r4
 800db80:	7d67      	ldrb	r7, [r4, #21]
 800db82:	f001 f90f 	bl	800eda4 <ucdr_advance_buffer>
 800db86:	2104      	movs	r1, #4
 800db88:	4620      	mov	r0, r4
 800db8a:	f001 f867 	bl	800ec5c <ucdr_check_buffer_available_for>
 800db8e:	2800      	cmp	r0, #0
 800db90:	d139      	bne.n	800dc06 <ucdr_serialize_uint32_t+0x9a>
 800db92:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800db96:	42ab      	cmp	r3, r5
 800db98:	d930      	bls.n	800dbfc <ucdr_serialize_uint32_t+0x90>
 800db9a:	1b5e      	subs	r6, r3, r5
 800db9c:	60a3      	str	r3, [r4, #8]
 800db9e:	6923      	ldr	r3, [r4, #16]
 800dba0:	f1c6 0804 	rsb	r8, r6, #4
 800dba4:	4433      	add	r3, r6
 800dba6:	6123      	str	r3, [r4, #16]
 800dba8:	4641      	mov	r1, r8
 800dbaa:	4620      	mov	r0, r4
 800dbac:	f001 f862 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d04c      	beq.n	800dc4e <ucdr_serialize_uint32_t+0xe2>
 800dbb4:	7d23      	ldrb	r3, [r4, #20]
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d063      	beq.n	800dc82 <ucdr_serialize_uint32_t+0x116>
 800dbba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dbbe:	702b      	strb	r3, [r5, #0]
 800dbc0:	2e00      	cmp	r6, #0
 800dbc2:	d051      	beq.n	800dc68 <ucdr_serialize_uint32_t+0xfc>
 800dbc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dbc8:	706b      	strb	r3, [r5, #1]
 800dbca:	2e01      	cmp	r6, #1
 800dbcc:	d050      	beq.n	800dc70 <ucdr_serialize_uint32_t+0x104>
 800dbce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dbd2:	70ab      	strb	r3, [r5, #2]
 800dbd4:	2e02      	cmp	r6, #2
 800dbd6:	d04f      	beq.n	800dc78 <ucdr_serialize_uint32_t+0x10c>
 800dbd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dbdc:	70eb      	strb	r3, [r5, #3]
 800dbde:	6923      	ldr	r3, [r4, #16]
 800dbe0:	68a2      	ldr	r2, [r4, #8]
 800dbe2:	7da0      	ldrb	r0, [r4, #22]
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	1b9e      	subs	r6, r3, r6
 800dbe8:	4442      	add	r2, r8
 800dbea:	2304      	movs	r3, #4
 800dbec:	f080 0001 	eor.w	r0, r0, #1
 800dbf0:	60a2      	str	r2, [r4, #8]
 800dbf2:	6126      	str	r6, [r4, #16]
 800dbf4:	7563      	strb	r3, [r4, #21]
 800dbf6:	b002      	add	sp, #8
 800dbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbfc:	2104      	movs	r1, #4
 800dbfe:	4620      	mov	r0, r4
 800dc00:	f001 f838 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800dc04:	b1d0      	cbz	r0, 800dc3c <ucdr_serialize_uint32_t+0xd0>
 800dc06:	7d23      	ldrb	r3, [r4, #20]
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	68a3      	ldr	r3, [r4, #8]
 800dc0c:	d01c      	beq.n	800dc48 <ucdr_serialize_uint32_t+0xdc>
 800dc0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dc12:	701a      	strb	r2, [r3, #0]
 800dc14:	68a3      	ldr	r3, [r4, #8]
 800dc16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc1a:	705a      	strb	r2, [r3, #1]
 800dc1c:	68a3      	ldr	r3, [r4, #8]
 800dc1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dc22:	709a      	strb	r2, [r3, #2]
 800dc24:	68a3      	ldr	r3, [r4, #8]
 800dc26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc2a:	70da      	strb	r2, [r3, #3]
 800dc2c:	68a2      	ldr	r2, [r4, #8]
 800dc2e:	6923      	ldr	r3, [r4, #16]
 800dc30:	3204      	adds	r2, #4
 800dc32:	3304      	adds	r3, #4
 800dc34:	2104      	movs	r1, #4
 800dc36:	60a2      	str	r2, [r4, #8]
 800dc38:	6123      	str	r3, [r4, #16]
 800dc3a:	7561      	strb	r1, [r4, #21]
 800dc3c:	7da0      	ldrb	r0, [r4, #22]
 800dc3e:	f080 0001 	eor.w	r0, r0, #1
 800dc42:	b002      	add	sp, #8
 800dc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc48:	9a01      	ldr	r2, [sp, #4]
 800dc4a:	601a      	str	r2, [r3, #0]
 800dc4c:	e7ee      	b.n	800dc2c <ucdr_serialize_uint32_t+0xc0>
 800dc4e:	68a2      	ldr	r2, [r4, #8]
 800dc50:	6923      	ldr	r3, [r4, #16]
 800dc52:	7da0      	ldrb	r0, [r4, #22]
 800dc54:	7567      	strb	r7, [r4, #21]
 800dc56:	1b92      	subs	r2, r2, r6
 800dc58:	1b9b      	subs	r3, r3, r6
 800dc5a:	f080 0001 	eor.w	r0, r0, #1
 800dc5e:	60a2      	str	r2, [r4, #8]
 800dc60:	6123      	str	r3, [r4, #16]
 800dc62:	b002      	add	sp, #8
 800dc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc68:	68a3      	ldr	r3, [r4, #8]
 800dc6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc6e:	701a      	strb	r2, [r3, #0]
 800dc70:	68a3      	ldr	r3, [r4, #8]
 800dc72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dc76:	701a      	strb	r2, [r3, #0]
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc7e:	701a      	strb	r2, [r3, #0]
 800dc80:	e7ad      	b.n	800dbde <ucdr_serialize_uint32_t+0x72>
 800dc82:	4628      	mov	r0, r5
 800dc84:	ad01      	add	r5, sp, #4
 800dc86:	4629      	mov	r1, r5
 800dc88:	4632      	mov	r2, r6
 800dc8a:	f00a fcce 	bl	801862a <memcpy>
 800dc8e:	68a0      	ldr	r0, [r4, #8]
 800dc90:	4642      	mov	r2, r8
 800dc92:	19a9      	adds	r1, r5, r6
 800dc94:	f00a fcc9 	bl	801862a <memcpy>
 800dc98:	e7a1      	b.n	800dbde <ucdr_serialize_uint32_t+0x72>
 800dc9a:	bf00      	nop

0800dc9c <ucdr_serialize_endian_uint32_t>:
 800dc9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dca0:	b083      	sub	sp, #12
 800dca2:	460d      	mov	r5, r1
 800dca4:	2104      	movs	r1, #4
 800dca6:	4604      	mov	r4, r0
 800dca8:	9201      	str	r2, [sp, #4]
 800dcaa:	f001 f837 	bl	800ed1c <ucdr_buffer_alignment>
 800dcae:	4601      	mov	r1, r0
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dcb6:	f001 f875 	bl	800eda4 <ucdr_advance_buffer>
 800dcba:	2104      	movs	r1, #4
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	f000 ffcd 	bl	800ec5c <ucdr_check_buffer_available_for>
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	d138      	bne.n	800dd38 <ucdr_serialize_endian_uint32_t+0x9c>
 800dcc6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dcca:	42b7      	cmp	r7, r6
 800dccc:	d92f      	bls.n	800dd2e <ucdr_serialize_endian_uint32_t+0x92>
 800dcce:	6923      	ldr	r3, [r4, #16]
 800dcd0:	60a7      	str	r7, [r4, #8]
 800dcd2:	1bbf      	subs	r7, r7, r6
 800dcd4:	443b      	add	r3, r7
 800dcd6:	f1c7 0904 	rsb	r9, r7, #4
 800dcda:	6123      	str	r3, [r4, #16]
 800dcdc:	4649      	mov	r1, r9
 800dcde:	4620      	mov	r0, r4
 800dce0:	f000 ffc8 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	d04a      	beq.n	800dd7e <ucdr_serialize_endian_uint32_t+0xe2>
 800dce8:	2d01      	cmp	r5, #1
 800dcea:	d063      	beq.n	800ddb4 <ucdr_serialize_endian_uint32_t+0x118>
 800dcec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dcf0:	7033      	strb	r3, [r6, #0]
 800dcf2:	2f00      	cmp	r7, #0
 800dcf4:	d051      	beq.n	800dd9a <ucdr_serialize_endian_uint32_t+0xfe>
 800dcf6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dcfa:	7073      	strb	r3, [r6, #1]
 800dcfc:	2f01      	cmp	r7, #1
 800dcfe:	d050      	beq.n	800dda2 <ucdr_serialize_endian_uint32_t+0x106>
 800dd00:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dd04:	70b3      	strb	r3, [r6, #2]
 800dd06:	2f02      	cmp	r7, #2
 800dd08:	d04f      	beq.n	800ddaa <ucdr_serialize_endian_uint32_t+0x10e>
 800dd0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dd0e:	70f3      	strb	r3, [r6, #3]
 800dd10:	6923      	ldr	r3, [r4, #16]
 800dd12:	68a2      	ldr	r2, [r4, #8]
 800dd14:	7da0      	ldrb	r0, [r4, #22]
 800dd16:	3304      	adds	r3, #4
 800dd18:	444a      	add	r2, r9
 800dd1a:	1bdb      	subs	r3, r3, r7
 800dd1c:	2104      	movs	r1, #4
 800dd1e:	f080 0001 	eor.w	r0, r0, #1
 800dd22:	60a2      	str	r2, [r4, #8]
 800dd24:	6123      	str	r3, [r4, #16]
 800dd26:	7561      	strb	r1, [r4, #21]
 800dd28:	b003      	add	sp, #12
 800dd2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd2e:	2104      	movs	r1, #4
 800dd30:	4620      	mov	r0, r4
 800dd32:	f000 ff9f 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800dd36:	b1c8      	cbz	r0, 800dd6c <ucdr_serialize_endian_uint32_t+0xd0>
 800dd38:	2d01      	cmp	r5, #1
 800dd3a:	68a3      	ldr	r3, [r4, #8]
 800dd3c:	d01c      	beq.n	800dd78 <ucdr_serialize_endian_uint32_t+0xdc>
 800dd3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dd42:	701a      	strb	r2, [r3, #0]
 800dd44:	68a3      	ldr	r3, [r4, #8]
 800dd46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd4a:	705a      	strb	r2, [r3, #1]
 800dd4c:	68a3      	ldr	r3, [r4, #8]
 800dd4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd52:	709a      	strb	r2, [r3, #2]
 800dd54:	68a3      	ldr	r3, [r4, #8]
 800dd56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd5a:	70da      	strb	r2, [r3, #3]
 800dd5c:	68a2      	ldr	r2, [r4, #8]
 800dd5e:	6923      	ldr	r3, [r4, #16]
 800dd60:	3204      	adds	r2, #4
 800dd62:	3304      	adds	r3, #4
 800dd64:	2104      	movs	r1, #4
 800dd66:	60a2      	str	r2, [r4, #8]
 800dd68:	6123      	str	r3, [r4, #16]
 800dd6a:	7561      	strb	r1, [r4, #21]
 800dd6c:	7da0      	ldrb	r0, [r4, #22]
 800dd6e:	f080 0001 	eor.w	r0, r0, #1
 800dd72:	b003      	add	sp, #12
 800dd74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd78:	9a01      	ldr	r2, [sp, #4]
 800dd7a:	601a      	str	r2, [r3, #0]
 800dd7c:	e7ee      	b.n	800dd5c <ucdr_serialize_endian_uint32_t+0xc0>
 800dd7e:	68a2      	ldr	r2, [r4, #8]
 800dd80:	6923      	ldr	r3, [r4, #16]
 800dd82:	7da0      	ldrb	r0, [r4, #22]
 800dd84:	f884 8015 	strb.w	r8, [r4, #21]
 800dd88:	1bd2      	subs	r2, r2, r7
 800dd8a:	1bdb      	subs	r3, r3, r7
 800dd8c:	f080 0001 	eor.w	r0, r0, #1
 800dd90:	60a2      	str	r2, [r4, #8]
 800dd92:	6123      	str	r3, [r4, #16]
 800dd94:	b003      	add	sp, #12
 800dd96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd9a:	68a3      	ldr	r3, [r4, #8]
 800dd9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dda0:	701a      	strb	r2, [r3, #0]
 800dda2:	68a3      	ldr	r3, [r4, #8]
 800dda4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dda8:	701a      	strb	r2, [r3, #0]
 800ddaa:	68a3      	ldr	r3, [r4, #8]
 800ddac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddb0:	701a      	strb	r2, [r3, #0]
 800ddb2:	e7ad      	b.n	800dd10 <ucdr_serialize_endian_uint32_t+0x74>
 800ddb4:	ad01      	add	r5, sp, #4
 800ddb6:	4629      	mov	r1, r5
 800ddb8:	463a      	mov	r2, r7
 800ddba:	4630      	mov	r0, r6
 800ddbc:	f00a fc35 	bl	801862a <memcpy>
 800ddc0:	68a0      	ldr	r0, [r4, #8]
 800ddc2:	464a      	mov	r2, r9
 800ddc4:	19e9      	adds	r1, r5, r7
 800ddc6:	f00a fc30 	bl	801862a <memcpy>
 800ddca:	e7a1      	b.n	800dd10 <ucdr_serialize_endian_uint32_t+0x74>

0800ddcc <ucdr_deserialize_uint32_t>:
 800ddcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddd0:	460d      	mov	r5, r1
 800ddd2:	2104      	movs	r1, #4
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	f000 ffa1 	bl	800ed1c <ucdr_buffer_alignment>
 800ddda:	4601      	mov	r1, r0
 800dddc:	4620      	mov	r0, r4
 800ddde:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dde2:	f000 ffdf 	bl	800eda4 <ucdr_advance_buffer>
 800dde6:	2104      	movs	r1, #4
 800dde8:	4620      	mov	r0, r4
 800ddea:	f000 ff37 	bl	800ec5c <ucdr_check_buffer_available_for>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d138      	bne.n	800de64 <ucdr_deserialize_uint32_t+0x98>
 800ddf2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ddf6:	42b7      	cmp	r7, r6
 800ddf8:	d92f      	bls.n	800de5a <ucdr_deserialize_uint32_t+0x8e>
 800ddfa:	6923      	ldr	r3, [r4, #16]
 800ddfc:	60a7      	str	r7, [r4, #8]
 800ddfe:	1bbf      	subs	r7, r7, r6
 800de00:	443b      	add	r3, r7
 800de02:	f1c7 0904 	rsb	r9, r7, #4
 800de06:	6123      	str	r3, [r4, #16]
 800de08:	4649      	mov	r1, r9
 800de0a:	4620      	mov	r0, r4
 800de0c:	f000 ff32 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800de10:	2800      	cmp	r0, #0
 800de12:	d046      	beq.n	800dea2 <ucdr_deserialize_uint32_t+0xd6>
 800de14:	7d23      	ldrb	r3, [r4, #20]
 800de16:	2b01      	cmp	r3, #1
 800de18:	d05c      	beq.n	800ded4 <ucdr_deserialize_uint32_t+0x108>
 800de1a:	78f3      	ldrb	r3, [r6, #3]
 800de1c:	702b      	strb	r3, [r5, #0]
 800de1e:	2f00      	cmp	r7, #0
 800de20:	d04c      	beq.n	800debc <ucdr_deserialize_uint32_t+0xf0>
 800de22:	78b3      	ldrb	r3, [r6, #2]
 800de24:	706b      	strb	r3, [r5, #1]
 800de26:	2f01      	cmp	r7, #1
 800de28:	f105 0302 	add.w	r3, r5, #2
 800de2c:	d04a      	beq.n	800dec4 <ucdr_deserialize_uint32_t+0xf8>
 800de2e:	7873      	ldrb	r3, [r6, #1]
 800de30:	70ab      	strb	r3, [r5, #2]
 800de32:	2f02      	cmp	r7, #2
 800de34:	f105 0303 	add.w	r3, r5, #3
 800de38:	d048      	beq.n	800decc <ucdr_deserialize_uint32_t+0x100>
 800de3a:	7833      	ldrb	r3, [r6, #0]
 800de3c:	70eb      	strb	r3, [r5, #3]
 800de3e:	6923      	ldr	r3, [r4, #16]
 800de40:	68a2      	ldr	r2, [r4, #8]
 800de42:	7da0      	ldrb	r0, [r4, #22]
 800de44:	2104      	movs	r1, #4
 800de46:	3304      	adds	r3, #4
 800de48:	444a      	add	r2, r9
 800de4a:	1bdb      	subs	r3, r3, r7
 800de4c:	7561      	strb	r1, [r4, #21]
 800de4e:	60a2      	str	r2, [r4, #8]
 800de50:	6123      	str	r3, [r4, #16]
 800de52:	f080 0001 	eor.w	r0, r0, #1
 800de56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de5a:	2104      	movs	r1, #4
 800de5c:	4620      	mov	r0, r4
 800de5e:	f000 ff09 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800de62:	b1b0      	cbz	r0, 800de92 <ucdr_deserialize_uint32_t+0xc6>
 800de64:	7d23      	ldrb	r3, [r4, #20]
 800de66:	2b01      	cmp	r3, #1
 800de68:	68a3      	ldr	r3, [r4, #8]
 800de6a:	d017      	beq.n	800de9c <ucdr_deserialize_uint32_t+0xd0>
 800de6c:	78db      	ldrb	r3, [r3, #3]
 800de6e:	702b      	strb	r3, [r5, #0]
 800de70:	68a3      	ldr	r3, [r4, #8]
 800de72:	789b      	ldrb	r3, [r3, #2]
 800de74:	706b      	strb	r3, [r5, #1]
 800de76:	68a3      	ldr	r3, [r4, #8]
 800de78:	785b      	ldrb	r3, [r3, #1]
 800de7a:	70ab      	strb	r3, [r5, #2]
 800de7c:	68a3      	ldr	r3, [r4, #8]
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	70eb      	strb	r3, [r5, #3]
 800de82:	68a2      	ldr	r2, [r4, #8]
 800de84:	6923      	ldr	r3, [r4, #16]
 800de86:	3204      	adds	r2, #4
 800de88:	3304      	adds	r3, #4
 800de8a:	2104      	movs	r1, #4
 800de8c:	60a2      	str	r2, [r4, #8]
 800de8e:	6123      	str	r3, [r4, #16]
 800de90:	7561      	strb	r1, [r4, #21]
 800de92:	7da0      	ldrb	r0, [r4, #22]
 800de94:	f080 0001 	eor.w	r0, r0, #1
 800de98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	602b      	str	r3, [r5, #0]
 800dea0:	e7ef      	b.n	800de82 <ucdr_deserialize_uint32_t+0xb6>
 800dea2:	68a2      	ldr	r2, [r4, #8]
 800dea4:	6923      	ldr	r3, [r4, #16]
 800dea6:	7da0      	ldrb	r0, [r4, #22]
 800dea8:	f884 8015 	strb.w	r8, [r4, #21]
 800deac:	1bd2      	subs	r2, r2, r7
 800deae:	1bdb      	subs	r3, r3, r7
 800deb0:	60a2      	str	r2, [r4, #8]
 800deb2:	6123      	str	r3, [r4, #16]
 800deb4:	f080 0001 	eor.w	r0, r0, #1
 800deb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800debc:	68a3      	ldr	r3, [r4, #8]
 800debe:	789b      	ldrb	r3, [r3, #2]
 800dec0:	706b      	strb	r3, [r5, #1]
 800dec2:	1cab      	adds	r3, r5, #2
 800dec4:	68a2      	ldr	r2, [r4, #8]
 800dec6:	7852      	ldrb	r2, [r2, #1]
 800dec8:	f803 2b01 	strb.w	r2, [r3], #1
 800decc:	68a2      	ldr	r2, [r4, #8]
 800dece:	7812      	ldrb	r2, [r2, #0]
 800ded0:	701a      	strb	r2, [r3, #0]
 800ded2:	e7b4      	b.n	800de3e <ucdr_deserialize_uint32_t+0x72>
 800ded4:	4631      	mov	r1, r6
 800ded6:	463a      	mov	r2, r7
 800ded8:	4628      	mov	r0, r5
 800deda:	f00a fba6 	bl	801862a <memcpy>
 800dede:	68a1      	ldr	r1, [r4, #8]
 800dee0:	464a      	mov	r2, r9
 800dee2:	19e8      	adds	r0, r5, r7
 800dee4:	f00a fba1 	bl	801862a <memcpy>
 800dee8:	e7a9      	b.n	800de3e <ucdr_deserialize_uint32_t+0x72>
 800deea:	bf00      	nop

0800deec <ucdr_deserialize_endian_uint32_t>:
 800deec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800def0:	460e      	mov	r6, r1
 800def2:	2104      	movs	r1, #4
 800def4:	4604      	mov	r4, r0
 800def6:	4615      	mov	r5, r2
 800def8:	f000 ff10 	bl	800ed1c <ucdr_buffer_alignment>
 800defc:	4601      	mov	r1, r0
 800defe:	4620      	mov	r0, r4
 800df00:	f894 9015 	ldrb.w	r9, [r4, #21]
 800df04:	f000 ff4e 	bl	800eda4 <ucdr_advance_buffer>
 800df08:	2104      	movs	r1, #4
 800df0a:	4620      	mov	r0, r4
 800df0c:	f000 fea6 	bl	800ec5c <ucdr_check_buffer_available_for>
 800df10:	2800      	cmp	r0, #0
 800df12:	d13c      	bne.n	800df8e <ucdr_deserialize_endian_uint32_t+0xa2>
 800df14:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800df18:	42bb      	cmp	r3, r7
 800df1a:	d933      	bls.n	800df84 <ucdr_deserialize_endian_uint32_t+0x98>
 800df1c:	eba3 0807 	sub.w	r8, r3, r7
 800df20:	60a3      	str	r3, [r4, #8]
 800df22:	6923      	ldr	r3, [r4, #16]
 800df24:	f1c8 0a04 	rsb	sl, r8, #4
 800df28:	4443      	add	r3, r8
 800df2a:	6123      	str	r3, [r4, #16]
 800df2c:	4651      	mov	r1, sl
 800df2e:	4620      	mov	r0, r4
 800df30:	f000 fea0 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800df34:	2800      	cmp	r0, #0
 800df36:	d048      	beq.n	800dfca <ucdr_deserialize_endian_uint32_t+0xde>
 800df38:	2e01      	cmp	r6, #1
 800df3a:	d061      	beq.n	800e000 <ucdr_deserialize_endian_uint32_t+0x114>
 800df3c:	78fb      	ldrb	r3, [r7, #3]
 800df3e:	702b      	strb	r3, [r5, #0]
 800df40:	f1b8 0f00 	cmp.w	r8, #0
 800df44:	d050      	beq.n	800dfe8 <ucdr_deserialize_endian_uint32_t+0xfc>
 800df46:	78bb      	ldrb	r3, [r7, #2]
 800df48:	706b      	strb	r3, [r5, #1]
 800df4a:	f1b8 0f01 	cmp.w	r8, #1
 800df4e:	f105 0302 	add.w	r3, r5, #2
 800df52:	d04d      	beq.n	800dff0 <ucdr_deserialize_endian_uint32_t+0x104>
 800df54:	787b      	ldrb	r3, [r7, #1]
 800df56:	70ab      	strb	r3, [r5, #2]
 800df58:	f1b8 0f02 	cmp.w	r8, #2
 800df5c:	f105 0303 	add.w	r3, r5, #3
 800df60:	d04a      	beq.n	800dff8 <ucdr_deserialize_endian_uint32_t+0x10c>
 800df62:	783b      	ldrb	r3, [r7, #0]
 800df64:	70eb      	strb	r3, [r5, #3]
 800df66:	6923      	ldr	r3, [r4, #16]
 800df68:	68a2      	ldr	r2, [r4, #8]
 800df6a:	7da0      	ldrb	r0, [r4, #22]
 800df6c:	2104      	movs	r1, #4
 800df6e:	3304      	adds	r3, #4
 800df70:	4452      	add	r2, sl
 800df72:	eba3 0308 	sub.w	r3, r3, r8
 800df76:	7561      	strb	r1, [r4, #21]
 800df78:	60a2      	str	r2, [r4, #8]
 800df7a:	6123      	str	r3, [r4, #16]
 800df7c:	f080 0001 	eor.w	r0, r0, #1
 800df80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df84:	2104      	movs	r1, #4
 800df86:	4620      	mov	r0, r4
 800df88:	f000 fe74 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800df8c:	b1a8      	cbz	r0, 800dfba <ucdr_deserialize_endian_uint32_t+0xce>
 800df8e:	2e01      	cmp	r6, #1
 800df90:	68a3      	ldr	r3, [r4, #8]
 800df92:	d017      	beq.n	800dfc4 <ucdr_deserialize_endian_uint32_t+0xd8>
 800df94:	78db      	ldrb	r3, [r3, #3]
 800df96:	702b      	strb	r3, [r5, #0]
 800df98:	68a3      	ldr	r3, [r4, #8]
 800df9a:	789b      	ldrb	r3, [r3, #2]
 800df9c:	706b      	strb	r3, [r5, #1]
 800df9e:	68a3      	ldr	r3, [r4, #8]
 800dfa0:	785b      	ldrb	r3, [r3, #1]
 800dfa2:	70ab      	strb	r3, [r5, #2]
 800dfa4:	68a3      	ldr	r3, [r4, #8]
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	70eb      	strb	r3, [r5, #3]
 800dfaa:	68a2      	ldr	r2, [r4, #8]
 800dfac:	6923      	ldr	r3, [r4, #16]
 800dfae:	3204      	adds	r2, #4
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	2104      	movs	r1, #4
 800dfb4:	60a2      	str	r2, [r4, #8]
 800dfb6:	6123      	str	r3, [r4, #16]
 800dfb8:	7561      	strb	r1, [r4, #21]
 800dfba:	7da0      	ldrb	r0, [r4, #22]
 800dfbc:	f080 0001 	eor.w	r0, r0, #1
 800dfc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	602b      	str	r3, [r5, #0]
 800dfc8:	e7ef      	b.n	800dfaa <ucdr_deserialize_endian_uint32_t+0xbe>
 800dfca:	68a2      	ldr	r2, [r4, #8]
 800dfcc:	6923      	ldr	r3, [r4, #16]
 800dfce:	7da0      	ldrb	r0, [r4, #22]
 800dfd0:	f884 9015 	strb.w	r9, [r4, #21]
 800dfd4:	eba2 0208 	sub.w	r2, r2, r8
 800dfd8:	eba3 0308 	sub.w	r3, r3, r8
 800dfdc:	60a2      	str	r2, [r4, #8]
 800dfde:	6123      	str	r3, [r4, #16]
 800dfe0:	f080 0001 	eor.w	r0, r0, #1
 800dfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfe8:	68a3      	ldr	r3, [r4, #8]
 800dfea:	789b      	ldrb	r3, [r3, #2]
 800dfec:	706b      	strb	r3, [r5, #1]
 800dfee:	1cab      	adds	r3, r5, #2
 800dff0:	68a2      	ldr	r2, [r4, #8]
 800dff2:	7852      	ldrb	r2, [r2, #1]
 800dff4:	f803 2b01 	strb.w	r2, [r3], #1
 800dff8:	68a2      	ldr	r2, [r4, #8]
 800dffa:	7812      	ldrb	r2, [r2, #0]
 800dffc:	701a      	strb	r2, [r3, #0]
 800dffe:	e7b2      	b.n	800df66 <ucdr_deserialize_endian_uint32_t+0x7a>
 800e000:	4639      	mov	r1, r7
 800e002:	4642      	mov	r2, r8
 800e004:	4628      	mov	r0, r5
 800e006:	f00a fb10 	bl	801862a <memcpy>
 800e00a:	68a1      	ldr	r1, [r4, #8]
 800e00c:	4652      	mov	r2, sl
 800e00e:	eb05 0008 	add.w	r0, r5, r8
 800e012:	f00a fb0a 	bl	801862a <memcpy>
 800e016:	e7a6      	b.n	800df66 <ucdr_deserialize_endian_uint32_t+0x7a>

0800e018 <ucdr_serialize_uint64_t>:
 800e018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e01c:	2108      	movs	r1, #8
 800e01e:	b082      	sub	sp, #8
 800e020:	4604      	mov	r4, r0
 800e022:	e9cd 2300 	strd	r2, r3, [sp]
 800e026:	f000 fe79 	bl	800ed1c <ucdr_buffer_alignment>
 800e02a:	4601      	mov	r1, r0
 800e02c:	4620      	mov	r0, r4
 800e02e:	7d67      	ldrb	r7, [r4, #21]
 800e030:	f000 feb8 	bl	800eda4 <ucdr_advance_buffer>
 800e034:	2108      	movs	r1, #8
 800e036:	4620      	mov	r0, r4
 800e038:	f000 fe10 	bl	800ec5c <ucdr_check_buffer_available_for>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d14e      	bne.n	800e0de <ucdr_serialize_uint64_t+0xc6>
 800e040:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e044:	42ab      	cmp	r3, r5
 800e046:	d945      	bls.n	800e0d4 <ucdr_serialize_uint64_t+0xbc>
 800e048:	1b5e      	subs	r6, r3, r5
 800e04a:	60a3      	str	r3, [r4, #8]
 800e04c:	6923      	ldr	r3, [r4, #16]
 800e04e:	f1c6 0808 	rsb	r8, r6, #8
 800e052:	4433      	add	r3, r6
 800e054:	6123      	str	r3, [r4, #16]
 800e056:	4641      	mov	r1, r8
 800e058:	4620      	mov	r0, r4
 800e05a:	f000 fe0b 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e05e:	2800      	cmp	r0, #0
 800e060:	d074      	beq.n	800e14c <ucdr_serialize_uint64_t+0x134>
 800e062:	7d23      	ldrb	r3, [r4, #20]
 800e064:	2b01      	cmp	r3, #1
 800e066:	f000 809b 	beq.w	800e1a0 <ucdr_serialize_uint64_t+0x188>
 800e06a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e06e:	702b      	strb	r3, [r5, #0]
 800e070:	2e00      	cmp	r6, #0
 800e072:	d078      	beq.n	800e166 <ucdr_serialize_uint64_t+0x14e>
 800e074:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e078:	706b      	strb	r3, [r5, #1]
 800e07a:	2e01      	cmp	r6, #1
 800e07c:	d077      	beq.n	800e16e <ucdr_serialize_uint64_t+0x156>
 800e07e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e082:	70ab      	strb	r3, [r5, #2]
 800e084:	2e02      	cmp	r6, #2
 800e086:	d076      	beq.n	800e176 <ucdr_serialize_uint64_t+0x15e>
 800e088:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e08c:	70eb      	strb	r3, [r5, #3]
 800e08e:	2e03      	cmp	r6, #3
 800e090:	d075      	beq.n	800e17e <ucdr_serialize_uint64_t+0x166>
 800e092:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e096:	712b      	strb	r3, [r5, #4]
 800e098:	2e04      	cmp	r6, #4
 800e09a:	d074      	beq.n	800e186 <ucdr_serialize_uint64_t+0x16e>
 800e09c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e0a0:	716b      	strb	r3, [r5, #5]
 800e0a2:	2e05      	cmp	r6, #5
 800e0a4:	d073      	beq.n	800e18e <ucdr_serialize_uint64_t+0x176>
 800e0a6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e0aa:	71ab      	strb	r3, [r5, #6]
 800e0ac:	2e06      	cmp	r6, #6
 800e0ae:	d072      	beq.n	800e196 <ucdr_serialize_uint64_t+0x17e>
 800e0b0:	f89d 3000 	ldrb.w	r3, [sp]
 800e0b4:	71eb      	strb	r3, [r5, #7]
 800e0b6:	6923      	ldr	r3, [r4, #16]
 800e0b8:	68a2      	ldr	r2, [r4, #8]
 800e0ba:	7da0      	ldrb	r0, [r4, #22]
 800e0bc:	3308      	adds	r3, #8
 800e0be:	1b9e      	subs	r6, r3, r6
 800e0c0:	4442      	add	r2, r8
 800e0c2:	2308      	movs	r3, #8
 800e0c4:	f080 0001 	eor.w	r0, r0, #1
 800e0c8:	60a2      	str	r2, [r4, #8]
 800e0ca:	6126      	str	r6, [r4, #16]
 800e0cc:	7563      	strb	r3, [r4, #21]
 800e0ce:	b002      	add	sp, #8
 800e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d4:	2108      	movs	r1, #8
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f000 fdcc 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e0dc:	b350      	cbz	r0, 800e134 <ucdr_serialize_uint64_t+0x11c>
 800e0de:	7d23      	ldrb	r3, [r4, #20]
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d02d      	beq.n	800e140 <ucdr_serialize_uint64_t+0x128>
 800e0e4:	68a3      	ldr	r3, [r4, #8]
 800e0e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e0ea:	701a      	strb	r2, [r3, #0]
 800e0ec:	68a3      	ldr	r3, [r4, #8]
 800e0ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0f2:	705a      	strb	r2, [r3, #1]
 800e0f4:	68a3      	ldr	r3, [r4, #8]
 800e0f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e0fa:	709a      	strb	r2, [r3, #2]
 800e0fc:	68a3      	ldr	r3, [r4, #8]
 800e0fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e102:	70da      	strb	r2, [r3, #3]
 800e104:	68a3      	ldr	r3, [r4, #8]
 800e106:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e10a:	711a      	strb	r2, [r3, #4]
 800e10c:	68a3      	ldr	r3, [r4, #8]
 800e10e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e112:	715a      	strb	r2, [r3, #5]
 800e114:	68a3      	ldr	r3, [r4, #8]
 800e116:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e11a:	719a      	strb	r2, [r3, #6]
 800e11c:	68a3      	ldr	r3, [r4, #8]
 800e11e:	f89d 2000 	ldrb.w	r2, [sp]
 800e122:	71da      	strb	r2, [r3, #7]
 800e124:	68a2      	ldr	r2, [r4, #8]
 800e126:	6923      	ldr	r3, [r4, #16]
 800e128:	3208      	adds	r2, #8
 800e12a:	3308      	adds	r3, #8
 800e12c:	2108      	movs	r1, #8
 800e12e:	60a2      	str	r2, [r4, #8]
 800e130:	6123      	str	r3, [r4, #16]
 800e132:	7561      	strb	r1, [r4, #21]
 800e134:	7da0      	ldrb	r0, [r4, #22]
 800e136:	f080 0001 	eor.w	r0, r0, #1
 800e13a:	b002      	add	sp, #8
 800e13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e140:	466b      	mov	r3, sp
 800e142:	cb03      	ldmia	r3!, {r0, r1}
 800e144:	68a3      	ldr	r3, [r4, #8]
 800e146:	6018      	str	r0, [r3, #0]
 800e148:	6059      	str	r1, [r3, #4]
 800e14a:	e7eb      	b.n	800e124 <ucdr_serialize_uint64_t+0x10c>
 800e14c:	68a2      	ldr	r2, [r4, #8]
 800e14e:	6923      	ldr	r3, [r4, #16]
 800e150:	7da0      	ldrb	r0, [r4, #22]
 800e152:	7567      	strb	r7, [r4, #21]
 800e154:	1b92      	subs	r2, r2, r6
 800e156:	1b9b      	subs	r3, r3, r6
 800e158:	f080 0001 	eor.w	r0, r0, #1
 800e15c:	60a2      	str	r2, [r4, #8]
 800e15e:	6123      	str	r3, [r4, #16]
 800e160:	b002      	add	sp, #8
 800e162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e166:	68a3      	ldr	r3, [r4, #8]
 800e168:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e16c:	701a      	strb	r2, [r3, #0]
 800e16e:	68a3      	ldr	r3, [r4, #8]
 800e170:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e174:	701a      	strb	r2, [r3, #0]
 800e176:	68a3      	ldr	r3, [r4, #8]
 800e178:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e17c:	701a      	strb	r2, [r3, #0]
 800e17e:	68a3      	ldr	r3, [r4, #8]
 800e180:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e184:	701a      	strb	r2, [r3, #0]
 800e186:	68a3      	ldr	r3, [r4, #8]
 800e188:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	68a3      	ldr	r3, [r4, #8]
 800e190:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e194:	701a      	strb	r2, [r3, #0]
 800e196:	68a3      	ldr	r3, [r4, #8]
 800e198:	f89d 2000 	ldrb.w	r2, [sp]
 800e19c:	701a      	strb	r2, [r3, #0]
 800e19e:	e78a      	b.n	800e0b6 <ucdr_serialize_uint64_t+0x9e>
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	466d      	mov	r5, sp
 800e1a4:	4629      	mov	r1, r5
 800e1a6:	4632      	mov	r2, r6
 800e1a8:	f00a fa3f 	bl	801862a <memcpy>
 800e1ac:	68a0      	ldr	r0, [r4, #8]
 800e1ae:	4642      	mov	r2, r8
 800e1b0:	19a9      	adds	r1, r5, r6
 800e1b2:	f00a fa3a 	bl	801862a <memcpy>
 800e1b6:	e77e      	b.n	800e0b6 <ucdr_serialize_uint64_t+0x9e>

0800e1b8 <ucdr_serialize_int16_t>:
 800e1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1bc:	b082      	sub	sp, #8
 800e1be:	460b      	mov	r3, r1
 800e1c0:	2102      	movs	r1, #2
 800e1c2:	4604      	mov	r4, r0
 800e1c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e1c8:	f000 fda8 	bl	800ed1c <ucdr_buffer_alignment>
 800e1cc:	4601      	mov	r1, r0
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	7d67      	ldrb	r7, [r4, #21]
 800e1d2:	f000 fde7 	bl	800eda4 <ucdr_advance_buffer>
 800e1d6:	2102      	movs	r1, #2
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f000 fd3f 	bl	800ec5c <ucdr_check_buffer_available_for>
 800e1de:	bb78      	cbnz	r0, 800e240 <ucdr_serialize_int16_t+0x88>
 800e1e0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e1e4:	42ab      	cmp	r3, r5
 800e1e6:	d926      	bls.n	800e236 <ucdr_serialize_int16_t+0x7e>
 800e1e8:	1b5e      	subs	r6, r3, r5
 800e1ea:	60a3      	str	r3, [r4, #8]
 800e1ec:	6923      	ldr	r3, [r4, #16]
 800e1ee:	f1c6 0802 	rsb	r8, r6, #2
 800e1f2:	4433      	add	r3, r6
 800e1f4:	6123      	str	r3, [r4, #16]
 800e1f6:	4641      	mov	r1, r8
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f000 fd3b 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d03b      	beq.n	800e27a <ucdr_serialize_int16_t+0xc2>
 800e202:	7d23      	ldrb	r3, [r4, #20]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d04a      	beq.n	800e29e <ucdr_serialize_int16_t+0xe6>
 800e208:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e20c:	702b      	strb	r3, [r5, #0]
 800e20e:	2e00      	cmp	r6, #0
 800e210:	d040      	beq.n	800e294 <ucdr_serialize_int16_t+0xdc>
 800e212:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e216:	706b      	strb	r3, [r5, #1]
 800e218:	6923      	ldr	r3, [r4, #16]
 800e21a:	68a2      	ldr	r2, [r4, #8]
 800e21c:	7da0      	ldrb	r0, [r4, #22]
 800e21e:	3302      	adds	r3, #2
 800e220:	1b9e      	subs	r6, r3, r6
 800e222:	4442      	add	r2, r8
 800e224:	2302      	movs	r3, #2
 800e226:	f080 0001 	eor.w	r0, r0, #1
 800e22a:	60a2      	str	r2, [r4, #8]
 800e22c:	6126      	str	r6, [r4, #16]
 800e22e:	7563      	strb	r3, [r4, #21]
 800e230:	b002      	add	sp, #8
 800e232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e236:	2102      	movs	r1, #2
 800e238:	4620      	mov	r0, r4
 800e23a:	f000 fd1b 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e23e:	b190      	cbz	r0, 800e266 <ucdr_serialize_int16_t+0xae>
 800e240:	7d23      	ldrb	r3, [r4, #20]
 800e242:	2b01      	cmp	r3, #1
 800e244:	68a3      	ldr	r3, [r4, #8]
 800e246:	d014      	beq.n	800e272 <ucdr_serialize_int16_t+0xba>
 800e248:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e24c:	701a      	strb	r2, [r3, #0]
 800e24e:	68a3      	ldr	r3, [r4, #8]
 800e250:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e254:	705a      	strb	r2, [r3, #1]
 800e256:	68a2      	ldr	r2, [r4, #8]
 800e258:	6923      	ldr	r3, [r4, #16]
 800e25a:	3202      	adds	r2, #2
 800e25c:	3302      	adds	r3, #2
 800e25e:	2102      	movs	r1, #2
 800e260:	60a2      	str	r2, [r4, #8]
 800e262:	6123      	str	r3, [r4, #16]
 800e264:	7561      	strb	r1, [r4, #21]
 800e266:	7da0      	ldrb	r0, [r4, #22]
 800e268:	f080 0001 	eor.w	r0, r0, #1
 800e26c:	b002      	add	sp, #8
 800e26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e272:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e276:	801a      	strh	r2, [r3, #0]
 800e278:	e7ed      	b.n	800e256 <ucdr_serialize_int16_t+0x9e>
 800e27a:	68a2      	ldr	r2, [r4, #8]
 800e27c:	6923      	ldr	r3, [r4, #16]
 800e27e:	7da0      	ldrb	r0, [r4, #22]
 800e280:	7567      	strb	r7, [r4, #21]
 800e282:	1b92      	subs	r2, r2, r6
 800e284:	1b9b      	subs	r3, r3, r6
 800e286:	f080 0001 	eor.w	r0, r0, #1
 800e28a:	60a2      	str	r2, [r4, #8]
 800e28c:	6123      	str	r3, [r4, #16]
 800e28e:	b002      	add	sp, #8
 800e290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e294:	68a3      	ldr	r3, [r4, #8]
 800e296:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e29a:	701a      	strb	r2, [r3, #0]
 800e29c:	e7bc      	b.n	800e218 <ucdr_serialize_int16_t+0x60>
 800e29e:	4628      	mov	r0, r5
 800e2a0:	f10d 0506 	add.w	r5, sp, #6
 800e2a4:	4629      	mov	r1, r5
 800e2a6:	4632      	mov	r2, r6
 800e2a8:	f00a f9bf 	bl	801862a <memcpy>
 800e2ac:	68a0      	ldr	r0, [r4, #8]
 800e2ae:	4642      	mov	r2, r8
 800e2b0:	19a9      	adds	r1, r5, r6
 800e2b2:	f00a f9ba 	bl	801862a <memcpy>
 800e2b6:	e7af      	b.n	800e218 <ucdr_serialize_int16_t+0x60>

0800e2b8 <ucdr_deserialize_int16_t>:
 800e2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2bc:	460d      	mov	r5, r1
 800e2be:	2102      	movs	r1, #2
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	f000 fd2b 	bl	800ed1c <ucdr_buffer_alignment>
 800e2c6:	4601      	mov	r1, r0
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e2ce:	f000 fd69 	bl	800eda4 <ucdr_advance_buffer>
 800e2d2:	2102      	movs	r1, #2
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f000 fcc1 	bl	800ec5c <ucdr_check_buffer_available_for>
 800e2da:	bb60      	cbnz	r0, 800e336 <ucdr_deserialize_int16_t+0x7e>
 800e2dc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e2e0:	42be      	cmp	r6, r7
 800e2e2:	d923      	bls.n	800e32c <ucdr_deserialize_int16_t+0x74>
 800e2e4:	6923      	ldr	r3, [r4, #16]
 800e2e6:	60a6      	str	r6, [r4, #8]
 800e2e8:	1bf6      	subs	r6, r6, r7
 800e2ea:	4433      	add	r3, r6
 800e2ec:	f1c6 0902 	rsb	r9, r6, #2
 800e2f0:	6123      	str	r3, [r4, #16]
 800e2f2:	4649      	mov	r1, r9
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f000 fcbd 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d034      	beq.n	800e368 <ucdr_deserialize_int16_t+0xb0>
 800e2fe:	7d23      	ldrb	r3, [r4, #20]
 800e300:	2b01      	cmp	r3, #1
 800e302:	d042      	beq.n	800e38a <ucdr_deserialize_int16_t+0xd2>
 800e304:	787b      	ldrb	r3, [r7, #1]
 800e306:	702b      	strb	r3, [r5, #0]
 800e308:	2e00      	cmp	r6, #0
 800e30a:	d03a      	beq.n	800e382 <ucdr_deserialize_int16_t+0xca>
 800e30c:	783b      	ldrb	r3, [r7, #0]
 800e30e:	706b      	strb	r3, [r5, #1]
 800e310:	6923      	ldr	r3, [r4, #16]
 800e312:	68a2      	ldr	r2, [r4, #8]
 800e314:	7da0      	ldrb	r0, [r4, #22]
 800e316:	2102      	movs	r1, #2
 800e318:	3302      	adds	r3, #2
 800e31a:	444a      	add	r2, r9
 800e31c:	1b9b      	subs	r3, r3, r6
 800e31e:	7561      	strb	r1, [r4, #21]
 800e320:	60a2      	str	r2, [r4, #8]
 800e322:	6123      	str	r3, [r4, #16]
 800e324:	f080 0001 	eor.w	r0, r0, #1
 800e328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e32c:	2102      	movs	r1, #2
 800e32e:	4620      	mov	r0, r4
 800e330:	f000 fca0 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e334:	b180      	cbz	r0, 800e358 <ucdr_deserialize_int16_t+0xa0>
 800e336:	7d23      	ldrb	r3, [r4, #20]
 800e338:	2b01      	cmp	r3, #1
 800e33a:	68a3      	ldr	r3, [r4, #8]
 800e33c:	d011      	beq.n	800e362 <ucdr_deserialize_int16_t+0xaa>
 800e33e:	785b      	ldrb	r3, [r3, #1]
 800e340:	702b      	strb	r3, [r5, #0]
 800e342:	68a3      	ldr	r3, [r4, #8]
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	706b      	strb	r3, [r5, #1]
 800e348:	68a2      	ldr	r2, [r4, #8]
 800e34a:	6923      	ldr	r3, [r4, #16]
 800e34c:	3202      	adds	r2, #2
 800e34e:	3302      	adds	r3, #2
 800e350:	2102      	movs	r1, #2
 800e352:	60a2      	str	r2, [r4, #8]
 800e354:	6123      	str	r3, [r4, #16]
 800e356:	7561      	strb	r1, [r4, #21]
 800e358:	7da0      	ldrb	r0, [r4, #22]
 800e35a:	f080 0001 	eor.w	r0, r0, #1
 800e35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e362:	881b      	ldrh	r3, [r3, #0]
 800e364:	802b      	strh	r3, [r5, #0]
 800e366:	e7ef      	b.n	800e348 <ucdr_deserialize_int16_t+0x90>
 800e368:	68a2      	ldr	r2, [r4, #8]
 800e36a:	6923      	ldr	r3, [r4, #16]
 800e36c:	7da0      	ldrb	r0, [r4, #22]
 800e36e:	f884 8015 	strb.w	r8, [r4, #21]
 800e372:	1b92      	subs	r2, r2, r6
 800e374:	1b9b      	subs	r3, r3, r6
 800e376:	60a2      	str	r2, [r4, #8]
 800e378:	6123      	str	r3, [r4, #16]
 800e37a:	f080 0001 	eor.w	r0, r0, #1
 800e37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e382:	68a3      	ldr	r3, [r4, #8]
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	706b      	strb	r3, [r5, #1]
 800e388:	e7c2      	b.n	800e310 <ucdr_deserialize_int16_t+0x58>
 800e38a:	4639      	mov	r1, r7
 800e38c:	4632      	mov	r2, r6
 800e38e:	4628      	mov	r0, r5
 800e390:	f00a f94b 	bl	801862a <memcpy>
 800e394:	68a1      	ldr	r1, [r4, #8]
 800e396:	464a      	mov	r2, r9
 800e398:	19a8      	adds	r0, r5, r6
 800e39a:	f00a f946 	bl	801862a <memcpy>
 800e39e:	e7b7      	b.n	800e310 <ucdr_deserialize_int16_t+0x58>

0800e3a0 <ucdr_serialize_int32_t>:
 800e3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a4:	b082      	sub	sp, #8
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	9101      	str	r1, [sp, #4]
 800e3aa:	2104      	movs	r1, #4
 800e3ac:	f000 fcb6 	bl	800ed1c <ucdr_buffer_alignment>
 800e3b0:	4601      	mov	r1, r0
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	7d67      	ldrb	r7, [r4, #21]
 800e3b6:	f000 fcf5 	bl	800eda4 <ucdr_advance_buffer>
 800e3ba:	2104      	movs	r1, #4
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 fc4d 	bl	800ec5c <ucdr_check_buffer_available_for>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	d139      	bne.n	800e43a <ucdr_serialize_int32_t+0x9a>
 800e3c6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e3ca:	42ab      	cmp	r3, r5
 800e3cc:	d930      	bls.n	800e430 <ucdr_serialize_int32_t+0x90>
 800e3ce:	1b5e      	subs	r6, r3, r5
 800e3d0:	60a3      	str	r3, [r4, #8]
 800e3d2:	6923      	ldr	r3, [r4, #16]
 800e3d4:	f1c6 0804 	rsb	r8, r6, #4
 800e3d8:	4433      	add	r3, r6
 800e3da:	6123      	str	r3, [r4, #16]
 800e3dc:	4641      	mov	r1, r8
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f000 fc48 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d04c      	beq.n	800e482 <ucdr_serialize_int32_t+0xe2>
 800e3e8:	7d23      	ldrb	r3, [r4, #20]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d063      	beq.n	800e4b6 <ucdr_serialize_int32_t+0x116>
 800e3ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e3f2:	702b      	strb	r3, [r5, #0]
 800e3f4:	2e00      	cmp	r6, #0
 800e3f6:	d051      	beq.n	800e49c <ucdr_serialize_int32_t+0xfc>
 800e3f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e3fc:	706b      	strb	r3, [r5, #1]
 800e3fe:	2e01      	cmp	r6, #1
 800e400:	d050      	beq.n	800e4a4 <ucdr_serialize_int32_t+0x104>
 800e402:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e406:	70ab      	strb	r3, [r5, #2]
 800e408:	2e02      	cmp	r6, #2
 800e40a:	d04f      	beq.n	800e4ac <ucdr_serialize_int32_t+0x10c>
 800e40c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e410:	70eb      	strb	r3, [r5, #3]
 800e412:	6923      	ldr	r3, [r4, #16]
 800e414:	68a2      	ldr	r2, [r4, #8]
 800e416:	7da0      	ldrb	r0, [r4, #22]
 800e418:	3304      	adds	r3, #4
 800e41a:	1b9e      	subs	r6, r3, r6
 800e41c:	4442      	add	r2, r8
 800e41e:	2304      	movs	r3, #4
 800e420:	f080 0001 	eor.w	r0, r0, #1
 800e424:	60a2      	str	r2, [r4, #8]
 800e426:	6126      	str	r6, [r4, #16]
 800e428:	7563      	strb	r3, [r4, #21]
 800e42a:	b002      	add	sp, #8
 800e42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e430:	2104      	movs	r1, #4
 800e432:	4620      	mov	r0, r4
 800e434:	f000 fc1e 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e438:	b1d0      	cbz	r0, 800e470 <ucdr_serialize_int32_t+0xd0>
 800e43a:	7d23      	ldrb	r3, [r4, #20]
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	68a3      	ldr	r3, [r4, #8]
 800e440:	d01c      	beq.n	800e47c <ucdr_serialize_int32_t+0xdc>
 800e442:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e446:	701a      	strb	r2, [r3, #0]
 800e448:	68a3      	ldr	r3, [r4, #8]
 800e44a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e44e:	705a      	strb	r2, [r3, #1]
 800e450:	68a3      	ldr	r3, [r4, #8]
 800e452:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e456:	709a      	strb	r2, [r3, #2]
 800e458:	68a3      	ldr	r3, [r4, #8]
 800e45a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e45e:	70da      	strb	r2, [r3, #3]
 800e460:	68a2      	ldr	r2, [r4, #8]
 800e462:	6923      	ldr	r3, [r4, #16]
 800e464:	3204      	adds	r2, #4
 800e466:	3304      	adds	r3, #4
 800e468:	2104      	movs	r1, #4
 800e46a:	60a2      	str	r2, [r4, #8]
 800e46c:	6123      	str	r3, [r4, #16]
 800e46e:	7561      	strb	r1, [r4, #21]
 800e470:	7da0      	ldrb	r0, [r4, #22]
 800e472:	f080 0001 	eor.w	r0, r0, #1
 800e476:	b002      	add	sp, #8
 800e478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e47c:	9a01      	ldr	r2, [sp, #4]
 800e47e:	601a      	str	r2, [r3, #0]
 800e480:	e7ee      	b.n	800e460 <ucdr_serialize_int32_t+0xc0>
 800e482:	68a2      	ldr	r2, [r4, #8]
 800e484:	6923      	ldr	r3, [r4, #16]
 800e486:	7da0      	ldrb	r0, [r4, #22]
 800e488:	7567      	strb	r7, [r4, #21]
 800e48a:	1b92      	subs	r2, r2, r6
 800e48c:	1b9b      	subs	r3, r3, r6
 800e48e:	f080 0001 	eor.w	r0, r0, #1
 800e492:	60a2      	str	r2, [r4, #8]
 800e494:	6123      	str	r3, [r4, #16]
 800e496:	b002      	add	sp, #8
 800e498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e49c:	68a3      	ldr	r3, [r4, #8]
 800e49e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e4a2:	701a      	strb	r2, [r3, #0]
 800e4a4:	68a3      	ldr	r3, [r4, #8]
 800e4a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e4aa:	701a      	strb	r2, [r3, #0]
 800e4ac:	68a3      	ldr	r3, [r4, #8]
 800e4ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e4b2:	701a      	strb	r2, [r3, #0]
 800e4b4:	e7ad      	b.n	800e412 <ucdr_serialize_int32_t+0x72>
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	ad01      	add	r5, sp, #4
 800e4ba:	4629      	mov	r1, r5
 800e4bc:	4632      	mov	r2, r6
 800e4be:	f00a f8b4 	bl	801862a <memcpy>
 800e4c2:	68a0      	ldr	r0, [r4, #8]
 800e4c4:	4642      	mov	r2, r8
 800e4c6:	19a9      	adds	r1, r5, r6
 800e4c8:	f00a f8af 	bl	801862a <memcpy>
 800e4cc:	e7a1      	b.n	800e412 <ucdr_serialize_int32_t+0x72>
 800e4ce:	bf00      	nop

0800e4d0 <ucdr_deserialize_int32_t>:
 800e4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4d4:	460d      	mov	r5, r1
 800e4d6:	2104      	movs	r1, #4
 800e4d8:	4604      	mov	r4, r0
 800e4da:	f000 fc1f 	bl	800ed1c <ucdr_buffer_alignment>
 800e4de:	4601      	mov	r1, r0
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e4e6:	f000 fc5d 	bl	800eda4 <ucdr_advance_buffer>
 800e4ea:	2104      	movs	r1, #4
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f000 fbb5 	bl	800ec5c <ucdr_check_buffer_available_for>
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d138      	bne.n	800e568 <ucdr_deserialize_int32_t+0x98>
 800e4f6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e4fa:	42b7      	cmp	r7, r6
 800e4fc:	d92f      	bls.n	800e55e <ucdr_deserialize_int32_t+0x8e>
 800e4fe:	6923      	ldr	r3, [r4, #16]
 800e500:	60a7      	str	r7, [r4, #8]
 800e502:	1bbf      	subs	r7, r7, r6
 800e504:	443b      	add	r3, r7
 800e506:	f1c7 0904 	rsb	r9, r7, #4
 800e50a:	6123      	str	r3, [r4, #16]
 800e50c:	4649      	mov	r1, r9
 800e50e:	4620      	mov	r0, r4
 800e510:	f000 fbb0 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e514:	2800      	cmp	r0, #0
 800e516:	d046      	beq.n	800e5a6 <ucdr_deserialize_int32_t+0xd6>
 800e518:	7d23      	ldrb	r3, [r4, #20]
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d05c      	beq.n	800e5d8 <ucdr_deserialize_int32_t+0x108>
 800e51e:	78f3      	ldrb	r3, [r6, #3]
 800e520:	702b      	strb	r3, [r5, #0]
 800e522:	2f00      	cmp	r7, #0
 800e524:	d04c      	beq.n	800e5c0 <ucdr_deserialize_int32_t+0xf0>
 800e526:	78b3      	ldrb	r3, [r6, #2]
 800e528:	706b      	strb	r3, [r5, #1]
 800e52a:	2f01      	cmp	r7, #1
 800e52c:	f105 0302 	add.w	r3, r5, #2
 800e530:	d04a      	beq.n	800e5c8 <ucdr_deserialize_int32_t+0xf8>
 800e532:	7873      	ldrb	r3, [r6, #1]
 800e534:	70ab      	strb	r3, [r5, #2]
 800e536:	2f02      	cmp	r7, #2
 800e538:	f105 0303 	add.w	r3, r5, #3
 800e53c:	d048      	beq.n	800e5d0 <ucdr_deserialize_int32_t+0x100>
 800e53e:	7833      	ldrb	r3, [r6, #0]
 800e540:	70eb      	strb	r3, [r5, #3]
 800e542:	6923      	ldr	r3, [r4, #16]
 800e544:	68a2      	ldr	r2, [r4, #8]
 800e546:	7da0      	ldrb	r0, [r4, #22]
 800e548:	2104      	movs	r1, #4
 800e54a:	3304      	adds	r3, #4
 800e54c:	444a      	add	r2, r9
 800e54e:	1bdb      	subs	r3, r3, r7
 800e550:	7561      	strb	r1, [r4, #21]
 800e552:	60a2      	str	r2, [r4, #8]
 800e554:	6123      	str	r3, [r4, #16]
 800e556:	f080 0001 	eor.w	r0, r0, #1
 800e55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e55e:	2104      	movs	r1, #4
 800e560:	4620      	mov	r0, r4
 800e562:	f000 fb87 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e566:	b1b0      	cbz	r0, 800e596 <ucdr_deserialize_int32_t+0xc6>
 800e568:	7d23      	ldrb	r3, [r4, #20]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	68a3      	ldr	r3, [r4, #8]
 800e56e:	d017      	beq.n	800e5a0 <ucdr_deserialize_int32_t+0xd0>
 800e570:	78db      	ldrb	r3, [r3, #3]
 800e572:	702b      	strb	r3, [r5, #0]
 800e574:	68a3      	ldr	r3, [r4, #8]
 800e576:	789b      	ldrb	r3, [r3, #2]
 800e578:	706b      	strb	r3, [r5, #1]
 800e57a:	68a3      	ldr	r3, [r4, #8]
 800e57c:	785b      	ldrb	r3, [r3, #1]
 800e57e:	70ab      	strb	r3, [r5, #2]
 800e580:	68a3      	ldr	r3, [r4, #8]
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	70eb      	strb	r3, [r5, #3]
 800e586:	68a2      	ldr	r2, [r4, #8]
 800e588:	6923      	ldr	r3, [r4, #16]
 800e58a:	3204      	adds	r2, #4
 800e58c:	3304      	adds	r3, #4
 800e58e:	2104      	movs	r1, #4
 800e590:	60a2      	str	r2, [r4, #8]
 800e592:	6123      	str	r3, [r4, #16]
 800e594:	7561      	strb	r1, [r4, #21]
 800e596:	7da0      	ldrb	r0, [r4, #22]
 800e598:	f080 0001 	eor.w	r0, r0, #1
 800e59c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	602b      	str	r3, [r5, #0]
 800e5a4:	e7ef      	b.n	800e586 <ucdr_deserialize_int32_t+0xb6>
 800e5a6:	68a2      	ldr	r2, [r4, #8]
 800e5a8:	6923      	ldr	r3, [r4, #16]
 800e5aa:	7da0      	ldrb	r0, [r4, #22]
 800e5ac:	f884 8015 	strb.w	r8, [r4, #21]
 800e5b0:	1bd2      	subs	r2, r2, r7
 800e5b2:	1bdb      	subs	r3, r3, r7
 800e5b4:	60a2      	str	r2, [r4, #8]
 800e5b6:	6123      	str	r3, [r4, #16]
 800e5b8:	f080 0001 	eor.w	r0, r0, #1
 800e5bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5c0:	68a3      	ldr	r3, [r4, #8]
 800e5c2:	789b      	ldrb	r3, [r3, #2]
 800e5c4:	706b      	strb	r3, [r5, #1]
 800e5c6:	1cab      	adds	r3, r5, #2
 800e5c8:	68a2      	ldr	r2, [r4, #8]
 800e5ca:	7852      	ldrb	r2, [r2, #1]
 800e5cc:	f803 2b01 	strb.w	r2, [r3], #1
 800e5d0:	68a2      	ldr	r2, [r4, #8]
 800e5d2:	7812      	ldrb	r2, [r2, #0]
 800e5d4:	701a      	strb	r2, [r3, #0]
 800e5d6:	e7b4      	b.n	800e542 <ucdr_deserialize_int32_t+0x72>
 800e5d8:	4631      	mov	r1, r6
 800e5da:	463a      	mov	r2, r7
 800e5dc:	4628      	mov	r0, r5
 800e5de:	f00a f824 	bl	801862a <memcpy>
 800e5e2:	68a1      	ldr	r1, [r4, #8]
 800e5e4:	464a      	mov	r2, r9
 800e5e6:	19e8      	adds	r0, r5, r7
 800e5e8:	f00a f81f 	bl	801862a <memcpy>
 800e5ec:	e7a9      	b.n	800e542 <ucdr_deserialize_int32_t+0x72>
 800e5ee:	bf00      	nop

0800e5f0 <ucdr_serialize_double>:
 800e5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f4:	2108      	movs	r1, #8
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	ed8d 0b00 	vstr	d0, [sp]
 800e5fe:	f000 fb8d 	bl	800ed1c <ucdr_buffer_alignment>
 800e602:	4601      	mov	r1, r0
 800e604:	4620      	mov	r0, r4
 800e606:	7d67      	ldrb	r7, [r4, #21]
 800e608:	f000 fbcc 	bl	800eda4 <ucdr_advance_buffer>
 800e60c:	2108      	movs	r1, #8
 800e60e:	4620      	mov	r0, r4
 800e610:	f000 fb24 	bl	800ec5c <ucdr_check_buffer_available_for>
 800e614:	2800      	cmp	r0, #0
 800e616:	d14e      	bne.n	800e6b6 <ucdr_serialize_double+0xc6>
 800e618:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e61c:	42ab      	cmp	r3, r5
 800e61e:	d945      	bls.n	800e6ac <ucdr_serialize_double+0xbc>
 800e620:	1b5e      	subs	r6, r3, r5
 800e622:	60a3      	str	r3, [r4, #8]
 800e624:	6923      	ldr	r3, [r4, #16]
 800e626:	f1c6 0808 	rsb	r8, r6, #8
 800e62a:	4433      	add	r3, r6
 800e62c:	6123      	str	r3, [r4, #16]
 800e62e:	4641      	mov	r1, r8
 800e630:	4620      	mov	r0, r4
 800e632:	f000 fb1f 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e636:	2800      	cmp	r0, #0
 800e638:	d074      	beq.n	800e724 <ucdr_serialize_double+0x134>
 800e63a:	7d23      	ldrb	r3, [r4, #20]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	f000 809b 	beq.w	800e778 <ucdr_serialize_double+0x188>
 800e642:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e646:	702b      	strb	r3, [r5, #0]
 800e648:	2e00      	cmp	r6, #0
 800e64a:	d078      	beq.n	800e73e <ucdr_serialize_double+0x14e>
 800e64c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e650:	706b      	strb	r3, [r5, #1]
 800e652:	2e01      	cmp	r6, #1
 800e654:	d077      	beq.n	800e746 <ucdr_serialize_double+0x156>
 800e656:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e65a:	70ab      	strb	r3, [r5, #2]
 800e65c:	2e02      	cmp	r6, #2
 800e65e:	d076      	beq.n	800e74e <ucdr_serialize_double+0x15e>
 800e660:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e664:	70eb      	strb	r3, [r5, #3]
 800e666:	2e03      	cmp	r6, #3
 800e668:	d075      	beq.n	800e756 <ucdr_serialize_double+0x166>
 800e66a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e66e:	712b      	strb	r3, [r5, #4]
 800e670:	2e04      	cmp	r6, #4
 800e672:	d074      	beq.n	800e75e <ucdr_serialize_double+0x16e>
 800e674:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e678:	716b      	strb	r3, [r5, #5]
 800e67a:	2e05      	cmp	r6, #5
 800e67c:	d073      	beq.n	800e766 <ucdr_serialize_double+0x176>
 800e67e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e682:	71ab      	strb	r3, [r5, #6]
 800e684:	2e06      	cmp	r6, #6
 800e686:	d072      	beq.n	800e76e <ucdr_serialize_double+0x17e>
 800e688:	f89d 3000 	ldrb.w	r3, [sp]
 800e68c:	71eb      	strb	r3, [r5, #7]
 800e68e:	6923      	ldr	r3, [r4, #16]
 800e690:	68a2      	ldr	r2, [r4, #8]
 800e692:	7da0      	ldrb	r0, [r4, #22]
 800e694:	3308      	adds	r3, #8
 800e696:	1b9e      	subs	r6, r3, r6
 800e698:	4442      	add	r2, r8
 800e69a:	2308      	movs	r3, #8
 800e69c:	f080 0001 	eor.w	r0, r0, #1
 800e6a0:	60a2      	str	r2, [r4, #8]
 800e6a2:	6126      	str	r6, [r4, #16]
 800e6a4:	7563      	strb	r3, [r4, #21]
 800e6a6:	b002      	add	sp, #8
 800e6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ac:	2108      	movs	r1, #8
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	f000 fae0 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e6b4:	b350      	cbz	r0, 800e70c <ucdr_serialize_double+0x11c>
 800e6b6:	7d23      	ldrb	r3, [r4, #20]
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d02d      	beq.n	800e718 <ucdr_serialize_double+0x128>
 800e6bc:	68a3      	ldr	r3, [r4, #8]
 800e6be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e6c2:	701a      	strb	r2, [r3, #0]
 800e6c4:	68a3      	ldr	r3, [r4, #8]
 800e6c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e6ca:	705a      	strb	r2, [r3, #1]
 800e6cc:	68a3      	ldr	r3, [r4, #8]
 800e6ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e6d2:	709a      	strb	r2, [r3, #2]
 800e6d4:	68a3      	ldr	r3, [r4, #8]
 800e6d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e6da:	70da      	strb	r2, [r3, #3]
 800e6dc:	68a3      	ldr	r3, [r4, #8]
 800e6de:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e6e2:	711a      	strb	r2, [r3, #4]
 800e6e4:	68a3      	ldr	r3, [r4, #8]
 800e6e6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e6ea:	715a      	strb	r2, [r3, #5]
 800e6ec:	68a3      	ldr	r3, [r4, #8]
 800e6ee:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e6f2:	719a      	strb	r2, [r3, #6]
 800e6f4:	68a3      	ldr	r3, [r4, #8]
 800e6f6:	f89d 2000 	ldrb.w	r2, [sp]
 800e6fa:	71da      	strb	r2, [r3, #7]
 800e6fc:	68a2      	ldr	r2, [r4, #8]
 800e6fe:	6923      	ldr	r3, [r4, #16]
 800e700:	3208      	adds	r2, #8
 800e702:	3308      	adds	r3, #8
 800e704:	2108      	movs	r1, #8
 800e706:	60a2      	str	r2, [r4, #8]
 800e708:	6123      	str	r3, [r4, #16]
 800e70a:	7561      	strb	r1, [r4, #21]
 800e70c:	7da0      	ldrb	r0, [r4, #22]
 800e70e:	f080 0001 	eor.w	r0, r0, #1
 800e712:	b002      	add	sp, #8
 800e714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e718:	466b      	mov	r3, sp
 800e71a:	cb03      	ldmia	r3!, {r0, r1}
 800e71c:	68a3      	ldr	r3, [r4, #8]
 800e71e:	6018      	str	r0, [r3, #0]
 800e720:	6059      	str	r1, [r3, #4]
 800e722:	e7eb      	b.n	800e6fc <ucdr_serialize_double+0x10c>
 800e724:	68a2      	ldr	r2, [r4, #8]
 800e726:	6923      	ldr	r3, [r4, #16]
 800e728:	7da0      	ldrb	r0, [r4, #22]
 800e72a:	7567      	strb	r7, [r4, #21]
 800e72c:	1b92      	subs	r2, r2, r6
 800e72e:	1b9b      	subs	r3, r3, r6
 800e730:	f080 0001 	eor.w	r0, r0, #1
 800e734:	60a2      	str	r2, [r4, #8]
 800e736:	6123      	str	r3, [r4, #16]
 800e738:	b002      	add	sp, #8
 800e73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e73e:	68a3      	ldr	r3, [r4, #8]
 800e740:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e744:	701a      	strb	r2, [r3, #0]
 800e746:	68a3      	ldr	r3, [r4, #8]
 800e748:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e74c:	701a      	strb	r2, [r3, #0]
 800e74e:	68a3      	ldr	r3, [r4, #8]
 800e750:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e754:	701a      	strb	r2, [r3, #0]
 800e756:	68a3      	ldr	r3, [r4, #8]
 800e758:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e75c:	701a      	strb	r2, [r3, #0]
 800e75e:	68a3      	ldr	r3, [r4, #8]
 800e760:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e764:	701a      	strb	r2, [r3, #0]
 800e766:	68a3      	ldr	r3, [r4, #8]
 800e768:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e76c:	701a      	strb	r2, [r3, #0]
 800e76e:	68a3      	ldr	r3, [r4, #8]
 800e770:	f89d 2000 	ldrb.w	r2, [sp]
 800e774:	701a      	strb	r2, [r3, #0]
 800e776:	e78a      	b.n	800e68e <ucdr_serialize_double+0x9e>
 800e778:	4628      	mov	r0, r5
 800e77a:	466d      	mov	r5, sp
 800e77c:	4629      	mov	r1, r5
 800e77e:	4632      	mov	r2, r6
 800e780:	f009 ff53 	bl	801862a <memcpy>
 800e784:	68a0      	ldr	r0, [r4, #8]
 800e786:	4642      	mov	r2, r8
 800e788:	19a9      	adds	r1, r5, r6
 800e78a:	f009 ff4e 	bl	801862a <memcpy>
 800e78e:	e77e      	b.n	800e68e <ucdr_serialize_double+0x9e>

0800e790 <ucdr_serialize_endian_double>:
 800e790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e794:	460e      	mov	r6, r1
 800e796:	b083      	sub	sp, #12
 800e798:	2108      	movs	r1, #8
 800e79a:	4604      	mov	r4, r0
 800e79c:	ed8d 0b00 	vstr	d0, [sp]
 800e7a0:	f000 fabc 	bl	800ed1c <ucdr_buffer_alignment>
 800e7a4:	4601      	mov	r1, r0
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e7ac:	f000 fafa 	bl	800eda4 <ucdr_advance_buffer>
 800e7b0:	2108      	movs	r1, #8
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f000 fa52 	bl	800ec5c <ucdr_check_buffer_available_for>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d14d      	bne.n	800e858 <ucdr_serialize_endian_double+0xc8>
 800e7bc:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800e7c0:	42bd      	cmp	r5, r7
 800e7c2:	d944      	bls.n	800e84e <ucdr_serialize_endian_double+0xbe>
 800e7c4:	6923      	ldr	r3, [r4, #16]
 800e7c6:	60a5      	str	r5, [r4, #8]
 800e7c8:	1bed      	subs	r5, r5, r7
 800e7ca:	442b      	add	r3, r5
 800e7cc:	f1c5 0908 	rsb	r9, r5, #8
 800e7d0:	6123      	str	r3, [r4, #16]
 800e7d2:	4649      	mov	r1, r9
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	f000 fa4d 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e7da:	2800      	cmp	r0, #0
 800e7dc:	d072      	beq.n	800e8c4 <ucdr_serialize_endian_double+0x134>
 800e7de:	2e01      	cmp	r6, #1
 800e7e0:	f000 809b 	beq.w	800e91a <ucdr_serialize_endian_double+0x18a>
 800e7e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e7e8:	703b      	strb	r3, [r7, #0]
 800e7ea:	2d00      	cmp	r5, #0
 800e7ec:	d078      	beq.n	800e8e0 <ucdr_serialize_endian_double+0x150>
 800e7ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e7f2:	707b      	strb	r3, [r7, #1]
 800e7f4:	2d01      	cmp	r5, #1
 800e7f6:	d077      	beq.n	800e8e8 <ucdr_serialize_endian_double+0x158>
 800e7f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e7fc:	70bb      	strb	r3, [r7, #2]
 800e7fe:	2d02      	cmp	r5, #2
 800e800:	d076      	beq.n	800e8f0 <ucdr_serialize_endian_double+0x160>
 800e802:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e806:	70fb      	strb	r3, [r7, #3]
 800e808:	2d03      	cmp	r5, #3
 800e80a:	d075      	beq.n	800e8f8 <ucdr_serialize_endian_double+0x168>
 800e80c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e810:	713b      	strb	r3, [r7, #4]
 800e812:	2d04      	cmp	r5, #4
 800e814:	d074      	beq.n	800e900 <ucdr_serialize_endian_double+0x170>
 800e816:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e81a:	717b      	strb	r3, [r7, #5]
 800e81c:	2d05      	cmp	r5, #5
 800e81e:	d073      	beq.n	800e908 <ucdr_serialize_endian_double+0x178>
 800e820:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e824:	71bb      	strb	r3, [r7, #6]
 800e826:	2d06      	cmp	r5, #6
 800e828:	d072      	beq.n	800e910 <ucdr_serialize_endian_double+0x180>
 800e82a:	f89d 3000 	ldrb.w	r3, [sp]
 800e82e:	71fb      	strb	r3, [r7, #7]
 800e830:	6923      	ldr	r3, [r4, #16]
 800e832:	68a2      	ldr	r2, [r4, #8]
 800e834:	7da0      	ldrb	r0, [r4, #22]
 800e836:	3308      	adds	r3, #8
 800e838:	1b5d      	subs	r5, r3, r5
 800e83a:	444a      	add	r2, r9
 800e83c:	2308      	movs	r3, #8
 800e83e:	f080 0001 	eor.w	r0, r0, #1
 800e842:	60a2      	str	r2, [r4, #8]
 800e844:	6125      	str	r5, [r4, #16]
 800e846:	7563      	strb	r3, [r4, #21]
 800e848:	b003      	add	sp, #12
 800e84a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e84e:	2108      	movs	r1, #8
 800e850:	4620      	mov	r0, r4
 800e852:	f000 fa0f 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e856:	b348      	cbz	r0, 800e8ac <ucdr_serialize_endian_double+0x11c>
 800e858:	2e01      	cmp	r6, #1
 800e85a:	d02d      	beq.n	800e8b8 <ucdr_serialize_endian_double+0x128>
 800e85c:	68a3      	ldr	r3, [r4, #8]
 800e85e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e862:	701a      	strb	r2, [r3, #0]
 800e864:	68a3      	ldr	r3, [r4, #8]
 800e866:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e86a:	705a      	strb	r2, [r3, #1]
 800e86c:	68a3      	ldr	r3, [r4, #8]
 800e86e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e872:	709a      	strb	r2, [r3, #2]
 800e874:	68a3      	ldr	r3, [r4, #8]
 800e876:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e87a:	70da      	strb	r2, [r3, #3]
 800e87c:	68a3      	ldr	r3, [r4, #8]
 800e87e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e882:	711a      	strb	r2, [r3, #4]
 800e884:	68a3      	ldr	r3, [r4, #8]
 800e886:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e88a:	715a      	strb	r2, [r3, #5]
 800e88c:	68a3      	ldr	r3, [r4, #8]
 800e88e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e892:	719a      	strb	r2, [r3, #6]
 800e894:	68a3      	ldr	r3, [r4, #8]
 800e896:	f89d 2000 	ldrb.w	r2, [sp]
 800e89a:	71da      	strb	r2, [r3, #7]
 800e89c:	68a2      	ldr	r2, [r4, #8]
 800e89e:	6923      	ldr	r3, [r4, #16]
 800e8a0:	3208      	adds	r2, #8
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	2108      	movs	r1, #8
 800e8a6:	60a2      	str	r2, [r4, #8]
 800e8a8:	6123      	str	r3, [r4, #16]
 800e8aa:	7561      	strb	r1, [r4, #21]
 800e8ac:	7da0      	ldrb	r0, [r4, #22]
 800e8ae:	f080 0001 	eor.w	r0, r0, #1
 800e8b2:	b003      	add	sp, #12
 800e8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8b8:	466b      	mov	r3, sp
 800e8ba:	cb03      	ldmia	r3!, {r0, r1}
 800e8bc:	68a3      	ldr	r3, [r4, #8]
 800e8be:	6018      	str	r0, [r3, #0]
 800e8c0:	6059      	str	r1, [r3, #4]
 800e8c2:	e7eb      	b.n	800e89c <ucdr_serialize_endian_double+0x10c>
 800e8c4:	68a2      	ldr	r2, [r4, #8]
 800e8c6:	6923      	ldr	r3, [r4, #16]
 800e8c8:	7da0      	ldrb	r0, [r4, #22]
 800e8ca:	f884 8015 	strb.w	r8, [r4, #21]
 800e8ce:	1b52      	subs	r2, r2, r5
 800e8d0:	1b5b      	subs	r3, r3, r5
 800e8d2:	f080 0001 	eor.w	r0, r0, #1
 800e8d6:	60a2      	str	r2, [r4, #8]
 800e8d8:	6123      	str	r3, [r4, #16]
 800e8da:	b003      	add	sp, #12
 800e8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8e0:	68a3      	ldr	r3, [r4, #8]
 800e8e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e8e6:	701a      	strb	r2, [r3, #0]
 800e8e8:	68a3      	ldr	r3, [r4, #8]
 800e8ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e8ee:	701a      	strb	r2, [r3, #0]
 800e8f0:	68a3      	ldr	r3, [r4, #8]
 800e8f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e8f6:	701a      	strb	r2, [r3, #0]
 800e8f8:	68a3      	ldr	r3, [r4, #8]
 800e8fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e8fe:	701a      	strb	r2, [r3, #0]
 800e900:	68a3      	ldr	r3, [r4, #8]
 800e902:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e906:	701a      	strb	r2, [r3, #0]
 800e908:	68a3      	ldr	r3, [r4, #8]
 800e90a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e90e:	701a      	strb	r2, [r3, #0]
 800e910:	68a3      	ldr	r3, [r4, #8]
 800e912:	f89d 2000 	ldrb.w	r2, [sp]
 800e916:	701a      	strb	r2, [r3, #0]
 800e918:	e78a      	b.n	800e830 <ucdr_serialize_endian_double+0xa0>
 800e91a:	466e      	mov	r6, sp
 800e91c:	4631      	mov	r1, r6
 800e91e:	462a      	mov	r2, r5
 800e920:	4638      	mov	r0, r7
 800e922:	f009 fe82 	bl	801862a <memcpy>
 800e926:	68a0      	ldr	r0, [r4, #8]
 800e928:	464a      	mov	r2, r9
 800e92a:	1971      	adds	r1, r6, r5
 800e92c:	f009 fe7d 	bl	801862a <memcpy>
 800e930:	e77e      	b.n	800e830 <ucdr_serialize_endian_double+0xa0>
 800e932:	bf00      	nop

0800e934 <ucdr_deserialize_double>:
 800e934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e938:	460d      	mov	r5, r1
 800e93a:	2108      	movs	r1, #8
 800e93c:	4604      	mov	r4, r0
 800e93e:	f000 f9ed 	bl	800ed1c <ucdr_buffer_alignment>
 800e942:	4601      	mov	r1, r0
 800e944:	4620      	mov	r0, r4
 800e946:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e94a:	f000 fa2b 	bl	800eda4 <ucdr_advance_buffer>
 800e94e:	2108      	movs	r1, #8
 800e950:	4620      	mov	r0, r4
 800e952:	f000 f983 	bl	800ec5c <ucdr_check_buffer_available_for>
 800e956:	2800      	cmp	r0, #0
 800e958:	d151      	bne.n	800e9fe <ucdr_deserialize_double+0xca>
 800e95a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e95e:	42be      	cmp	r6, r7
 800e960:	d948      	bls.n	800e9f4 <ucdr_deserialize_double+0xc0>
 800e962:	6923      	ldr	r3, [r4, #16]
 800e964:	60a6      	str	r6, [r4, #8]
 800e966:	1bf6      	subs	r6, r6, r7
 800e968:	4433      	add	r3, r6
 800e96a:	f1c6 0808 	rsb	r8, r6, #8
 800e96e:	6123      	str	r3, [r4, #16]
 800e970:	4641      	mov	r1, r8
 800e972:	4620      	mov	r0, r4
 800e974:	f000 f97e 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e978:	2800      	cmp	r0, #0
 800e97a:	d06d      	beq.n	800ea58 <ucdr_deserialize_double+0x124>
 800e97c:	7d23      	ldrb	r3, [r4, #20]
 800e97e:	2b01      	cmp	r3, #1
 800e980:	f000 8093 	beq.w	800eaaa <ucdr_deserialize_double+0x176>
 800e984:	79fb      	ldrb	r3, [r7, #7]
 800e986:	702b      	strb	r3, [r5, #0]
 800e988:	2e00      	cmp	r6, #0
 800e98a:	d072      	beq.n	800ea72 <ucdr_deserialize_double+0x13e>
 800e98c:	79bb      	ldrb	r3, [r7, #6]
 800e98e:	706b      	strb	r3, [r5, #1]
 800e990:	2e01      	cmp	r6, #1
 800e992:	f105 0302 	add.w	r3, r5, #2
 800e996:	d070      	beq.n	800ea7a <ucdr_deserialize_double+0x146>
 800e998:	797b      	ldrb	r3, [r7, #5]
 800e99a:	70ab      	strb	r3, [r5, #2]
 800e99c:	2e02      	cmp	r6, #2
 800e99e:	f105 0303 	add.w	r3, r5, #3
 800e9a2:	d06e      	beq.n	800ea82 <ucdr_deserialize_double+0x14e>
 800e9a4:	793b      	ldrb	r3, [r7, #4]
 800e9a6:	70eb      	strb	r3, [r5, #3]
 800e9a8:	2e03      	cmp	r6, #3
 800e9aa:	f105 0304 	add.w	r3, r5, #4
 800e9ae:	d06c      	beq.n	800ea8a <ucdr_deserialize_double+0x156>
 800e9b0:	78fb      	ldrb	r3, [r7, #3]
 800e9b2:	712b      	strb	r3, [r5, #4]
 800e9b4:	2e04      	cmp	r6, #4
 800e9b6:	f105 0305 	add.w	r3, r5, #5
 800e9ba:	d06a      	beq.n	800ea92 <ucdr_deserialize_double+0x15e>
 800e9bc:	78bb      	ldrb	r3, [r7, #2]
 800e9be:	716b      	strb	r3, [r5, #5]
 800e9c0:	2e05      	cmp	r6, #5
 800e9c2:	f105 0306 	add.w	r3, r5, #6
 800e9c6:	d068      	beq.n	800ea9a <ucdr_deserialize_double+0x166>
 800e9c8:	787b      	ldrb	r3, [r7, #1]
 800e9ca:	71ab      	strb	r3, [r5, #6]
 800e9cc:	2e06      	cmp	r6, #6
 800e9ce:	f105 0307 	add.w	r3, r5, #7
 800e9d2:	d066      	beq.n	800eaa2 <ucdr_deserialize_double+0x16e>
 800e9d4:	783b      	ldrb	r3, [r7, #0]
 800e9d6:	71eb      	strb	r3, [r5, #7]
 800e9d8:	6923      	ldr	r3, [r4, #16]
 800e9da:	68a2      	ldr	r2, [r4, #8]
 800e9dc:	7da0      	ldrb	r0, [r4, #22]
 800e9de:	3308      	adds	r3, #8
 800e9e0:	1b9e      	subs	r6, r3, r6
 800e9e2:	2308      	movs	r3, #8
 800e9e4:	4442      	add	r2, r8
 800e9e6:	7563      	strb	r3, [r4, #21]
 800e9e8:	60a2      	str	r2, [r4, #8]
 800e9ea:	6126      	str	r6, [r4, #16]
 800e9ec:	f080 0001 	eor.w	r0, r0, #1
 800e9f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9f4:	2108      	movs	r1, #8
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f000 f93c 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800e9fc:	b310      	cbz	r0, 800ea44 <ucdr_deserialize_double+0x110>
 800e9fe:	7d23      	ldrb	r3, [r4, #20]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	68a3      	ldr	r3, [r4, #8]
 800ea04:	d023      	beq.n	800ea4e <ucdr_deserialize_double+0x11a>
 800ea06:	79db      	ldrb	r3, [r3, #7]
 800ea08:	702b      	strb	r3, [r5, #0]
 800ea0a:	68a3      	ldr	r3, [r4, #8]
 800ea0c:	799b      	ldrb	r3, [r3, #6]
 800ea0e:	706b      	strb	r3, [r5, #1]
 800ea10:	68a3      	ldr	r3, [r4, #8]
 800ea12:	795b      	ldrb	r3, [r3, #5]
 800ea14:	70ab      	strb	r3, [r5, #2]
 800ea16:	68a3      	ldr	r3, [r4, #8]
 800ea18:	791b      	ldrb	r3, [r3, #4]
 800ea1a:	70eb      	strb	r3, [r5, #3]
 800ea1c:	68a3      	ldr	r3, [r4, #8]
 800ea1e:	78db      	ldrb	r3, [r3, #3]
 800ea20:	712b      	strb	r3, [r5, #4]
 800ea22:	68a3      	ldr	r3, [r4, #8]
 800ea24:	789b      	ldrb	r3, [r3, #2]
 800ea26:	716b      	strb	r3, [r5, #5]
 800ea28:	68a3      	ldr	r3, [r4, #8]
 800ea2a:	785b      	ldrb	r3, [r3, #1]
 800ea2c:	71ab      	strb	r3, [r5, #6]
 800ea2e:	68a3      	ldr	r3, [r4, #8]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	71eb      	strb	r3, [r5, #7]
 800ea34:	68a2      	ldr	r2, [r4, #8]
 800ea36:	6923      	ldr	r3, [r4, #16]
 800ea38:	3208      	adds	r2, #8
 800ea3a:	3308      	adds	r3, #8
 800ea3c:	2108      	movs	r1, #8
 800ea3e:	60a2      	str	r2, [r4, #8]
 800ea40:	6123      	str	r3, [r4, #16]
 800ea42:	7561      	strb	r1, [r4, #21]
 800ea44:	7da0      	ldrb	r0, [r4, #22]
 800ea46:	f080 0001 	eor.w	r0, r0, #1
 800ea4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea4e:	681a      	ldr	r2, [r3, #0]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	606b      	str	r3, [r5, #4]
 800ea54:	602a      	str	r2, [r5, #0]
 800ea56:	e7ed      	b.n	800ea34 <ucdr_deserialize_double+0x100>
 800ea58:	68a2      	ldr	r2, [r4, #8]
 800ea5a:	6923      	ldr	r3, [r4, #16]
 800ea5c:	7da0      	ldrb	r0, [r4, #22]
 800ea5e:	f884 9015 	strb.w	r9, [r4, #21]
 800ea62:	1b92      	subs	r2, r2, r6
 800ea64:	1b9b      	subs	r3, r3, r6
 800ea66:	60a2      	str	r2, [r4, #8]
 800ea68:	6123      	str	r3, [r4, #16]
 800ea6a:	f080 0001 	eor.w	r0, r0, #1
 800ea6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea72:	68a3      	ldr	r3, [r4, #8]
 800ea74:	799b      	ldrb	r3, [r3, #6]
 800ea76:	706b      	strb	r3, [r5, #1]
 800ea78:	1cab      	adds	r3, r5, #2
 800ea7a:	68a2      	ldr	r2, [r4, #8]
 800ea7c:	7952      	ldrb	r2, [r2, #5]
 800ea7e:	f803 2b01 	strb.w	r2, [r3], #1
 800ea82:	68a2      	ldr	r2, [r4, #8]
 800ea84:	7912      	ldrb	r2, [r2, #4]
 800ea86:	f803 2b01 	strb.w	r2, [r3], #1
 800ea8a:	68a2      	ldr	r2, [r4, #8]
 800ea8c:	78d2      	ldrb	r2, [r2, #3]
 800ea8e:	f803 2b01 	strb.w	r2, [r3], #1
 800ea92:	68a2      	ldr	r2, [r4, #8]
 800ea94:	7892      	ldrb	r2, [r2, #2]
 800ea96:	f803 2b01 	strb.w	r2, [r3], #1
 800ea9a:	68a2      	ldr	r2, [r4, #8]
 800ea9c:	7852      	ldrb	r2, [r2, #1]
 800ea9e:	f803 2b01 	strb.w	r2, [r3], #1
 800eaa2:	68a2      	ldr	r2, [r4, #8]
 800eaa4:	7812      	ldrb	r2, [r2, #0]
 800eaa6:	701a      	strb	r2, [r3, #0]
 800eaa8:	e796      	b.n	800e9d8 <ucdr_deserialize_double+0xa4>
 800eaaa:	4639      	mov	r1, r7
 800eaac:	4632      	mov	r2, r6
 800eaae:	4628      	mov	r0, r5
 800eab0:	f009 fdbb 	bl	801862a <memcpy>
 800eab4:	68a1      	ldr	r1, [r4, #8]
 800eab6:	4642      	mov	r2, r8
 800eab8:	19a8      	adds	r0, r5, r6
 800eaba:	f009 fdb6 	bl	801862a <memcpy>
 800eabe:	e78b      	b.n	800e9d8 <ucdr_deserialize_double+0xa4>

0800eac0 <ucdr_deserialize_endian_double>:
 800eac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eac4:	460f      	mov	r7, r1
 800eac6:	2108      	movs	r1, #8
 800eac8:	4604      	mov	r4, r0
 800eaca:	4615      	mov	r5, r2
 800eacc:	f000 f926 	bl	800ed1c <ucdr_buffer_alignment>
 800ead0:	4601      	mov	r1, r0
 800ead2:	4620      	mov	r0, r4
 800ead4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ead8:	f000 f964 	bl	800eda4 <ucdr_advance_buffer>
 800eadc:	2108      	movs	r1, #8
 800eade:	4620      	mov	r0, r4
 800eae0:	f000 f8bc 	bl	800ec5c <ucdr_check_buffer_available_for>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	d159      	bne.n	800eb9c <ucdr_deserialize_endian_double+0xdc>
 800eae8:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800eaec:	4546      	cmp	r6, r8
 800eaee:	d950      	bls.n	800eb92 <ucdr_deserialize_endian_double+0xd2>
 800eaf0:	6923      	ldr	r3, [r4, #16]
 800eaf2:	60a6      	str	r6, [r4, #8]
 800eaf4:	eba6 0608 	sub.w	r6, r6, r8
 800eaf8:	4433      	add	r3, r6
 800eafa:	f1c6 0a08 	rsb	sl, r6, #8
 800eafe:	6123      	str	r3, [r4, #16]
 800eb00:	4651      	mov	r1, sl
 800eb02:	4620      	mov	r0, r4
 800eb04:	f000 f8b6 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d073      	beq.n	800ebf4 <ucdr_deserialize_endian_double+0x134>
 800eb0c:	2f01      	cmp	r7, #1
 800eb0e:	f000 809a 	beq.w	800ec46 <ucdr_deserialize_endian_double+0x186>
 800eb12:	f898 3007 	ldrb.w	r3, [r8, #7]
 800eb16:	702b      	strb	r3, [r5, #0]
 800eb18:	2e00      	cmp	r6, #0
 800eb1a:	d078      	beq.n	800ec0e <ucdr_deserialize_endian_double+0x14e>
 800eb1c:	f898 3006 	ldrb.w	r3, [r8, #6]
 800eb20:	706b      	strb	r3, [r5, #1]
 800eb22:	2e01      	cmp	r6, #1
 800eb24:	f105 0302 	add.w	r3, r5, #2
 800eb28:	d075      	beq.n	800ec16 <ucdr_deserialize_endian_double+0x156>
 800eb2a:	f898 3005 	ldrb.w	r3, [r8, #5]
 800eb2e:	70ab      	strb	r3, [r5, #2]
 800eb30:	2e02      	cmp	r6, #2
 800eb32:	f105 0303 	add.w	r3, r5, #3
 800eb36:	d072      	beq.n	800ec1e <ucdr_deserialize_endian_double+0x15e>
 800eb38:	f898 3004 	ldrb.w	r3, [r8, #4]
 800eb3c:	70eb      	strb	r3, [r5, #3]
 800eb3e:	2e03      	cmp	r6, #3
 800eb40:	f105 0304 	add.w	r3, r5, #4
 800eb44:	d06f      	beq.n	800ec26 <ucdr_deserialize_endian_double+0x166>
 800eb46:	f898 3003 	ldrb.w	r3, [r8, #3]
 800eb4a:	712b      	strb	r3, [r5, #4]
 800eb4c:	2e04      	cmp	r6, #4
 800eb4e:	f105 0305 	add.w	r3, r5, #5
 800eb52:	d06c      	beq.n	800ec2e <ucdr_deserialize_endian_double+0x16e>
 800eb54:	f898 3002 	ldrb.w	r3, [r8, #2]
 800eb58:	716b      	strb	r3, [r5, #5]
 800eb5a:	2e05      	cmp	r6, #5
 800eb5c:	f105 0306 	add.w	r3, r5, #6
 800eb60:	d069      	beq.n	800ec36 <ucdr_deserialize_endian_double+0x176>
 800eb62:	f898 3001 	ldrb.w	r3, [r8, #1]
 800eb66:	71ab      	strb	r3, [r5, #6]
 800eb68:	2e06      	cmp	r6, #6
 800eb6a:	f105 0307 	add.w	r3, r5, #7
 800eb6e:	d066      	beq.n	800ec3e <ucdr_deserialize_endian_double+0x17e>
 800eb70:	f898 3000 	ldrb.w	r3, [r8]
 800eb74:	71eb      	strb	r3, [r5, #7]
 800eb76:	6923      	ldr	r3, [r4, #16]
 800eb78:	68a2      	ldr	r2, [r4, #8]
 800eb7a:	7da0      	ldrb	r0, [r4, #22]
 800eb7c:	3308      	adds	r3, #8
 800eb7e:	1b9e      	subs	r6, r3, r6
 800eb80:	2308      	movs	r3, #8
 800eb82:	4452      	add	r2, sl
 800eb84:	7563      	strb	r3, [r4, #21]
 800eb86:	60a2      	str	r2, [r4, #8]
 800eb88:	6126      	str	r6, [r4, #16]
 800eb8a:	f080 0001 	eor.w	r0, r0, #1
 800eb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb92:	2108      	movs	r1, #8
 800eb94:	4620      	mov	r0, r4
 800eb96:	f000 f86d 	bl	800ec74 <ucdr_check_final_buffer_behavior>
 800eb9a:	b308      	cbz	r0, 800ebe0 <ucdr_deserialize_endian_double+0x120>
 800eb9c:	2f01      	cmp	r7, #1
 800eb9e:	68a3      	ldr	r3, [r4, #8]
 800eba0:	d023      	beq.n	800ebea <ucdr_deserialize_endian_double+0x12a>
 800eba2:	79db      	ldrb	r3, [r3, #7]
 800eba4:	702b      	strb	r3, [r5, #0]
 800eba6:	68a3      	ldr	r3, [r4, #8]
 800eba8:	799b      	ldrb	r3, [r3, #6]
 800ebaa:	706b      	strb	r3, [r5, #1]
 800ebac:	68a3      	ldr	r3, [r4, #8]
 800ebae:	795b      	ldrb	r3, [r3, #5]
 800ebb0:	70ab      	strb	r3, [r5, #2]
 800ebb2:	68a3      	ldr	r3, [r4, #8]
 800ebb4:	791b      	ldrb	r3, [r3, #4]
 800ebb6:	70eb      	strb	r3, [r5, #3]
 800ebb8:	68a3      	ldr	r3, [r4, #8]
 800ebba:	78db      	ldrb	r3, [r3, #3]
 800ebbc:	712b      	strb	r3, [r5, #4]
 800ebbe:	68a3      	ldr	r3, [r4, #8]
 800ebc0:	789b      	ldrb	r3, [r3, #2]
 800ebc2:	716b      	strb	r3, [r5, #5]
 800ebc4:	68a3      	ldr	r3, [r4, #8]
 800ebc6:	785b      	ldrb	r3, [r3, #1]
 800ebc8:	71ab      	strb	r3, [r5, #6]
 800ebca:	68a3      	ldr	r3, [r4, #8]
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	71eb      	strb	r3, [r5, #7]
 800ebd0:	68a2      	ldr	r2, [r4, #8]
 800ebd2:	6923      	ldr	r3, [r4, #16]
 800ebd4:	3208      	adds	r2, #8
 800ebd6:	3308      	adds	r3, #8
 800ebd8:	2108      	movs	r1, #8
 800ebda:	60a2      	str	r2, [r4, #8]
 800ebdc:	6123      	str	r3, [r4, #16]
 800ebde:	7561      	strb	r1, [r4, #21]
 800ebe0:	7da0      	ldrb	r0, [r4, #22]
 800ebe2:	f080 0001 	eor.w	r0, r0, #1
 800ebe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	606b      	str	r3, [r5, #4]
 800ebf0:	602a      	str	r2, [r5, #0]
 800ebf2:	e7ed      	b.n	800ebd0 <ucdr_deserialize_endian_double+0x110>
 800ebf4:	68a2      	ldr	r2, [r4, #8]
 800ebf6:	6923      	ldr	r3, [r4, #16]
 800ebf8:	7da0      	ldrb	r0, [r4, #22]
 800ebfa:	f884 9015 	strb.w	r9, [r4, #21]
 800ebfe:	1b92      	subs	r2, r2, r6
 800ec00:	1b9b      	subs	r3, r3, r6
 800ec02:	60a2      	str	r2, [r4, #8]
 800ec04:	6123      	str	r3, [r4, #16]
 800ec06:	f080 0001 	eor.w	r0, r0, #1
 800ec0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec0e:	68a3      	ldr	r3, [r4, #8]
 800ec10:	799b      	ldrb	r3, [r3, #6]
 800ec12:	706b      	strb	r3, [r5, #1]
 800ec14:	1cab      	adds	r3, r5, #2
 800ec16:	68a2      	ldr	r2, [r4, #8]
 800ec18:	7952      	ldrb	r2, [r2, #5]
 800ec1a:	f803 2b01 	strb.w	r2, [r3], #1
 800ec1e:	68a2      	ldr	r2, [r4, #8]
 800ec20:	7912      	ldrb	r2, [r2, #4]
 800ec22:	f803 2b01 	strb.w	r2, [r3], #1
 800ec26:	68a2      	ldr	r2, [r4, #8]
 800ec28:	78d2      	ldrb	r2, [r2, #3]
 800ec2a:	f803 2b01 	strb.w	r2, [r3], #1
 800ec2e:	68a2      	ldr	r2, [r4, #8]
 800ec30:	7892      	ldrb	r2, [r2, #2]
 800ec32:	f803 2b01 	strb.w	r2, [r3], #1
 800ec36:	68a2      	ldr	r2, [r4, #8]
 800ec38:	7852      	ldrb	r2, [r2, #1]
 800ec3a:	f803 2b01 	strb.w	r2, [r3], #1
 800ec3e:	68a2      	ldr	r2, [r4, #8]
 800ec40:	7812      	ldrb	r2, [r2, #0]
 800ec42:	701a      	strb	r2, [r3, #0]
 800ec44:	e797      	b.n	800eb76 <ucdr_deserialize_endian_double+0xb6>
 800ec46:	4641      	mov	r1, r8
 800ec48:	4632      	mov	r2, r6
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	f009 fced 	bl	801862a <memcpy>
 800ec50:	68a1      	ldr	r1, [r4, #8]
 800ec52:	4652      	mov	r2, sl
 800ec54:	19a8      	adds	r0, r5, r6
 800ec56:	f009 fce8 	bl	801862a <memcpy>
 800ec5a:	e78c      	b.n	800eb76 <ucdr_deserialize_endian_double+0xb6>

0800ec5c <ucdr_check_buffer_available_for>:
 800ec5c:	7d83      	ldrb	r3, [r0, #22]
 800ec5e:	b93b      	cbnz	r3, 800ec70 <ucdr_check_buffer_available_for+0x14>
 800ec60:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ec64:	4419      	add	r1, r3
 800ec66:	4288      	cmp	r0, r1
 800ec68:	bf34      	ite	cc
 800ec6a:	2000      	movcc	r0, #0
 800ec6c:	2001      	movcs	r0, #1
 800ec6e:	4770      	bx	lr
 800ec70:	2000      	movs	r0, #0
 800ec72:	4770      	bx	lr

0800ec74 <ucdr_check_final_buffer_behavior>:
 800ec74:	7d83      	ldrb	r3, [r0, #22]
 800ec76:	b943      	cbnz	r3, 800ec8a <ucdr_check_final_buffer_behavior+0x16>
 800ec78:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ec7c:	4291      	cmp	r1, r2
 800ec7e:	b510      	push	{r4, lr}
 800ec80:	4604      	mov	r4, r0
 800ec82:	d205      	bcs.n	800ec90 <ucdr_check_final_buffer_behavior+0x1c>
 800ec84:	2301      	movs	r3, #1
 800ec86:	4618      	mov	r0, r3
 800ec88:	bd10      	pop	{r4, pc}
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	4770      	bx	lr
 800ec90:	6982      	ldr	r2, [r0, #24]
 800ec92:	b13a      	cbz	r2, 800eca4 <ucdr_check_final_buffer_behavior+0x30>
 800ec94:	69c1      	ldr	r1, [r0, #28]
 800ec96:	4790      	blx	r2
 800ec98:	f080 0301 	eor.w	r3, r0, #1
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	75a0      	strb	r0, [r4, #22]
 800eca0:	4618      	mov	r0, r3
 800eca2:	bd10      	pop	{r4, pc}
 800eca4:	2001      	movs	r0, #1
 800eca6:	75a0      	strb	r0, [r4, #22]
 800eca8:	e7fa      	b.n	800eca0 <ucdr_check_final_buffer_behavior+0x2c>
 800ecaa:	bf00      	nop

0800ecac <ucdr_set_on_full_buffer_callback>:
 800ecac:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop

0800ecb4 <ucdr_init_buffer_origin_offset_endian>:
 800ecb4:	b410      	push	{r4}
 800ecb6:	9c01      	ldr	r4, [sp, #4]
 800ecb8:	6001      	str	r1, [r0, #0]
 800ecba:	440a      	add	r2, r1
 800ecbc:	6042      	str	r2, [r0, #4]
 800ecbe:	190a      	adds	r2, r1, r4
 800ecc0:	441c      	add	r4, r3
 800ecc2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ecc6:	6082      	str	r2, [r0, #8]
 800ecc8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800eccc:	7503      	strb	r3, [r0, #20]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ecd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecd8:	7542      	strb	r2, [r0, #21]
 800ecda:	7582      	strb	r2, [r0, #22]
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop

0800ece0 <ucdr_init_buffer_origin_offset>:
 800ece0:	b510      	push	{r4, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	9c04      	ldr	r4, [sp, #16]
 800ece6:	9400      	str	r4, [sp, #0]
 800ece8:	2401      	movs	r4, #1
 800ecea:	9401      	str	r4, [sp, #4]
 800ecec:	f7ff ffe2 	bl	800ecb4 <ucdr_init_buffer_origin_offset_endian>
 800ecf0:	b002      	add	sp, #8
 800ecf2:	bd10      	pop	{r4, pc}

0800ecf4 <ucdr_init_buffer_origin>:
 800ecf4:	b510      	push	{r4, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	2400      	movs	r4, #0
 800ecfa:	9400      	str	r4, [sp, #0]
 800ecfc:	f7ff fff0 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 800ed00:	b002      	add	sp, #8
 800ed02:	bd10      	pop	{r4, pc}

0800ed04 <ucdr_init_buffer>:
 800ed04:	2300      	movs	r3, #0
 800ed06:	f7ff bff5 	b.w	800ecf4 <ucdr_init_buffer_origin>
 800ed0a:	bf00      	nop

0800ed0c <ucdr_alignment>:
 800ed0c:	fbb0 f3f1 	udiv	r3, r0, r1
 800ed10:	fb03 0011 	mls	r0, r3, r1, r0
 800ed14:	1a08      	subs	r0, r1, r0
 800ed16:	3901      	subs	r1, #1
 800ed18:	4008      	ands	r0, r1
 800ed1a:	4770      	bx	lr

0800ed1c <ucdr_buffer_alignment>:
 800ed1c:	7d43      	ldrb	r3, [r0, #21]
 800ed1e:	428b      	cmp	r3, r1
 800ed20:	d208      	bcs.n	800ed34 <ucdr_buffer_alignment+0x18>
 800ed22:	6900      	ldr	r0, [r0, #16]
 800ed24:	fbb0 f3f1 	udiv	r3, r0, r1
 800ed28:	fb01 0013 	mls	r0, r1, r3, r0
 800ed2c:	1a08      	subs	r0, r1, r0
 800ed2e:	3901      	subs	r1, #1
 800ed30:	4008      	ands	r0, r1
 800ed32:	4770      	bx	lr
 800ed34:	2000      	movs	r0, #0
 800ed36:	4770      	bx	lr

0800ed38 <ucdr_align_to>:
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	4604      	mov	r4, r0
 800ed3c:	460d      	mov	r5, r1
 800ed3e:	f7ff ffed 	bl	800ed1c <ucdr_buffer_alignment>
 800ed42:	68a3      	ldr	r3, [r4, #8]
 800ed44:	6921      	ldr	r1, [r4, #16]
 800ed46:	7565      	strb	r5, [r4, #21]
 800ed48:	181a      	adds	r2, r3, r0
 800ed4a:	6863      	ldr	r3, [r4, #4]
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	4408      	add	r0, r1
 800ed50:	bf28      	it	cs
 800ed52:	4613      	movcs	r3, r2
 800ed54:	6120      	str	r0, [r4, #16]
 800ed56:	60a3      	str	r3, [r4, #8]
 800ed58:	bd38      	pop	{r3, r4, r5, pc}
 800ed5a:	bf00      	nop

0800ed5c <ucdr_buffer_length>:
 800ed5c:	6882      	ldr	r2, [r0, #8]
 800ed5e:	6800      	ldr	r0, [r0, #0]
 800ed60:	1a10      	subs	r0, r2, r0
 800ed62:	4770      	bx	lr

0800ed64 <ucdr_buffer_remaining>:
 800ed64:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ed68:	1a10      	subs	r0, r2, r0
 800ed6a:	4770      	bx	lr

0800ed6c <ucdr_check_final_buffer_behavior_array>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	7d83      	ldrb	r3, [r0, #22]
 800ed70:	b963      	cbnz	r3, 800ed8c <ucdr_check_final_buffer_behavior_array+0x20>
 800ed72:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	4604      	mov	r4, r0
 800ed7a:	460d      	mov	r5, r1
 800ed7c:	d308      	bcc.n	800ed90 <ucdr_check_final_buffer_behavior_array+0x24>
 800ed7e:	b139      	cbz	r1, 800ed90 <ucdr_check_final_buffer_behavior_array+0x24>
 800ed80:	6983      	ldr	r3, [r0, #24]
 800ed82:	b163      	cbz	r3, 800ed9e <ucdr_check_final_buffer_behavior_array+0x32>
 800ed84:	69c1      	ldr	r1, [r0, #28]
 800ed86:	4798      	blx	r3
 800ed88:	75a0      	strb	r0, [r4, #22]
 800ed8a:	b108      	cbz	r0, 800ed90 <ucdr_check_final_buffer_behavior_array+0x24>
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	bd38      	pop	{r3, r4, r5, pc}
 800ed90:	4620      	mov	r0, r4
 800ed92:	f7ff ffe7 	bl	800ed64 <ucdr_buffer_remaining>
 800ed96:	42a8      	cmp	r0, r5
 800ed98:	bf28      	it	cs
 800ed9a:	4628      	movcs	r0, r5
 800ed9c:	bd38      	pop	{r3, r4, r5, pc}
 800ed9e:	2301      	movs	r3, #1
 800eda0:	7583      	strb	r3, [r0, #22]
 800eda2:	e7f3      	b.n	800ed8c <ucdr_check_final_buffer_behavior_array+0x20>

0800eda4 <ucdr_advance_buffer>:
 800eda4:	b538      	push	{r3, r4, r5, lr}
 800eda6:	4604      	mov	r4, r0
 800eda8:	460d      	mov	r5, r1
 800edaa:	f7ff ff57 	bl	800ec5c <ucdr_check_buffer_available_for>
 800edae:	b178      	cbz	r0, 800edd0 <ucdr_advance_buffer+0x2c>
 800edb0:	6923      	ldr	r3, [r4, #16]
 800edb2:	68a2      	ldr	r2, [r4, #8]
 800edb4:	442b      	add	r3, r5
 800edb6:	6123      	str	r3, [r4, #16]
 800edb8:	2301      	movs	r3, #1
 800edba:	442a      	add	r2, r5
 800edbc:	7563      	strb	r3, [r4, #21]
 800edbe:	60a2      	str	r2, [r4, #8]
 800edc0:	bd38      	pop	{r3, r4, r5, pc}
 800edc2:	68a2      	ldr	r2, [r4, #8]
 800edc4:	6923      	ldr	r3, [r4, #16]
 800edc6:	4402      	add	r2, r0
 800edc8:	4403      	add	r3, r0
 800edca:	1a2d      	subs	r5, r5, r0
 800edcc:	60a2      	str	r2, [r4, #8]
 800edce:	6123      	str	r3, [r4, #16]
 800edd0:	4629      	mov	r1, r5
 800edd2:	2201      	movs	r2, #1
 800edd4:	4620      	mov	r0, r4
 800edd6:	f7ff ffc9 	bl	800ed6c <ucdr_check_final_buffer_behavior_array>
 800edda:	2800      	cmp	r0, #0
 800eddc:	d1f1      	bne.n	800edc2 <ucdr_advance_buffer+0x1e>
 800edde:	2301      	movs	r3, #1
 800ede0:	7563      	strb	r3, [r4, #21]
 800ede2:	bd38      	pop	{r3, r4, r5, pc}

0800ede4 <ucdr_serialize_sequence_char>:
 800ede4:	b570      	push	{r4, r5, r6, lr}
 800ede6:	4615      	mov	r5, r2
 800ede8:	460e      	mov	r6, r1
 800edea:	7d01      	ldrb	r1, [r0, #20]
 800edec:	4604      	mov	r4, r0
 800edee:	f7fe ff55 	bl	800dc9c <ucdr_serialize_endian_uint32_t>
 800edf2:	b90d      	cbnz	r5, 800edf8 <ucdr_serialize_sequence_char+0x14>
 800edf4:	2001      	movs	r0, #1
 800edf6:	bd70      	pop	{r4, r5, r6, pc}
 800edf8:	7d21      	ldrb	r1, [r4, #20]
 800edfa:	462b      	mov	r3, r5
 800edfc:	4632      	mov	r2, r6
 800edfe:	4620      	mov	r0, r4
 800ee00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee04:	f7fe ba98 	b.w	800d338 <ucdr_serialize_endian_array_char>

0800ee08 <ucdr_deserialize_sequence_char>:
 800ee08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0c:	461d      	mov	r5, r3
 800ee0e:	4616      	mov	r6, r2
 800ee10:	460f      	mov	r7, r1
 800ee12:	461a      	mov	r2, r3
 800ee14:	7d01      	ldrb	r1, [r0, #20]
 800ee16:	4604      	mov	r4, r0
 800ee18:	f7ff f868 	bl	800deec <ucdr_deserialize_endian_uint32_t>
 800ee1c:	682b      	ldr	r3, [r5, #0]
 800ee1e:	429e      	cmp	r6, r3
 800ee20:	bf3c      	itt	cc
 800ee22:	2201      	movcc	r2, #1
 800ee24:	75a2      	strbcc	r2, [r4, #22]
 800ee26:	b913      	cbnz	r3, 800ee2e <ucdr_deserialize_sequence_char+0x26>
 800ee28:	2001      	movs	r0, #1
 800ee2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2e:	7d21      	ldrb	r1, [r4, #20]
 800ee30:	463a      	mov	r2, r7
 800ee32:	4620      	mov	r0, r4
 800ee34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee38:	f7fe bab0 	b.w	800d39c <ucdr_deserialize_endian_array_char>

0800ee3c <ucdr_serialize_sequence_uint8_t>:
 800ee3c:	b570      	push	{r4, r5, r6, lr}
 800ee3e:	4615      	mov	r5, r2
 800ee40:	460e      	mov	r6, r1
 800ee42:	7d01      	ldrb	r1, [r0, #20]
 800ee44:	4604      	mov	r4, r0
 800ee46:	f7fe ff29 	bl	800dc9c <ucdr_serialize_endian_uint32_t>
 800ee4a:	b90d      	cbnz	r5, 800ee50 <ucdr_serialize_sequence_uint8_t+0x14>
 800ee4c:	2001      	movs	r0, #1
 800ee4e:	bd70      	pop	{r4, r5, r6, pc}
 800ee50:	7d21      	ldrb	r1, [r4, #20]
 800ee52:	462b      	mov	r3, r5
 800ee54:	4632      	mov	r2, r6
 800ee56:	4620      	mov	r0, r4
 800ee58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee5c:	f7fe bb02 	b.w	800d464 <ucdr_serialize_endian_array_uint8_t>

0800ee60 <ucdr_deserialize_sequence_uint8_t>:
 800ee60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee64:	461d      	mov	r5, r3
 800ee66:	4616      	mov	r6, r2
 800ee68:	460f      	mov	r7, r1
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	7d01      	ldrb	r1, [r0, #20]
 800ee6e:	4604      	mov	r4, r0
 800ee70:	f7ff f83c 	bl	800deec <ucdr_deserialize_endian_uint32_t>
 800ee74:	682b      	ldr	r3, [r5, #0]
 800ee76:	429e      	cmp	r6, r3
 800ee78:	bf3c      	itt	cc
 800ee7a:	2201      	movcc	r2, #1
 800ee7c:	75a2      	strbcc	r2, [r4, #22]
 800ee7e:	b913      	cbnz	r3, 800ee86 <ucdr_deserialize_sequence_uint8_t+0x26>
 800ee80:	2001      	movs	r0, #1
 800ee82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee86:	7d21      	ldrb	r1, [r4, #20]
 800ee88:	463a      	mov	r2, r7
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee90:	f7fe bb4c 	b.w	800d52c <ucdr_deserialize_endian_array_uint8_t>

0800ee94 <uxr_buffer_delete_entity>:
 800ee94:	b510      	push	{r4, lr}
 800ee96:	2300      	movs	r3, #0
 800ee98:	b08e      	sub	sp, #56	@ 0x38
 800ee9a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ee9e:	2303      	movs	r3, #3
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	2204      	movs	r2, #4
 800eea4:	ab06      	add	r3, sp, #24
 800eea6:	4604      	mov	r4, r0
 800eea8:	9103      	str	r1, [sp, #12]
 800eeaa:	f001 facb 	bl	8010444 <uxr_prepare_stream_to_write_submessage>
 800eeae:	b918      	cbnz	r0, 800eeb8 <uxr_buffer_delete_entity+0x24>
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	b00e      	add	sp, #56	@ 0x38
 800eeb6:	bd10      	pop	{r4, pc}
 800eeb8:	9902      	ldr	r1, [sp, #8]
 800eeba:	aa05      	add	r2, sp, #20
 800eebc:	4620      	mov	r0, r4
 800eebe:	f001 fbf7 	bl	80106b0 <uxr_init_base_object_request>
 800eec2:	a905      	add	r1, sp, #20
 800eec4:	4604      	mov	r4, r0
 800eec6:	a806      	add	r0, sp, #24
 800eec8:	f003 f9ee 	bl	80122a8 <uxr_serialize_DELETE_Payload>
 800eecc:	4620      	mov	r0, r4
 800eece:	b00e      	add	sp, #56	@ 0x38
 800eed0:	bd10      	pop	{r4, pc}
 800eed2:	bf00      	nop

0800eed4 <uxr_common_create_entity>:
 800eed4:	b510      	push	{r4, lr}
 800eed6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800eeda:	b08c      	sub	sp, #48	@ 0x30
 800eedc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800eee0:	f1bc 0f01 	cmp.w	ip, #1
 800eee4:	bf0c      	ite	eq
 800eee6:	f003 0201 	andeq.w	r2, r3, #1
 800eeea:	2200      	movne	r2, #0
 800eeec:	330e      	adds	r3, #14
 800eeee:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800eef2:	9101      	str	r1, [sp, #4]
 800eef4:	441a      	add	r2, r3
 800eef6:	2301      	movs	r3, #1
 800eef8:	9300      	str	r3, [sp, #0]
 800eefa:	9903      	ldr	r1, [sp, #12]
 800eefc:	ab04      	add	r3, sp, #16
 800eefe:	b292      	uxth	r2, r2
 800ef00:	4604      	mov	r4, r0
 800ef02:	f001 fa9f 	bl	8010444 <uxr_prepare_stream_to_write_submessage>
 800ef06:	b918      	cbnz	r0, 800ef10 <uxr_common_create_entity+0x3c>
 800ef08:	4604      	mov	r4, r0
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	b00c      	add	sp, #48	@ 0x30
 800ef0e:	bd10      	pop	{r4, pc}
 800ef10:	9902      	ldr	r1, [sp, #8]
 800ef12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ef14:	4620      	mov	r0, r4
 800ef16:	f001 fbcb 	bl	80106b0 <uxr_init_base_object_request>
 800ef1a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	a804      	add	r0, sp, #16
 800ef20:	f003 f91e 	bl	8012160 <uxr_serialize_CREATE_Payload>
 800ef24:	4620      	mov	r0, r4
 800ef26:	b00c      	add	sp, #48	@ 0x30
 800ef28:	bd10      	pop	{r4, pc}
 800ef2a:	bf00      	nop

0800ef2c <uxr_buffer_create_participant_bin>:
 800ef2c:	b570      	push	{r4, r5, r6, lr}
 800ef2e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800ef32:	ac11      	add	r4, sp, #68	@ 0x44
 800ef34:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800ef38:	2303      	movs	r3, #3
 800ef3a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ef3e:	7223      	strb	r3, [r4, #8]
 800ef40:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800ef42:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800ef46:	2201      	movs	r2, #1
 800ef48:	2100      	movs	r1, #0
 800ef4a:	4605      	mov	r5, r0
 800ef4c:	7122      	strb	r2, [r4, #4]
 800ef4e:	f88d 1014 	strb.w	r1, [sp, #20]
 800ef52:	b1cb      	cbz	r3, 800ef88 <uxr_buffer_create_participant_bin+0x5c>
 800ef54:	f88d 201c 	strb.w	r2, [sp, #28]
 800ef58:	9308      	str	r3, [sp, #32]
 800ef5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef5e:	a915      	add	r1, sp, #84	@ 0x54
 800ef60:	a809      	add	r0, sp, #36	@ 0x24
 800ef62:	f7ff fecf 	bl	800ed04 <ucdr_init_buffer>
 800ef66:	a905      	add	r1, sp, #20
 800ef68:	a809      	add	r0, sp, #36	@ 0x24
 800ef6a:	f002 fdc7 	bl	8011afc <uxr_serialize_OBJK_DomainParticipant_Binary>
 800ef6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef70:	9600      	str	r6, [sp, #0]
 800ef72:	9401      	str	r4, [sp, #4]
 800ef74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ef78:	60e3      	str	r3, [r4, #12]
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	f7ff ffa9 	bl	800eed4 <uxr_common_create_entity>
 800ef82:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800ef86:	bd70      	pop	{r4, r5, r6, pc}
 800ef88:	f88d 301c 	strb.w	r3, [sp, #28]
 800ef8c:	e7e5      	b.n	800ef5a <uxr_buffer_create_participant_bin+0x2e>
 800ef8e:	bf00      	nop

0800ef90 <uxr_buffer_create_topic_bin>:
 800ef90:	b570      	push	{r4, r5, r6, lr}
 800ef92:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800ef96:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ef9a:	9105      	str	r1, [sp, #20]
 800ef9c:	4605      	mov	r5, r0
 800ef9e:	a997      	add	r1, sp, #604	@ 0x25c
 800efa0:	4618      	mov	r0, r3
 800efa2:	2302      	movs	r3, #2
 800efa4:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800efa8:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800efac:	f000 f9b0 	bl	800f310 <uxr_object_id_to_raw>
 800efb0:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800efb2:	9306      	str	r3, [sp, #24]
 800efb4:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800efb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800efb8:	2303      	movs	r3, #3
 800efba:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800efbe:	2301      	movs	r3, #1
 800efc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efc4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800efc8:	a917      	add	r1, sp, #92	@ 0x5c
 800efca:	2300      	movs	r3, #0
 800efcc:	a80b      	add	r0, sp, #44	@ 0x2c
 800efce:	f88d 301c 	strb.w	r3, [sp, #28]
 800efd2:	f7ff fe97 	bl	800ed04 <ucdr_init_buffer>
 800efd6:	a906      	add	r1, sp, #24
 800efd8:	a80b      	add	r0, sp, #44	@ 0x2c
 800efda:	f002 fdb1 	bl	8011b40 <uxr_serialize_OBJK_Topic_Binary>
 800efde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efe0:	9316      	str	r3, [sp, #88]	@ 0x58
 800efe2:	ac13      	add	r4, sp, #76	@ 0x4c
 800efe4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800efe8:	9600      	str	r6, [sp, #0]
 800efea:	9401      	str	r4, [sp, #4]
 800efec:	b29b      	uxth	r3, r3
 800efee:	4628      	mov	r0, r5
 800eff0:	f7ff ff70 	bl	800eed4 <uxr_common_create_entity>
 800eff4:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800eff8:	bd70      	pop	{r4, r5, r6, pc}
 800effa:	bf00      	nop

0800effc <uxr_buffer_create_publisher_bin>:
 800effc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800effe:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f002:	4605      	mov	r5, r0
 800f004:	9105      	str	r1, [sp, #20]
 800f006:	4618      	mov	r0, r3
 800f008:	2603      	movs	r6, #3
 800f00a:	a992      	add	r1, sp, #584	@ 0x248
 800f00c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f010:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f014:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f018:	f000 f97a 	bl	800f310 <uxr_object_id_to_raw>
 800f01c:	2300      	movs	r3, #0
 800f01e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f022:	a912      	add	r1, sp, #72	@ 0x48
 800f024:	a806      	add	r0, sp, #24
 800f026:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f02a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f02e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f032:	f7ff fe67 	bl	800ed04 <ucdr_init_buffer>
 800f036:	a993      	add	r1, sp, #588	@ 0x24c
 800f038:	a806      	add	r0, sp, #24
 800f03a:	f002 fe35 	bl	8011ca8 <uxr_serialize_OBJK_Publisher_Binary>
 800f03e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f040:	9311      	str	r3, [sp, #68]	@ 0x44
 800f042:	ac0e      	add	r4, sp, #56	@ 0x38
 800f044:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f048:	9700      	str	r7, [sp, #0]
 800f04a:	9401      	str	r4, [sp, #4]
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	4628      	mov	r0, r5
 800f050:	f7ff ff40 	bl	800eed4 <uxr_common_create_entity>
 800f054:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f05a:	bf00      	nop

0800f05c <uxr_buffer_create_datawriter_bin>:
 800f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f060:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f064:	ac1d      	add	r4, sp, #116	@ 0x74
 800f066:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f06a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f06e:	9105      	str	r1, [sp, #20]
 800f070:	4606      	mov	r6, r0
 800f072:	a9a1      	add	r1, sp, #644	@ 0x284
 800f074:	4618      	mov	r0, r3
 800f076:	2305      	movs	r3, #5
 800f078:	7123      	strb	r3, [r4, #4]
 800f07a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f07e:	2703      	movs	r7, #3
 800f080:	f000 f946 	bl	800f310 <uxr_object_id_to_raw>
 800f084:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f086:	7227      	strb	r7, [r4, #8]
 800f088:	a90e      	add	r1, sp, #56	@ 0x38
 800f08a:	f000 f941 	bl	800f310 <uxr_object_id_to_raw>
 800f08e:	2300      	movs	r3, #0
 800f090:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f094:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800f098:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f09c:	3d00      	subs	r5, #0
 800f09e:	bf18      	it	ne
 800f0a0:	2501      	movne	r5, #1
 800f0a2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f0a6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f0aa:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f0ae:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f0b8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f0bc:	bb8a      	cbnz	r2, 800f122 <uxr_buffer_create_datawriter_bin+0xc6>
 800f0be:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f0c2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f0c6:	f04f 0c13 	mov.w	ip, #19
 800f0ca:	250b      	movs	r5, #11
 800f0cc:	2221      	movs	r2, #33	@ 0x21
 800f0ce:	2111      	movs	r1, #17
 800f0d0:	2009      	movs	r0, #9
 800f0d2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800f0d6:	b923      	cbnz	r3, 800f0e2 <uxr_buffer_create_datawriter_bin+0x86>
 800f0d8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f0dc:	4672      	mov	r2, lr
 800f0de:	4661      	mov	r1, ip
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d025      	beq.n	800f136 <uxr_buffer_create_datawriter_bin+0xda>
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	d029      	beq.n	800f142 <uxr_buffer_create_datawriter_bin+0xe6>
 800f0ee:	b32b      	cbz	r3, 800f13c <uxr_buffer_create_datawriter_bin+0xe0>
 800f0f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f0f4:	a921      	add	r1, sp, #132	@ 0x84
 800f0f6:	a806      	add	r0, sp, #24
 800f0f8:	f7ff fe04 	bl	800ed04 <ucdr_init_buffer>
 800f0fc:	a90e      	add	r1, sp, #56	@ 0x38
 800f0fe:	a806      	add	r0, sp, #24
 800f100:	f002 fe48 	bl	8011d94 <uxr_serialize_OBJK_DataWriter_Binary>
 800f104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f106:	f8cd 8000 	str.w	r8, [sp]
 800f10a:	9401      	str	r4, [sp, #4]
 800f10c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f110:	60e3      	str	r3, [r4, #12]
 800f112:	4630      	mov	r0, r6
 800f114:	b29b      	uxth	r3, r3
 800f116:	f7ff fedd 	bl	800eed4 <uxr_common_create_entity>
 800f11a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f122:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f126:	f04f 0c12 	mov.w	ip, #18
 800f12a:	250a      	movs	r5, #10
 800f12c:	2220      	movs	r2, #32
 800f12e:	2110      	movs	r1, #16
 800f130:	2008      	movs	r0, #8
 800f132:	2702      	movs	r7, #2
 800f134:	e7cd      	b.n	800f0d2 <uxr_buffer_create_datawriter_bin+0x76>
 800f136:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f13a:	e7d9      	b.n	800f0f0 <uxr_buffer_create_datawriter_bin+0x94>
 800f13c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f140:	e7d6      	b.n	800f0f0 <uxr_buffer_create_datawriter_bin+0x94>
 800f142:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f146:	e7d3      	b.n	800f0f0 <uxr_buffer_create_datawriter_bin+0x94>

0800f148 <get_custom_error>:
 800f148:	4b01      	ldr	r3, [pc, #4]	@ (800f150 <get_custom_error+0x8>)
 800f14a:	7818      	ldrb	r0, [r3, #0]
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop
 800f150:	2000b21c 	.word	0x2000b21c

0800f154 <recv_custom_msg>:
 800f154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f158:	4693      	mov	fp, r2
 800f15a:	b089      	sub	sp, #36	@ 0x24
 800f15c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800f160:	9305      	str	r3, [sp, #20]
 800f162:	468a      	mov	sl, r1
 800f164:	2100      	movs	r1, #0
 800f166:	4604      	mov	r4, r0
 800f168:	f88d 101e 	strb.w	r1, [sp, #30]
 800f16c:	b322      	cbz	r2, 800f1b8 <recv_custom_msg+0x64>
 800f16e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800f172:	f10d 081f 	add.w	r8, sp, #31
 800f176:	af05      	add	r7, sp, #20
 800f178:	f10d 061e 	add.w	r6, sp, #30
 800f17c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800f180:	e002      	b.n	800f188 <recv_custom_msg+0x34>
 800f182:	9b05      	ldr	r3, [sp, #20]
 800f184:	2b00      	cmp	r3, #0
 800f186:	dd0f      	ble.n	800f1a8 <recv_custom_msg+0x54>
 800f188:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800f18c:	4623      	mov	r3, r4
 800f18e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f192:	e9cd 5600 	strd	r5, r6, [sp]
 800f196:	4622      	mov	r2, r4
 800f198:	4648      	mov	r0, r9
 800f19a:	f001 fcb7 	bl	8010b0c <uxr_read_framed_msg>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	d0ef      	beq.n	800f182 <recv_custom_msg+0x2e>
 800f1a2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f1a6:	b1b3      	cbz	r3, 800f1d6 <recv_custom_msg+0x82>
 800f1a8:	4b0f      	ldr	r3, [pc, #60]	@ (800f1e8 <recv_custom_msg+0x94>)
 800f1aa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800f1ae:	701a      	strb	r2, [r3, #0]
 800f1b0:	2000      	movs	r0, #0
 800f1b2:	b009      	add	sp, #36	@ 0x24
 800f1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b8:	f10d 021f 	add.w	r2, sp, #31
 800f1bc:	9200      	str	r2, [sp, #0]
 800f1be:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800f1c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f1c6:	4601      	mov	r1, r0
 800f1c8:	47a8      	blx	r5
 800f1ca:	2800      	cmp	r0, #0
 800f1cc:	d0ec      	beq.n	800f1a8 <recv_custom_msg+0x54>
 800f1ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d1e8      	bne.n	800f1a8 <recv_custom_msg+0x54>
 800f1d6:	f8cb 0000 	str.w	r0, [fp]
 800f1da:	2001      	movs	r0, #1
 800f1dc:	f8ca 4000 	str.w	r4, [sl]
 800f1e0:	b009      	add	sp, #36	@ 0x24
 800f1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e6:	bf00      	nop
 800f1e8:	2000b21c 	.word	0x2000b21c

0800f1ec <send_custom_msg>:
 800f1ec:	b530      	push	{r4, r5, lr}
 800f1ee:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800f1f2:	b087      	sub	sp, #28
 800f1f4:	4615      	mov	r5, r2
 800f1f6:	b974      	cbnz	r4, 800f216 <send_custom_msg+0x2a>
 800f1f8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800f1fc:	f10d 0317 	add.w	r3, sp, #23
 800f200:	47a0      	blx	r4
 800f202:	b108      	cbz	r0, 800f208 <send_custom_msg+0x1c>
 800f204:	42a8      	cmp	r0, r5
 800f206:	d015      	beq.n	800f234 <send_custom_msg+0x48>
 800f208:	4b0c      	ldr	r3, [pc, #48]	@ (800f23c <send_custom_msg+0x50>)
 800f20a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800f20e:	701a      	strb	r2, [r3, #0]
 800f210:	2000      	movs	r0, #0
 800f212:	b007      	add	sp, #28
 800f214:	bd30      	pop	{r4, r5, pc}
 800f216:	460b      	mov	r3, r1
 800f218:	2200      	movs	r2, #0
 800f21a:	f10d 0117 	add.w	r1, sp, #23
 800f21e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f222:	4602      	mov	r2, r0
 800f224:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800f228:	9500      	str	r5, [sp, #0]
 800f22a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800f22e:	f001 fa75 	bl	801071c <uxr_write_framed_msg>
 800f232:	e7e6      	b.n	800f202 <send_custom_msg+0x16>
 800f234:	2001      	movs	r0, #1
 800f236:	b007      	add	sp, #28
 800f238:	bd30      	pop	{r4, r5, pc}
 800f23a:	bf00      	nop
 800f23c:	2000b21c 	.word	0x2000b21c

0800f240 <uxr_set_custom_transport_callbacks>:
 800f240:	b410      	push	{r4}
 800f242:	9c01      	ldr	r4, [sp, #4]
 800f244:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800f248:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800f24c:	9b02      	ldr	r3, [sp, #8]
 800f24e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800f252:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f256:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800f25a:	4770      	bx	lr

0800f25c <uxr_init_custom_transport>:
 800f25c:	b538      	push	{r3, r4, r5, lr}
 800f25e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800f262:	b303      	cbz	r3, 800f2a6 <uxr_init_custom_transport+0x4a>
 800f264:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800f268:	4604      	mov	r4, r0
 800f26a:	b1e2      	cbz	r2, 800f2a6 <uxr_init_custom_transport+0x4a>
 800f26c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800f270:	b1ca      	cbz	r2, 800f2a6 <uxr_init_custom_transport+0x4a>
 800f272:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800f276:	b1b2      	cbz	r2, 800f2a6 <uxr_init_custom_transport+0x4a>
 800f278:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800f27c:	4798      	blx	r3
 800f27e:	4605      	mov	r5, r0
 800f280:	b188      	cbz	r0, 800f2a6 <uxr_init_custom_transport+0x4a>
 800f282:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800f286:	b98b      	cbnz	r3, 800f2ac <uxr_init_custom_transport+0x50>
 800f288:	490b      	ldr	r1, [pc, #44]	@ (800f2b8 <uxr_init_custom_transport+0x5c>)
 800f28a:	4b0c      	ldr	r3, [pc, #48]	@ (800f2bc <uxr_init_custom_transport+0x60>)
 800f28c:	4a0c      	ldr	r2, [pc, #48]	@ (800f2c0 <uxr_init_custom_transport+0x64>)
 800f28e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800f292:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f296:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800f29a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800f29e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	bd38      	pop	{r3, r4, r5, pc}
 800f2a6:	2500      	movs	r5, #0
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	bd38      	pop	{r3, r4, r5, pc}
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800f2b2:	f001 fa2d 	bl	8010710 <uxr_init_framing_io>
 800f2b6:	e7e7      	b.n	800f288 <uxr_init_custom_transport+0x2c>
 800f2b8:	0800f1ed 	.word	0x0800f1ed
 800f2bc:	0800f155 	.word	0x0800f155
 800f2c0:	0800f149 	.word	0x0800f149

0800f2c4 <uxr_close_custom_transport>:
 800f2c4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800f2c8:	4718      	bx	r3
 800f2ca:	bf00      	nop

0800f2cc <uxr_object_id>:
 800f2cc:	b082      	sub	sp, #8
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	f88d 1006 	strb.w	r1, [sp, #6]
 800f2d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f2d8:	f360 030f 	bfi	r3, r0, #0, #16
 800f2dc:	f362 431f 	bfi	r3, r2, #16, #16
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	b002      	add	sp, #8
 800f2e4:	4770      	bx	lr
 800f2e6:	bf00      	nop

0800f2e8 <uxr_object_id_from_raw>:
 800f2e8:	7843      	ldrb	r3, [r0, #1]
 800f2ea:	7801      	ldrb	r1, [r0, #0]
 800f2ec:	b082      	sub	sp, #8
 800f2ee:	f003 020f 	and.w	r2, r3, #15
 800f2f2:	f88d 2006 	strb.w	r2, [sp, #6]
 800f2f6:	091b      	lsrs	r3, r3, #4
 800f2f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f2fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f300:	2000      	movs	r0, #0
 800f302:	f363 000f 	bfi	r0, r3, #0, #16
 800f306:	f362 401f 	bfi	r0, r2, #16, #16
 800f30a:	b002      	add	sp, #8
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop

0800f310 <uxr_object_id_to_raw>:
 800f310:	4602      	mov	r2, r0
 800f312:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800f316:	b082      	sub	sp, #8
 800f318:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800f31c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800f320:	f881 c000 	strb.w	ip, [r1]
 800f324:	7048      	strb	r0, [r1, #1]
 800f326:	b002      	add	sp, #8
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop

0800f32c <uxr_buffer_cancel_data>:
 800f32c:	b510      	push	{r4, lr}
 800f32e:	b094      	sub	sp, #80	@ 0x50
 800f330:	2300      	movs	r3, #0
 800f332:	9202      	str	r2, [sp, #8]
 800f334:	9205      	str	r2, [sp, #20]
 800f336:	9301      	str	r3, [sp, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f33e:	f88d 301e 	strb.w	r3, [sp, #30]
 800f342:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800f346:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800f34a:	2308      	movs	r3, #8
 800f34c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800f350:	9300      	str	r3, [sp, #0]
 800f352:	2210      	movs	r2, #16
 800f354:	ab0c      	add	r3, sp, #48	@ 0x30
 800f356:	4604      	mov	r4, r0
 800f358:	9103      	str	r1, [sp, #12]
 800f35a:	f001 f873 	bl	8010444 <uxr_prepare_stream_to_write_submessage>
 800f35e:	b918      	cbnz	r0, 800f368 <uxr_buffer_cancel_data+0x3c>
 800f360:	4604      	mov	r4, r0
 800f362:	4620      	mov	r0, r4
 800f364:	b014      	add	sp, #80	@ 0x50
 800f366:	bd10      	pop	{r4, pc}
 800f368:	9905      	ldr	r1, [sp, #20]
 800f36a:	aa06      	add	r2, sp, #24
 800f36c:	4620      	mov	r0, r4
 800f36e:	f001 f99f 	bl	80106b0 <uxr_init_base_object_request>
 800f372:	a906      	add	r1, sp, #24
 800f374:	4604      	mov	r4, r0
 800f376:	a80c      	add	r0, sp, #48	@ 0x30
 800f378:	f003 f840 	bl	80123fc <uxr_serialize_READ_DATA_Payload>
 800f37c:	4620      	mov	r0, r4
 800f37e:	b014      	add	sp, #80	@ 0x50
 800f380:	bd10      	pop	{r4, pc}
 800f382:	bf00      	nop

0800f384 <read_submessage_format>:
 800f384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f388:	b095      	sub	sp, #84	@ 0x54
 800f38a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800f38e:	b113      	cbz	r3, 800f396 <read_submessage_format+0x12>
 800f390:	b015      	add	sp, #84	@ 0x54
 800f392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f396:	460c      	mov	r4, r1
 800f398:	4615      	mov	r5, r2
 800f39a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800f39e:	4607      	mov	r7, r0
 800f3a0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800f3a2:	9004      	str	r0, [sp, #16]
 800f3a4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800f3a6:	9005      	str	r0, [sp, #20]
 800f3a8:	1a52      	subs	r2, r2, r1
 800f3aa:	a80c      	add	r0, sp, #48	@ 0x30
 800f3ac:	4699      	mov	r9, r3
 800f3ae:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800f3b2:	f7ff fca7 	bl	800ed04 <ucdr_init_buffer>
 800f3b6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f3ba:	a80c      	add	r0, sp, #48	@ 0x30
 800f3bc:	f7ff fc76 	bl	800ecac <ucdr_set_on_full_buffer_callback>
 800f3c0:	69e2      	ldr	r2, [r4, #28]
 800f3c2:	b19a      	cbz	r2, 800f3ec <read_submessage_format+0x68>
 800f3c4:	f1b8 0f07 	cmp.w	r8, #7
 800f3c8:	f882 9014 	strb.w	r9, [r2, #20]
 800f3cc:	d040      	beq.n	800f450 <read_submessage_format+0xcc>
 800f3ce:	f1b8 0f08 	cmp.w	r8, #8
 800f3d2:	d02e      	beq.n	800f432 <read_submessage_format+0xae>
 800f3d4:	f1b8 0f06 	cmp.w	r8, #6
 800f3d8:	d011      	beq.n	800f3fe <read_submessage_format+0x7a>
 800f3da:	2301      	movs	r3, #1
 800f3dc:	7513      	strb	r3, [r2, #20]
 800f3de:	4629      	mov	r1, r5
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f7ff fcdf 	bl	800eda4 <ucdr_advance_buffer>
 800f3e6:	b015      	add	sp, #84	@ 0x54
 800f3e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3ec:	f1b8 0f07 	cmp.w	r8, #7
 800f3f0:	d02e      	beq.n	800f450 <read_submessage_format+0xcc>
 800f3f2:	f1b8 0f08 	cmp.w	r8, #8
 800f3f6:	d01c      	beq.n	800f432 <read_submessage_format+0xae>
 800f3f8:	f1b8 0f06 	cmp.w	r8, #6
 800f3fc:	d1ef      	bne.n	800f3de <read_submessage_format+0x5a>
 800f3fe:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800f402:	f1b8 0f00 	cmp.w	r8, #0
 800f406:	d011      	beq.n	800f42c <read_submessage_format+0xa8>
 800f408:	ab0c      	add	r3, sp, #48	@ 0x30
 800f40a:	e9cd 3500 	strd	r3, r5, [sp]
 800f40e:	2306      	movs	r3, #6
 800f410:	f88d 3016 	strb.w	r3, [sp, #22]
 800f414:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f418:	9302      	str	r3, [sp, #8]
 800f41a:	4632      	mov	r2, r6
 800f41c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800f420:	4638      	mov	r0, r7
 800f422:	47c0      	blx	r8
 800f424:	2301      	movs	r3, #1
 800f426:	69e2      	ldr	r2, [r4, #28]
 800f428:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f42c:	2a00      	cmp	r2, #0
 800f42e:	d1d4      	bne.n	800f3da <read_submessage_format+0x56>
 800f430:	e7d5      	b.n	800f3de <read_submessage_format+0x5a>
 800f432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f436:	2b00      	cmp	r3, #0
 800f438:	d0f8      	beq.n	800f42c <read_submessage_format+0xa8>
 800f43a:	a906      	add	r1, sp, #24
 800f43c:	a80c      	add	r0, sp, #48	@ 0x30
 800f43e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800f442:	f003 f8af 	bl	80125a4 <uxr_deserialize_SampleIdentity>
 800f446:	b9a0      	cbnz	r0, 800f472 <read_submessage_format+0xee>
 800f448:	69e2      	ldr	r2, [r4, #28]
 800f44a:	2a00      	cmp	r2, #0
 800f44c:	d1c5      	bne.n	800f3da <read_submessage_format+0x56>
 800f44e:	e7c6      	b.n	800f3de <read_submessage_format+0x5a>
 800f450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f454:	b13b      	cbz	r3, 800f466 <read_submessage_format+0xe2>
 800f456:	a906      	add	r1, sp, #24
 800f458:	a80c      	add	r0, sp, #48	@ 0x30
 800f45a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800f45e:	f002 fd67 	bl	8011f30 <uxr_deserialize_BaseObjectRequest>
 800f462:	bb60      	cbnz	r0, 800f4be <read_submessage_format+0x13a>
 800f464:	69e2      	ldr	r2, [r4, #28]
 800f466:	68a3      	ldr	r3, [r4, #8]
 800f468:	442b      	add	r3, r5
 800f46a:	60a3      	str	r3, [r4, #8]
 800f46c:	2a00      	cmp	r2, #0
 800f46e:	d1b4      	bne.n	800f3da <read_submessage_format+0x56>
 800f470:	e7b5      	b.n	800f3de <read_submessage_format+0x5a>
 800f472:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800f476:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f478:	1a52      	subs	r2, r2, r1
 800f47a:	eba8 0803 	sub.w	r8, r8, r3
 800f47e:	a80c      	add	r0, sp, #48	@ 0x30
 800f480:	f7ff fc40 	bl	800ed04 <ucdr_init_buffer>
 800f484:	44a8      	add	r8, r5
 800f486:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f48a:	a80c      	add	r0, sp, #48	@ 0x30
 800f48c:	f7ff fc0e 	bl	800ecac <ucdr_set_on_full_buffer_callback>
 800f490:	fa1f f888 	uxth.w	r8, r8
 800f494:	ab0c      	add	r3, sp, #48	@ 0x30
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	f8cd 8004 	str.w	r8, [sp, #4]
 800f49c:	2108      	movs	r1, #8
 800f49e:	f88d 1016 	strb.w	r1, [sp, #22]
 800f4a2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800f4a6:	9102      	str	r1, [sp, #8]
 800f4a8:	ab06      	add	r3, sp, #24
 800f4aa:	4632      	mov	r2, r6
 800f4ac:	9905      	ldr	r1, [sp, #20]
 800f4ae:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800f4b2:	4638      	mov	r0, r7
 800f4b4:	47b0      	blx	r6
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f4bc:	e7c4      	b.n	800f448 <read_submessage_format+0xc4>
 800f4be:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800f4c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f4c4:	1a52      	subs	r2, r2, r1
 800f4c6:	a80c      	add	r0, sp, #48	@ 0x30
 800f4c8:	eba8 0803 	sub.w	r8, r8, r3
 800f4cc:	f7ff fc1a 	bl	800ed04 <ucdr_init_buffer>
 800f4d0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f4d4:	a80c      	add	r0, sp, #48	@ 0x30
 800f4d6:	f7ff fbe9 	bl	800ecac <ucdr_set_on_full_buffer_callback>
 800f4da:	ab0c      	add	r3, sp, #48	@ 0x30
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800f4e2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f4e6:	44a8      	add	r8, r5
 800f4e8:	fa1f f888 	uxth.w	r8, r8
 800f4ec:	f8cd 8004 	str.w	r8, [sp, #4]
 800f4f0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f4f4:	2107      	movs	r1, #7
 800f4f6:	f88d 1016 	strb.w	r1, [sp, #22]
 800f4fa:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800f4fe:	9102      	str	r1, [sp, #8]
 800f500:	4632      	mov	r2, r6
 800f502:	b29b      	uxth	r3, r3
 800f504:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800f508:	9905      	ldr	r1, [sp, #20]
 800f50a:	4638      	mov	r0, r7
 800f50c:	47b0      	blx	r6
 800f50e:	2301      	movs	r3, #1
 800f510:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f514:	e7a6      	b.n	800f464 <read_submessage_format+0xe0>
 800f516:	bf00      	nop

0800f518 <on_get_fragmentation_info>:
 800f518:	b500      	push	{lr}
 800f51a:	b08b      	sub	sp, #44	@ 0x2c
 800f51c:	4601      	mov	r1, r0
 800f51e:	2204      	movs	r2, #4
 800f520:	a802      	add	r0, sp, #8
 800f522:	f7ff fbef 	bl	800ed04 <ucdr_init_buffer>
 800f526:	f10d 0305 	add.w	r3, sp, #5
 800f52a:	f10d 0206 	add.w	r2, sp, #6
 800f52e:	a901      	add	r1, sp, #4
 800f530:	a802      	add	r0, sp, #8
 800f532:	f001 fed1 	bl	80112d8 <uxr_read_submessage_header>
 800f536:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f53a:	2b0d      	cmp	r3, #13
 800f53c:	d003      	beq.n	800f546 <on_get_fragmentation_info+0x2e>
 800f53e:	2000      	movs	r0, #0
 800f540:	b00b      	add	sp, #44	@ 0x2c
 800f542:	f85d fb04 	ldr.w	pc, [sp], #4
 800f546:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f54a:	f013 0f02 	tst.w	r3, #2
 800f54e:	bf14      	ite	ne
 800f550:	2002      	movne	r0, #2
 800f552:	2001      	moveq	r0, #1
 800f554:	b00b      	add	sp, #44	@ 0x2c
 800f556:	f85d fb04 	ldr.w	pc, [sp], #4
 800f55a:	bf00      	nop

0800f55c <read_submessage_get_info>:
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	2500      	movs	r5, #0
 800f560:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800f564:	4604      	mov	r4, r0
 800f566:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800f56a:	460e      	mov	r6, r1
 800f56c:	a810      	add	r0, sp, #64	@ 0x40
 800f56e:	4629      	mov	r1, r5
 800f570:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f574:	f008 ff90 	bl	8018498 <memset>
 800f578:	a903      	add	r1, sp, #12
 800f57a:	4630      	mov	r0, r6
 800f57c:	f002 fe80 	bl	8012280 <uxr_deserialize_GET_INFO_Payload>
 800f580:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f584:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f588:	4620      	mov	r0, r4
 800f58a:	f001 f889 	bl	80106a0 <uxr_session_header_offset>
 800f58e:	462b      	mov	r3, r5
 800f590:	9000      	str	r0, [sp, #0]
 800f592:	220c      	movs	r2, #12
 800f594:	a905      	add	r1, sp, #20
 800f596:	a808      	add	r0, sp, #32
 800f598:	f7ff fba2 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 800f59c:	a910      	add	r1, sp, #64	@ 0x40
 800f59e:	a808      	add	r0, sp, #32
 800f5a0:	f002 fee0 	bl	8012364 <uxr_serialize_INFO_Payload>
 800f5a4:	9b08      	ldr	r3, [sp, #32]
 800f5a6:	462a      	mov	r2, r5
 800f5a8:	4629      	mov	r1, r5
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f001 f822 	bl	80105f4 <uxr_stamp_session_header>
 800f5b0:	a808      	add	r0, sp, #32
 800f5b2:	f7ff fbd3 	bl	800ed5c <ucdr_buffer_length>
 800f5b6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	a905      	add	r1, sp, #20
 800f5bc:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f5c0:	47a0      	blx	r4
 800f5c2:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800f5c6:	bd70      	pop	{r4, r5, r6, pc}

0800f5c8 <write_submessage_acknack.isra.0>:
 800f5c8:	b570      	push	{r4, r5, r6, lr}
 800f5ca:	b092      	sub	sp, #72	@ 0x48
 800f5cc:	4605      	mov	r5, r0
 800f5ce:	460e      	mov	r6, r1
 800f5d0:	4614      	mov	r4, r2
 800f5d2:	f001 f865 	bl	80106a0 <uxr_session_header_offset>
 800f5d6:	a905      	add	r1, sp, #20
 800f5d8:	9000      	str	r0, [sp, #0]
 800f5da:	2300      	movs	r3, #0
 800f5dc:	a80a      	add	r0, sp, #40	@ 0x28
 800f5de:	2211      	movs	r2, #17
 800f5e0:	f7ff fb7e 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 800f5e4:	2218      	movs	r2, #24
 800f5e6:	fb02 5404 	mla	r4, r2, r4, r5
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	2205      	movs	r2, #5
 800f5ee:	3450      	adds	r4, #80	@ 0x50
 800f5f0:	210a      	movs	r1, #10
 800f5f2:	a80a      	add	r0, sp, #40	@ 0x28
 800f5f4:	f001 fe56 	bl	80112a4 <uxr_buffer_submessage_header>
 800f5f8:	a903      	add	r1, sp, #12
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	f007 fa8e 	bl	8016b1c <uxr_compute_acknack>
 800f600:	ba40      	rev16	r0, r0
 800f602:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f606:	a903      	add	r1, sp, #12
 800f608:	a80a      	add	r0, sp, #40	@ 0x28
 800f60a:	f88d 6010 	strb.w	r6, [sp, #16]
 800f60e:	f002 ff19 	bl	8012444 <uxr_serialize_ACKNACK_Payload>
 800f612:	2200      	movs	r2, #0
 800f614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f616:	4611      	mov	r1, r2
 800f618:	4628      	mov	r0, r5
 800f61a:	f000 ffeb 	bl	80105f4 <uxr_stamp_session_header>
 800f61e:	a80a      	add	r0, sp, #40	@ 0x28
 800f620:	f7ff fb9c 	bl	800ed5c <ucdr_buffer_length>
 800f624:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f626:	4602      	mov	r2, r0
 800f628:	a905      	add	r1, sp, #20
 800f62a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f62e:	47a0      	blx	r4
 800f630:	b012      	add	sp, #72	@ 0x48
 800f632:	bd70      	pop	{r4, r5, r6, pc}
 800f634:	0000      	movs	r0, r0
	...

0800f638 <uxr_init_session>:
 800f638:	b510      	push	{r4, lr}
 800f63a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f670 <uxr_init_session+0x38>
 800f63e:	2300      	movs	r3, #0
 800f640:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800f644:	4604      	mov	r4, r0
 800f646:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800f64a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800f64e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800f652:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800f656:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800f65a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800f65e:	2181      	movs	r1, #129	@ 0x81
 800f660:	f000 ff34 	bl	80104cc <uxr_init_session_info>
 800f664:	f104 0008 	add.w	r0, r4, #8
 800f668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f66c:	f001 bd36 	b.w	80110dc <uxr_init_stream_storage>
	...

0800f678 <uxr_set_status_callback>:
 800f678:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop

0800f680 <uxr_set_topic_callback>:
 800f680:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop

0800f688 <uxr_set_request_callback>:
 800f688:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop

0800f690 <uxr_set_reply_callback>:
 800f690:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f694:	4770      	bx	lr
 800f696:	bf00      	nop

0800f698 <uxr_create_output_best_effort_stream>:
 800f698:	b510      	push	{r4, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	e9cd 2100 	strd	r2, r1, [sp]
 800f6a0:	4604      	mov	r4, r0
 800f6a2:	f000 fffd 	bl	80106a0 <uxr_session_header_offset>
 800f6a6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	f104 0008 	add.w	r0, r4, #8
 800f6b0:	b004      	add	sp, #16
 800f6b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6b6:	f001 bd5b 	b.w	8011170 <uxr_add_output_best_effort_buffer>
 800f6ba:	bf00      	nop

0800f6bc <uxr_create_output_reliable_stream>:
 800f6bc:	b510      	push	{r4, lr}
 800f6be:	b088      	sub	sp, #32
 800f6c0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f6c4:	4604      	mov	r4, r0
 800f6c6:	9303      	str	r3, [sp, #12]
 800f6c8:	f000 ffea 	bl	80106a0 <uxr_session_header_offset>
 800f6cc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f6d0:	9000      	str	r0, [sp, #0]
 800f6d2:	9905      	ldr	r1, [sp, #20]
 800f6d4:	f104 0008 	add.w	r0, r4, #8
 800f6d8:	f001 fd5e 	bl	8011198 <uxr_add_output_reliable_buffer>
 800f6dc:	2200      	movs	r2, #0
 800f6de:	b2c3      	uxtb	r3, r0
 800f6e0:	f363 0207 	bfi	r2, r3, #0, #8
 800f6e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f6e8:	f363 220f 	bfi	r2, r3, #8, #8
 800f6ec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f6f0:	f363 4217 	bfi	r2, r3, #16, #8
 800f6f4:	0e03      	lsrs	r3, r0, #24
 800f6f6:	f363 621f 	bfi	r2, r3, #24, #8
 800f6fa:	4610      	mov	r0, r2
 800f6fc:	b008      	add	sp, #32
 800f6fe:	bd10      	pop	{r4, pc}

0800f700 <uxr_create_input_best_effort_stream>:
 800f700:	b082      	sub	sp, #8
 800f702:	3008      	adds	r0, #8
 800f704:	b002      	add	sp, #8
 800f706:	f001 bd61 	b.w	80111cc <uxr_add_input_best_effort_buffer>
 800f70a:	bf00      	nop

0800f70c <uxr_create_input_reliable_stream>:
 800f70c:	b510      	push	{r4, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	4c0b      	ldr	r4, [pc, #44]	@ (800f740 <uxr_create_input_reliable_stream+0x34>)
 800f712:	9400      	str	r4, [sp, #0]
 800f714:	3008      	adds	r0, #8
 800f716:	f001 fd6f 	bl	80111f8 <uxr_add_input_reliable_buffer>
 800f71a:	2200      	movs	r2, #0
 800f71c:	b2c3      	uxtb	r3, r0
 800f71e:	f363 0207 	bfi	r2, r3, #0, #8
 800f722:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f726:	f363 220f 	bfi	r2, r3, #8, #8
 800f72a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f72e:	f363 4217 	bfi	r2, r3, #16, #8
 800f732:	0e03      	lsrs	r3, r0, #24
 800f734:	f363 621f 	bfi	r2, r3, #24, #8
 800f738:	4610      	mov	r0, r2
 800f73a:	b004      	add	sp, #16
 800f73c:	bd10      	pop	{r4, pc}
 800f73e:	bf00      	nop
 800f740:	0800f519 	.word	0x0800f519

0800f744 <uxr_epoch_millis>:
 800f744:	b510      	push	{r4, lr}
 800f746:	4604      	mov	r4, r0
 800f748:	f001 fe0c 	bl	8011364 <uxr_nanos>
 800f74c:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 800f750:	1ac0      	subs	r0, r0, r3
 800f752:	4a04      	ldr	r2, [pc, #16]	@ (800f764 <uxr_epoch_millis+0x20>)
 800f754:	f04f 0300 	mov.w	r3, #0
 800f758:	eb61 0104 	sbc.w	r1, r1, r4
 800f75c:	f7f1 fa34 	bl	8000bc8 <__aeabi_ldivmod>
 800f760:	bd10      	pop	{r4, pc}
 800f762:	bf00      	nop
 800f764:	000f4240 	.word	0x000f4240

0800f768 <uxr_epoch_nanos>:
 800f768:	b510      	push	{r4, lr}
 800f76a:	4604      	mov	r4, r0
 800f76c:	f001 fdfa 	bl	8011364 <uxr_nanos>
 800f770:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f774:	1ac0      	subs	r0, r0, r3
 800f776:	eb61 0102 	sbc.w	r1, r1, r2
 800f77a:	bd10      	pop	{r4, pc}

0800f77c <uxr_flash_output_streams>:
 800f77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f780:	7e03      	ldrb	r3, [r0, #24]
 800f782:	b084      	sub	sp, #16
 800f784:	4604      	mov	r4, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d035      	beq.n	800f7f6 <uxr_flash_output_streams+0x7a>
 800f78a:	f04f 0900 	mov.w	r9, #0
 800f78e:	4648      	mov	r0, r9
 800f790:	f10d 0802 	add.w	r8, sp, #2
 800f794:	af03      	add	r7, sp, #12
 800f796:	ae02      	add	r6, sp, #8
 800f798:	e006      	b.n	800f7a8 <uxr_flash_output_streams+0x2c>
 800f79a:	7e23      	ldrb	r3, [r4, #24]
 800f79c:	f109 0901 	add.w	r9, r9, #1
 800f7a0:	fa5f f089 	uxtb.w	r0, r9
 800f7a4:	4283      	cmp	r3, r0
 800f7a6:	d926      	bls.n	800f7f6 <uxr_flash_output_streams+0x7a>
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	4611      	mov	r1, r2
 800f7ac:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800f7b0:	f001 fc40 	bl	8011034 <uxr_stream_id>
 800f7b4:	3508      	adds	r5, #8
 800f7b6:	4684      	mov	ip, r0
 800f7b8:	4643      	mov	r3, r8
 800f7ba:	463a      	mov	r2, r7
 800f7bc:	4631      	mov	r1, r6
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f8cd c004 	str.w	ip, [sp, #4]
 800f7c4:	f007 fa30 	bl	8016c28 <uxr_prepare_best_effort_buffer_to_send>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d0e6      	beq.n	800f79a <uxr_flash_output_streams+0x1e>
 800f7cc:	9b02      	ldr	r3, [sp, #8]
 800f7ce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f7d2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	f000 ff0c 	bl	80105f4 <uxr_stamp_session_header>
 800f7dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f7de:	9a03      	ldr	r2, [sp, #12]
 800f7e0:	685d      	ldr	r5, [r3, #4]
 800f7e2:	6818      	ldr	r0, [r3, #0]
 800f7e4:	9902      	ldr	r1, [sp, #8]
 800f7e6:	47a8      	blx	r5
 800f7e8:	f109 0901 	add.w	r9, r9, #1
 800f7ec:	7e23      	ldrb	r3, [r4, #24]
 800f7ee:	fa5f f089 	uxtb.w	r0, r9
 800f7f2:	4283      	cmp	r3, r0
 800f7f4:	d8d8      	bhi.n	800f7a8 <uxr_flash_output_streams+0x2c>
 800f7f6:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f7fa:	b38b      	cbz	r3, 800f860 <uxr_flash_output_streams+0xe4>
 800f7fc:	f04f 0900 	mov.w	r9, #0
 800f800:	f10d 0802 	add.w	r8, sp, #2
 800f804:	af03      	add	r7, sp, #12
 800f806:	ae02      	add	r6, sp, #8
 800f808:	4648      	mov	r0, r9
 800f80a:	2201      	movs	r2, #1
 800f80c:	2102      	movs	r1, #2
 800f80e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800f812:	f001 fc0f 	bl	8011034 <uxr_stream_id>
 800f816:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800f81a:	3520      	adds	r5, #32
 800f81c:	9001      	str	r0, [sp, #4]
 800f81e:	e00d      	b.n	800f83c <uxr_flash_output_streams+0xc0>
 800f820:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f824:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f828:	9b02      	ldr	r3, [sp, #8]
 800f82a:	f000 fee3 	bl	80105f4 <uxr_stamp_session_header>
 800f82e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f830:	9a03      	ldr	r2, [sp, #12]
 800f832:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f836:	9902      	ldr	r1, [sp, #8]
 800f838:	6818      	ldr	r0, [r3, #0]
 800f83a:	47d0      	blx	sl
 800f83c:	4643      	mov	r3, r8
 800f83e:	463a      	mov	r2, r7
 800f840:	4631      	mov	r1, r6
 800f842:	4628      	mov	r0, r5
 800f844:	f007 fc0e 	bl	8017064 <uxr_prepare_next_reliable_buffer_to_send>
 800f848:	4603      	mov	r3, r0
 800f84a:	4620      	mov	r0, r4
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d1e7      	bne.n	800f820 <uxr_flash_output_streams+0xa4>
 800f850:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f854:	f109 0901 	add.w	r9, r9, #1
 800f858:	fa5f f089 	uxtb.w	r0, r9
 800f85c:	4283      	cmp	r3, r0
 800f85e:	d8d4      	bhi.n	800f80a <uxr_flash_output_streams+0x8e>
 800f860:	b004      	add	sp, #16
 800f862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f866:	bf00      	nop

0800f868 <read_submessage_info>:
 800f868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f86c:	460d      	mov	r5, r1
 800f86e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f872:	4669      	mov	r1, sp
 800f874:	4607      	mov	r7, r0
 800f876:	4628      	mov	r0, r5
 800f878:	f002 fc10 	bl	801209c <uxr_deserialize_BaseObjectReply>
 800f87c:	a902      	add	r1, sp, #8
 800f87e:	4604      	mov	r4, r0
 800f880:	4628      	mov	r0, r5
 800f882:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f886:	f7fd ff43 	bl	800d710 <ucdr_deserialize_bool>
 800f88a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f88e:	4004      	ands	r4, r0
 800f890:	b2e4      	uxtb	r4, r4
 800f892:	b95b      	cbnz	r3, 800f8ac <read_submessage_info+0x44>
 800f894:	a987      	add	r1, sp, #540	@ 0x21c
 800f896:	4628      	mov	r0, r5
 800f898:	f7fd ff3a 	bl	800d710 <ucdr_deserialize_bool>
 800f89c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f8a0:	4606      	mov	r6, r0
 800f8a2:	b94b      	cbnz	r3, 800f8b8 <read_submessage_info+0x50>
 800f8a4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ac:	a903      	add	r1, sp, #12
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	f002 fa9c 	bl	8011dec <uxr_deserialize_ObjectVariant>
 800f8b4:	4004      	ands	r4, r0
 800f8b6:	e7ed      	b.n	800f894 <read_submessage_info+0x2c>
 800f8b8:	a988      	add	r1, sp, #544	@ 0x220
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	f7fd ff56 	bl	800d76c <ucdr_deserialize_uint8_t>
 800f8c0:	4234      	tst	r4, r6
 800f8c2:	d0ef      	beq.n	800f8a4 <read_submessage_info+0x3c>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d0ed      	beq.n	800f8a4 <read_submessage_info+0x3c>
 800f8c8:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f8cc:	2b0d      	cmp	r3, #13
 800f8ce:	d1e9      	bne.n	800f8a4 <read_submessage_info+0x3c>
 800f8d0:	a98a      	add	r1, sp, #552	@ 0x228
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f7fe fcf0 	bl	800e2b8 <ucdr_deserialize_int16_t>
 800f8d8:	b140      	cbz	r0, 800f8ec <read_submessage_info+0x84>
 800f8da:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	dd07      	ble.n	800f8f2 <read_submessage_info+0x8a>
 800f8e2:	f1b8 0f00 	cmp.w	r8, #0
 800f8e6:	bf14      	ite	ne
 800f8e8:	2001      	movne	r0, #1
 800f8ea:	2002      	moveq	r0, #2
 800f8ec:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f8f0:	e7d8      	b.n	800f8a4 <read_submessage_info+0x3c>
 800f8f2:	2000      	movs	r0, #0
 800f8f4:	e7fa      	b.n	800f8ec <read_submessage_info+0x84>
 800f8f6:	bf00      	nop

0800f8f8 <read_submessage_list>:
 800f8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fc:	b097      	sub	sp, #92	@ 0x5c
 800f8fe:	4ec1      	ldr	r6, [pc, #772]	@ (800fc04 <read_submessage_list+0x30c>)
 800f900:	9209      	str	r2, [sp, #36]	@ 0x24
 800f902:	4604      	mov	r4, r0
 800f904:	460d      	mov	r5, r1
 800f906:	f04f 0801 	mov.w	r8, #1
 800f90a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f90e:	aa0c      	add	r2, sp, #48	@ 0x30
 800f910:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f914:	4628      	mov	r0, r5
 800f916:	f001 fcdf 	bl	80112d8 <uxr_read_submessage_header>
 800f91a:	2800      	cmp	r0, #0
 800f91c:	f000 813e 	beq.w	800fb9c <read_submessage_list+0x2a4>
 800f920:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800f924:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f928:	3b02      	subs	r3, #2
 800f92a:	2b0d      	cmp	r3, #13
 800f92c:	d8ed      	bhi.n	800f90a <read_submessage_list+0x12>
 800f92e:	a101      	add	r1, pc, #4	@ (adr r1, 800f934 <read_submessage_list+0x3c>)
 800f930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f934:	0800fb93 	.word	0x0800fb93
 800f938:	0800f90b 	.word	0x0800f90b
 800f93c:	0800fb83 	.word	0x0800fb83
 800f940:	0800fb21 	.word	0x0800fb21
 800f944:	0800fb17 	.word	0x0800fb17
 800f948:	0800f90b 	.word	0x0800f90b
 800f94c:	0800f90b 	.word	0x0800f90b
 800f950:	0800fa77 	.word	0x0800fa77
 800f954:	0800fa07 	.word	0x0800fa07
 800f958:	0800f9c7 	.word	0x0800f9c7
 800f95c:	0800f90b 	.word	0x0800f90b
 800f960:	0800f90b 	.word	0x0800f90b
 800f964:	0800f90b 	.word	0x0800f90b
 800f968:	0800f96d 	.word	0x0800f96d
 800f96c:	a910      	add	r1, sp, #64	@ 0x40
 800f96e:	4628      	mov	r0, r5
 800f970:	f002 fdc6 	bl	8012500 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f974:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800f978:	f1b9 0f00 	cmp.w	r9, #0
 800f97c:	f000 8116 	beq.w	800fbac <read_submessage_list+0x2b4>
 800f980:	f001 fcf0 	bl	8011364 <uxr_nanos>
 800f984:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f986:	4602      	mov	r2, r0
 800f988:	460b      	mov	r3, r1
 800f98a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f98c:	2100      	movs	r1, #0
 800f98e:	468c      	mov	ip, r1
 800f990:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f994:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f998:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f99a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f99c:	468c      	mov	ip, r1
 800f99e:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f9a2:	46e2      	mov	sl, ip
 800f9a4:	46bc      	mov	ip, r7
 800f9a6:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f9aa:	fbc0 7106 	smlal	r7, r1, r0, r6
 800f9ae:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800f9b2:	e9cd 7100 	strd	r7, r1, [sp]
 800f9b6:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f9ba:	9106      	str	r1, [sp, #24]
 800f9bc:	4620      	mov	r0, r4
 800f9be:	47c8      	blx	r9
 800f9c0:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800f9c4:	e7a1      	b.n	800f90a <read_submessage_list+0x12>
 800f9c6:	a910      	add	r1, sp, #64	@ 0x40
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	f002 fd79 	bl	80124c0 <uxr_deserialize_HEARTBEAT_Payload>
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f9d4:	f001 fb58 	bl	8011088 <uxr_stream_id_from_raw>
 800f9d8:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f9dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f9de:	4639      	mov	r1, r7
 800f9e0:	f104 0008 	add.w	r0, r4, #8
 800f9e4:	f001 fc3e 	bl	8011264 <uxr_get_input_reliable_stream>
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	d08e      	beq.n	800f90a <read_submessage_list+0x12>
 800f9ec:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f9f0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f9f4:	f007 f886 	bl	8016b04 <uxr_process_heartbeat>
 800f9f8:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800f9fc:	463a      	mov	r2, r7
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f7ff fde2 	bl	800f5c8 <write_submessage_acknack.isra.0>
 800fa04:	e781      	b.n	800f90a <read_submessage_list+0x12>
 800fa06:	a910      	add	r1, sp, #64	@ 0x40
 800fa08:	4628      	mov	r0, r5
 800fa0a:	f002 fd31 	bl	8012470 <uxr_deserialize_ACKNACK_Payload>
 800fa0e:	2100      	movs	r1, #0
 800fa10:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800fa14:	f001 fb38 	bl	8011088 <uxr_stream_id_from_raw>
 800fa18:	900d      	str	r0, [sp, #52]	@ 0x34
 800fa1a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800fa1e:	f104 0008 	add.w	r0, r4, #8
 800fa22:	f001 fc0b 	bl	801123c <uxr_get_output_reliable_stream>
 800fa26:	4607      	mov	r7, r0
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	f43f af6e 	beq.w	800f90a <read_submessage_list+0x12>
 800fa2e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800fa32:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800fa36:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800fa3a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800fa3e:	b289      	uxth	r1, r1
 800fa40:	f007 fbba 	bl	80171b8 <uxr_process_acknack>
 800fa44:	4638      	mov	r0, r7
 800fa46:	f007 fb77 	bl	8017138 <uxr_begin_output_nack_buffer_it>
 800fa4a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800fa4e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800fa52:	e006      	b.n	800fa62 <read_submessage_list+0x16a>
 800fa54:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fa56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fa58:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800fa5c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fa5e:	6818      	ldr	r0, [r3, #0]
 800fa60:	47c8      	blx	r9
 800fa62:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800fa66:	aa0f      	add	r2, sp, #60	@ 0x3c
 800fa68:	4651      	mov	r1, sl
 800fa6a:	4638      	mov	r0, r7
 800fa6c:	f007 fb66 	bl	801713c <uxr_next_reliable_nack_buffer_to_send>
 800fa70:	2800      	cmp	r0, #0
 800fa72:	d1ef      	bne.n	800fa54 <read_submessage_list+0x15c>
 800fa74:	e749      	b.n	800f90a <read_submessage_list+0x12>
 800fa76:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800fa7a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800fa7e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800fa82:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800fa86:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800fa8a:	4651      	mov	r1, sl
 800fa8c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fa90:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800fa94:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800fa98:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800faa2:	f002 fa45 	bl	8011f30 <uxr_deserialize_BaseObjectRequest>
 800faa6:	4650      	mov	r0, sl
 800faa8:	a90f      	add	r1, sp, #60	@ 0x3c
 800faaa:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800faae:	f000 fe1d 	bl	80106ec <uxr_parse_base_object_request>
 800fab2:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800fab6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fab8:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800fabc:	9110      	str	r1, [sp, #64]	@ 0x40
 800fabe:	3f04      	subs	r7, #4
 800fac0:	f009 090e 	and.w	r9, r9, #14
 800fac4:	b2bf      	uxth	r7, r7
 800fac6:	f1bb 0f00 	cmp.w	fp, #0
 800faca:	d006      	beq.n	800fada <read_submessage_list+0x1e2>
 800facc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800fad0:	9300      	str	r3, [sp, #0]
 800fad2:	4652      	mov	r2, sl
 800fad4:	2300      	movs	r3, #0
 800fad6:	4620      	mov	r0, r4
 800fad8:	47d8      	blx	fp
 800fada:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800fadc:	b16a      	cbz	r2, 800fafa <read_submessage_list+0x202>
 800fade:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800fae0:	2100      	movs	r1, #0
 800fae2:	3802      	subs	r0, #2
 800fae4:	e002      	b.n	800faec <read_submessage_list+0x1f4>
 800fae6:	3101      	adds	r1, #1
 800fae8:	4291      	cmp	r1, r2
 800faea:	d006      	beq.n	800fafa <read_submessage_list+0x202>
 800faec:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800faf0:	4553      	cmp	r3, sl
 800faf2:	d1f8      	bne.n	800fae6 <read_submessage_list+0x1ee>
 800faf4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800faf6:	2200      	movs	r2, #0
 800faf8:	545a      	strb	r2, [r3, r1]
 800fafa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800fafe:	9102      	str	r1, [sp, #8]
 800fb00:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fb02:	9101      	str	r1, [sp, #4]
 800fb04:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fb06:	9100      	str	r1, [sp, #0]
 800fb08:	464b      	mov	r3, r9
 800fb0a:	463a      	mov	r2, r7
 800fb0c:	4629      	mov	r1, r5
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f7ff fc38 	bl	800f384 <read_submessage_format>
 800fb14:	e6f9      	b.n	800f90a <read_submessage_list+0x12>
 800fb16:	4629      	mov	r1, r5
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f7ff fea5 	bl	800f868 <read_submessage_info>
 800fb1e:	e6f4      	b.n	800f90a <read_submessage_list+0x12>
 800fb20:	2a00      	cmp	r2, #0
 800fb22:	d03e      	beq.n	800fba2 <read_submessage_list+0x2aa>
 800fb24:	a910      	add	r1, sp, #64	@ 0x40
 800fb26:	4628      	mov	r0, r5
 800fb28:	f002 fbfe 	bl	8012328 <uxr_deserialize_STATUS_Payload>
 800fb2c:	a90e      	add	r1, sp, #56	@ 0x38
 800fb2e:	aa0d      	add	r2, sp, #52	@ 0x34
 800fb30:	a810      	add	r0, sp, #64	@ 0x40
 800fb32:	f000 fddb 	bl	80106ec <uxr_parse_base_object_request>
 800fb36:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800fb3a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fb3c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800fb40:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800fb44:	910f      	str	r1, [sp, #60]	@ 0x3c
 800fb46:	f1ba 0f00 	cmp.w	sl, #0
 800fb4a:	d006      	beq.n	800fb5a <read_submessage_list+0x262>
 800fb4c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800fb50:	9300      	str	r3, [sp, #0]
 800fb52:	463a      	mov	r2, r7
 800fb54:	464b      	mov	r3, r9
 800fb56:	4620      	mov	r0, r4
 800fb58:	47d0      	blx	sl
 800fb5a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800fb5c:	2a00      	cmp	r2, #0
 800fb5e:	f43f aed4 	beq.w	800f90a <read_submessage_list+0x12>
 800fb62:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800fb64:	2100      	movs	r1, #0
 800fb66:	3802      	subs	r0, #2
 800fb68:	e003      	b.n	800fb72 <read_submessage_list+0x27a>
 800fb6a:	3101      	adds	r1, #1
 800fb6c:	4291      	cmp	r1, r2
 800fb6e:	f43f aecc 	beq.w	800f90a <read_submessage_list+0x12>
 800fb72:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fb76:	42bb      	cmp	r3, r7
 800fb78:	d1f7      	bne.n	800fb6a <read_submessage_list+0x272>
 800fb7a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fb7c:	f803 9001 	strb.w	r9, [r3, r1]
 800fb80:	e6c3      	b.n	800f90a <read_submessage_list+0x12>
 800fb82:	2a00      	cmp	r2, #0
 800fb84:	f47f aec1 	bne.w	800f90a <read_submessage_list+0x12>
 800fb88:	4629      	mov	r1, r5
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f000 fcf4 	bl	8010578 <uxr_read_create_session_status>
 800fb90:	e6bb      	b.n	800f90a <read_submessage_list+0x12>
 800fb92:	4629      	mov	r1, r5
 800fb94:	4620      	mov	r0, r4
 800fb96:	f7ff fce1 	bl	800f55c <read_submessage_get_info>
 800fb9a:	e6b6      	b.n	800f90a <read_submessage_list+0x12>
 800fb9c:	b017      	add	sp, #92	@ 0x5c
 800fb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba2:	4629      	mov	r1, r5
 800fba4:	4620      	mov	r0, r4
 800fba6:	f000 fcf3 	bl	8010590 <uxr_read_delete_session_status>
 800fbaa:	e6ae      	b.n	800f90a <read_submessage_list+0x12>
 800fbac:	f001 fbda 	bl	8011364 <uxr_nanos>
 800fbb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fbb2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fbb4:	464f      	mov	r7, r9
 800fbb6:	fbc3 2706 	smlal	r2, r7, r3, r6
 800fbba:	1812      	adds	r2, r2, r0
 800fbbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fbbe:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800fbc0:	eb47 0101 	adc.w	r1, r7, r1
 800fbc4:	464f      	mov	r7, r9
 800fbc6:	fbc3 0706 	smlal	r0, r7, r3, r6
 800fbca:	463b      	mov	r3, r7
 800fbcc:	4684      	mov	ip, r0
 800fbce:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800fbd2:	fbc7 0906 	smlal	r0, r9, r7, r6
 800fbd6:	eb1c 0c00 	adds.w	ip, ip, r0
 800fbda:	464f      	mov	r7, r9
 800fbdc:	eb43 0307 	adc.w	r3, r3, r7
 800fbe0:	ebb2 0c0c 	subs.w	ip, r2, ip
 800fbe4:	eb61 0303 	sbc.w	r3, r1, r3
 800fbe8:	0fda      	lsrs	r2, r3, #31
 800fbea:	eb12 020c 	adds.w	r2, r2, ip
 800fbee:	f143 0300 	adc.w	r3, r3, #0
 800fbf2:	0852      	lsrs	r2, r2, #1
 800fbf4:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800fbf8:	105b      	asrs	r3, r3, #1
 800fbfa:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800fbfe:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800fc02:	e6dd      	b.n	800f9c0 <read_submessage_list+0xc8>
 800fc04:	3b9aca00 	.word	0x3b9aca00

0800fc08 <listen_message_reliably>:
 800fc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0c:	1e0b      	subs	r3, r1, #0
 800fc0e:	b09d      	sub	sp, #116	@ 0x74
 800fc10:	bfb8      	it	lt
 800fc12:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800fc16:	4680      	mov	r8, r0
 800fc18:	9305      	str	r3, [sp, #20]
 800fc1a:	f001 fb89 	bl	8011330 <uxr_millis>
 800fc1e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800fc22:	4681      	mov	r9, r0
 800fc24:	2a00      	cmp	r2, #0
 800fc26:	f000 80a1 	beq.w	800fd6c <listen_message_reliably+0x164>
 800fc2a:	2600      	movs	r6, #0
 800fc2c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fc30:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fc34:	9303      	str	r3, [sp, #12]
 800fc36:	4630      	mov	r0, r6
 800fc38:	460f      	mov	r7, r1
 800fc3a:	e00f      	b.n	800fc5c <listen_message_reliably+0x54>
 800fc3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fc40:	9903      	ldr	r1, [sp, #12]
 800fc42:	455a      	cmp	r2, fp
 800fc44:	f106 0601 	add.w	r6, r6, #1
 800fc48:	eb73 0101 	sbcs.w	r1, r3, r1
 800fc4c:	b2f0      	uxtb	r0, r6
 800fc4e:	da01      	bge.n	800fc54 <listen_message_reliably+0x4c>
 800fc50:	4693      	mov	fp, r2
 800fc52:	9303      	str	r3, [sp, #12]
 800fc54:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800fc58:	4283      	cmp	r3, r0
 800fc5a:	d960      	bls.n	800fd1e <listen_message_reliably+0x116>
 800fc5c:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800fc60:	2102      	movs	r1, #2
 800fc62:	2201      	movs	r2, #1
 800fc64:	f001 f9e6 	bl	8011034 <uxr_stream_id>
 800fc68:	00e4      	lsls	r4, r4, #3
 800fc6a:	f104 0520 	add.w	r5, r4, #32
 800fc6e:	4445      	add	r5, r8
 800fc70:	4601      	mov	r1, r0
 800fc72:	463b      	mov	r3, r7
 800fc74:	464a      	mov	r2, r9
 800fc76:	4628      	mov	r0, r5
 800fc78:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc7a:	f007 fa33 	bl	80170e4 <uxr_update_output_stream_heartbeat_timestamp>
 800fc7e:	eb08 0304 	add.w	r3, r8, r4
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d0da      	beq.n	800fc3c <listen_message_reliably+0x34>
 800fc86:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fc8a:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800fc8e:	9304      	str	r3, [sp, #16]
 800fc90:	4640      	mov	r0, r8
 800fc92:	f000 fd05 	bl	80106a0 <uxr_session_header_offset>
 800fc96:	3501      	adds	r5, #1
 800fc98:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800fc9c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800fca0:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800fca4:	2300      	movs	r3, #0
 800fca6:	2211      	movs	r2, #17
 800fca8:	9000      	str	r0, [sp, #0]
 800fcaa:	a90c      	add	r1, sp, #48	@ 0x30
 800fcac:	4650      	mov	r0, sl
 800fcae:	f7ff f817 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	2205      	movs	r2, #5
 800fcb6:	210b      	movs	r1, #11
 800fcb8:	4650      	mov	r0, sl
 800fcba:	f001 faf3 	bl	80112a4 <uxr_buffer_submessage_header>
 800fcbe:	8968      	ldrh	r0, [r5, #10]
 800fcc0:	2101      	movs	r1, #1
 800fcc2:	f007 fad1 	bl	8017268 <uxr_seq_num_add>
 800fcc6:	892b      	ldrh	r3, [r5, #8]
 800fcc8:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800fccc:	4602      	mov	r2, r0
 800fcce:	9b04      	ldr	r3, [sp, #16]
 800fcd0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800fcd4:	a90a      	add	r1, sp, #40	@ 0x28
 800fcd6:	4650      	mov	r0, sl
 800fcd8:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800fcdc:	f002 fbdc 	bl	8012498 <uxr_serialize_HEARTBEAT_Payload>
 800fce0:	2200      	movs	r2, #0
 800fce2:	4611      	mov	r1, r2
 800fce4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fce6:	4640      	mov	r0, r8
 800fce8:	f000 fc84 	bl	80105f4 <uxr_stamp_session_header>
 800fcec:	4650      	mov	r0, sl
 800fcee:	f7ff f835 	bl	800ed5c <ucdr_buffer_length>
 800fcf2:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	a90c      	add	r1, sp, #48	@ 0x30
 800fcfa:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fcfe:	4444      	add	r4, r8
 800fd00:	47a8      	blx	r5
 800fd02:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800fd06:	9903      	ldr	r1, [sp, #12]
 800fd08:	455a      	cmp	r2, fp
 800fd0a:	f106 0601 	add.w	r6, r6, #1
 800fd0e:	eb73 0101 	sbcs.w	r1, r3, r1
 800fd12:	b2f0      	uxtb	r0, r6
 800fd14:	db9c      	blt.n	800fc50 <listen_message_reliably+0x48>
 800fd16:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800fd1a:	4283      	cmp	r3, r0
 800fd1c:	d89e      	bhi.n	800fc5c <listen_message_reliably+0x54>
 800fd1e:	9a03      	ldr	r2, [sp, #12]
 800fd20:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fd24:	429a      	cmp	r2, r3
 800fd26:	bf08      	it	eq
 800fd28:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800fd2c:	d01e      	beq.n	800fd6c <listen_message_reliably+0x164>
 800fd2e:	ebab 0309 	sub.w	r3, fp, r9
 800fd32:	9905      	ldr	r1, [sp, #20]
 800fd34:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	bf08      	it	eq
 800fd3c:	2301      	moveq	r3, #1
 800fd3e:	4299      	cmp	r1, r3
 800fd40:	bfa8      	it	ge
 800fd42:	4619      	movge	r1, r3
 800fd44:	6894      	ldr	r4, [r2, #8]
 800fd46:	6810      	ldr	r0, [r2, #0]
 800fd48:	4689      	mov	r9, r1
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	aa08      	add	r2, sp, #32
 800fd4e:	a907      	add	r1, sp, #28
 800fd50:	47a0      	blx	r4
 800fd52:	b968      	cbnz	r0, 800fd70 <listen_message_reliably+0x168>
 800fd54:	9b05      	ldr	r3, [sp, #20]
 800fd56:	eba3 0309 	sub.w	r3, r3, r9
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	9305      	str	r3, [sp, #20]
 800fd5e:	f73f af5c 	bgt.w	800fc1a <listen_message_reliably+0x12>
 800fd62:	4604      	mov	r4, r0
 800fd64:	4620      	mov	r0, r4
 800fd66:	b01d      	add	sp, #116	@ 0x74
 800fd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd6c:	9b05      	ldr	r3, [sp, #20]
 800fd6e:	e7e0      	b.n	800fd32 <listen_message_reliably+0x12a>
 800fd70:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fd74:	4604      	mov	r4, r0
 800fd76:	a80c      	add	r0, sp, #48	@ 0x30
 800fd78:	f7fe ffc4 	bl	800ed04 <ucdr_init_buffer>
 800fd7c:	2500      	movs	r5, #0
 800fd7e:	f10d 031a 	add.w	r3, sp, #26
 800fd82:	aa06      	add	r2, sp, #24
 800fd84:	a90c      	add	r1, sp, #48	@ 0x30
 800fd86:	4640      	mov	r0, r8
 800fd88:	f88d 5018 	strb.w	r5, [sp, #24]
 800fd8c:	f000 fc46 	bl	801061c <uxr_read_session_header>
 800fd90:	b918      	cbnz	r0, 800fd9a <listen_message_reliably+0x192>
 800fd92:	4620      	mov	r0, r4
 800fd94:	b01d      	add	sp, #116	@ 0x74
 800fd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9a:	4629      	mov	r1, r5
 800fd9c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fda0:	f001 f972 	bl	8011088 <uxr_stream_id_from_raw>
 800fda4:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800fda8:	2d01      	cmp	r5, #1
 800fdaa:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fdae:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800fdb2:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fdb6:	d04b      	beq.n	800fe50 <listen_message_reliably+0x248>
 800fdb8:	2d02      	cmp	r5, #2
 800fdba:	d00f      	beq.n	800fddc <listen_message_reliably+0x1d4>
 800fdbc:	2d00      	cmp	r5, #0
 800fdbe:	d1e8      	bne.n	800fd92 <listen_message_reliably+0x18a>
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	4628      	mov	r0, r5
 800fdc4:	f001 f960 	bl	8011088 <uxr_stream_id_from_raw>
 800fdc8:	a90c      	add	r1, sp, #48	@ 0x30
 800fdca:	4602      	mov	r2, r0
 800fdcc:	4640      	mov	r0, r8
 800fdce:	920a      	str	r2, [sp, #40]	@ 0x28
 800fdd0:	f7ff fd92 	bl	800f8f8 <read_submessage_list>
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	b01d      	add	sp, #116	@ 0x74
 800fdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fddc:	4631      	mov	r1, r6
 800fdde:	f108 0008 	add.w	r0, r8, #8
 800fde2:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800fde6:	f001 fa3d 	bl	8011264 <uxr_get_input_reliable_stream>
 800fdea:	4607      	mov	r7, r0
 800fdec:	b338      	cbz	r0, 800fe3e <listen_message_reliably+0x236>
 800fdee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fdf0:	9203      	str	r2, [sp, #12]
 800fdf2:	a80c      	add	r0, sp, #48	@ 0x30
 800fdf4:	f7fe ffb6 	bl	800ed64 <ucdr_buffer_remaining>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	f10d 0019 	add.w	r0, sp, #25
 800fdfe:	9000      	str	r0, [sp, #0]
 800fe00:	9a03      	ldr	r2, [sp, #12]
 800fe02:	4651      	mov	r1, sl
 800fe04:	4638      	mov	r0, r7
 800fe06:	f006 fd83 	bl	8016910 <uxr_receive_reliable_message>
 800fe0a:	b1c0      	cbz	r0, 800fe3e <listen_message_reliably+0x236>
 800fe0c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fe10:	b393      	cbz	r3, 800fe78 <listen_message_reliably+0x270>
 800fe12:	ad14      	add	r5, sp, #80	@ 0x50
 800fe14:	f04f 0a02 	mov.w	sl, #2
 800fe18:	e00a      	b.n	800fe30 <listen_message_reliably+0x228>
 800fe1a:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800fe1e:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800fe22:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800fe26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe28:	4629      	mov	r1, r5
 800fe2a:	4640      	mov	r0, r8
 800fe2c:	f7ff fd64 	bl	800f8f8 <read_submessage_list>
 800fe30:	2204      	movs	r2, #4
 800fe32:	4629      	mov	r1, r5
 800fe34:	4638      	mov	r0, r7
 800fe36:	f006 fdeb 	bl	8016a10 <uxr_next_input_reliable_buffer_available>
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	d1ed      	bne.n	800fe1a <listen_message_reliably+0x212>
 800fe3e:	4640      	mov	r0, r8
 800fe40:	4632      	mov	r2, r6
 800fe42:	4649      	mov	r1, r9
 800fe44:	f7ff fbc0 	bl	800f5c8 <write_submessage_acknack.isra.0>
 800fe48:	4620      	mov	r0, r4
 800fe4a:	b01d      	add	sp, #116	@ 0x74
 800fe4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe50:	4631      	mov	r1, r6
 800fe52:	f108 0008 	add.w	r0, r8, #8
 800fe56:	f001 f9fb 	bl	8011250 <uxr_get_input_best_effort_stream>
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d099      	beq.n	800fd92 <listen_message_reliably+0x18a>
 800fe5e:	4651      	mov	r1, sl
 800fe60:	f006 fcc2 	bl	80167e8 <uxr_receive_best_effort_message>
 800fe64:	2800      	cmp	r0, #0
 800fe66:	d094      	beq.n	800fd92 <listen_message_reliably+0x18a>
 800fe68:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800fe6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe6e:	a90c      	add	r1, sp, #48	@ 0x30
 800fe70:	4640      	mov	r0, r8
 800fe72:	f7ff fd41 	bl	800f8f8 <read_submessage_list>
 800fe76:	e78c      	b.n	800fd92 <listen_message_reliably+0x18a>
 800fe78:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800fe7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe7e:	a90c      	add	r1, sp, #48	@ 0x30
 800fe80:	4640      	mov	r0, r8
 800fe82:	f7ff fd39 	bl	800f8f8 <read_submessage_list>
 800fe86:	e7c4      	b.n	800fe12 <listen_message_reliably+0x20a>

0800fe88 <uxr_run_session_timeout>:
 800fe88:	b570      	push	{r4, r5, r6, lr}
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	f001 fa4f 	bl	8011330 <uxr_millis>
 800fe92:	4606      	mov	r6, r0
 800fe94:	4620      	mov	r0, r4
 800fe96:	f7ff fc71 	bl	800f77c <uxr_flash_output_streams>
 800fe9a:	4629      	mov	r1, r5
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	f7ff feb3 	bl	800fc08 <listen_message_reliably>
 800fea2:	f001 fa45 	bl	8011330 <uxr_millis>
 800fea6:	1b83      	subs	r3, r0, r6
 800fea8:	1ae9      	subs	r1, r5, r3
 800feaa:	2900      	cmp	r1, #0
 800feac:	dcf6      	bgt.n	800fe9c <uxr_run_session_timeout+0x14>
 800feae:	f104 0008 	add.w	r0, r4, #8
 800feb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800feb6:	f001 b9df 	b.w	8011278 <uxr_output_streams_confirmed>
 800feba:	bf00      	nop

0800febc <uxr_run_session_until_data>:
 800febc:	b570      	push	{r4, r5, r6, lr}
 800febe:	4604      	mov	r4, r0
 800fec0:	460d      	mov	r5, r1
 800fec2:	f001 fa35 	bl	8011330 <uxr_millis>
 800fec6:	4606      	mov	r6, r0
 800fec8:	4620      	mov	r0, r4
 800feca:	f7ff fc57 	bl	800f77c <uxr_flash_output_streams>
 800fece:	2300      	movs	r3, #0
 800fed0:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800fed4:	4629      	mov	r1, r5
 800fed6:	e005      	b.n	800fee4 <uxr_run_session_until_data+0x28>
 800fed8:	f001 fa2a 	bl	8011330 <uxr_millis>
 800fedc:	1b83      	subs	r3, r0, r6
 800fede:	1ae9      	subs	r1, r5, r3
 800fee0:	2900      	cmp	r1, #0
 800fee2:	dd07      	ble.n	800fef4 <uxr_run_session_until_data+0x38>
 800fee4:	4620      	mov	r0, r4
 800fee6:	f7ff fe8f 	bl	800fc08 <listen_message_reliably>
 800feea:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800feee:	2800      	cmp	r0, #0
 800fef0:	d0f2      	beq.n	800fed8 <uxr_run_session_until_data+0x1c>
 800fef2:	bd70      	pop	{r4, r5, r6, pc}
 800fef4:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800fef8:	bd70      	pop	{r4, r5, r6, pc}
 800fefa:	bf00      	nop

0800fefc <uxr_run_session_until_confirm_delivery>:
 800fefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff00:	4606      	mov	r6, r0
 800ff02:	460d      	mov	r5, r1
 800ff04:	f001 fa14 	bl	8011330 <uxr_millis>
 800ff08:	4607      	mov	r7, r0
 800ff0a:	4630      	mov	r0, r6
 800ff0c:	f7ff fc36 	bl	800f77c <uxr_flash_output_streams>
 800ff10:	2d00      	cmp	r5, #0
 800ff12:	f106 0808 	add.w	r8, r6, #8
 800ff16:	bfa8      	it	ge
 800ff18:	462c      	movge	r4, r5
 800ff1a:	da07      	bge.n	800ff2c <uxr_run_session_until_confirm_delivery+0x30>
 800ff1c:	e00e      	b.n	800ff3c <uxr_run_session_until_confirm_delivery+0x40>
 800ff1e:	f7ff fe73 	bl	800fc08 <listen_message_reliably>
 800ff22:	f001 fa05 	bl	8011330 <uxr_millis>
 800ff26:	1bc3      	subs	r3, r0, r7
 800ff28:	1aec      	subs	r4, r5, r3
 800ff2a:	d407      	bmi.n	800ff3c <uxr_run_session_until_confirm_delivery+0x40>
 800ff2c:	4640      	mov	r0, r8
 800ff2e:	f001 f9a3 	bl	8011278 <uxr_output_streams_confirmed>
 800ff32:	4603      	mov	r3, r0
 800ff34:	4621      	mov	r1, r4
 800ff36:	4630      	mov	r0, r6
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d0f0      	beq.n	800ff1e <uxr_run_session_until_confirm_delivery+0x22>
 800ff3c:	4640      	mov	r0, r8
 800ff3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff42:	f001 b999 	b.w	8011278 <uxr_output_streams_confirmed>
 800ff46:	bf00      	nop

0800ff48 <uxr_run_session_until_all_status>:
 800ff48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff4c:	9c08      	ldr	r4, [sp, #32]
 800ff4e:	4606      	mov	r6, r0
 800ff50:	460f      	mov	r7, r1
 800ff52:	4691      	mov	r9, r2
 800ff54:	461d      	mov	r5, r3
 800ff56:	f7ff fc11 	bl	800f77c <uxr_flash_output_streams>
 800ff5a:	b124      	cbz	r4, 800ff66 <uxr_run_session_until_all_status+0x1e>
 800ff5c:	4622      	mov	r2, r4
 800ff5e:	21ff      	movs	r1, #255	@ 0xff
 800ff60:	4628      	mov	r0, r5
 800ff62:	f008 fa99 	bl	8018498 <memset>
 800ff66:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800ff6a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800ff6c:	f001 f9e0 	bl	8011330 <uxr_millis>
 800ff70:	3d01      	subs	r5, #1
 800ff72:	f1a9 0902 	sub.w	r9, r9, #2
 800ff76:	4680      	mov	r8, r0
 800ff78:	4639      	mov	r1, r7
 800ff7a:	4630      	mov	r0, r6
 800ff7c:	f7ff fe44 	bl	800fc08 <listen_message_reliably>
 800ff80:	f001 f9d6 	bl	8011330 <uxr_millis>
 800ff84:	eba0 0008 	sub.w	r0, r0, r8
 800ff88:	1a39      	subs	r1, r7, r0
 800ff8a:	b344      	cbz	r4, 800ffde <uxr_run_session_until_all_status+0x96>
 800ff8c:	4628      	mov	r0, r5
 800ff8e:	46ac      	mov	ip, r5
 800ff90:	2301      	movs	r3, #1
 800ff92:	e002      	b.n	800ff9a <uxr_run_session_until_all_status+0x52>
 800ff94:	42a3      	cmp	r3, r4
 800ff96:	d20d      	bcs.n	800ffb4 <uxr_run_session_until_all_status+0x6c>
 800ff98:	3301      	adds	r3, #1
 800ff9a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800ff9e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800ffa2:	d1f7      	bne.n	800ff94 <uxr_run_session_until_all_status+0x4c>
 800ffa4:	42a3      	cmp	r3, r4
 800ffa6:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800ffaa:	d213      	bcs.n	800ffd4 <uxr_run_session_until_all_status+0x8c>
 800ffac:	2a00      	cmp	r2, #0
 800ffae:	d0f3      	beq.n	800ff98 <uxr_run_session_until_all_status+0x50>
 800ffb0:	2900      	cmp	r1, #0
 800ffb2:	dce2      	bgt.n	800ff7a <uxr_run_session_until_all_status+0x32>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800ffb8:	442c      	add	r4, r5
 800ffba:	e001      	b.n	800ffc0 <uxr_run_session_until_all_status+0x78>
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d812      	bhi.n	800ffe6 <uxr_run_session_until_all_status+0x9e>
 800ffc0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ffc4:	4284      	cmp	r4, r0
 800ffc6:	d1f9      	bne.n	800ffbc <uxr_run_session_until_all_status+0x74>
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	bf8c      	ite	hi
 800ffcc:	2000      	movhi	r0, #0
 800ffce:	2001      	movls	r0, #1
 800ffd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffd4:	2900      	cmp	r1, #0
 800ffd6:	dded      	ble.n	800ffb4 <uxr_run_session_until_all_status+0x6c>
 800ffd8:	2a00      	cmp	r2, #0
 800ffda:	d1ce      	bne.n	800ff7a <uxr_run_session_until_all_status+0x32>
 800ffdc:	e7ea      	b.n	800ffb4 <uxr_run_session_until_all_status+0x6c>
 800ffde:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800ffe0:	2001      	movs	r0, #1
 800ffe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffec:	0000      	movs	r0, r0
	...

0800fff0 <uxr_sync_session>:
 800fff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fff2:	b093      	sub	sp, #76	@ 0x4c
 800fff4:	4604      	mov	r4, r0
 800fff6:	460d      	mov	r5, r1
 800fff8:	f000 fb52 	bl	80106a0 <uxr_session_header_offset>
 800fffc:	2214      	movs	r2, #20
 800fffe:	eb0d 0102 	add.w	r1, sp, r2
 8010002:	9000      	str	r0, [sp, #0]
 8010004:	2300      	movs	r3, #0
 8010006:	a80a      	add	r0, sp, #40	@ 0x28
 8010008:	f7fe fe6a 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 801000c:	2300      	movs	r3, #0
 801000e:	2208      	movs	r2, #8
 8010010:	210e      	movs	r1, #14
 8010012:	a80a      	add	r0, sp, #40	@ 0x28
 8010014:	f001 f946 	bl	80112a4 <uxr_buffer_submessage_header>
 8010018:	f001 f9a4 	bl	8011364 <uxr_nanos>
 801001c:	a31c      	add	r3, pc, #112	@ (adr r3, 8010090 <uxr_sync_session+0xa0>)
 801001e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010022:	460e      	mov	r6, r1
 8010024:	4607      	mov	r7, r0
 8010026:	f7f0 fdcf 	bl	8000bc8 <__aeabi_ldivmod>
 801002a:	4631      	mov	r1, r6
 801002c:	9003      	str	r0, [sp, #12]
 801002e:	a318      	add	r3, pc, #96	@ (adr r3, 8010090 <uxr_sync_session+0xa0>)
 8010030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010034:	4638      	mov	r0, r7
 8010036:	f7f0 fdc7 	bl	8000bc8 <__aeabi_ldivmod>
 801003a:	a903      	add	r1, sp, #12
 801003c:	a80a      	add	r0, sp, #40	@ 0x28
 801003e:	9204      	str	r2, [sp, #16]
 8010040:	f002 fa50 	bl	80124e4 <uxr_serialize_TIMESTAMP_Payload>
 8010044:	2200      	movs	r2, #0
 8010046:	4611      	mov	r1, r2
 8010048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801004a:	4620      	mov	r0, r4
 801004c:	f000 fad2 	bl	80105f4 <uxr_stamp_session_header>
 8010050:	a80a      	add	r0, sp, #40	@ 0x28
 8010052:	f7fe fe83 	bl	800ed5c <ucdr_buffer_length>
 8010056:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010058:	4602      	mov	r2, r0
 801005a:	a905      	add	r1, sp, #20
 801005c:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010060:	47b0      	blx	r6
 8010062:	f001 f965 	bl	8011330 <uxr_millis>
 8010066:	2300      	movs	r3, #0
 8010068:	4606      	mov	r6, r0
 801006a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801006e:	4629      	mov	r1, r5
 8010070:	e000      	b.n	8010074 <uxr_sync_session+0x84>
 8010072:	b950      	cbnz	r0, 801008a <uxr_sync_session+0x9a>
 8010074:	4620      	mov	r0, r4
 8010076:	f7ff fdc7 	bl	800fc08 <listen_message_reliably>
 801007a:	f001 f959 	bl	8011330 <uxr_millis>
 801007e:	1b83      	subs	r3, r0, r6
 8010080:	1ae9      	subs	r1, r5, r3
 8010082:	2900      	cmp	r1, #0
 8010084:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8010088:	dcf3      	bgt.n	8010072 <uxr_sync_session+0x82>
 801008a:	b013      	add	sp, #76	@ 0x4c
 801008c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801008e:	bf00      	nop
 8010090:	3b9aca00 	.word	0x3b9aca00
 8010094:	00000000 	.word	0x00000000

08010098 <wait_session_status>:
 8010098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009c:	4604      	mov	r4, r0
 801009e:	b09d      	sub	sp, #116	@ 0x74
 80100a0:	20ff      	movs	r0, #255	@ 0xff
 80100a2:	7160      	strb	r0, [r4, #5]
 80100a4:	9303      	str	r3, [sp, #12]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	f000 80b6 	beq.w	8010218 <wait_session_status+0x180>
 80100ac:	468a      	mov	sl, r1
 80100ae:	4691      	mov	r9, r2
 80100b0:	f04f 0b00 	mov.w	fp, #0
 80100b4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80100b6:	464a      	mov	r2, r9
 80100b8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80100bc:	4651      	mov	r1, sl
 80100be:	47a8      	blx	r5
 80100c0:	f001 f936 	bl	8011330 <uxr_millis>
 80100c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80100c8:	4605      	mov	r5, r0
 80100ca:	e009      	b.n	80100e0 <wait_session_status+0x48>
 80100cc:	f001 f930 	bl	8011330 <uxr_millis>
 80100d0:	1b40      	subs	r0, r0, r5
 80100d2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	dd40      	ble.n	801015c <wait_session_status+0xc4>
 80100da:	7960      	ldrb	r0, [r4, #5]
 80100dc:	28ff      	cmp	r0, #255	@ 0xff
 80100de:	d145      	bne.n	801016c <wait_session_status+0xd4>
 80100e0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80100e2:	a908      	add	r1, sp, #32
 80100e4:	6896      	ldr	r6, [r2, #8]
 80100e6:	6810      	ldr	r0, [r2, #0]
 80100e8:	aa09      	add	r2, sp, #36	@ 0x24
 80100ea:	47b0      	blx	r6
 80100ec:	2800      	cmp	r0, #0
 80100ee:	d0ed      	beq.n	80100cc <wait_session_status+0x34>
 80100f0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80100f4:	a80c      	add	r0, sp, #48	@ 0x30
 80100f6:	f7fe fe05 	bl	800ed04 <ucdr_init_buffer>
 80100fa:	2600      	movs	r6, #0
 80100fc:	f10d 031e 	add.w	r3, sp, #30
 8010100:	aa07      	add	r2, sp, #28
 8010102:	a90c      	add	r1, sp, #48	@ 0x30
 8010104:	4620      	mov	r0, r4
 8010106:	f88d 601c 	strb.w	r6, [sp, #28]
 801010a:	f000 fa87 	bl	801061c <uxr_read_session_header>
 801010e:	2800      	cmp	r0, #0
 8010110:	d0dc      	beq.n	80100cc <wait_session_status+0x34>
 8010112:	4631      	mov	r1, r6
 8010114:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010118:	f000 ffb6 	bl	8011088 <uxr_stream_id_from_raw>
 801011c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010120:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010124:	9302      	str	r3, [sp, #8]
 8010126:	2f01      	cmp	r7, #1
 8010128:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801012c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010130:	d05c      	beq.n	80101ec <wait_session_status+0x154>
 8010132:	2f02      	cmp	r7, #2
 8010134:	d020      	beq.n	8010178 <wait_session_status+0xe0>
 8010136:	2f00      	cmp	r7, #0
 8010138:	d1c8      	bne.n	80100cc <wait_session_status+0x34>
 801013a:	4639      	mov	r1, r7
 801013c:	4638      	mov	r0, r7
 801013e:	f000 ffa3 	bl	8011088 <uxr_stream_id_from_raw>
 8010142:	a90c      	add	r1, sp, #48	@ 0x30
 8010144:	4602      	mov	r2, r0
 8010146:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010148:	4620      	mov	r0, r4
 801014a:	f7ff fbd5 	bl	800f8f8 <read_submessage_list>
 801014e:	f001 f8ef 	bl	8011330 <uxr_millis>
 8010152:	1b40      	subs	r0, r0, r5
 8010154:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010158:	2b00      	cmp	r3, #0
 801015a:	dcbe      	bgt.n	80100da <wait_session_status+0x42>
 801015c:	9b03      	ldr	r3, [sp, #12]
 801015e:	7960      	ldrb	r0, [r4, #5]
 8010160:	f10b 0b01 	add.w	fp, fp, #1
 8010164:	455b      	cmp	r3, fp
 8010166:	d001      	beq.n	801016c <wait_session_status+0xd4>
 8010168:	28ff      	cmp	r0, #255	@ 0xff
 801016a:	d0a3      	beq.n	80100b4 <wait_session_status+0x1c>
 801016c:	38ff      	subs	r0, #255	@ 0xff
 801016e:	bf18      	it	ne
 8010170:	2001      	movne	r0, #1
 8010172:	b01d      	add	sp, #116	@ 0x74
 8010174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010178:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801017c:	9304      	str	r3, [sp, #16]
 801017e:	4631      	mov	r1, r6
 8010180:	f104 0008 	add.w	r0, r4, #8
 8010184:	f001 f86e 	bl	8011264 <uxr_get_input_reliable_stream>
 8010188:	4680      	mov	r8, r0
 801018a:	b348      	cbz	r0, 80101e0 <wait_session_status+0x148>
 801018c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801018e:	9205      	str	r2, [sp, #20]
 8010190:	a80c      	add	r0, sp, #48	@ 0x30
 8010192:	f7fe fde7 	bl	800ed64 <ucdr_buffer_remaining>
 8010196:	4603      	mov	r3, r0
 8010198:	f10d 001d 	add.w	r0, sp, #29
 801019c:	9000      	str	r0, [sp, #0]
 801019e:	9a05      	ldr	r2, [sp, #20]
 80101a0:	9902      	ldr	r1, [sp, #8]
 80101a2:	4640      	mov	r0, r8
 80101a4:	f006 fbb4 	bl	8016910 <uxr_receive_reliable_message>
 80101a8:	b1d0      	cbz	r0, 80101e0 <wait_session_status+0x148>
 80101aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d03a      	beq.n	8010228 <wait_session_status+0x190>
 80101b2:	9f04      	ldr	r7, [sp, #16]
 80101b4:	e00a      	b.n	80101cc <wait_session_status+0x134>
 80101b6:	f04f 0302 	mov.w	r3, #2
 80101ba:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80101be:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80101c2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80101c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80101c8:	f7ff fb96 	bl	800f8f8 <read_submessage_list>
 80101cc:	a914      	add	r1, sp, #80	@ 0x50
 80101ce:	2204      	movs	r2, #4
 80101d0:	4640      	mov	r0, r8
 80101d2:	f006 fc1d 	bl	8016a10 <uxr_next_input_reliable_buffer_available>
 80101d6:	4603      	mov	r3, r0
 80101d8:	a914      	add	r1, sp, #80	@ 0x50
 80101da:	4620      	mov	r0, r4
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d1ea      	bne.n	80101b6 <wait_session_status+0x11e>
 80101e0:	9904      	ldr	r1, [sp, #16]
 80101e2:	4632      	mov	r2, r6
 80101e4:	4620      	mov	r0, r4
 80101e6:	f7ff f9ef 	bl	800f5c8 <write_submessage_acknack.isra.0>
 80101ea:	e76f      	b.n	80100cc <wait_session_status+0x34>
 80101ec:	4631      	mov	r1, r6
 80101ee:	f104 0008 	add.w	r0, r4, #8
 80101f2:	f001 f82d 	bl	8011250 <uxr_get_input_best_effort_stream>
 80101f6:	2800      	cmp	r0, #0
 80101f8:	f43f af68 	beq.w	80100cc <wait_session_status+0x34>
 80101fc:	9902      	ldr	r1, [sp, #8]
 80101fe:	f006 faf3 	bl	80167e8 <uxr_receive_best_effort_message>
 8010202:	2800      	cmp	r0, #0
 8010204:	f43f af62 	beq.w	80100cc <wait_session_status+0x34>
 8010208:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801020c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801020e:	a90c      	add	r1, sp, #48	@ 0x30
 8010210:	4620      	mov	r0, r4
 8010212:	f7ff fb71 	bl	800f8f8 <read_submessage_list>
 8010216:	e759      	b.n	80100cc <wait_session_status+0x34>
 8010218:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801021a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801021e:	47a0      	blx	r4
 8010220:	2001      	movs	r0, #1
 8010222:	b01d      	add	sp, #116	@ 0x74
 8010224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010228:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801022c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801022e:	a90c      	add	r1, sp, #48	@ 0x30
 8010230:	4620      	mov	r0, r4
 8010232:	f7ff fb61 	bl	800f8f8 <read_submessage_list>
 8010236:	e7bc      	b.n	80101b2 <wait_session_status+0x11a>

08010238 <uxr_delete_session_retries>:
 8010238:	b530      	push	{r4, r5, lr}
 801023a:	b08f      	sub	sp, #60	@ 0x3c
 801023c:	4604      	mov	r4, r0
 801023e:	460d      	mov	r5, r1
 8010240:	f000 fa2e 	bl	80106a0 <uxr_session_header_offset>
 8010244:	2300      	movs	r3, #0
 8010246:	2210      	movs	r2, #16
 8010248:	9000      	str	r0, [sp, #0]
 801024a:	a902      	add	r1, sp, #8
 801024c:	a806      	add	r0, sp, #24
 801024e:	f7fe fd47 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 8010252:	a906      	add	r1, sp, #24
 8010254:	4620      	mov	r0, r4
 8010256:	f000 f973 	bl	8010540 <uxr_buffer_delete_session>
 801025a:	2200      	movs	r2, #0
 801025c:	4611      	mov	r1, r2
 801025e:	9b06      	ldr	r3, [sp, #24]
 8010260:	4620      	mov	r0, r4
 8010262:	f000 f9c7 	bl	80105f4 <uxr_stamp_session_header>
 8010266:	a806      	add	r0, sp, #24
 8010268:	f7fe fd78 	bl	800ed5c <ucdr_buffer_length>
 801026c:	462b      	mov	r3, r5
 801026e:	4602      	mov	r2, r0
 8010270:	a902      	add	r1, sp, #8
 8010272:	4620      	mov	r0, r4
 8010274:	f7ff ff10 	bl	8010098 <wait_session_status>
 8010278:	b118      	cbz	r0, 8010282 <uxr_delete_session_retries+0x4a>
 801027a:	7960      	ldrb	r0, [r4, #5]
 801027c:	fab0 f080 	clz	r0, r0
 8010280:	0940      	lsrs	r0, r0, #5
 8010282:	b00f      	add	sp, #60	@ 0x3c
 8010284:	bd30      	pop	{r4, r5, pc}
 8010286:	bf00      	nop

08010288 <uxr_create_session>:
 8010288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801028c:	f100 0b08 	add.w	fp, r0, #8
 8010290:	b0ab      	sub	sp, #172	@ 0xac
 8010292:	4604      	mov	r4, r0
 8010294:	4658      	mov	r0, fp
 8010296:	f000 ff2b 	bl	80110f0 <uxr_reset_stream_storage>
 801029a:	4620      	mov	r0, r4
 801029c:	f000 fa00 	bl	80106a0 <uxr_session_header_offset>
 80102a0:	2300      	movs	r3, #0
 80102a2:	9000      	str	r0, [sp, #0]
 80102a4:	221c      	movs	r2, #28
 80102a6:	a90b      	add	r1, sp, #44	@ 0x2c
 80102a8:	a812      	add	r0, sp, #72	@ 0x48
 80102aa:	f7fe fd19 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 80102ae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80102b0:	8a1a      	ldrh	r2, [r3, #16]
 80102b2:	3a04      	subs	r2, #4
 80102b4:	b292      	uxth	r2, r2
 80102b6:	a912      	add	r1, sp, #72	@ 0x48
 80102b8:	4620      	mov	r0, r4
 80102ba:	f000 f917 	bl	80104ec <uxr_buffer_create_session>
 80102be:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80102c0:	4620      	mov	r0, r4
 80102c2:	f000 f983 	bl	80105cc <uxr_stamp_create_session_header>
 80102c6:	a812      	add	r0, sp, #72	@ 0x48
 80102c8:	f7fe fd48 	bl	800ed5c <ucdr_buffer_length>
 80102cc:	23ff      	movs	r3, #255	@ 0xff
 80102ce:	7163      	strb	r3, [r4, #5]
 80102d0:	230a      	movs	r3, #10
 80102d2:	46da      	mov	sl, fp
 80102d4:	9303      	str	r3, [sp, #12]
 80102d6:	4683      	mov	fp, r0
 80102d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80102da:	465a      	mov	r2, fp
 80102dc:	e9d3 0500 	ldrd	r0, r5, [r3]
 80102e0:	a90b      	add	r1, sp, #44	@ 0x2c
 80102e2:	47a8      	blx	r5
 80102e4:	f001 f824 	bl	8011330 <uxr_millis>
 80102e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80102ec:	4605      	mov	r5, r0
 80102ee:	e009      	b.n	8010304 <uxr_create_session+0x7c>
 80102f0:	f001 f81e 	bl	8011330 <uxr_millis>
 80102f4:	1b40      	subs	r0, r0, r5
 80102f6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	7962      	ldrb	r2, [r4, #5]
 80102fe:	dd38      	ble.n	8010372 <uxr_create_session+0xea>
 8010300:	2aff      	cmp	r2, #255	@ 0xff
 8010302:	d13c      	bne.n	801037e <uxr_create_session+0xf6>
 8010304:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010306:	a907      	add	r1, sp, #28
 8010308:	6896      	ldr	r6, [r2, #8]
 801030a:	6810      	ldr	r0, [r2, #0]
 801030c:	aa08      	add	r2, sp, #32
 801030e:	47b0      	blx	r6
 8010310:	2800      	cmp	r0, #0
 8010312:	d0ed      	beq.n	80102f0 <uxr_create_session+0x68>
 8010314:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010318:	a81a      	add	r0, sp, #104	@ 0x68
 801031a:	f7fe fcf3 	bl	800ed04 <ucdr_init_buffer>
 801031e:	2600      	movs	r6, #0
 8010320:	f10d 031a 	add.w	r3, sp, #26
 8010324:	aa06      	add	r2, sp, #24
 8010326:	a91a      	add	r1, sp, #104	@ 0x68
 8010328:	4620      	mov	r0, r4
 801032a:	f88d 6018 	strb.w	r6, [sp, #24]
 801032e:	f000 f975 	bl	801061c <uxr_read_session_header>
 8010332:	2800      	cmp	r0, #0
 8010334:	d0dc      	beq.n	80102f0 <uxr_create_session+0x68>
 8010336:	4631      	mov	r1, r6
 8010338:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801033c:	f000 fea4 	bl	8011088 <uxr_stream_id_from_raw>
 8010340:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010344:	2e01      	cmp	r6, #1
 8010346:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801034a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801034e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010352:	d053      	beq.n	80103fc <uxr_create_session+0x174>
 8010354:	2e02      	cmp	r6, #2
 8010356:	d018      	beq.n	801038a <uxr_create_session+0x102>
 8010358:	2e00      	cmp	r6, #0
 801035a:	d1c9      	bne.n	80102f0 <uxr_create_session+0x68>
 801035c:	4631      	mov	r1, r6
 801035e:	4630      	mov	r0, r6
 8010360:	f000 fe92 	bl	8011088 <uxr_stream_id_from_raw>
 8010364:	a91a      	add	r1, sp, #104	@ 0x68
 8010366:	4602      	mov	r2, r0
 8010368:	900a      	str	r0, [sp, #40]	@ 0x28
 801036a:	4620      	mov	r0, r4
 801036c:	f7ff fac4 	bl	800f8f8 <read_submessage_list>
 8010370:	e7be      	b.n	80102f0 <uxr_create_session+0x68>
 8010372:	9b03      	ldr	r3, [sp, #12]
 8010374:	3b01      	subs	r3, #1
 8010376:	9303      	str	r3, [sp, #12]
 8010378:	d001      	beq.n	801037e <uxr_create_session+0xf6>
 801037a:	2aff      	cmp	r2, #255	@ 0xff
 801037c:	d0ac      	beq.n	80102d8 <uxr_create_session+0x50>
 801037e:	2a00      	cmp	r2, #0
 8010380:	d051      	beq.n	8010426 <uxr_create_session+0x19e>
 8010382:	2000      	movs	r0, #0
 8010384:	b02b      	add	sp, #172	@ 0xac
 8010386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801038a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801038e:	9304      	str	r3, [sp, #16]
 8010390:	4639      	mov	r1, r7
 8010392:	4650      	mov	r0, sl
 8010394:	f000 ff66 	bl	8011264 <uxr_get_input_reliable_stream>
 8010398:	4680      	mov	r8, r0
 801039a:	b348      	cbz	r0, 80103f0 <uxr_create_session+0x168>
 801039c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801039e:	9205      	str	r2, [sp, #20]
 80103a0:	a81a      	add	r0, sp, #104	@ 0x68
 80103a2:	f7fe fcdf 	bl	800ed64 <ucdr_buffer_remaining>
 80103a6:	4603      	mov	r3, r0
 80103a8:	f10d 0019 	add.w	r0, sp, #25
 80103ac:	9000      	str	r0, [sp, #0]
 80103ae:	9a05      	ldr	r2, [sp, #20]
 80103b0:	4649      	mov	r1, r9
 80103b2:	4640      	mov	r0, r8
 80103b4:	f006 faac 	bl	8016910 <uxr_receive_reliable_message>
 80103b8:	b1d0      	cbz	r0, 80103f0 <uxr_create_session+0x168>
 80103ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d038      	beq.n	8010434 <uxr_create_session+0x1ac>
 80103c2:	9e04      	ldr	r6, [sp, #16]
 80103c4:	e00a      	b.n	80103dc <uxr_create_session+0x154>
 80103c6:	f04f 0302 	mov.w	r3, #2
 80103ca:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80103ce:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80103d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80103d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103d8:	f7ff fa8e 	bl	800f8f8 <read_submessage_list>
 80103dc:	a922      	add	r1, sp, #136	@ 0x88
 80103de:	2204      	movs	r2, #4
 80103e0:	4640      	mov	r0, r8
 80103e2:	f006 fb15 	bl	8016a10 <uxr_next_input_reliable_buffer_available>
 80103e6:	4603      	mov	r3, r0
 80103e8:	a922      	add	r1, sp, #136	@ 0x88
 80103ea:	4620      	mov	r0, r4
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d1ea      	bne.n	80103c6 <uxr_create_session+0x13e>
 80103f0:	9904      	ldr	r1, [sp, #16]
 80103f2:	463a      	mov	r2, r7
 80103f4:	4620      	mov	r0, r4
 80103f6:	f7ff f8e7 	bl	800f5c8 <write_submessage_acknack.isra.0>
 80103fa:	e779      	b.n	80102f0 <uxr_create_session+0x68>
 80103fc:	4639      	mov	r1, r7
 80103fe:	4650      	mov	r0, sl
 8010400:	f000 ff26 	bl	8011250 <uxr_get_input_best_effort_stream>
 8010404:	2800      	cmp	r0, #0
 8010406:	f43f af73 	beq.w	80102f0 <uxr_create_session+0x68>
 801040a:	4649      	mov	r1, r9
 801040c:	f006 f9ec 	bl	80167e8 <uxr_receive_best_effort_message>
 8010410:	2800      	cmp	r0, #0
 8010412:	f43f af6d 	beq.w	80102f0 <uxr_create_session+0x68>
 8010416:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801041a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801041c:	a91a      	add	r1, sp, #104	@ 0x68
 801041e:	4620      	mov	r0, r4
 8010420:	f7ff fa6a 	bl	800f8f8 <read_submessage_list>
 8010424:	e764      	b.n	80102f0 <uxr_create_session+0x68>
 8010426:	4650      	mov	r0, sl
 8010428:	f000 fe62 	bl	80110f0 <uxr_reset_stream_storage>
 801042c:	2001      	movs	r0, #1
 801042e:	b02b      	add	sp, #172	@ 0xac
 8010430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010434:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010438:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801043a:	a91a      	add	r1, sp, #104	@ 0x68
 801043c:	4620      	mov	r0, r4
 801043e:	f7ff fa5b 	bl	800f8f8 <read_submessage_list>
 8010442:	e7be      	b.n	80103c2 <uxr_create_session+0x13a>

08010444 <uxr_prepare_stream_to_write_submessage>:
 8010444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010448:	b082      	sub	sp, #8
 801044a:	4682      	mov	sl, r0
 801044c:	4610      	mov	r0, r2
 801044e:	4615      	mov	r5, r2
 8010450:	461e      	mov	r6, r3
 8010452:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010456:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801045a:	9101      	str	r1, [sp, #4]
 801045c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010460:	f000 ff60 	bl	8011324 <uxr_submessage_padding>
 8010464:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010468:	f105 0904 	add.w	r9, r5, #4
 801046c:	2b01      	cmp	r3, #1
 801046e:	4481      	add	r9, r0
 8010470:	d01d      	beq.n	80104ae <uxr_prepare_stream_to_write_submessage+0x6a>
 8010472:	2b02      	cmp	r3, #2
 8010474:	d116      	bne.n	80104a4 <uxr_prepare_stream_to_write_submessage+0x60>
 8010476:	4621      	mov	r1, r4
 8010478:	f10a 0008 	add.w	r0, sl, #8
 801047c:	f000 fede 	bl	801123c <uxr_get_output_reliable_stream>
 8010480:	4604      	mov	r4, r0
 8010482:	b158      	cbz	r0, 801049c <uxr_prepare_stream_to_write_submessage+0x58>
 8010484:	4649      	mov	r1, r9
 8010486:	4632      	mov	r2, r6
 8010488:	f006 fc7e 	bl	8016d88 <uxr_prepare_reliable_buffer_to_write>
 801048c:	4604      	mov	r4, r0
 801048e:	b12c      	cbz	r4, 801049c <uxr_prepare_stream_to_write_submessage+0x58>
 8010490:	4643      	mov	r3, r8
 8010492:	b2aa      	uxth	r2, r5
 8010494:	4639      	mov	r1, r7
 8010496:	4630      	mov	r0, r6
 8010498:	f000 ff04 	bl	80112a4 <uxr_buffer_submessage_header>
 801049c:	4620      	mov	r0, r4
 801049e:	b002      	add	sp, #8
 80104a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104a4:	2400      	movs	r4, #0
 80104a6:	4620      	mov	r0, r4
 80104a8:	b002      	add	sp, #8
 80104aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ae:	4621      	mov	r1, r4
 80104b0:	f10a 0008 	add.w	r0, sl, #8
 80104b4:	f000 feba 	bl	801122c <uxr_get_output_best_effort_stream>
 80104b8:	4604      	mov	r4, r0
 80104ba:	2800      	cmp	r0, #0
 80104bc:	d0ee      	beq.n	801049c <uxr_prepare_stream_to_write_submessage+0x58>
 80104be:	4649      	mov	r1, r9
 80104c0:	4632      	mov	r2, r6
 80104c2:	f006 fb91 	bl	8016be8 <uxr_prepare_best_effort_buffer_to_write>
 80104c6:	4604      	mov	r4, r0
 80104c8:	e7e1      	b.n	801048e <uxr_prepare_stream_to_write_submessage+0x4a>
 80104ca:	bf00      	nop

080104cc <uxr_init_session_info>:
 80104cc:	0e13      	lsrs	r3, r2, #24
 80104ce:	7043      	strb	r3, [r0, #1]
 80104d0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80104d4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80104d8:	7001      	strb	r1, [r0, #0]
 80104da:	70c3      	strb	r3, [r0, #3]
 80104dc:	2109      	movs	r1, #9
 80104de:	23ff      	movs	r3, #255	@ 0xff
 80104e0:	f880 c002 	strb.w	ip, [r0, #2]
 80104e4:	7102      	strb	r2, [r0, #4]
 80104e6:	80c1      	strh	r1, [r0, #6]
 80104e8:	7143      	strb	r3, [r0, #5]
 80104ea:	4770      	bx	lr

080104ec <uxr_buffer_create_session>:
 80104ec:	b530      	push	{r4, r5, lr}
 80104ee:	b089      	sub	sp, #36	@ 0x24
 80104f0:	2300      	movs	r3, #0
 80104f2:	4d12      	ldr	r5, [pc, #72]	@ (801053c <uxr_buffer_create_session+0x50>)
 80104f4:	9307      	str	r3, [sp, #28]
 80104f6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80104fa:	2201      	movs	r2, #1
 80104fc:	9301      	str	r3, [sp, #4]
 80104fe:	80c2      	strh	r2, [r0, #6]
 8010500:	f88d 2004 	strb.w	r2, [sp, #4]
 8010504:	682a      	ldr	r2, [r5, #0]
 8010506:	9200      	str	r2, [sp, #0]
 8010508:	88aa      	ldrh	r2, [r5, #4]
 801050a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801050e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8010512:	9202      	str	r2, [sp, #8]
 8010514:	460c      	mov	r4, r1
 8010516:	7802      	ldrb	r2, [r0, #0]
 8010518:	9303      	str	r3, [sp, #12]
 801051a:	4619      	mov	r1, r3
 801051c:	f88d 200c 	strb.w	r2, [sp, #12]
 8010520:	4620      	mov	r0, r4
 8010522:	2210      	movs	r2, #16
 8010524:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010528:	9306      	str	r3, [sp, #24]
 801052a:	f000 febb 	bl	80112a4 <uxr_buffer_submessage_header>
 801052e:	4669      	mov	r1, sp
 8010530:	4620      	mov	r0, r4
 8010532:	f001 fe13 	bl	801215c <uxr_serialize_CREATE_CLIENT_Payload>
 8010536:	b009      	add	sp, #36	@ 0x24
 8010538:	bd30      	pop	{r4, r5, pc}
 801053a:	bf00      	nop
 801053c:	08019a14 	.word	0x08019a14

08010540 <uxr_buffer_delete_session>:
 8010540:	b510      	push	{r4, lr}
 8010542:	4b0c      	ldr	r3, [pc, #48]	@ (8010574 <uxr_buffer_delete_session+0x34>)
 8010544:	b082      	sub	sp, #8
 8010546:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801054a:	f8ad c006 	strh.w	ip, [sp, #6]
 801054e:	460c      	mov	r4, r1
 8010550:	2202      	movs	r2, #2
 8010552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010556:	80c2      	strh	r2, [r0, #6]
 8010558:	f8ad 3004 	strh.w	r3, [sp, #4]
 801055c:	2204      	movs	r2, #4
 801055e:	2300      	movs	r3, #0
 8010560:	2103      	movs	r1, #3
 8010562:	4620      	mov	r0, r4
 8010564:	f000 fe9e 	bl	80112a4 <uxr_buffer_submessage_header>
 8010568:	a901      	add	r1, sp, #4
 801056a:	4620      	mov	r0, r4
 801056c:	f001 fe9c 	bl	80122a8 <uxr_serialize_DELETE_Payload>
 8010570:	b002      	add	sp, #8
 8010572:	bd10      	pop	{r4, pc}
 8010574:	08019a14 	.word	0x08019a14

08010578 <uxr_read_create_session_status>:
 8010578:	b510      	push	{r4, lr}
 801057a:	b088      	sub	sp, #32
 801057c:	4604      	mov	r4, r0
 801057e:	4608      	mov	r0, r1
 8010580:	a901      	add	r1, sp, #4
 8010582:	f001 fea1 	bl	80122c8 <uxr_deserialize_STATUS_AGENT_Payload>
 8010586:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801058a:	7163      	strb	r3, [r4, #5]
 801058c:	b008      	add	sp, #32
 801058e:	bd10      	pop	{r4, pc}

08010590 <uxr_read_delete_session_status>:
 8010590:	b510      	push	{r4, lr}
 8010592:	4604      	mov	r4, r0
 8010594:	b084      	sub	sp, #16
 8010596:	4608      	mov	r0, r1
 8010598:	a902      	add	r1, sp, #8
 801059a:	f001 fec5 	bl	8012328 <uxr_deserialize_STATUS_Payload>
 801059e:	88e3      	ldrh	r3, [r4, #6]
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	d001      	beq.n	80105a8 <uxr_read_delete_session_status+0x18>
 80105a4:	b004      	add	sp, #16
 80105a6:	bd10      	pop	{r4, pc}
 80105a8:	f10d 000a 	add.w	r0, sp, #10
 80105ac:	f7fe fe9c 	bl	800f2e8 <uxr_object_id_from_raw>
 80105b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80105b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80105b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80105bc:	b29b      	uxth	r3, r3
 80105be:	2b02      	cmp	r3, #2
 80105c0:	bf04      	itt	eq
 80105c2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80105c6:	7163      	strbeq	r3, [r4, #5]
 80105c8:	b004      	add	sp, #16
 80105ca:	bd10      	pop	{r4, pc}

080105cc <uxr_stamp_create_session_header>:
 80105cc:	b510      	push	{r4, lr}
 80105ce:	2208      	movs	r2, #8
 80105d0:	b08a      	sub	sp, #40	@ 0x28
 80105d2:	4604      	mov	r4, r0
 80105d4:	eb0d 0002 	add.w	r0, sp, r2
 80105d8:	f7fe fb94 	bl	800ed04 <ucdr_init_buffer>
 80105dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105e0:	9400      	str	r4, [sp, #0]
 80105e2:	2300      	movs	r3, #0
 80105e4:	461a      	mov	r2, r3
 80105e6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80105ea:	a802      	add	r0, sp, #8
 80105ec:	f001 f854 	bl	8011698 <uxr_serialize_message_header>
 80105f0:	b00a      	add	sp, #40	@ 0x28
 80105f2:	bd10      	pop	{r4, pc}

080105f4 <uxr_stamp_session_header>:
 80105f4:	b530      	push	{r4, r5, lr}
 80105f6:	b08d      	sub	sp, #52	@ 0x34
 80105f8:	4604      	mov	r4, r0
 80105fa:	460d      	mov	r5, r1
 80105fc:	9203      	str	r2, [sp, #12]
 80105fe:	4619      	mov	r1, r3
 8010600:	a804      	add	r0, sp, #16
 8010602:	2208      	movs	r2, #8
 8010604:	f7fe fb7e 	bl	800ed04 <ucdr_init_buffer>
 8010608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801060c:	9b03      	ldr	r3, [sp, #12]
 801060e:	9400      	str	r4, [sp, #0]
 8010610:	462a      	mov	r2, r5
 8010612:	a804      	add	r0, sp, #16
 8010614:	f001 f840 	bl	8011698 <uxr_serialize_message_header>
 8010618:	b00d      	add	sp, #52	@ 0x34
 801061a:	bd30      	pop	{r4, r5, pc}

0801061c <uxr_read_session_header>:
 801061c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010620:	4607      	mov	r7, r0
 8010622:	b084      	sub	sp, #16
 8010624:	4608      	mov	r0, r1
 8010626:	460c      	mov	r4, r1
 8010628:	4615      	mov	r5, r2
 801062a:	461e      	mov	r6, r3
 801062c:	f7fe fb9a 	bl	800ed64 <ucdr_buffer_remaining>
 8010630:	2808      	cmp	r0, #8
 8010632:	d803      	bhi.n	801063c <uxr_read_session_header+0x20>
 8010634:	2000      	movs	r0, #0
 8010636:	b004      	add	sp, #16
 8010638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801063c:	f10d 080c 	add.w	r8, sp, #12
 8010640:	4633      	mov	r3, r6
 8010642:	462a      	mov	r2, r5
 8010644:	f8cd 8000 	str.w	r8, [sp]
 8010648:	4620      	mov	r0, r4
 801064a:	f10d 010b 	add.w	r1, sp, #11
 801064e:	f001 f841 	bl	80116d4 <uxr_deserialize_message_header>
 8010652:	783a      	ldrb	r2, [r7, #0]
 8010654:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010658:	4293      	cmp	r3, r2
 801065a:	d1eb      	bne.n	8010634 <uxr_read_session_header+0x18>
 801065c:	061b      	lsls	r3, r3, #24
 801065e:	d41c      	bmi.n	801069a <uxr_read_session_header+0x7e>
 8010660:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010664:	787b      	ldrb	r3, [r7, #1]
 8010666:	429a      	cmp	r2, r3
 8010668:	d003      	beq.n	8010672 <uxr_read_session_header+0x56>
 801066a:	2001      	movs	r0, #1
 801066c:	f080 0001 	eor.w	r0, r0, #1
 8010670:	e7e1      	b.n	8010636 <uxr_read_session_header+0x1a>
 8010672:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8010676:	78bb      	ldrb	r3, [r7, #2]
 8010678:	429a      	cmp	r2, r3
 801067a:	f107 0102 	add.w	r1, r7, #2
 801067e:	d1f4      	bne.n	801066a <uxr_read_session_header+0x4e>
 8010680:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010684:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010688:	429a      	cmp	r2, r3
 801068a:	d1ee      	bne.n	801066a <uxr_read_session_header+0x4e>
 801068c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010690:	784b      	ldrb	r3, [r1, #1]
 8010692:	429a      	cmp	r2, r3
 8010694:	d1e9      	bne.n	801066a <uxr_read_session_header+0x4e>
 8010696:	2000      	movs	r0, #0
 8010698:	e7e8      	b.n	801066c <uxr_read_session_header+0x50>
 801069a:	2001      	movs	r0, #1
 801069c:	e7cb      	b.n	8010636 <uxr_read_session_header+0x1a>
 801069e:	bf00      	nop

080106a0 <uxr_session_header_offset>:
 80106a0:	f990 3000 	ldrsb.w	r3, [r0]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	bfac      	ite	ge
 80106a8:	2008      	movge	r0, #8
 80106aa:	2004      	movlt	r0, #4
 80106ac:	4770      	bx	lr
 80106ae:	bf00      	nop

080106b0 <uxr_init_base_object_request>:
 80106b0:	b510      	push	{r4, lr}
 80106b2:	88c3      	ldrh	r3, [r0, #6]
 80106b4:	b082      	sub	sp, #8
 80106b6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80106ba:	9101      	str	r1, [sp, #4]
 80106bc:	f1a3 010a 	sub.w	r1, r3, #10
 80106c0:	b289      	uxth	r1, r1
 80106c2:	42a1      	cmp	r1, r4
 80106c4:	d80e      	bhi.n	80106e4 <uxr_init_base_object_request+0x34>
 80106c6:	3301      	adds	r3, #1
 80106c8:	b29c      	uxth	r4, r3
 80106ca:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	80c4      	strh	r4, [r0, #6]
 80106d2:	9801      	ldr	r0, [sp, #4]
 80106d4:	7011      	strb	r1, [r2, #0]
 80106d6:	7053      	strb	r3, [r2, #1]
 80106d8:	1c91      	adds	r1, r2, #2
 80106da:	f7fe fe19 	bl	800f310 <uxr_object_id_to_raw>
 80106de:	4620      	mov	r0, r4
 80106e0:	b002      	add	sp, #8
 80106e2:	bd10      	pop	{r4, pc}
 80106e4:	230a      	movs	r3, #10
 80106e6:	2100      	movs	r1, #0
 80106e8:	461c      	mov	r4, r3
 80106ea:	e7f1      	b.n	80106d0 <uxr_init_base_object_request+0x20>

080106ec <uxr_parse_base_object_request>:
 80106ec:	b570      	push	{r4, r5, r6, lr}
 80106ee:	4604      	mov	r4, r0
 80106f0:	3002      	adds	r0, #2
 80106f2:	460d      	mov	r5, r1
 80106f4:	4616      	mov	r6, r2
 80106f6:	f7fe fdf7 	bl	800f2e8 <uxr_object_id_from_raw>
 80106fa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80106fe:	8028      	strh	r0, [r5, #0]
 8010700:	806b      	strh	r3, [r5, #2]
 8010702:	7822      	ldrb	r2, [r4, #0]
 8010704:	7863      	ldrb	r3, [r4, #1]
 8010706:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801070a:	8033      	strh	r3, [r6, #0]
 801070c:	bd70      	pop	{r4, r5, r6, pc}
 801070e:	bf00      	nop

08010710 <uxr_init_framing_io>:
 8010710:	2300      	movs	r3, #0
 8010712:	7041      	strb	r1, [r0, #1]
 8010714:	7003      	strb	r3, [r0, #0]
 8010716:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010718:	4770      	bx	lr
 801071a:	bf00      	nop

0801071c <uxr_write_framed_msg>:
 801071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010720:	4617      	mov	r7, r2
 8010722:	7842      	ldrb	r2, [r0, #1]
 8010724:	b083      	sub	sp, #12
 8010726:	460e      	mov	r6, r1
 8010728:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801072c:	469a      	mov	sl, r3
 801072e:	2901      	cmp	r1, #1
 8010730:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8010734:	4604      	mov	r4, r0
 8010736:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801073a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801073e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8010742:	f240 8137 	bls.w	80109b4 <uxr_write_framed_msg+0x298>
 8010746:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801074a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801074e:	2901      	cmp	r1, #1
 8010750:	f04f 0202 	mov.w	r2, #2
 8010754:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010758:	f240 808f 	bls.w	801087a <uxr_write_framed_msg+0x15e>
 801075c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801075e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8010762:	b2dd      	uxtb	r5, r3
 8010764:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010768:	2203      	movs	r2, #3
 801076a:	2901      	cmp	r1, #1
 801076c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010770:	f240 809a 	bls.w	80108a8 <uxr_write_framed_msg+0x18c>
 8010774:	18a1      	adds	r1, r4, r2
 8010776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010778:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801077c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010780:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8010784:	3201      	adds	r2, #1
 8010786:	2801      	cmp	r0, #1
 8010788:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801078c:	f240 80a0 	bls.w	80108d0 <uxr_write_framed_msg+0x1b4>
 8010790:	18a0      	adds	r0, r4, r2
 8010792:	3201      	adds	r2, #1
 8010794:	b2d2      	uxtb	r2, r2
 8010796:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801079a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801079e:	2b00      	cmp	r3, #0
 80107a0:	f000 80a9 	beq.w	80108f6 <uxr_write_framed_msg+0x1da>
 80107a4:	f04f 0900 	mov.w	r9, #0
 80107a8:	46c8      	mov	r8, r9
 80107aa:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80107ae:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80107b2:	2901      	cmp	r1, #1
 80107b4:	f240 80c3 	bls.w	801093e <uxr_write_framed_msg+0x222>
 80107b8:	2a29      	cmp	r2, #41	@ 0x29
 80107ba:	f200 809f 	bhi.w	80108fc <uxr_write_framed_msg+0x1e0>
 80107be:	18a1      	adds	r1, r4, r2
 80107c0:	3201      	adds	r2, #1
 80107c2:	b2d2      	uxtb	r2, r2
 80107c4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80107c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80107cc:	ea89 0303 	eor.w	r3, r9, r3
 80107d0:	498c      	ldr	r1, [pc, #560]	@ (8010a04 <uxr_write_framed_msg+0x2e8>)
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	f108 0801 	add.w	r8, r8, #1
 80107d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80107dc:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80107e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107e2:	4543      	cmp	r3, r8
 80107e4:	d8e1      	bhi.n	80107aa <uxr_write_framed_msg+0x8e>
 80107e6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80107ea:	fa5f f889 	uxtb.w	r8, r9
 80107ee:	9301      	str	r3, [sp, #4]
 80107f0:	f04f 0900 	mov.w	r9, #0
 80107f4:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80107f8:	fa5f f18a 	uxtb.w	r1, sl
 80107fc:	2901      	cmp	r1, #1
 80107fe:	d921      	bls.n	8010844 <uxr_write_framed_msg+0x128>
 8010800:	2a29      	cmp	r2, #41	@ 0x29
 8010802:	f240 80af 	bls.w	8010964 <uxr_write_framed_msg+0x248>
 8010806:	2500      	movs	r5, #0
 8010808:	e000      	b.n	801080c <uxr_write_framed_msg+0xf0>
 801080a:	b160      	cbz	r0, 8010826 <uxr_write_framed_msg+0x10a>
 801080c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010810:	1b52      	subs	r2, r2, r5
 8010812:	465b      	mov	r3, fp
 8010814:	4421      	add	r1, r4
 8010816:	4638      	mov	r0, r7
 8010818:	47b0      	blx	r6
 801081a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801081e:	4405      	add	r5, r0
 8010820:	4295      	cmp	r5, r2
 8010822:	d3f2      	bcc.n	801080a <uxr_write_framed_msg+0xee>
 8010824:	d003      	beq.n	801082e <uxr_write_framed_msg+0x112>
 8010826:	2000      	movs	r0, #0
 8010828:	b003      	add	sp, #12
 801082a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801082e:	fa5f f18a 	uxtb.w	r1, sl
 8010832:	f04f 0300 	mov.w	r3, #0
 8010836:	2901      	cmp	r1, #1
 8010838:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801083c:	f04f 0200 	mov.w	r2, #0
 8010840:	f200 8090 	bhi.w	8010964 <uxr_write_framed_msg+0x248>
 8010844:	1c51      	adds	r1, r2, #1
 8010846:	b2c9      	uxtb	r1, r1
 8010848:	2929      	cmp	r1, #41	@ 0x29
 801084a:	d8dc      	bhi.n	8010806 <uxr_write_framed_msg+0xea>
 801084c:	18a5      	adds	r5, r4, r2
 801084e:	4421      	add	r1, r4
 8010850:	3202      	adds	r2, #2
 8010852:	f088 0820 	eor.w	r8, r8, #32
 8010856:	4648      	mov	r0, r9
 8010858:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801085c:	b2d2      	uxtb	r2, r2
 801085e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8010862:	f04f 0901 	mov.w	r9, #1
 8010866:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801086a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801086e:	2800      	cmp	r0, #0
 8010870:	f040 8085 	bne.w	801097e <uxr_write_framed_msg+0x262>
 8010874:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010878:	e7bc      	b.n	80107f4 <uxr_write_framed_msg+0xd8>
 801087a:	4611      	mov	r1, r2
 801087c:	f04f 0c03 	mov.w	ip, #3
 8010880:	2204      	movs	r2, #4
 8010882:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010884:	4421      	add	r1, r4
 8010886:	b2dd      	uxtb	r5, r3
 8010888:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801088c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8010890:	44a4      	add	ip, r4
 8010892:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010896:	f080 0020 	eor.w	r0, r0, #32
 801089a:	2901      	cmp	r1, #1
 801089c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80108a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80108a4:	f63f af66 	bhi.w	8010774 <uxr_write_framed_msg+0x58>
 80108a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80108aa:	18a0      	adds	r0, r4, r2
 80108ac:	f085 0520 	eor.w	r5, r5, #32
 80108b0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80108b4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80108b8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80108bc:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80108c0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80108c4:	3202      	adds	r2, #2
 80108c6:	2801      	cmp	r0, #1
 80108c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80108cc:	f63f af60 	bhi.w	8010790 <uxr_write_framed_msg+0x74>
 80108d0:	1c50      	adds	r0, r2, #1
 80108d2:	18a5      	adds	r5, r4, r2
 80108d4:	fa54 f080 	uxtab	r0, r4, r0
 80108d8:	3202      	adds	r2, #2
 80108da:	f081 0120 	eor.w	r1, r1, #32
 80108de:	b2d2      	uxtb	r2, r2
 80108e0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80108e4:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 80108e8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80108ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	f47f af57 	bne.w	80107a4 <uxr_write_framed_msg+0x88>
 80108f6:	9301      	str	r3, [sp, #4]
 80108f8:	4698      	mov	r8, r3
 80108fa:	e779      	b.n	80107f0 <uxr_write_framed_msg+0xd4>
 80108fc:	2500      	movs	r5, #0
 80108fe:	e001      	b.n	8010904 <uxr_write_framed_msg+0x1e8>
 8010900:	2800      	cmp	r0, #0
 8010902:	d090      	beq.n	8010826 <uxr_write_framed_msg+0x10a>
 8010904:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010908:	1b52      	subs	r2, r2, r5
 801090a:	465b      	mov	r3, fp
 801090c:	4421      	add	r1, r4
 801090e:	4638      	mov	r0, r7
 8010910:	47b0      	blx	r6
 8010912:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010916:	4405      	add	r5, r0
 8010918:	4295      	cmp	r5, r2
 801091a:	d3f1      	bcc.n	8010900 <uxr_write_framed_msg+0x1e4>
 801091c:	d183      	bne.n	8010826 <uxr_write_framed_msg+0x10a>
 801091e:	f04f 0300 	mov.w	r3, #0
 8010922:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010928:	4543      	cmp	r3, r8
 801092a:	d964      	bls.n	80109f6 <uxr_write_framed_msg+0x2da>
 801092c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010930:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010934:	2901      	cmp	r1, #1
 8010936:	f04f 0200 	mov.w	r2, #0
 801093a:	f63f af3d 	bhi.w	80107b8 <uxr_write_framed_msg+0x9c>
 801093e:	1c51      	adds	r1, r2, #1
 8010940:	b2c9      	uxtb	r1, r1
 8010942:	2929      	cmp	r1, #41	@ 0x29
 8010944:	d8da      	bhi.n	80108fc <uxr_write_framed_msg+0x1e0>
 8010946:	18a0      	adds	r0, r4, r2
 8010948:	4421      	add	r1, r4
 801094a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801094e:	3202      	adds	r2, #2
 8010950:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8010954:	b2d2      	uxtb	r2, r2
 8010956:	f083 0020 	eor.w	r0, r3, #32
 801095a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801095e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010962:	e733      	b.n	80107cc <uxr_write_framed_msg+0xb0>
 8010964:	18a1      	adds	r1, r4, r2
 8010966:	3201      	adds	r2, #1
 8010968:	4648      	mov	r0, r9
 801096a:	b2d2      	uxtb	r2, r2
 801096c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010970:	f04f 0901 	mov.w	r9, #1
 8010974:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010978:	2800      	cmp	r0, #0
 801097a:	f43f af7b 	beq.w	8010874 <uxr_write_framed_msg+0x158>
 801097e:	2500      	movs	r5, #0
 8010980:	e002      	b.n	8010988 <uxr_write_framed_msg+0x26c>
 8010982:	2800      	cmp	r0, #0
 8010984:	f43f af4f 	beq.w	8010826 <uxr_write_framed_msg+0x10a>
 8010988:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801098c:	1b52      	subs	r2, r2, r5
 801098e:	465b      	mov	r3, fp
 8010990:	4421      	add	r1, r4
 8010992:	4638      	mov	r0, r7
 8010994:	47b0      	blx	r6
 8010996:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801099a:	4405      	add	r5, r0
 801099c:	4295      	cmp	r5, r2
 801099e:	d3f0      	bcc.n	8010982 <uxr_write_framed_msg+0x266>
 80109a0:	f47f af41 	bne.w	8010826 <uxr_write_framed_msg+0x10a>
 80109a4:	2300      	movs	r3, #0
 80109a6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80109aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109ac:	b298      	uxth	r0, r3
 80109ae:	b003      	add	sp, #12
 80109b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109b4:	217d      	movs	r1, #125	@ 0x7d
 80109b6:	f082 0220 	eor.w	r2, r2, #32
 80109ba:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80109be:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80109c2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80109c6:	2901      	cmp	r1, #1
 80109c8:	f04f 0203 	mov.w	r2, #3
 80109cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80109d0:	d804      	bhi.n	80109dc <uxr_write_framed_msg+0x2c0>
 80109d2:	4611      	mov	r1, r2
 80109d4:	f04f 0c04 	mov.w	ip, #4
 80109d8:	2205      	movs	r2, #5
 80109da:	e752      	b.n	8010882 <uxr_write_framed_msg+0x166>
 80109dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109de:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80109e2:	b2dd      	uxtb	r5, r3
 80109e4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80109e8:	2204      	movs	r2, #4
 80109ea:	2901      	cmp	r1, #1
 80109ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80109f0:	f63f aec0 	bhi.w	8010774 <uxr_write_framed_msg+0x58>
 80109f4:	e758      	b.n	80108a8 <uxr_write_framed_msg+0x18c>
 80109f6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80109fa:	fa5f f889 	uxtb.w	r8, r9
 80109fe:	9301      	str	r3, [sp, #4]
 8010a00:	2200      	movs	r2, #0
 8010a02:	e6f5      	b.n	80107f0 <uxr_write_framed_msg+0xd4>
 8010a04:	08019f4c 	.word	0x08019f4c

08010a08 <uxr_framing_read_transport>:
 8010a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	b083      	sub	sp, #12
 8010a10:	461f      	mov	r7, r3
 8010a12:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8010a16:	4689      	mov	r9, r1
 8010a18:	4692      	mov	sl, r2
 8010a1a:	f000 fc89 	bl	8011330 <uxr_millis>
 8010a1e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010a22:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8010a26:	42b3      	cmp	r3, r6
 8010a28:	4680      	mov	r8, r0
 8010a2a:	d061      	beq.n	8010af0 <uxr_framing_read_transport+0xe8>
 8010a2c:	d81c      	bhi.n	8010a68 <uxr_framing_read_transport+0x60>
 8010a2e:	1e75      	subs	r5, r6, #1
 8010a30:	1aed      	subs	r5, r5, r3
 8010a32:	b2ed      	uxtb	r5, r5
 8010a34:	2600      	movs	r6, #0
 8010a36:	455d      	cmp	r5, fp
 8010a38:	d81f      	bhi.n	8010a7a <uxr_framing_read_transport+0x72>
 8010a3a:	19ab      	adds	r3, r5, r6
 8010a3c:	455b      	cmp	r3, fp
 8010a3e:	bf84      	itt	hi
 8010a40:	ebab 0605 	subhi.w	r6, fp, r5
 8010a44:	b2f6      	uxtbhi	r6, r6
 8010a46:	b9ed      	cbnz	r5, 8010a84 <uxr_framing_read_transport+0x7c>
 8010a48:	f04f 0b00 	mov.w	fp, #0
 8010a4c:	f000 fc70 	bl	8011330 <uxr_millis>
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	eba0 0808 	sub.w	r8, r0, r8
 8010a56:	eba3 0308 	sub.w	r3, r3, r8
 8010a5a:	4658      	mov	r0, fp
 8010a5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010a60:	603b      	str	r3, [r7, #0]
 8010a62:	b003      	add	sp, #12
 8010a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a68:	2e00      	cmp	r6, #0
 8010a6a:	d049      	beq.n	8010b00 <uxr_framing_read_transport+0xf8>
 8010a6c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8010a70:	b2ed      	uxtb	r5, r5
 8010a72:	3e01      	subs	r6, #1
 8010a74:	455d      	cmp	r5, fp
 8010a76:	b2f6      	uxtb	r6, r6
 8010a78:	d9df      	bls.n	8010a3a <uxr_framing_read_transport+0x32>
 8010a7a:	fa5f f58b 	uxtb.w	r5, fp
 8010a7e:	2600      	movs	r6, #0
 8010a80:	2d00      	cmp	r5, #0
 8010a82:	d0e1      	beq.n	8010a48 <uxr_framing_read_transport+0x40>
 8010a84:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010a88:	3102      	adds	r1, #2
 8010a8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a8c:	9300      	str	r3, [sp, #0]
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	4421      	add	r1, r4
 8010a92:	462a      	mov	r2, r5
 8010a94:	4650      	mov	r0, sl
 8010a96:	47c8      	blx	r9
 8010a98:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8010b08 <uxr_framing_read_transport+0x100>)
 8010a9e:	4403      	add	r3, r0
 8010aa0:	0859      	lsrs	r1, r3, #1
 8010aa2:	fba2 2101 	umull	r2, r1, r2, r1
 8010aa6:	0889      	lsrs	r1, r1, #2
 8010aa8:	222a      	movs	r2, #42	@ 0x2a
 8010aaa:	fb02 3111 	mls	r1, r2, r1, r3
 8010aae:	4683      	mov	fp, r0
 8010ab0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	d0c7      	beq.n	8010a48 <uxr_framing_read_transport+0x40>
 8010ab8:	42a8      	cmp	r0, r5
 8010aba:	d1c7      	bne.n	8010a4c <uxr_framing_read_transport+0x44>
 8010abc:	2e00      	cmp	r6, #0
 8010abe:	d0c5      	beq.n	8010a4c <uxr_framing_read_transport+0x44>
 8010ac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ac2:	9300      	str	r3, [sp, #0]
 8010ac4:	3102      	adds	r1, #2
 8010ac6:	4632      	mov	r2, r6
 8010ac8:	4421      	add	r1, r4
 8010aca:	2300      	movs	r3, #0
 8010acc:	4650      	mov	r0, sl
 8010ace:	47c8      	blx	r9
 8010ad0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8010b08 <uxr_framing_read_transport+0x100>)
 8010ad6:	180b      	adds	r3, r1, r0
 8010ad8:	0859      	lsrs	r1, r3, #1
 8010ada:	fba2 1201 	umull	r1, r2, r2, r1
 8010ade:	0892      	lsrs	r2, r2, #2
 8010ae0:	212a      	movs	r1, #42	@ 0x2a
 8010ae2:	fb01 3312 	mls	r3, r1, r2, r3
 8010ae6:	eb00 0b05 	add.w	fp, r0, r5
 8010aea:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010aee:	e7ad      	b.n	8010a4c <uxr_framing_read_transport+0x44>
 8010af0:	2600      	movs	r6, #0
 8010af2:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8010af6:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8010af8:	d9bf      	bls.n	8010a7a <uxr_framing_read_transport+0x72>
 8010afa:	2102      	movs	r1, #2
 8010afc:	2529      	movs	r5, #41	@ 0x29
 8010afe:	e7c4      	b.n	8010a8a <uxr_framing_read_transport+0x82>
 8010b00:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8010b04:	b2ed      	uxtb	r5, r5
 8010b06:	e796      	b.n	8010a36 <uxr_framing_read_transport+0x2e>
 8010b08:	30c30c31 	.word	0x30c30c31

08010b0c <uxr_read_framed_msg>:
 8010b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b10:	461e      	mov	r6, r3
 8010b12:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8010b16:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8010b1a:	429d      	cmp	r5, r3
 8010b1c:	b083      	sub	sp, #12
 8010b1e:	4604      	mov	r4, r0
 8010b20:	4688      	mov	r8, r1
 8010b22:	4691      	mov	r9, r2
 8010b24:	f000 8188 	beq.w	8010e38 <uxr_read_framed_msg+0x32c>
 8010b28:	7823      	ldrb	r3, [r4, #0]
 8010b2a:	4dc1      	ldr	r5, [pc, #772]	@ (8010e30 <uxr_read_framed_msg+0x324>)
 8010b2c:	4fc1      	ldr	r7, [pc, #772]	@ (8010e34 <uxr_read_framed_msg+0x328>)
 8010b2e:	2b07      	cmp	r3, #7
 8010b30:	d8fd      	bhi.n	8010b2e <uxr_read_framed_msg+0x22>
 8010b32:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010b36:	0115      	.short	0x0115
 8010b38:	00d600f6 	.word	0x00d600f6
 8010b3c:	009000b9 	.word	0x009000b9
 8010b40:	0030004d 	.word	0x0030004d
 8010b44:	0008      	.short	0x0008
 8010b46:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010b4a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010b4e:	4299      	cmp	r1, r3
 8010b50:	f000 814a 	beq.w	8010de8 <uxr_read_framed_msg+0x2dc>
 8010b54:	18e2      	adds	r2, r4, r3
 8010b56:	7892      	ldrb	r2, [r2, #2]
 8010b58:	2a7d      	cmp	r2, #125	@ 0x7d
 8010b5a:	f000 8199 	beq.w	8010e90 <uxr_read_framed_msg+0x384>
 8010b5e:	3301      	adds	r3, #1
 8010b60:	0858      	lsrs	r0, r3, #1
 8010b62:	fba5 1000 	umull	r1, r0, r5, r0
 8010b66:	0880      	lsrs	r0, r0, #2
 8010b68:	212a      	movs	r1, #42	@ 0x2a
 8010b6a:	fb01 3310 	mls	r3, r1, r0, r3
 8010b6e:	2a7e      	cmp	r2, #126	@ 0x7e
 8010b70:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010b74:	f000 8252 	beq.w	801101c <uxr_read_framed_msg+0x510>
 8010b78:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010b7a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8010b7c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	2200      	movs	r2, #0
 8010b84:	4299      	cmp	r1, r3
 8010b86:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8010b88:	7022      	strb	r2, [r4, #0]
 8010b8a:	f000 8179 	beq.w	8010e80 <uxr_read_framed_msg+0x374>
 8010b8e:	2000      	movs	r0, #0
 8010b90:	b003      	add	sp, #12
 8010b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b96:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010b9a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010b9e:	4299      	cmp	r1, r3
 8010ba0:	f000 8131 	beq.w	8010e06 <uxr_read_framed_msg+0x2fa>
 8010ba4:	18e2      	adds	r2, r4, r3
 8010ba6:	7890      	ldrb	r0, [r2, #2]
 8010ba8:	287d      	cmp	r0, #125	@ 0x7d
 8010baa:	f000 8190 	beq.w	8010ece <uxr_read_framed_msg+0x3c2>
 8010bae:	3301      	adds	r3, #1
 8010bb0:	085a      	lsrs	r2, r3, #1
 8010bb2:	fba5 1202 	umull	r1, r2, r5, r2
 8010bb6:	0892      	lsrs	r2, r2, #2
 8010bb8:	212a      	movs	r1, #42	@ 0x2a
 8010bba:	fb01 3312 	mls	r3, r1, r2, r3
 8010bbe:	287e      	cmp	r0, #126	@ 0x7e
 8010bc0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010bc4:	f000 821a 	beq.w	8010ffc <uxr_read_framed_msg+0x4f0>
 8010bc8:	2307      	movs	r3, #7
 8010bca:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8010bcc:	7023      	strb	r3, [r4, #0]
 8010bce:	e7ae      	b.n	8010b2e <uxr_read_framed_msg+0x22>
 8010bd0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010bd2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8010bd6:	459e      	cmp	lr, r3
 8010bd8:	d938      	bls.n	8010c4c <uxr_read_framed_msg+0x140>
 8010bda:	ee07 8a90 	vmov	s15, r8
 8010bde:	212a      	movs	r1, #42	@ 0x2a
 8010be0:	e020      	b.n	8010c24 <uxr_read_framed_msg+0x118>
 8010be2:	f89b c002 	ldrb.w	ip, [fp, #2]
 8010be6:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8010bea:	f000 80d4 	beq.w	8010d96 <uxr_read_framed_msg+0x28a>
 8010bee:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010bf2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010bf6:	f000 8219 	beq.w	801102c <uxr_read_framed_msg+0x520>
 8010bfa:	f806 c003 	strb.w	ip, [r6, r3]
 8010bfe:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8010c02:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010c04:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8010c08:	ea8a 000c 	eor.w	r0, sl, ip
 8010c0c:	b2c0      	uxtb	r0, r0
 8010c0e:	3301      	adds	r3, #1
 8010c10:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8010c1a:	4573      	cmp	r3, lr
 8010c1c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8010c1e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8010c20:	f080 8120 	bcs.w	8010e64 <uxr_read_framed_msg+0x358>
 8010c24:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8010c28:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8010c2c:	f100 0c01 	add.w	ip, r0, #1
 8010c30:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010c34:	fba5 8202 	umull	r8, r2, r5, r2
 8010c38:	0892      	lsrs	r2, r2, #2
 8010c3a:	4582      	cmp	sl, r0
 8010c3c:	eb04 0b00 	add.w	fp, r4, r0
 8010c40:	fb01 c212 	mls	r2, r1, r2, ip
 8010c44:	d1cd      	bne.n	8010be2 <uxr_read_framed_msg+0xd6>
 8010c46:	ee17 8a90 	vmov	r8, s15
 8010c4a:	459e      	cmp	lr, r3
 8010c4c:	f040 8111 	bne.w	8010e72 <uxr_read_framed_msg+0x366>
 8010c50:	2306      	movs	r3, #6
 8010c52:	7023      	strb	r3, [r4, #0]
 8010c54:	e76b      	b.n	8010b2e <uxr_read_framed_msg+0x22>
 8010c56:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010c5a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010c5e:	4298      	cmp	r0, r3
 8010c60:	f000 80c2 	beq.w	8010de8 <uxr_read_framed_msg+0x2dc>
 8010c64:	18e2      	adds	r2, r4, r3
 8010c66:	7891      	ldrb	r1, [r2, #2]
 8010c68:	297d      	cmp	r1, #125	@ 0x7d
 8010c6a:	f000 814c 	beq.w	8010f06 <uxr_read_framed_msg+0x3fa>
 8010c6e:	3301      	adds	r3, #1
 8010c70:	085a      	lsrs	r2, r3, #1
 8010c72:	fba5 0202 	umull	r0, r2, r5, r2
 8010c76:	0892      	lsrs	r2, r2, #2
 8010c78:	202a      	movs	r0, #42	@ 0x2a
 8010c7a:	fb00 3312 	mls	r3, r0, r2, r3
 8010c7e:	297e      	cmp	r1, #126	@ 0x7e
 8010c80:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010c84:	f000 81ca 	beq.w	801101c <uxr_read_framed_msg+0x510>
 8010c88:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8010c8a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010c8e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	2000      	movs	r0, #0
 8010c94:	428b      	cmp	r3, r1
 8010c96:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010c98:	8660      	strh	r0, [r4, #50]	@ 0x32
 8010c9a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8010c9c:	f240 80df 	bls.w	8010e5e <uxr_read_framed_msg+0x352>
 8010ca0:	7020      	strb	r0, [r4, #0]
 8010ca2:	b003      	add	sp, #12
 8010ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010cac:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010cb0:	4299      	cmp	r1, r3
 8010cb2:	f000 80a8 	beq.w	8010e06 <uxr_read_framed_msg+0x2fa>
 8010cb6:	18e2      	adds	r2, r4, r3
 8010cb8:	7890      	ldrb	r0, [r2, #2]
 8010cba:	287d      	cmp	r0, #125	@ 0x7d
 8010cbc:	f000 8164 	beq.w	8010f88 <uxr_read_framed_msg+0x47c>
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	085a      	lsrs	r2, r3, #1
 8010cc4:	fba5 1202 	umull	r1, r2, r5, r2
 8010cc8:	0892      	lsrs	r2, r2, #2
 8010cca:	212a      	movs	r1, #42	@ 0x2a
 8010ccc:	fb01 3312 	mls	r3, r1, r2, r3
 8010cd0:	287e      	cmp	r0, #126	@ 0x7e
 8010cd2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010cd6:	f000 8191 	beq.w	8010ffc <uxr_read_framed_msg+0x4f0>
 8010cda:	2304      	movs	r3, #4
 8010cdc:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010cde:	7023      	strb	r3, [r4, #0]
 8010ce0:	e725      	b.n	8010b2e <uxr_read_framed_msg+0x22>
 8010ce2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010ce6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010cea:	4290      	cmp	r0, r2
 8010cec:	f000 80b3 	beq.w	8010e56 <uxr_read_framed_msg+0x34a>
 8010cf0:	18a3      	adds	r3, r4, r2
 8010cf2:	7899      	ldrb	r1, [r3, #2]
 8010cf4:	297d      	cmp	r1, #125	@ 0x7d
 8010cf6:	f000 8164 	beq.w	8010fc2 <uxr_read_framed_msg+0x4b6>
 8010cfa:	3201      	adds	r2, #1
 8010cfc:	0850      	lsrs	r0, r2, #1
 8010cfe:	fba5 3000 	umull	r3, r0, r5, r0
 8010d02:	0880      	lsrs	r0, r0, #2
 8010d04:	232a      	movs	r3, #42	@ 0x2a
 8010d06:	fb03 2210 	mls	r2, r3, r0, r2
 8010d0a:	297e      	cmp	r1, #126	@ 0x7e
 8010d0c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010d10:	f000 8188 	beq.w	8011024 <uxr_read_framed_msg+0x518>
 8010d14:	7863      	ldrb	r3, [r4, #1]
 8010d16:	428b      	cmp	r3, r1
 8010d18:	bf0c      	ite	eq
 8010d1a:	2303      	moveq	r3, #3
 8010d1c:	2300      	movne	r3, #0
 8010d1e:	7023      	strb	r3, [r4, #0]
 8010d20:	e705      	b.n	8010b2e <uxr_read_framed_msg+0x22>
 8010d22:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010d26:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	4299      	cmp	r1, r3
 8010d2e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8010d32:	d06c      	beq.n	8010e0e <uxr_read_framed_msg+0x302>
 8010d34:	18e2      	adds	r2, r4, r3
 8010d36:	7890      	ldrb	r0, [r2, #2]
 8010d38:	287d      	cmp	r0, #125	@ 0x7d
 8010d3a:	f000 8101 	beq.w	8010f40 <uxr_read_framed_msg+0x434>
 8010d3e:	3301      	adds	r3, #1
 8010d40:	085a      	lsrs	r2, r3, #1
 8010d42:	fba5 1202 	umull	r1, r2, r5, r2
 8010d46:	0892      	lsrs	r2, r2, #2
 8010d48:	212a      	movs	r1, #42	@ 0x2a
 8010d4a:	fb01 3312 	mls	r3, r1, r2, r3
 8010d4e:	287e      	cmp	r0, #126	@ 0x7e
 8010d50:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8010d54:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010d58:	d059      	beq.n	8010e0e <uxr_read_framed_msg+0x302>
 8010d5a:	2302      	movs	r3, #2
 8010d5c:	7023      	strb	r3, [r4, #0]
 8010d5e:	e6e6      	b.n	8010b2e <uxr_read_framed_msg+0x22>
 8010d60:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8010d64:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010d68:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8010d6c:	1c51      	adds	r1, r2, #1
 8010d6e:	084b      	lsrs	r3, r1, #1
 8010d70:	fba5 c303 	umull	ip, r3, r5, r3
 8010d74:	089b      	lsrs	r3, r3, #2
 8010d76:	fb0e 1313 	mls	r3, lr, r3, r1
 8010d7a:	4592      	cmp	sl, r2
 8010d7c:	eb04 0002 	add.w	r0, r4, r2
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	f43f af04 	beq.w	8010b8e <uxr_read_framed_msg+0x82>
 8010d86:	7883      	ldrb	r3, [r0, #2]
 8010d88:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010d8c:	2b7e      	cmp	r3, #126	@ 0x7e
 8010d8e:	d1ed      	bne.n	8010d6c <uxr_read_framed_msg+0x260>
 8010d90:	2301      	movs	r3, #1
 8010d92:	7023      	strb	r3, [r4, #0]
 8010d94:	e6cb      	b.n	8010b2e <uxr_read_framed_msg+0x22>
 8010d96:	f100 0c01 	add.w	ip, r0, #1
 8010d9a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010d9e:	fba5 8202 	umull	r8, r2, r5, r2
 8010da2:	0892      	lsrs	r2, r2, #2
 8010da4:	fb01 c212 	mls	r2, r1, r2, ip
 8010da8:	eb04 0c02 	add.w	ip, r4, r2
 8010dac:	b2d2      	uxtb	r2, r2
 8010dae:	4592      	cmp	sl, r2
 8010db0:	f100 0002 	add.w	r0, r0, #2
 8010db4:	f43f af47 	beq.w	8010c46 <uxr_read_framed_msg+0x13a>
 8010db8:	0842      	lsrs	r2, r0, #1
 8010dba:	f89c a002 	ldrb.w	sl, [ip, #2]
 8010dbe:	fba5 8202 	umull	r8, r2, r5, r2
 8010dc2:	0892      	lsrs	r2, r2, #2
 8010dc4:	fb01 0012 	mls	r0, r1, r2, r0
 8010dc8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8010dcc:	f08a 0c20 	eor.w	ip, sl, #32
 8010dd0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8010dd4:	f47f af11 	bne.w	8010bfa <uxr_read_framed_msg+0xee>
 8010dd8:	459e      	cmp	lr, r3
 8010dda:	ee17 8a90 	vmov	r8, s15
 8010dde:	f43f af37 	beq.w	8010c50 <uxr_read_framed_msg+0x144>
 8010de2:	2301      	movs	r3, #1
 8010de4:	7023      	strb	r3, [r4, #0]
 8010de6:	e6a2      	b.n	8010b2e <uxr_read_framed_msg+0x22>
 8010de8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010dea:	9300      	str	r3, [sp, #0]
 8010dec:	2301      	movs	r3, #1
 8010dee:	9301      	str	r3, [sp, #4]
 8010df0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010df2:	464a      	mov	r2, r9
 8010df4:	4641      	mov	r1, r8
 8010df6:	4620      	mov	r0, r4
 8010df8:	f7ff fe06 	bl	8010a08 <uxr_framing_read_transport>
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	f43f aec6 	beq.w	8010b8e <uxr_read_framed_msg+0x82>
 8010e02:	7823      	ldrb	r3, [r4, #0]
 8010e04:	e693      	b.n	8010b2e <uxr_read_framed_msg+0x22>
 8010e06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e08:	9300      	str	r3, [sp, #0]
 8010e0a:	2302      	movs	r3, #2
 8010e0c:	e7ef      	b.n	8010dee <uxr_read_framed_msg+0x2e2>
 8010e0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	2304      	movs	r3, #4
 8010e14:	9301      	str	r3, [sp, #4]
 8010e16:	464a      	mov	r2, r9
 8010e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e1a:	4641      	mov	r1, r8
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	f7ff fdf3 	bl	8010a08 <uxr_framing_read_transport>
 8010e22:	2800      	cmp	r0, #0
 8010e24:	d1ed      	bne.n	8010e02 <uxr_read_framed_msg+0x2f6>
 8010e26:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010e2a:	2b7e      	cmp	r3, #126	@ 0x7e
 8010e2c:	d0e9      	beq.n	8010e02 <uxr_read_framed_msg+0x2f6>
 8010e2e:	e6ae      	b.n	8010b8e <uxr_read_framed_msg+0x82>
 8010e30:	30c30c31 	.word	0x30c30c31
 8010e34:	08019f4c 	.word	0x08019f4c
 8010e38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	2305      	movs	r3, #5
 8010e3e:	9301      	str	r3, [sp, #4]
 8010e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e42:	f7ff fde1 	bl	8010a08 <uxr_framing_read_transport>
 8010e46:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010e4a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	f43f ae9d 	beq.w	8010b8e <uxr_read_framed_msg+0x82>
 8010e54:	e668      	b.n	8010b28 <uxr_read_framed_msg+0x1c>
 8010e56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e58:	9300      	str	r3, [sp, #0]
 8010e5a:	2303      	movs	r3, #3
 8010e5c:	e7c7      	b.n	8010dee <uxr_read_framed_msg+0x2e2>
 8010e5e:	2305      	movs	r3, #5
 8010e60:	7023      	strb	r3, [r4, #0]
 8010e62:	e664      	b.n	8010b2e <uxr_read_framed_msg+0x22>
 8010e64:	ee17 8a90 	vmov	r8, s15
 8010e68:	f43f aef2 	beq.w	8010c50 <uxr_read_framed_msg+0x144>
 8010e6c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010e70:	d08e      	beq.n	8010d90 <uxr_read_framed_msg+0x284>
 8010e72:	ebae 0303 	sub.w	r3, lr, r3
 8010e76:	3302      	adds	r3, #2
 8010e78:	9301      	str	r3, [sp, #4]
 8010e7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e7c:	9300      	str	r3, [sp, #0]
 8010e7e:	e7b7      	b.n	8010df0 <uxr_read_framed_msg+0x2e4>
 8010e80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e82:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010e86:	7013      	strb	r3, [r2, #0]
 8010e88:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8010e8a:	b003      	add	sp, #12
 8010e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e90:	f103 0c01 	add.w	ip, r3, #1
 8010e94:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010e98:	fba5 0202 	umull	r0, r2, r5, r2
 8010e9c:	0892      	lsrs	r2, r2, #2
 8010e9e:	202a      	movs	r0, #42	@ 0x2a
 8010ea0:	fb00 c212 	mls	r2, r0, r2, ip
 8010ea4:	fa5f fc82 	uxtb.w	ip, r2
 8010ea8:	4561      	cmp	r1, ip
 8010eaa:	d09d      	beq.n	8010de8 <uxr_read_framed_msg+0x2dc>
 8010eac:	3302      	adds	r3, #2
 8010eae:	4422      	add	r2, r4
 8010eb0:	0859      	lsrs	r1, r3, #1
 8010eb2:	7892      	ldrb	r2, [r2, #2]
 8010eb4:	fba5 c101 	umull	ip, r1, r5, r1
 8010eb8:	0889      	lsrs	r1, r1, #2
 8010eba:	fb00 3311 	mls	r3, r0, r1, r3
 8010ebe:	2a7e      	cmp	r2, #126	@ 0x7e
 8010ec0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010ec4:	f000 80aa 	beq.w	801101c <uxr_read_framed_msg+0x510>
 8010ec8:	f082 0220 	eor.w	r2, r2, #32
 8010ecc:	e654      	b.n	8010b78 <uxr_read_framed_msg+0x6c>
 8010ece:	1c58      	adds	r0, r3, #1
 8010ed0:	0842      	lsrs	r2, r0, #1
 8010ed2:	fba5 c202 	umull	ip, r2, r5, r2
 8010ed6:	0892      	lsrs	r2, r2, #2
 8010ed8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010edc:	fb0c 0212 	mls	r2, ip, r2, r0
 8010ee0:	b2d0      	uxtb	r0, r2
 8010ee2:	4281      	cmp	r1, r0
 8010ee4:	d08f      	beq.n	8010e06 <uxr_read_framed_msg+0x2fa>
 8010ee6:	4422      	add	r2, r4
 8010ee8:	3302      	adds	r3, #2
 8010eea:	7890      	ldrb	r0, [r2, #2]
 8010eec:	085a      	lsrs	r2, r3, #1
 8010eee:	fba5 1202 	umull	r1, r2, r5, r2
 8010ef2:	0892      	lsrs	r2, r2, #2
 8010ef4:	fb0c 3312 	mls	r3, ip, r2, r3
 8010ef8:	287e      	cmp	r0, #126	@ 0x7e
 8010efa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010efe:	d07d      	beq.n	8010ffc <uxr_read_framed_msg+0x4f0>
 8010f00:	f080 0020 	eor.w	r0, r0, #32
 8010f04:	e660      	b.n	8010bc8 <uxr_read_framed_msg+0xbc>
 8010f06:	1c59      	adds	r1, r3, #1
 8010f08:	084a      	lsrs	r2, r1, #1
 8010f0a:	fba5 c202 	umull	ip, r2, r5, r2
 8010f0e:	0892      	lsrs	r2, r2, #2
 8010f10:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010f14:	fb0c 1212 	mls	r2, ip, r2, r1
 8010f18:	b2d1      	uxtb	r1, r2
 8010f1a:	4288      	cmp	r0, r1
 8010f1c:	f43f af64 	beq.w	8010de8 <uxr_read_framed_msg+0x2dc>
 8010f20:	4422      	add	r2, r4
 8010f22:	3302      	adds	r3, #2
 8010f24:	7891      	ldrb	r1, [r2, #2]
 8010f26:	085a      	lsrs	r2, r3, #1
 8010f28:	fba5 0202 	umull	r0, r2, r5, r2
 8010f2c:	0892      	lsrs	r2, r2, #2
 8010f2e:	fb0c 3312 	mls	r3, ip, r2, r3
 8010f32:	297e      	cmp	r1, #126	@ 0x7e
 8010f34:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010f38:	d070      	beq.n	801101c <uxr_read_framed_msg+0x510>
 8010f3a:	f081 0120 	eor.w	r1, r1, #32
 8010f3e:	e6a3      	b.n	8010c88 <uxr_read_framed_msg+0x17c>
 8010f40:	f103 0c01 	add.w	ip, r3, #1
 8010f44:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010f48:	fba5 0202 	umull	r0, r2, r5, r2
 8010f4c:	0892      	lsrs	r2, r2, #2
 8010f4e:	202a      	movs	r0, #42	@ 0x2a
 8010f50:	fb00 c212 	mls	r2, r0, r2, ip
 8010f54:	fa5f fc82 	uxtb.w	ip, r2
 8010f58:	4561      	cmp	r1, ip
 8010f5a:	f43f af58 	beq.w	8010e0e <uxr_read_framed_msg+0x302>
 8010f5e:	4422      	add	r2, r4
 8010f60:	3302      	adds	r3, #2
 8010f62:	7891      	ldrb	r1, [r2, #2]
 8010f64:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010f68:	085a      	lsrs	r2, r3, #1
 8010f6a:	fba5 c202 	umull	ip, r2, r5, r2
 8010f6e:	0892      	lsrs	r2, r2, #2
 8010f70:	fb00 3312 	mls	r3, r0, r2, r3
 8010f74:	297e      	cmp	r1, #126	@ 0x7e
 8010f76:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010f7a:	f43f af48 	beq.w	8010e0e <uxr_read_framed_msg+0x302>
 8010f7e:	f081 0120 	eor.w	r1, r1, #32
 8010f82:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010f86:	e6e8      	b.n	8010d5a <uxr_read_framed_msg+0x24e>
 8010f88:	1c58      	adds	r0, r3, #1
 8010f8a:	0842      	lsrs	r2, r0, #1
 8010f8c:	fba5 c202 	umull	ip, r2, r5, r2
 8010f90:	0892      	lsrs	r2, r2, #2
 8010f92:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010f96:	fb0c 0212 	mls	r2, ip, r2, r0
 8010f9a:	b2d0      	uxtb	r0, r2
 8010f9c:	4281      	cmp	r1, r0
 8010f9e:	f43f af32 	beq.w	8010e06 <uxr_read_framed_msg+0x2fa>
 8010fa2:	4422      	add	r2, r4
 8010fa4:	3302      	adds	r3, #2
 8010fa6:	7890      	ldrb	r0, [r2, #2]
 8010fa8:	085a      	lsrs	r2, r3, #1
 8010faa:	fba5 1202 	umull	r1, r2, r5, r2
 8010fae:	0892      	lsrs	r2, r2, #2
 8010fb0:	fb0c 3312 	mls	r3, ip, r2, r3
 8010fb4:	287e      	cmp	r0, #126	@ 0x7e
 8010fb6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010fba:	d01f      	beq.n	8010ffc <uxr_read_framed_msg+0x4f0>
 8010fbc:	f080 0020 	eor.w	r0, r0, #32
 8010fc0:	e68b      	b.n	8010cda <uxr_read_framed_msg+0x1ce>
 8010fc2:	1c51      	adds	r1, r2, #1
 8010fc4:	084b      	lsrs	r3, r1, #1
 8010fc6:	fba5 c303 	umull	ip, r3, r5, r3
 8010fca:	089b      	lsrs	r3, r3, #2
 8010fcc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010fd0:	fb0c 1313 	mls	r3, ip, r3, r1
 8010fd4:	b2d9      	uxtb	r1, r3
 8010fd6:	4288      	cmp	r0, r1
 8010fd8:	f43f af3d 	beq.w	8010e56 <uxr_read_framed_msg+0x34a>
 8010fdc:	3202      	adds	r2, #2
 8010fde:	4423      	add	r3, r4
 8010fe0:	0850      	lsrs	r0, r2, #1
 8010fe2:	789b      	ldrb	r3, [r3, #2]
 8010fe4:	fba5 1000 	umull	r1, r0, r5, r0
 8010fe8:	0880      	lsrs	r0, r0, #2
 8010fea:	fb0c 2210 	mls	r2, ip, r0, r2
 8010fee:	2b7e      	cmp	r3, #126	@ 0x7e
 8010ff0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010ff4:	d016      	beq.n	8011024 <uxr_read_framed_msg+0x518>
 8010ff6:	f083 0120 	eor.w	r1, r3, #32
 8010ffa:	e68b      	b.n	8010d14 <uxr_read_framed_msg+0x208>
 8010ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	2302      	movs	r3, #2
 8011002:	9301      	str	r3, [sp, #4]
 8011004:	464a      	mov	r2, r9
 8011006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011008:	4641      	mov	r1, r8
 801100a:	4620      	mov	r0, r4
 801100c:	f7ff fcfc 	bl	8010a08 <uxr_framing_read_transport>
 8011010:	2800      	cmp	r0, #0
 8011012:	f47f aef6 	bne.w	8010e02 <uxr_read_framed_msg+0x2f6>
 8011016:	2301      	movs	r3, #1
 8011018:	7023      	strb	r3, [r4, #0]
 801101a:	e588      	b.n	8010b2e <uxr_read_framed_msg+0x22>
 801101c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	2301      	movs	r3, #1
 8011022:	e7ee      	b.n	8011002 <uxr_read_framed_msg+0x4f6>
 8011024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011026:	9300      	str	r3, [sp, #0]
 8011028:	2303      	movs	r3, #3
 801102a:	e7ea      	b.n	8011002 <uxr_read_framed_msg+0x4f6>
 801102c:	ee17 8a90 	vmov	r8, s15
 8011030:	e6ae      	b.n	8010d90 <uxr_read_framed_msg+0x284>
 8011032:	bf00      	nop

08011034 <uxr_stream_id>:
 8011034:	2901      	cmp	r1, #1
 8011036:	b082      	sub	sp, #8
 8011038:	d01d      	beq.n	8011076 <uxr_stream_id+0x42>
 801103a:	2902      	cmp	r1, #2
 801103c:	f04f 0c00 	mov.w	ip, #0
 8011040:	d01e      	beq.n	8011080 <uxr_stream_id+0x4c>
 8011042:	2300      	movs	r3, #0
 8011044:	f36c 0307 	bfi	r3, ip, #0, #8
 8011048:	f360 230f 	bfi	r3, r0, #8, #8
 801104c:	f361 4317 	bfi	r3, r1, #16, #8
 8011050:	f362 631f 	bfi	r3, r2, #24, #8
 8011054:	b2da      	uxtb	r2, r3
 8011056:	2000      	movs	r0, #0
 8011058:	f362 0007 	bfi	r0, r2, #0, #8
 801105c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011060:	f362 200f 	bfi	r0, r2, #8, #8
 8011064:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011068:	f362 4017 	bfi	r0, r2, #16, #8
 801106c:	0e1b      	lsrs	r3, r3, #24
 801106e:	f363 601f 	bfi	r0, r3, #24, #8
 8011072:	b002      	add	sp, #8
 8011074:	4770      	bx	lr
 8011076:	f100 0c01 	add.w	ip, r0, #1
 801107a:	fa5f fc8c 	uxtb.w	ip, ip
 801107e:	e7e0      	b.n	8011042 <uxr_stream_id+0xe>
 8011080:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011084:	e7dd      	b.n	8011042 <uxr_stream_id+0xe>
 8011086:	bf00      	nop

08011088 <uxr_stream_id_from_raw>:
 8011088:	b082      	sub	sp, #8
 801108a:	b130      	cbz	r0, 801109a <uxr_stream_id_from_raw+0x12>
 801108c:	0603      	lsls	r3, r0, #24
 801108e:	d420      	bmi.n	80110d2 <uxr_stream_id_from_raw+0x4a>
 8011090:	1e42      	subs	r2, r0, #1
 8011092:	b2d2      	uxtb	r2, r2
 8011094:	f04f 0c01 	mov.w	ip, #1
 8011098:	e001      	b.n	801109e <uxr_stream_id_from_raw+0x16>
 801109a:	4684      	mov	ip, r0
 801109c:	4602      	mov	r2, r0
 801109e:	2300      	movs	r3, #0
 80110a0:	f360 0307 	bfi	r3, r0, #0, #8
 80110a4:	f362 230f 	bfi	r3, r2, #8, #8
 80110a8:	f36c 4317 	bfi	r3, ip, #16, #8
 80110ac:	f361 631f 	bfi	r3, r1, #24, #8
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	2000      	movs	r0, #0
 80110b4:	f362 0007 	bfi	r0, r2, #0, #8
 80110b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80110bc:	f362 200f 	bfi	r0, r2, #8, #8
 80110c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80110c4:	f362 4017 	bfi	r0, r2, #16, #8
 80110c8:	0e1b      	lsrs	r3, r3, #24
 80110ca:	f363 601f 	bfi	r0, r3, #24, #8
 80110ce:	b002      	add	sp, #8
 80110d0:	4770      	bx	lr
 80110d2:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80110d6:	f04f 0c02 	mov.w	ip, #2
 80110da:	e7e0      	b.n	801109e <uxr_stream_id_from_raw+0x16>

080110dc <uxr_init_stream_storage>:
 80110dc:	2300      	movs	r3, #0
 80110de:	7403      	strb	r3, [r0, #16]
 80110e0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80110e4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80110e8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80110ec:	4770      	bx	lr
 80110ee:	bf00      	nop

080110f0 <uxr_reset_stream_storage>:
 80110f0:	b570      	push	{r4, r5, r6, lr}
 80110f2:	7c03      	ldrb	r3, [r0, #16]
 80110f4:	4604      	mov	r4, r0
 80110f6:	b153      	cbz	r3, 801110e <uxr_reset_stream_storage+0x1e>
 80110f8:	4606      	mov	r6, r0
 80110fa:	2500      	movs	r5, #0
 80110fc:	4630      	mov	r0, r6
 80110fe:	f005 fd6d 	bl	8016bdc <uxr_reset_output_best_effort_stream>
 8011102:	7c23      	ldrb	r3, [r4, #16]
 8011104:	3501      	adds	r5, #1
 8011106:	42ab      	cmp	r3, r5
 8011108:	f106 0610 	add.w	r6, r6, #16
 801110c:	d8f6      	bhi.n	80110fc <uxr_reset_stream_storage+0xc>
 801110e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011112:	b163      	cbz	r3, 801112e <uxr_reset_stream_storage+0x3e>
 8011114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011118:	2500      	movs	r5, #0
 801111a:	4630      	mov	r0, r6
 801111c:	f005 fb60 	bl	80167e0 <uxr_reset_input_best_effort_stream>
 8011120:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011124:	3501      	adds	r5, #1
 8011126:	42ab      	cmp	r3, r5
 8011128:	f106 0602 	add.w	r6, r6, #2
 801112c:	d8f5      	bhi.n	801111a <uxr_reset_stream_storage+0x2a>
 801112e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011132:	b163      	cbz	r3, 801114e <uxr_reset_stream_storage+0x5e>
 8011134:	f104 0618 	add.w	r6, r4, #24
 8011138:	2500      	movs	r5, #0
 801113a:	4630      	mov	r0, r6
 801113c:	f005 fdfa 	bl	8016d34 <uxr_reset_output_reliable_stream>
 8011140:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011144:	3501      	adds	r5, #1
 8011146:	42ab      	cmp	r3, r5
 8011148:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 801114c:	d8f5      	bhi.n	801113a <uxr_reset_stream_storage+0x4a>
 801114e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011152:	b163      	cbz	r3, 801116e <uxr_reset_stream_storage+0x7e>
 8011154:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011158:	2500      	movs	r5, #0
 801115a:	4630      	mov	r0, r6
 801115c:	f005 fbb4 	bl	80168c8 <uxr_reset_input_reliable_stream>
 8011160:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011164:	3501      	adds	r5, #1
 8011166:	42ab      	cmp	r3, r5
 8011168:	f106 0618 	add.w	r6, r6, #24
 801116c:	d8f5      	bhi.n	801115a <uxr_reset_stream_storage+0x6a>
 801116e:	bd70      	pop	{r4, r5, r6, pc}

08011170 <uxr_add_output_best_effort_buffer>:
 8011170:	b510      	push	{r4, lr}
 8011172:	7c04      	ldrb	r4, [r0, #16]
 8011174:	f104 0c01 	add.w	ip, r4, #1
 8011178:	b082      	sub	sp, #8
 801117a:	f880 c010 	strb.w	ip, [r0, #16]
 801117e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011182:	f005 fd21 	bl	8016bc8 <uxr_init_output_best_effort_stream>
 8011186:	2201      	movs	r2, #1
 8011188:	4611      	mov	r1, r2
 801118a:	4620      	mov	r0, r4
 801118c:	b002      	add	sp, #8
 801118e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011192:	f7ff bf4f 	b.w	8011034 <uxr_stream_id>
 8011196:	bf00      	nop

08011198 <uxr_add_output_reliable_buffer>:
 8011198:	b510      	push	{r4, lr}
 801119a:	b084      	sub	sp, #16
 801119c:	4684      	mov	ip, r0
 801119e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80111a2:	9000      	str	r0, [sp, #0]
 80111a4:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80111a8:	2028      	movs	r0, #40	@ 0x28
 80111aa:	fb00 c004 	mla	r0, r0, r4, ip
 80111ae:	f104 0e01 	add.w	lr, r4, #1
 80111b2:	3018      	adds	r0, #24
 80111b4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80111b8:	f005 fd84 	bl	8016cc4 <uxr_init_output_reliable_stream>
 80111bc:	2201      	movs	r2, #1
 80111be:	2102      	movs	r1, #2
 80111c0:	4620      	mov	r0, r4
 80111c2:	b004      	add	sp, #16
 80111c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111c8:	f7ff bf34 	b.w	8011034 <uxr_stream_id>

080111cc <uxr_add_input_best_effort_buffer>:
 80111cc:	b510      	push	{r4, lr}
 80111ce:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80111d2:	4603      	mov	r3, r0
 80111d4:	1c62      	adds	r2, r4, #1
 80111d6:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80111da:	b082      	sub	sp, #8
 80111dc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80111e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80111e4:	f005 faf8 	bl	80167d8 <uxr_init_input_best_effort_stream>
 80111e8:	2200      	movs	r2, #0
 80111ea:	2101      	movs	r1, #1
 80111ec:	4620      	mov	r0, r4
 80111ee:	b002      	add	sp, #8
 80111f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111f4:	f7ff bf1e 	b.w	8011034 <uxr_stream_id>

080111f8 <uxr_add_input_reliable_buffer>:
 80111f8:	b510      	push	{r4, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	4684      	mov	ip, r0
 80111fe:	9806      	ldr	r0, [sp, #24]
 8011200:	9000      	str	r0, [sp, #0]
 8011202:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011206:	2018      	movs	r0, #24
 8011208:	fb00 c004 	mla	r0, r0, r4, ip
 801120c:	f104 0e01 	add.w	lr, r4, #1
 8011210:	3048      	adds	r0, #72	@ 0x48
 8011212:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011216:	f005 fb2b 	bl	8016870 <uxr_init_input_reliable_stream>
 801121a:	2200      	movs	r2, #0
 801121c:	2102      	movs	r1, #2
 801121e:	4620      	mov	r0, r4
 8011220:	b004      	add	sp, #16
 8011222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011226:	f7ff bf05 	b.w	8011034 <uxr_stream_id>
 801122a:	bf00      	nop

0801122c <uxr_get_output_best_effort_stream>:
 801122c:	7c03      	ldrb	r3, [r0, #16]
 801122e:	428b      	cmp	r3, r1
 8011230:	bf8c      	ite	hi
 8011232:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011236:	2000      	movls	r0, #0
 8011238:	4770      	bx	lr
 801123a:	bf00      	nop

0801123c <uxr_get_output_reliable_stream>:
 801123c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011240:	428b      	cmp	r3, r1
 8011242:	bf83      	ittte	hi
 8011244:	2328      	movhi	r3, #40	@ 0x28
 8011246:	fb03 0001 	mlahi	r0, r3, r1, r0
 801124a:	3018      	addhi	r0, #24
 801124c:	2000      	movls	r0, #0
 801124e:	4770      	bx	lr

08011250 <uxr_get_input_best_effort_stream>:
 8011250:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011254:	428b      	cmp	r3, r1
 8011256:	bf86      	itte	hi
 8011258:	3121      	addhi	r1, #33	@ 0x21
 801125a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801125e:	2000      	movls	r0, #0
 8011260:	4770      	bx	lr
 8011262:	bf00      	nop

08011264 <uxr_get_input_reliable_stream>:
 8011264:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011268:	428b      	cmp	r3, r1
 801126a:	bf83      	ittte	hi
 801126c:	2318      	movhi	r3, #24
 801126e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011272:	3048      	addhi	r0, #72	@ 0x48
 8011274:	2000      	movls	r0, #0
 8011276:	4770      	bx	lr

08011278 <uxr_output_streams_confirmed>:
 8011278:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801127c:	b183      	cbz	r3, 80112a0 <uxr_output_streams_confirmed+0x28>
 801127e:	b570      	push	{r4, r5, r6, lr}
 8011280:	4606      	mov	r6, r0
 8011282:	f100 0518 	add.w	r5, r0, #24
 8011286:	2400      	movs	r4, #0
 8011288:	e001      	b.n	801128e <uxr_output_streams_confirmed+0x16>
 801128a:	3528      	adds	r5, #40	@ 0x28
 801128c:	b138      	cbz	r0, 801129e <uxr_output_streams_confirmed+0x26>
 801128e:	4628      	mov	r0, r5
 8011290:	f005 ffc0 	bl	8017214 <uxr_is_output_up_to_date>
 8011294:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011298:	3401      	adds	r4, #1
 801129a:	42a3      	cmp	r3, r4
 801129c:	d8f5      	bhi.n	801128a <uxr_output_streams_confirmed+0x12>
 801129e:	bd70      	pop	{r4, r5, r6, pc}
 80112a0:	2001      	movs	r0, #1
 80112a2:	4770      	bx	lr

080112a4 <uxr_buffer_submessage_header>:
 80112a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a6:	4604      	mov	r4, r0
 80112a8:	460e      	mov	r6, r1
 80112aa:	2104      	movs	r1, #4
 80112ac:	4615      	mov	r5, r2
 80112ae:	461f      	mov	r7, r3
 80112b0:	f7fd fd42 	bl	800ed38 <ucdr_align_to>
 80112b4:	2301      	movs	r3, #1
 80112b6:	ea47 0203 	orr.w	r2, r7, r3
 80112ba:	4631      	mov	r1, r6
 80112bc:	7523      	strb	r3, [r4, #20]
 80112be:	4620      	mov	r0, r4
 80112c0:	462b      	mov	r3, r5
 80112c2:	f000 fa27 	bl	8011714 <uxr_serialize_submessage_header>
 80112c6:	4620      	mov	r0, r4
 80112c8:	f7fd fd4c 	bl	800ed64 <ucdr_buffer_remaining>
 80112cc:	42a8      	cmp	r0, r5
 80112ce:	bf34      	ite	cc
 80112d0:	2000      	movcc	r0, #0
 80112d2:	2001      	movcs	r0, #1
 80112d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112d6:	bf00      	nop

080112d8 <uxr_read_submessage_header>:
 80112d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112dc:	4604      	mov	r4, r0
 80112de:	460d      	mov	r5, r1
 80112e0:	2104      	movs	r1, #4
 80112e2:	4616      	mov	r6, r2
 80112e4:	4698      	mov	r8, r3
 80112e6:	f7fd fd27 	bl	800ed38 <ucdr_align_to>
 80112ea:	4620      	mov	r0, r4
 80112ec:	f7fd fd3a 	bl	800ed64 <ucdr_buffer_remaining>
 80112f0:	2803      	cmp	r0, #3
 80112f2:	bf8c      	ite	hi
 80112f4:	2701      	movhi	r7, #1
 80112f6:	2700      	movls	r7, #0
 80112f8:	d802      	bhi.n	8011300 <uxr_read_submessage_header+0x28>
 80112fa:	4638      	mov	r0, r7
 80112fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011300:	4633      	mov	r3, r6
 8011302:	4642      	mov	r2, r8
 8011304:	4620      	mov	r0, r4
 8011306:	4629      	mov	r1, r5
 8011308:	f000 fa18 	bl	801173c <uxr_deserialize_submessage_header>
 801130c:	f898 3000 	ldrb.w	r3, [r8]
 8011310:	f003 0201 	and.w	r2, r3, #1
 8011314:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011318:	f888 3000 	strb.w	r3, [r8]
 801131c:	7522      	strb	r2, [r4, #20]
 801131e:	4638      	mov	r0, r7
 8011320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011324 <uxr_submessage_padding>:
 8011324:	f010 0003 	ands.w	r0, r0, #3
 8011328:	bf18      	it	ne
 801132a:	f1c0 0004 	rsbne	r0, r0, #4
 801132e:	4770      	bx	lr

08011330 <uxr_millis>:
 8011330:	b510      	push	{r4, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	4669      	mov	r1, sp
 8011336:	2001      	movs	r0, #1
 8011338:	f7f0 fd46 	bl	8001dc8 <clock_gettime>
 801133c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8011340:	4906      	ldr	r1, [pc, #24]	@ (801135c <uxr_millis+0x2c>)
 8011342:	fba0 0301 	umull	r0, r3, r0, r1
 8011346:	1900      	adds	r0, r0, r4
 8011348:	fb01 3102 	mla	r1, r1, r2, r3
 801134c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8011350:	4a03      	ldr	r2, [pc, #12]	@ (8011360 <uxr_millis+0x30>)
 8011352:	2300      	movs	r3, #0
 8011354:	f7ef fc38 	bl	8000bc8 <__aeabi_ldivmod>
 8011358:	b004      	add	sp, #16
 801135a:	bd10      	pop	{r4, pc}
 801135c:	3b9aca00 	.word	0x3b9aca00
 8011360:	000f4240 	.word	0x000f4240

08011364 <uxr_nanos>:
 8011364:	b510      	push	{r4, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	4669      	mov	r1, sp
 801136a:	2001      	movs	r0, #1
 801136c:	f7f0 fd2c 	bl	8001dc8 <clock_gettime>
 8011370:	4a06      	ldr	r2, [pc, #24]	@ (801138c <uxr_nanos+0x28>)
 8011372:	9800      	ldr	r0, [sp, #0]
 8011374:	9902      	ldr	r1, [sp, #8]
 8011376:	9c01      	ldr	r4, [sp, #4]
 8011378:	fba0 0302 	umull	r0, r3, r0, r2
 801137c:	1840      	adds	r0, r0, r1
 801137e:	fb02 3304 	mla	r3, r2, r4, r3
 8011382:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011386:	b004      	add	sp, #16
 8011388:	bd10      	pop	{r4, pc}
 801138a:	bf00      	nop
 801138c:	3b9aca00 	.word	0x3b9aca00

08011390 <on_full_output_buffer_fragmented>:
 8011390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011394:	460c      	mov	r4, r1
 8011396:	b08a      	sub	sp, #40	@ 0x28
 8011398:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801139c:	4606      	mov	r6, r0
 801139e:	f104 0008 	add.w	r0, r4, #8
 80113a2:	f7ff ff4b 	bl	801123c <uxr_get_output_reliable_stream>
 80113a6:	4605      	mov	r5, r0
 80113a8:	f005 ff3e 	bl	8017228 <get_available_free_slots>
 80113ac:	b968      	cbnz	r0, 80113ca <on_full_output_buffer_fragmented+0x3a>
 80113ae:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80113b2:	4620      	mov	r0, r4
 80113b4:	4798      	blx	r3
 80113b6:	b918      	cbnz	r0, 80113c0 <on_full_output_buffer_fragmented+0x30>
 80113b8:	2001      	movs	r0, #1
 80113ba:	b00a      	add	sp, #40	@ 0x28
 80113bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113c0:	4628      	mov	r0, r5
 80113c2:	f005 ff31 	bl	8017228 <get_available_free_slots>
 80113c6:	2800      	cmp	r0, #0
 80113c8:	d0f6      	beq.n	80113b8 <on_full_output_buffer_fragmented+0x28>
 80113ca:	8929      	ldrh	r1, [r5, #8]
 80113cc:	89eb      	ldrh	r3, [r5, #14]
 80113ce:	7b28      	ldrb	r0, [r5, #12]
 80113d0:	686a      	ldr	r2, [r5, #4]
 80113d2:	fbb2 f8f1 	udiv	r8, r2, r1
 80113d6:	fbb3 f2f1 	udiv	r2, r3, r1
 80113da:	fb01 3112 	mls	r1, r1, r2, r3
 80113de:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 80113e2:	b289      	uxth	r1, r1
 80113e4:	fb08 f101 	mul.w	r1, r8, r1
 80113e8:	30fc      	adds	r0, #252	@ 0xfc
 80113ea:	f1a8 0804 	sub.w	r8, r8, #4
 80113ee:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80113f2:	4440      	add	r0, r8
 80113f4:	b287      	uxth	r7, r0
 80113f6:	1bdb      	subs	r3, r3, r7
 80113f8:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80113fc:	682b      	ldr	r3, [r5, #0]
 80113fe:	3104      	adds	r1, #4
 8011400:	4419      	add	r1, r3
 8011402:	4642      	mov	r2, r8
 8011404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	a802      	add	r0, sp, #8
 801140c:	2300      	movs	r3, #0
 801140e:	f7fd fc67 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 8011412:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011416:	f102 0308 	add.w	r3, r2, #8
 801141a:	4543      	cmp	r3, r8
 801141c:	d928      	bls.n	8011470 <on_full_output_buffer_fragmented+0xe0>
 801141e:	463a      	mov	r2, r7
 8011420:	2300      	movs	r3, #0
 8011422:	210d      	movs	r1, #13
 8011424:	a802      	add	r0, sp, #8
 8011426:	f7ff ff3d 	bl	80112a4 <uxr_buffer_submessage_header>
 801142a:	8929      	ldrh	r1, [r5, #8]
 801142c:	89eb      	ldrh	r3, [r5, #14]
 801142e:	fbb3 f2f1 	udiv	r2, r3, r1
 8011432:	fb01 3312 	mls	r3, r1, r2, r3
 8011436:	b29b      	uxth	r3, r3
 8011438:	686a      	ldr	r2, [r5, #4]
 801143a:	fbb2 f2f1 	udiv	r2, r2, r1
 801143e:	fb02 f303 	mul.w	r3, r2, r3
 8011442:	682a      	ldr	r2, [r5, #0]
 8011444:	f842 8003 	str.w	r8, [r2, r3]
 8011448:	89e8      	ldrh	r0, [r5, #14]
 801144a:	2101      	movs	r1, #1
 801144c:	f005 ff0c 	bl	8017268 <uxr_seq_num_add>
 8011450:	9904      	ldr	r1, [sp, #16]
 8011452:	9a03      	ldr	r2, [sp, #12]
 8011454:	81e8      	strh	r0, [r5, #14]
 8011456:	1a52      	subs	r2, r2, r1
 8011458:	4630      	mov	r0, r6
 801145a:	f7fd fc53 	bl	800ed04 <ucdr_init_buffer>
 801145e:	4630      	mov	r0, r6
 8011460:	490f      	ldr	r1, [pc, #60]	@ (80114a0 <on_full_output_buffer_fragmented+0x110>)
 8011462:	4622      	mov	r2, r4
 8011464:	f7fd fc22 	bl	800ecac <ucdr_set_on_full_buffer_callback>
 8011468:	2000      	movs	r0, #0
 801146a:	b00a      	add	sp, #40	@ 0x28
 801146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011470:	b292      	uxth	r2, r2
 8011472:	2302      	movs	r3, #2
 8011474:	210d      	movs	r1, #13
 8011476:	a802      	add	r0, sp, #8
 8011478:	f7ff ff14 	bl	80112a4 <uxr_buffer_submessage_header>
 801147c:	8928      	ldrh	r0, [r5, #8]
 801147e:	89eb      	ldrh	r3, [r5, #14]
 8011480:	fbb3 f1f0 	udiv	r1, r3, r0
 8011484:	fb00 3311 	mls	r3, r0, r1, r3
 8011488:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801148c:	6869      	ldr	r1, [r5, #4]
 801148e:	fbb1 f1f0 	udiv	r1, r1, r0
 8011492:	b29b      	uxth	r3, r3
 8011494:	fb01 f303 	mul.w	r3, r1, r3
 8011498:	6829      	ldr	r1, [r5, #0]
 801149a:	3208      	adds	r2, #8
 801149c:	50ca      	str	r2, [r1, r3]
 801149e:	e7d3      	b.n	8011448 <on_full_output_buffer_fragmented+0xb8>
 80114a0:	08011391 	.word	0x08011391

080114a4 <uxr_prepare_output_stream>:
 80114a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114a6:	b087      	sub	sp, #28
 80114a8:	2707      	movs	r7, #7
 80114aa:	9202      	str	r2, [sp, #8]
 80114ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80114ae:	9103      	str	r1, [sp, #12]
 80114b0:	2500      	movs	r5, #0
 80114b2:	3204      	adds	r2, #4
 80114b4:	e9cd 7500 	strd	r7, r5, [sp]
 80114b8:	461c      	mov	r4, r3
 80114ba:	4606      	mov	r6, r0
 80114bc:	f7fe ffc2 	bl	8010444 <uxr_prepare_stream_to_write_submessage>
 80114c0:	f080 0201 	eor.w	r2, r0, #1
 80114c4:	b2d2      	uxtb	r2, r2
 80114c6:	75a2      	strb	r2, [r4, #22]
 80114c8:	b112      	cbz	r2, 80114d0 <uxr_prepare_output_stream+0x2c>
 80114ca:	4628      	mov	r0, r5
 80114cc:	b007      	add	sp, #28
 80114ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114d0:	aa05      	add	r2, sp, #20
 80114d2:	9902      	ldr	r1, [sp, #8]
 80114d4:	4630      	mov	r0, r6
 80114d6:	f7ff f8eb 	bl	80106b0 <uxr_init_base_object_request>
 80114da:	a905      	add	r1, sp, #20
 80114dc:	4605      	mov	r5, r0
 80114de:	4620      	mov	r0, r4
 80114e0:	f000 ffa0 	bl	8012424 <uxr_serialize_WRITE_DATA_Payload_Data>
 80114e4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80114e8:	69a6      	ldr	r6, [r4, #24]
 80114ea:	69e7      	ldr	r7, [r4, #28]
 80114ec:	1a52      	subs	r2, r2, r1
 80114ee:	4620      	mov	r0, r4
 80114f0:	f7fd fc08 	bl	800ed04 <ucdr_init_buffer>
 80114f4:	4620      	mov	r0, r4
 80114f6:	463a      	mov	r2, r7
 80114f8:	4631      	mov	r1, r6
 80114fa:	f7fd fbd7 	bl	800ecac <ucdr_set_on_full_buffer_callback>
 80114fe:	4628      	mov	r0, r5
 8011500:	b007      	add	sp, #28
 8011502:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011504 <uxr_prepare_output_stream_fragmented>:
 8011504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011508:	b091      	sub	sp, #68	@ 0x44
 801150a:	4605      	mov	r5, r0
 801150c:	9105      	str	r1, [sp, #20]
 801150e:	3008      	adds	r0, #8
 8011510:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011514:	461e      	mov	r6, r3
 8011516:	9204      	str	r2, [sp, #16]
 8011518:	f7ff fe90 	bl	801123c <uxr_get_output_reliable_stream>
 801151c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8011520:	2b01      	cmp	r3, #1
 8011522:	f000 8091 	beq.w	8011648 <uxr_prepare_output_stream_fragmented+0x144>
 8011526:	4604      	mov	r4, r0
 8011528:	2800      	cmp	r0, #0
 801152a:	f000 808d 	beq.w	8011648 <uxr_prepare_output_stream_fragmented+0x144>
 801152e:	f005 fe7b 	bl	8017228 <get_available_free_slots>
 8011532:	2800      	cmp	r0, #0
 8011534:	f000 8083 	beq.w	801163e <uxr_prepare_output_stream_fragmented+0x13a>
 8011538:	8922      	ldrh	r2, [r4, #8]
 801153a:	89e7      	ldrh	r7, [r4, #14]
 801153c:	fbb7 f9f2 	udiv	r9, r7, r2
 8011540:	fb02 7919 	mls	r9, r2, r9, r7
 8011544:	fa1f f989 	uxth.w	r9, r9
 8011548:	6863      	ldr	r3, [r4, #4]
 801154a:	fbb3 f2f2 	udiv	r2, r3, r2
 801154e:	6823      	ldr	r3, [r4, #0]
 8011550:	9203      	str	r2, [sp, #12]
 8011552:	fb02 f909 	mul.w	r9, r2, r9
 8011556:	f109 0904 	add.w	r9, r9, #4
 801155a:	4499      	add	r9, r3
 801155c:	7b23      	ldrb	r3, [r4, #12]
 801155e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011562:	4543      	cmp	r3, r8
 8011564:	f1a2 0b04 	sub.w	fp, r2, #4
 8011568:	d37a      	bcc.n	8011660 <uxr_prepare_output_stream_fragmented+0x15c>
 801156a:	f1ab 0a04 	sub.w	sl, fp, #4
 801156e:	ebaa 0a03 	sub.w	sl, sl, r3
 8011572:	465a      	mov	r2, fp
 8011574:	2300      	movs	r3, #0
 8011576:	4649      	mov	r1, r9
 8011578:	a808      	add	r0, sp, #32
 801157a:	f8cd 8000 	str.w	r8, [sp]
 801157e:	f7fd fbaf 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 8011582:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011584:	fa1f fa8a 	uxth.w	sl, sl
 8011588:	4652      	mov	r2, sl
 801158a:	f103 0a08 	add.w	sl, r3, #8
 801158e:	45da      	cmp	sl, fp
 8011590:	bf34      	ite	cc
 8011592:	2302      	movcc	r3, #2
 8011594:	2300      	movcs	r3, #0
 8011596:	210d      	movs	r1, #13
 8011598:	a808      	add	r0, sp, #32
 801159a:	f7ff fe83 	bl	80112a4 <uxr_buffer_submessage_header>
 801159e:	8921      	ldrh	r1, [r4, #8]
 80115a0:	fbb7 f2f1 	udiv	r2, r7, r1
 80115a4:	fb01 7212 	mls	r2, r1, r2, r7
 80115a8:	b292      	uxth	r2, r2
 80115aa:	6863      	ldr	r3, [r4, #4]
 80115ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80115b0:	fb02 f303 	mul.w	r3, r2, r3
 80115b4:	6822      	ldr	r2, [r4, #0]
 80115b6:	4638      	mov	r0, r7
 80115b8:	f842 b003 	str.w	fp, [r2, r3]
 80115bc:	2101      	movs	r1, #1
 80115be:	f005 fe53 	bl	8017268 <uxr_seq_num_add>
 80115c2:	9b03      	ldr	r3, [sp, #12]
 80115c4:	f108 0104 	add.w	r1, r8, #4
 80115c8:	f1a3 0208 	sub.w	r2, r3, #8
 80115cc:	eba2 0208 	sub.w	r2, r2, r8
 80115d0:	4449      	add	r1, r9
 80115d2:	4607      	mov	r7, r0
 80115d4:	4630      	mov	r0, r6
 80115d6:	f7fd fb95 	bl	800ed04 <ucdr_init_buffer>
 80115da:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80115dc:	81e7      	strh	r7, [r4, #14]
 80115de:	1d1a      	adds	r2, r3, #4
 80115e0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80115e4:	bf28      	it	cs
 80115e6:	2200      	movcs	r2, #0
 80115e8:	2300      	movs	r3, #0
 80115ea:	b292      	uxth	r2, r2
 80115ec:	2107      	movs	r1, #7
 80115ee:	4630      	mov	r0, r6
 80115f0:	f7ff fe58 	bl	80112a4 <uxr_buffer_submessage_header>
 80115f4:	9904      	ldr	r1, [sp, #16]
 80115f6:	aa07      	add	r2, sp, #28
 80115f8:	4628      	mov	r0, r5
 80115fa:	f7ff f859 	bl	80106b0 <uxr_init_base_object_request>
 80115fe:	4604      	mov	r4, r0
 8011600:	b318      	cbz	r0, 801164a <uxr_prepare_output_stream_fragmented+0x146>
 8011602:	a907      	add	r1, sp, #28
 8011604:	4630      	mov	r0, r6
 8011606:	f000 ff0d 	bl	8012424 <uxr_serialize_WRITE_DATA_Payload_Data>
 801160a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801160e:	4630      	mov	r0, r6
 8011610:	1a52      	subs	r2, r2, r1
 8011612:	f7fd fb77 	bl	800ed04 <ucdr_init_buffer>
 8011616:	9b05      	ldr	r3, [sp, #20]
 8011618:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801161c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801161e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8011622:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8011624:	491b      	ldr	r1, [pc, #108]	@ (8011694 <uxr_prepare_output_stream_fragmented+0x190>)
 8011626:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801162a:	4630      	mov	r0, r6
 801162c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8011630:	462a      	mov	r2, r5
 8011632:	f7fd fb3b 	bl	800ecac <ucdr_set_on_full_buffer_callback>
 8011636:	4620      	mov	r0, r4
 8011638:	b011      	add	sp, #68	@ 0x44
 801163a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8011640:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011642:	4628      	mov	r0, r5
 8011644:	4798      	blx	r3
 8011646:	b920      	cbnz	r0, 8011652 <uxr_prepare_output_stream_fragmented+0x14e>
 8011648:	2400      	movs	r4, #0
 801164a:	4620      	mov	r0, r4
 801164c:	b011      	add	sp, #68	@ 0x44
 801164e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011652:	4620      	mov	r0, r4
 8011654:	f005 fde8 	bl	8017228 <get_available_free_slots>
 8011658:	2800      	cmp	r0, #0
 801165a:	f47f af6d 	bne.w	8011538 <uxr_prepare_output_stream_fragmented+0x34>
 801165e:	e7f3      	b.n	8011648 <uxr_prepare_output_stream_fragmented+0x144>
 8011660:	4638      	mov	r0, r7
 8011662:	2101      	movs	r1, #1
 8011664:	f005 fe00 	bl	8017268 <uxr_seq_num_add>
 8011668:	8921      	ldrh	r1, [r4, #8]
 801166a:	fbb0 f2f1 	udiv	r2, r0, r1
 801166e:	fb01 0912 	mls	r9, r1, r2, r0
 8011672:	fa1f f289 	uxth.w	r2, r9
 8011676:	6863      	ldr	r3, [r4, #4]
 8011678:	fbb3 f9f1 	udiv	r9, r3, r1
 801167c:	6823      	ldr	r3, [r4, #0]
 801167e:	fb02 f909 	mul.w	r9, r2, r9
 8011682:	f109 0904 	add.w	r9, r9, #4
 8011686:	4499      	add	r9, r3
 8011688:	4607      	mov	r7, r0
 801168a:	7b23      	ldrb	r3, [r4, #12]
 801168c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011690:	e76b      	b.n	801156a <uxr_prepare_output_stream_fragmented+0x66>
 8011692:	bf00      	nop
 8011694:	08011391 	.word	0x08011391

08011698 <uxr_serialize_message_header>:
 8011698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801169a:	b083      	sub	sp, #12
 801169c:	4616      	mov	r6, r2
 801169e:	4604      	mov	r4, r0
 80116a0:	9301      	str	r3, [sp, #4]
 80116a2:	460d      	mov	r5, r1
 80116a4:	9f08      	ldr	r7, [sp, #32]
 80116a6:	f7fc f84b 	bl	800d740 <ucdr_serialize_uint8_t>
 80116aa:	4631      	mov	r1, r6
 80116ac:	4620      	mov	r0, r4
 80116ae:	f7fc f847 	bl	800d740 <ucdr_serialize_uint8_t>
 80116b2:	9a01      	ldr	r2, [sp, #4]
 80116b4:	2101      	movs	r1, #1
 80116b6:	4620      	mov	r0, r4
 80116b8:	f7fc f8ee 	bl	800d898 <ucdr_serialize_endian_uint16_t>
 80116bc:	062b      	lsls	r3, r5, #24
 80116be:	d501      	bpl.n	80116c4 <uxr_serialize_message_header+0x2c>
 80116c0:	b003      	add	sp, #12
 80116c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116c4:	2204      	movs	r2, #4
 80116c6:	4639      	mov	r1, r7
 80116c8:	4620      	mov	r0, r4
 80116ca:	b003      	add	sp, #12
 80116cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80116d0:	f7fb be96 	b.w	800d400 <ucdr_serialize_array_uint8_t>

080116d4 <uxr_deserialize_message_header>:
 80116d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116d6:	b083      	sub	sp, #12
 80116d8:	4616      	mov	r6, r2
 80116da:	4604      	mov	r4, r0
 80116dc:	9301      	str	r3, [sp, #4]
 80116de:	460d      	mov	r5, r1
 80116e0:	9f08      	ldr	r7, [sp, #32]
 80116e2:	f7fc f843 	bl	800d76c <ucdr_deserialize_uint8_t>
 80116e6:	4631      	mov	r1, r6
 80116e8:	4620      	mov	r0, r4
 80116ea:	f7fc f83f 	bl	800d76c <ucdr_deserialize_uint8_t>
 80116ee:	9a01      	ldr	r2, [sp, #4]
 80116f0:	2101      	movs	r1, #1
 80116f2:	4620      	mov	r0, r4
 80116f4:	f7fc f9c4 	bl	800da80 <ucdr_deserialize_endian_uint16_t>
 80116f8:	f995 3000 	ldrsb.w	r3, [r5]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	da01      	bge.n	8011704 <uxr_deserialize_message_header+0x30>
 8011700:	b003      	add	sp, #12
 8011702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011704:	2204      	movs	r2, #4
 8011706:	4639      	mov	r1, r7
 8011708:	4620      	mov	r0, r4
 801170a:	b003      	add	sp, #12
 801170c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011710:	f7fb beda 	b.w	800d4c8 <ucdr_deserialize_array_uint8_t>

08011714 <uxr_serialize_submessage_header>:
 8011714:	b530      	push	{r4, r5, lr}
 8011716:	b083      	sub	sp, #12
 8011718:	4615      	mov	r5, r2
 801171a:	4604      	mov	r4, r0
 801171c:	9301      	str	r3, [sp, #4]
 801171e:	f7fc f80f 	bl	800d740 <ucdr_serialize_uint8_t>
 8011722:	4629      	mov	r1, r5
 8011724:	4620      	mov	r0, r4
 8011726:	f7fc f80b 	bl	800d740 <ucdr_serialize_uint8_t>
 801172a:	9a01      	ldr	r2, [sp, #4]
 801172c:	2101      	movs	r1, #1
 801172e:	4620      	mov	r0, r4
 8011730:	b003      	add	sp, #12
 8011732:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011736:	f7fc b8af 	b.w	800d898 <ucdr_serialize_endian_uint16_t>
 801173a:	bf00      	nop

0801173c <uxr_deserialize_submessage_header>:
 801173c:	b530      	push	{r4, r5, lr}
 801173e:	b083      	sub	sp, #12
 8011740:	4615      	mov	r5, r2
 8011742:	4604      	mov	r4, r0
 8011744:	9301      	str	r3, [sp, #4]
 8011746:	f7fc f811 	bl	800d76c <ucdr_deserialize_uint8_t>
 801174a:	4629      	mov	r1, r5
 801174c:	4620      	mov	r0, r4
 801174e:	f7fc f80d 	bl	800d76c <ucdr_deserialize_uint8_t>
 8011752:	9a01      	ldr	r2, [sp, #4]
 8011754:	2101      	movs	r1, #1
 8011756:	4620      	mov	r0, r4
 8011758:	b003      	add	sp, #12
 801175a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801175e:	f7fc b98f 	b.w	800da80 <ucdr_deserialize_endian_uint16_t>
 8011762:	bf00      	nop

08011764 <uxr_serialize_CLIENT_Representation>:
 8011764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011768:	2204      	movs	r2, #4
 801176a:	460e      	mov	r6, r1
 801176c:	4605      	mov	r5, r0
 801176e:	f7fb fe47 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8011772:	2202      	movs	r2, #2
 8011774:	4607      	mov	r7, r0
 8011776:	1d31      	adds	r1, r6, #4
 8011778:	4628      	mov	r0, r5
 801177a:	f7fb fe41 	bl	800d400 <ucdr_serialize_array_uint8_t>
 801177e:	4038      	ands	r0, r7
 8011780:	2202      	movs	r2, #2
 8011782:	1db1      	adds	r1, r6, #6
 8011784:	b2c7      	uxtb	r7, r0
 8011786:	4628      	mov	r0, r5
 8011788:	f7fb fe3a 	bl	800d400 <ucdr_serialize_array_uint8_t>
 801178c:	2204      	movs	r2, #4
 801178e:	4007      	ands	r7, r0
 8011790:	f106 0108 	add.w	r1, r6, #8
 8011794:	4628      	mov	r0, r5
 8011796:	f7fb fe33 	bl	800d400 <ucdr_serialize_array_uint8_t>
 801179a:	7b31      	ldrb	r1, [r6, #12]
 801179c:	4007      	ands	r7, r0
 801179e:	4628      	mov	r0, r5
 80117a0:	f7fb ffce 	bl	800d740 <ucdr_serialize_uint8_t>
 80117a4:	7b71      	ldrb	r1, [r6, #13]
 80117a6:	4007      	ands	r7, r0
 80117a8:	4628      	mov	r0, r5
 80117aa:	f7fb ff9b 	bl	800d6e4 <ucdr_serialize_bool>
 80117ae:	7b73      	ldrb	r3, [r6, #13]
 80117b0:	ea07 0800 	and.w	r8, r7, r0
 80117b4:	b93b      	cbnz	r3, 80117c6 <uxr_serialize_CLIENT_Representation+0x62>
 80117b6:	8bb1      	ldrh	r1, [r6, #28]
 80117b8:	4628      	mov	r0, r5
 80117ba:	f7fb ffed 	bl	800d798 <ucdr_serialize_uint16_t>
 80117be:	ea08 0000 	and.w	r0, r8, r0
 80117c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117c6:	6931      	ldr	r1, [r6, #16]
 80117c8:	4628      	mov	r0, r5
 80117ca:	f7fc f9cf 	bl	800db6c <ucdr_serialize_uint32_t>
 80117ce:	6933      	ldr	r3, [r6, #16]
 80117d0:	b1e3      	cbz	r3, 801180c <uxr_serialize_CLIENT_Representation+0xa8>
 80117d2:	b1c0      	cbz	r0, 8011806 <uxr_serialize_CLIENT_Representation+0xa2>
 80117d4:	4637      	mov	r7, r6
 80117d6:	f04f 0900 	mov.w	r9, #0
 80117da:	e001      	b.n	80117e0 <uxr_serialize_CLIENT_Representation+0x7c>
 80117dc:	3708      	adds	r7, #8
 80117de:	b194      	cbz	r4, 8011806 <uxr_serialize_CLIENT_Representation+0xa2>
 80117e0:	6979      	ldr	r1, [r7, #20]
 80117e2:	4628      	mov	r0, r5
 80117e4:	f004 ffe0 	bl	80167a8 <ucdr_serialize_string>
 80117e8:	69b9      	ldr	r1, [r7, #24]
 80117ea:	4604      	mov	r4, r0
 80117ec:	4628      	mov	r0, r5
 80117ee:	f004 ffdb 	bl	80167a8 <ucdr_serialize_string>
 80117f2:	6933      	ldr	r3, [r6, #16]
 80117f4:	f109 0901 	add.w	r9, r9, #1
 80117f8:	4004      	ands	r4, r0
 80117fa:	4599      	cmp	r9, r3
 80117fc:	b2e4      	uxtb	r4, r4
 80117fe:	d3ed      	bcc.n	80117dc <uxr_serialize_CLIENT_Representation+0x78>
 8011800:	ea08 0804 	and.w	r8, r8, r4
 8011804:	e7d7      	b.n	80117b6 <uxr_serialize_CLIENT_Representation+0x52>
 8011806:	f04f 0800 	mov.w	r8, #0
 801180a:	e7d4      	b.n	80117b6 <uxr_serialize_CLIENT_Representation+0x52>
 801180c:	ea08 0800 	and.w	r8, r8, r0
 8011810:	e7d1      	b.n	80117b6 <uxr_serialize_CLIENT_Representation+0x52>
 8011812:	bf00      	nop

08011814 <uxr_deserialize_CLIENT_Representation>:
 8011814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011818:	2204      	movs	r2, #4
 801181a:	460c      	mov	r4, r1
 801181c:	4605      	mov	r5, r0
 801181e:	f7fb fe53 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8011822:	2202      	movs	r2, #2
 8011824:	4607      	mov	r7, r0
 8011826:	1d21      	adds	r1, r4, #4
 8011828:	4628      	mov	r0, r5
 801182a:	f7fb fe4d 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 801182e:	4038      	ands	r0, r7
 8011830:	2202      	movs	r2, #2
 8011832:	1da1      	adds	r1, r4, #6
 8011834:	b2c6      	uxtb	r6, r0
 8011836:	4628      	mov	r0, r5
 8011838:	f7fb fe46 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 801183c:	2204      	movs	r2, #4
 801183e:	4006      	ands	r6, r0
 8011840:	f104 0108 	add.w	r1, r4, #8
 8011844:	4628      	mov	r0, r5
 8011846:	f7fb fe3f 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 801184a:	f104 010c 	add.w	r1, r4, #12
 801184e:	4006      	ands	r6, r0
 8011850:	4628      	mov	r0, r5
 8011852:	f7fb ff8b 	bl	800d76c <ucdr_deserialize_uint8_t>
 8011856:	f104 010d 	add.w	r1, r4, #13
 801185a:	ea06 0700 	and.w	r7, r6, r0
 801185e:	4628      	mov	r0, r5
 8011860:	f7fb ff56 	bl	800d710 <ucdr_deserialize_bool>
 8011864:	7b63      	ldrb	r3, [r4, #13]
 8011866:	4007      	ands	r7, r0
 8011868:	b93b      	cbnz	r3, 801187a <uxr_deserialize_CLIENT_Representation+0x66>
 801186a:	f104 011c 	add.w	r1, r4, #28
 801186e:	4628      	mov	r0, r5
 8011870:	f7fc f892 	bl	800d998 <ucdr_deserialize_uint16_t>
 8011874:	4038      	ands	r0, r7
 8011876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801187a:	f104 0110 	add.w	r1, r4, #16
 801187e:	4628      	mov	r0, r5
 8011880:	f7fc faa4 	bl	800ddcc <ucdr_deserialize_uint32_t>
 8011884:	6923      	ldr	r3, [r4, #16]
 8011886:	2b01      	cmp	r3, #1
 8011888:	d903      	bls.n	8011892 <uxr_deserialize_CLIENT_Representation+0x7e>
 801188a:	2301      	movs	r3, #1
 801188c:	75ab      	strb	r3, [r5, #22]
 801188e:	2700      	movs	r7, #0
 8011890:	e7eb      	b.n	801186a <uxr_deserialize_CLIENT_Representation+0x56>
 8011892:	b30b      	cbz	r3, 80118d8 <uxr_deserialize_CLIENT_Representation+0xc4>
 8011894:	2800      	cmp	r0, #0
 8011896:	d0fa      	beq.n	801188e <uxr_deserialize_CLIENT_Representation+0x7a>
 8011898:	46a0      	mov	r8, r4
 801189a:	f04f 0900 	mov.w	r9, #0
 801189e:	e001      	b.n	80118a4 <uxr_deserialize_CLIENT_Representation+0x90>
 80118a0:	2e00      	cmp	r6, #0
 80118a2:	d0f4      	beq.n	801188e <uxr_deserialize_CLIENT_Representation+0x7a>
 80118a4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80118a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80118ac:	4628      	mov	r0, r5
 80118ae:	f004 ff8b 	bl	80167c8 <ucdr_deserialize_string>
 80118b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80118b6:	4606      	mov	r6, r0
 80118b8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80118bc:	4628      	mov	r0, r5
 80118be:	f004 ff83 	bl	80167c8 <ucdr_deserialize_string>
 80118c2:	6923      	ldr	r3, [r4, #16]
 80118c4:	f109 0901 	add.w	r9, r9, #1
 80118c8:	4006      	ands	r6, r0
 80118ca:	4599      	cmp	r9, r3
 80118cc:	f108 0808 	add.w	r8, r8, #8
 80118d0:	b2f6      	uxtb	r6, r6
 80118d2:	d3e5      	bcc.n	80118a0 <uxr_deserialize_CLIENT_Representation+0x8c>
 80118d4:	4037      	ands	r7, r6
 80118d6:	e7c8      	b.n	801186a <uxr_deserialize_CLIENT_Representation+0x56>
 80118d8:	4007      	ands	r7, r0
 80118da:	e7c6      	b.n	801186a <uxr_deserialize_CLIENT_Representation+0x56>

080118dc <uxr_serialize_AGENT_Representation>:
 80118dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118e0:	2204      	movs	r2, #4
 80118e2:	460f      	mov	r7, r1
 80118e4:	4605      	mov	r5, r0
 80118e6:	f7fb fd8b 	bl	800d400 <ucdr_serialize_array_uint8_t>
 80118ea:	2202      	movs	r2, #2
 80118ec:	4604      	mov	r4, r0
 80118ee:	1d39      	adds	r1, r7, #4
 80118f0:	4628      	mov	r0, r5
 80118f2:	f7fb fd85 	bl	800d400 <ucdr_serialize_array_uint8_t>
 80118f6:	4020      	ands	r0, r4
 80118f8:	2202      	movs	r2, #2
 80118fa:	1db9      	adds	r1, r7, #6
 80118fc:	b2c4      	uxtb	r4, r0
 80118fe:	4628      	mov	r0, r5
 8011900:	f7fb fd7e 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8011904:	7a39      	ldrb	r1, [r7, #8]
 8011906:	4004      	ands	r4, r0
 8011908:	4628      	mov	r0, r5
 801190a:	f7fb feeb 	bl	800d6e4 <ucdr_serialize_bool>
 801190e:	7a3b      	ldrb	r3, [r7, #8]
 8011910:	ea00 0804 	and.w	r8, r0, r4
 8011914:	b913      	cbnz	r3, 801191c <uxr_serialize_AGENT_Representation+0x40>
 8011916:	4640      	mov	r0, r8
 8011918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801191c:	68f9      	ldr	r1, [r7, #12]
 801191e:	4628      	mov	r0, r5
 8011920:	f7fc f924 	bl	800db6c <ucdr_serialize_uint32_t>
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	b303      	cbz	r3, 801196a <uxr_serialize_AGENT_Representation+0x8e>
 8011928:	b1d0      	cbz	r0, 8011960 <uxr_serialize_AGENT_Representation+0x84>
 801192a:	463e      	mov	r6, r7
 801192c:	f04f 0900 	mov.w	r9, #0
 8011930:	e001      	b.n	8011936 <uxr_serialize_AGENT_Representation+0x5a>
 8011932:	3608      	adds	r6, #8
 8011934:	b1a4      	cbz	r4, 8011960 <uxr_serialize_AGENT_Representation+0x84>
 8011936:	6931      	ldr	r1, [r6, #16]
 8011938:	4628      	mov	r0, r5
 801193a:	f004 ff35 	bl	80167a8 <ucdr_serialize_string>
 801193e:	6971      	ldr	r1, [r6, #20]
 8011940:	4604      	mov	r4, r0
 8011942:	4628      	mov	r0, r5
 8011944:	f004 ff30 	bl	80167a8 <ucdr_serialize_string>
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	f109 0901 	add.w	r9, r9, #1
 801194e:	4004      	ands	r4, r0
 8011950:	4599      	cmp	r9, r3
 8011952:	b2e4      	uxtb	r4, r4
 8011954:	d3ed      	bcc.n	8011932 <uxr_serialize_AGENT_Representation+0x56>
 8011956:	ea08 0804 	and.w	r8, r8, r4
 801195a:	4640      	mov	r0, r8
 801195c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011960:	f04f 0800 	mov.w	r8, #0
 8011964:	4640      	mov	r0, r8
 8011966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801196a:	ea08 0800 	and.w	r8, r8, r0
 801196e:	e7d2      	b.n	8011916 <uxr_serialize_AGENT_Representation+0x3a>

08011970 <uxr_serialize_DATAWRITER_Representation>:
 8011970:	b570      	push	{r4, r5, r6, lr}
 8011972:	460d      	mov	r5, r1
 8011974:	7809      	ldrb	r1, [r1, #0]
 8011976:	4606      	mov	r6, r0
 8011978:	f7fb fee2 	bl	800d740 <ucdr_serialize_uint8_t>
 801197c:	4604      	mov	r4, r0
 801197e:	b130      	cbz	r0, 801198e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011980:	782b      	ldrb	r3, [r5, #0]
 8011982:	2b02      	cmp	r3, #2
 8011984:	d00c      	beq.n	80119a0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011986:	2b03      	cmp	r3, #3
 8011988:	d010      	beq.n	80119ac <uxr_serialize_DATAWRITER_Representation+0x3c>
 801198a:	2b01      	cmp	r3, #1
 801198c:	d008      	beq.n	80119a0 <uxr_serialize_DATAWRITER_Representation+0x30>
 801198e:	2202      	movs	r2, #2
 8011990:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011994:	4630      	mov	r0, r6
 8011996:	f7fb fd33 	bl	800d400 <ucdr_serialize_array_uint8_t>
 801199a:	4020      	ands	r0, r4
 801199c:	b2c0      	uxtb	r0, r0
 801199e:	bd70      	pop	{r4, r5, r6, pc}
 80119a0:	6869      	ldr	r1, [r5, #4]
 80119a2:	4630      	mov	r0, r6
 80119a4:	f004 ff00 	bl	80167a8 <ucdr_serialize_string>
 80119a8:	4604      	mov	r4, r0
 80119aa:	e7f0      	b.n	801198e <uxr_serialize_DATAWRITER_Representation+0x1e>
 80119ac:	4629      	mov	r1, r5
 80119ae:	4630      	mov	r0, r6
 80119b0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80119b4:	3104      	adds	r1, #4
 80119b6:	f7fd fa41 	bl	800ee3c <ucdr_serialize_sequence_uint8_t>
 80119ba:	4604      	mov	r4, r0
 80119bc:	e7e7      	b.n	801198e <uxr_serialize_DATAWRITER_Representation+0x1e>
 80119be:	bf00      	nop

080119c0 <uxr_serialize_ObjectVariant.part.0>:
 80119c0:	b570      	push	{r4, r5, r6, lr}
 80119c2:	780b      	ldrb	r3, [r1, #0]
 80119c4:	3b01      	subs	r3, #1
 80119c6:	460c      	mov	r4, r1
 80119c8:	4605      	mov	r5, r0
 80119ca:	2b0d      	cmp	r3, #13
 80119cc:	d854      	bhi.n	8011a78 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80119ce:	e8df f003 	tbb	[pc, r3]
 80119d2:	0730      	.short	0x0730
 80119d4:	07071b1b 	.word	0x07071b1b
 80119d8:	0c530707 	.word	0x0c530707
 80119dc:	494e0c0c 	.word	0x494e0c0c
 80119e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119e4:	3104      	adds	r1, #4
 80119e6:	f7ff bfc3 	b.w	8011970 <uxr_serialize_DATAWRITER_Representation>
 80119ea:	7909      	ldrb	r1, [r1, #4]
 80119ec:	f7fb fea8 	bl	800d740 <ucdr_serialize_uint8_t>
 80119f0:	b1e8      	cbz	r0, 8011a2e <uxr_serialize_ObjectVariant.part.0+0x6e>
 80119f2:	7923      	ldrb	r3, [r4, #4]
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	d001      	beq.n	80119fc <uxr_serialize_ObjectVariant.part.0+0x3c>
 80119f8:	2b02      	cmp	r3, #2
 80119fa:	d13d      	bne.n	8011a78 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80119fc:	68a1      	ldr	r1, [r4, #8]
 80119fe:	4628      	mov	r0, r5
 8011a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a04:	f004 bed0 	b.w	80167a8 <ucdr_serialize_string>
 8011a08:	7909      	ldrb	r1, [r1, #4]
 8011a0a:	f7fb fe99 	bl	800d740 <ucdr_serialize_uint8_t>
 8011a0e:	4606      	mov	r6, r0
 8011a10:	b120      	cbz	r0, 8011a1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011a12:	7923      	ldrb	r3, [r4, #4]
 8011a14:	2b02      	cmp	r3, #2
 8011a16:	d039      	beq.n	8011a8c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8011a18:	2b03      	cmp	r3, #3
 8011a1a:	d02f      	beq.n	8011a7c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8011a1c:	2202      	movs	r2, #2
 8011a1e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8011a22:	4628      	mov	r0, r5
 8011a24:	f7fb fcec 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8011a28:	4030      	ands	r0, r6
 8011a2a:	b2c0      	uxtb	r0, r0
 8011a2c:	bd70      	pop	{r4, r5, r6, pc}
 8011a2e:	2000      	movs	r0, #0
 8011a30:	bd70      	pop	{r4, r5, r6, pc}
 8011a32:	7909      	ldrb	r1, [r1, #4]
 8011a34:	f7fb fe84 	bl	800d740 <ucdr_serialize_uint8_t>
 8011a38:	4606      	mov	r6, r0
 8011a3a:	b158      	cbz	r0, 8011a54 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011a3c:	7923      	ldrb	r3, [r4, #4]
 8011a3e:	2b02      	cmp	r3, #2
 8011a40:	d003      	beq.n	8011a4a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8011a42:	2b03      	cmp	r3, #3
 8011a44:	d028      	beq.n	8011a98 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d104      	bne.n	8011a54 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011a4a:	68a1      	ldr	r1, [r4, #8]
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	f004 feab 	bl	80167a8 <ucdr_serialize_string>
 8011a52:	4606      	mov	r6, r0
 8011a54:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f7fc fbad 	bl	800e1b8 <ucdr_serialize_int16_t>
 8011a5e:	4030      	ands	r0, r6
 8011a60:	b2c0      	uxtb	r0, r0
 8011a62:	bd70      	pop	{r4, r5, r6, pc}
 8011a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a68:	3104      	adds	r1, #4
 8011a6a:	f7ff be7b 	b.w	8011764 <uxr_serialize_CLIENT_Representation>
 8011a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a72:	3104      	adds	r1, #4
 8011a74:	f7ff bf32 	b.w	80118dc <uxr_serialize_AGENT_Representation>
 8011a78:	2001      	movs	r0, #1
 8011a7a:	bd70      	pop	{r4, r5, r6, pc}
 8011a7c:	68a2      	ldr	r2, [r4, #8]
 8011a7e:	f104 010c 	add.w	r1, r4, #12
 8011a82:	4628      	mov	r0, r5
 8011a84:	f7fd f9da 	bl	800ee3c <ucdr_serialize_sequence_uint8_t>
 8011a88:	4606      	mov	r6, r0
 8011a8a:	e7c7      	b.n	8011a1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011a8c:	68a1      	ldr	r1, [r4, #8]
 8011a8e:	4628      	mov	r0, r5
 8011a90:	f004 fe8a 	bl	80167a8 <ucdr_serialize_string>
 8011a94:	4606      	mov	r6, r0
 8011a96:	e7c1      	b.n	8011a1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011a98:	68a2      	ldr	r2, [r4, #8]
 8011a9a:	f104 010c 	add.w	r1, r4, #12
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	f7fd f9cc 	bl	800ee3c <ucdr_serialize_sequence_uint8_t>
 8011aa4:	4606      	mov	r6, r0
 8011aa6:	e7d5      	b.n	8011a54 <uxr_serialize_ObjectVariant.part.0+0x94>

08011aa8 <uxr_deserialize_DATAWRITER_Representation>:
 8011aa8:	b570      	push	{r4, r5, r6, lr}
 8011aaa:	4606      	mov	r6, r0
 8011aac:	460d      	mov	r5, r1
 8011aae:	f7fb fe5d 	bl	800d76c <ucdr_deserialize_uint8_t>
 8011ab2:	4604      	mov	r4, r0
 8011ab4:	b130      	cbz	r0, 8011ac4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011ab6:	782b      	ldrb	r3, [r5, #0]
 8011ab8:	2b02      	cmp	r3, #2
 8011aba:	d00c      	beq.n	8011ad6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011abc:	2b03      	cmp	r3, #3
 8011abe:	d012      	beq.n	8011ae6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d008      	beq.n	8011ad6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011ac4:	2202      	movs	r2, #2
 8011ac6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011aca:	4630      	mov	r0, r6
 8011acc:	f7fb fcfc 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8011ad0:	4020      	ands	r0, r4
 8011ad2:	b2c0      	uxtb	r0, r0
 8011ad4:	bd70      	pop	{r4, r5, r6, pc}
 8011ad6:	6869      	ldr	r1, [r5, #4]
 8011ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011adc:	4630      	mov	r0, r6
 8011ade:	f004 fe73 	bl	80167c8 <ucdr_deserialize_string>
 8011ae2:	4604      	mov	r4, r0
 8011ae4:	e7ee      	b.n	8011ac4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011ae6:	1d2b      	adds	r3, r5, #4
 8011ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011aec:	f105 0108 	add.w	r1, r5, #8
 8011af0:	4630      	mov	r0, r6
 8011af2:	f7fd f9b5 	bl	800ee60 <ucdr_deserialize_sequence_uint8_t>
 8011af6:	4604      	mov	r4, r0
 8011af8:	e7e4      	b.n	8011ac4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011afa:	bf00      	nop

08011afc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011afc:	b570      	push	{r4, r5, r6, lr}
 8011afe:	460d      	mov	r5, r1
 8011b00:	7809      	ldrb	r1, [r1, #0]
 8011b02:	4606      	mov	r6, r0
 8011b04:	f7fb fdee 	bl	800d6e4 <ucdr_serialize_bool>
 8011b08:	782b      	ldrb	r3, [r5, #0]
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	b94b      	cbnz	r3, 8011b22 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011b0e:	7a29      	ldrb	r1, [r5, #8]
 8011b10:	4630      	mov	r0, r6
 8011b12:	f7fb fde7 	bl	800d6e4 <ucdr_serialize_bool>
 8011b16:	7a2b      	ldrb	r3, [r5, #8]
 8011b18:	4004      	ands	r4, r0
 8011b1a:	b2e4      	uxtb	r4, r4
 8011b1c:	b943      	cbnz	r3, 8011b30 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011b1e:	4620      	mov	r0, r4
 8011b20:	bd70      	pop	{r4, r5, r6, pc}
 8011b22:	6869      	ldr	r1, [r5, #4]
 8011b24:	4630      	mov	r0, r6
 8011b26:	f004 fe3f 	bl	80167a8 <ucdr_serialize_string>
 8011b2a:	4004      	ands	r4, r0
 8011b2c:	b2e4      	uxtb	r4, r4
 8011b2e:	e7ee      	b.n	8011b0e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011b30:	68e9      	ldr	r1, [r5, #12]
 8011b32:	4630      	mov	r0, r6
 8011b34:	f004 fe38 	bl	80167a8 <ucdr_serialize_string>
 8011b38:	4004      	ands	r4, r0
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	bd70      	pop	{r4, r5, r6, pc}
 8011b3e:	bf00      	nop

08011b40 <uxr_serialize_OBJK_Topic_Binary>:
 8011b40:	b570      	push	{r4, r5, r6, lr}
 8011b42:	460d      	mov	r5, r1
 8011b44:	6809      	ldr	r1, [r1, #0]
 8011b46:	4606      	mov	r6, r0
 8011b48:	f004 fe2e 	bl	80167a8 <ucdr_serialize_string>
 8011b4c:	7929      	ldrb	r1, [r5, #4]
 8011b4e:	4604      	mov	r4, r0
 8011b50:	4630      	mov	r0, r6
 8011b52:	f7fb fdc7 	bl	800d6e4 <ucdr_serialize_bool>
 8011b56:	792b      	ldrb	r3, [r5, #4]
 8011b58:	4004      	ands	r4, r0
 8011b5a:	b2e4      	uxtb	r4, r4
 8011b5c:	b943      	cbnz	r3, 8011b70 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011b5e:	7b29      	ldrb	r1, [r5, #12]
 8011b60:	4630      	mov	r0, r6
 8011b62:	f7fb fdbf 	bl	800d6e4 <ucdr_serialize_bool>
 8011b66:	7b2b      	ldrb	r3, [r5, #12]
 8011b68:	4004      	ands	r4, r0
 8011b6a:	b93b      	cbnz	r3, 8011b7c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	bd70      	pop	{r4, r5, r6, pc}
 8011b70:	68a9      	ldr	r1, [r5, #8]
 8011b72:	4630      	mov	r0, r6
 8011b74:	f004 fe18 	bl	80167a8 <ucdr_serialize_string>
 8011b78:	4004      	ands	r4, r0
 8011b7a:	e7f0      	b.n	8011b5e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011b7c:	6929      	ldr	r1, [r5, #16]
 8011b7e:	4630      	mov	r0, r6
 8011b80:	f004 fe12 	bl	80167a8 <ucdr_serialize_string>
 8011b84:	4004      	ands	r4, r0
 8011b86:	b2e4      	uxtb	r4, r4
 8011b88:	4620      	mov	r0, r4
 8011b8a:	bd70      	pop	{r4, r5, r6, pc}

08011b8c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b90:	460c      	mov	r4, r1
 8011b92:	7809      	ldrb	r1, [r1, #0]
 8011b94:	4606      	mov	r6, r0
 8011b96:	f7fb fda5 	bl	800d6e4 <ucdr_serialize_bool>
 8011b9a:	7823      	ldrb	r3, [r4, #0]
 8011b9c:	4605      	mov	r5, r0
 8011b9e:	b96b      	cbnz	r3, 8011bbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011ba0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011ba4:	4630      	mov	r0, r6
 8011ba6:	f7fb fd9d 	bl	800d6e4 <ucdr_serialize_bool>
 8011baa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011bae:	4005      	ands	r5, r0
 8011bb0:	b2ed      	uxtb	r5, r5
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d169      	bne.n	8011c8a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bbc:	6861      	ldr	r1, [r4, #4]
 8011bbe:	4630      	mov	r0, r6
 8011bc0:	f7fb ffd4 	bl	800db6c <ucdr_serialize_uint32_t>
 8011bc4:	6863      	ldr	r3, [r4, #4]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d06b      	beq.n	8011ca2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011bca:	2800      	cmp	r0, #0
 8011bcc:	d067      	beq.n	8011c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011bce:	68a1      	ldr	r1, [r4, #8]
 8011bd0:	4630      	mov	r0, r6
 8011bd2:	f004 fde9 	bl	80167a8 <ucdr_serialize_string>
 8011bd6:	6863      	ldr	r3, [r4, #4]
 8011bd8:	2b01      	cmp	r3, #1
 8011bda:	d953      	bls.n	8011c84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	d05e      	beq.n	8011c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011be0:	68e1      	ldr	r1, [r4, #12]
 8011be2:	4630      	mov	r0, r6
 8011be4:	f004 fde0 	bl	80167a8 <ucdr_serialize_string>
 8011be8:	6863      	ldr	r3, [r4, #4]
 8011bea:	2b02      	cmp	r3, #2
 8011bec:	d94a      	bls.n	8011c84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	d055      	beq.n	8011c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011bf2:	6921      	ldr	r1, [r4, #16]
 8011bf4:	4630      	mov	r0, r6
 8011bf6:	f004 fdd7 	bl	80167a8 <ucdr_serialize_string>
 8011bfa:	6863      	ldr	r3, [r4, #4]
 8011bfc:	2b03      	cmp	r3, #3
 8011bfe:	d941      	bls.n	8011c84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d04c      	beq.n	8011c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011c04:	6961      	ldr	r1, [r4, #20]
 8011c06:	4630      	mov	r0, r6
 8011c08:	f004 fdce 	bl	80167a8 <ucdr_serialize_string>
 8011c0c:	6863      	ldr	r3, [r4, #4]
 8011c0e:	2b04      	cmp	r3, #4
 8011c10:	d938      	bls.n	8011c84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011c12:	2800      	cmp	r0, #0
 8011c14:	d043      	beq.n	8011c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011c16:	69a1      	ldr	r1, [r4, #24]
 8011c18:	4630      	mov	r0, r6
 8011c1a:	f004 fdc5 	bl	80167a8 <ucdr_serialize_string>
 8011c1e:	6863      	ldr	r3, [r4, #4]
 8011c20:	2b05      	cmp	r3, #5
 8011c22:	d92f      	bls.n	8011c84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011c24:	2800      	cmp	r0, #0
 8011c26:	d03a      	beq.n	8011c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011c28:	69e1      	ldr	r1, [r4, #28]
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	f004 fdbc 	bl	80167a8 <ucdr_serialize_string>
 8011c30:	6863      	ldr	r3, [r4, #4]
 8011c32:	2b06      	cmp	r3, #6
 8011c34:	d926      	bls.n	8011c84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011c36:	b390      	cbz	r0, 8011c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011c38:	6a21      	ldr	r1, [r4, #32]
 8011c3a:	4630      	mov	r0, r6
 8011c3c:	f004 fdb4 	bl	80167a8 <ucdr_serialize_string>
 8011c40:	6863      	ldr	r3, [r4, #4]
 8011c42:	2b07      	cmp	r3, #7
 8011c44:	d91e      	bls.n	8011c84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011c46:	b350      	cbz	r0, 8011c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011c48:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	f004 fdac 	bl	80167a8 <ucdr_serialize_string>
 8011c50:	6863      	ldr	r3, [r4, #4]
 8011c52:	2b08      	cmp	r3, #8
 8011c54:	d916      	bls.n	8011c84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011c56:	b310      	cbz	r0, 8011c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011c58:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011c5a:	4630      	mov	r0, r6
 8011c5c:	f004 fda4 	bl	80167a8 <ucdr_serialize_string>
 8011c60:	6863      	ldr	r3, [r4, #4]
 8011c62:	2b09      	cmp	r3, #9
 8011c64:	d90e      	bls.n	8011c84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011c66:	b1d0      	cbz	r0, 8011c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011c68:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011c6c:	2709      	movs	r7, #9
 8011c6e:	e000      	b.n	8011c72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011c70:	b1a8      	cbz	r0, 8011c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011c72:	f858 1b04 	ldr.w	r1, [r8], #4
 8011c76:	4630      	mov	r0, r6
 8011c78:	f004 fd96 	bl	80167a8 <ucdr_serialize_string>
 8011c7c:	6862      	ldr	r2, [r4, #4]
 8011c7e:	3701      	adds	r7, #1
 8011c80:	4297      	cmp	r7, r2
 8011c82:	d3f5      	bcc.n	8011c70 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011c84:	4005      	ands	r5, r0
 8011c86:	b2ed      	uxtb	r5, r5
 8011c88:	e78a      	b.n	8011ba0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011c8a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011c8c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011c90:	4630      	mov	r0, r6
 8011c92:	f7fd f8d3 	bl	800ee3c <ucdr_serialize_sequence_uint8_t>
 8011c96:	4005      	ands	r5, r0
 8011c98:	4628      	mov	r0, r5
 8011c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c9e:	2500      	movs	r5, #0
 8011ca0:	e77e      	b.n	8011ba0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011ca2:	4028      	ands	r0, r5
 8011ca4:	b2c5      	uxtb	r5, r0
 8011ca6:	e77b      	b.n	8011ba0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011ca8 <uxr_serialize_OBJK_Publisher_Binary>:
 8011ca8:	b570      	push	{r4, r5, r6, lr}
 8011caa:	460d      	mov	r5, r1
 8011cac:	7809      	ldrb	r1, [r1, #0]
 8011cae:	4606      	mov	r6, r0
 8011cb0:	f7fb fd18 	bl	800d6e4 <ucdr_serialize_bool>
 8011cb4:	782b      	ldrb	r3, [r5, #0]
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	b94b      	cbnz	r3, 8011cce <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011cba:	7a29      	ldrb	r1, [r5, #8]
 8011cbc:	4630      	mov	r0, r6
 8011cbe:	f7fb fd11 	bl	800d6e4 <ucdr_serialize_bool>
 8011cc2:	7a2b      	ldrb	r3, [r5, #8]
 8011cc4:	4004      	ands	r4, r0
 8011cc6:	b2e4      	uxtb	r4, r4
 8011cc8:	b943      	cbnz	r3, 8011cdc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011cca:	4620      	mov	r0, r4
 8011ccc:	bd70      	pop	{r4, r5, r6, pc}
 8011cce:	6869      	ldr	r1, [r5, #4]
 8011cd0:	4630      	mov	r0, r6
 8011cd2:	f004 fd69 	bl	80167a8 <ucdr_serialize_string>
 8011cd6:	4004      	ands	r4, r0
 8011cd8:	b2e4      	uxtb	r4, r4
 8011cda:	e7ee      	b.n	8011cba <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011cdc:	f105 010c 	add.w	r1, r5, #12
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f7ff ff53 	bl	8011b8c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011ce6:	4004      	ands	r4, r0
 8011ce8:	4620      	mov	r0, r4
 8011cea:	bd70      	pop	{r4, r5, r6, pc}

08011cec <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011cec:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011cf0:	4688      	mov	r8, r1
 8011cf2:	8809      	ldrh	r1, [r1, #0]
 8011cf4:	4681      	mov	r9, r0
 8011cf6:	f7fb fd4f 	bl	800d798 <ucdr_serialize_uint16_t>
 8011cfa:	f898 1002 	ldrb.w	r1, [r8, #2]
 8011cfe:	4606      	mov	r6, r0
 8011d00:	4648      	mov	r0, r9
 8011d02:	f7fb fcef 	bl	800d6e4 <ucdr_serialize_bool>
 8011d06:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011d0a:	4006      	ands	r6, r0
 8011d0c:	b2f5      	uxtb	r5, r6
 8011d0e:	b9eb      	cbnz	r3, 8011d4c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011d10:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011d14:	4648      	mov	r0, r9
 8011d16:	f7fb fce5 	bl	800d6e4 <ucdr_serialize_bool>
 8011d1a:	f898 3006 	ldrb.w	r3, [r8, #6]
 8011d1e:	4005      	ands	r5, r0
 8011d20:	bb7b      	cbnz	r3, 8011d82 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8011d22:	f898 100c 	ldrb.w	r1, [r8, #12]
 8011d26:	4648      	mov	r0, r9
 8011d28:	f7fb fcdc 	bl	800d6e4 <ucdr_serialize_bool>
 8011d2c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011d30:	4005      	ands	r5, r0
 8011d32:	b9f3      	cbnz	r3, 8011d72 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8011d34:	f898 1014 	ldrb.w	r1, [r8, #20]
 8011d38:	4648      	mov	r0, r9
 8011d3a:	f7fb fcd3 	bl	800d6e4 <ucdr_serialize_bool>
 8011d3e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011d42:	4005      	ands	r5, r0
 8011d44:	b94b      	cbnz	r3, 8011d5a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8011d46:	4628      	mov	r0, r5
 8011d48:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011d4c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011d50:	4648      	mov	r0, r9
 8011d52:	f7fb fd21 	bl	800d798 <ucdr_serialize_uint16_t>
 8011d56:	4005      	ands	r5, r0
 8011d58:	e7da      	b.n	8011d10 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011d5a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011d5e:	f108 011c 	add.w	r1, r8, #28
 8011d62:	4648      	mov	r0, r9
 8011d64:	f7fd f86a 	bl	800ee3c <ucdr_serialize_sequence_uint8_t>
 8011d68:	4028      	ands	r0, r5
 8011d6a:	b2c5      	uxtb	r5, r0
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011d72:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011d76:	4648      	mov	r0, r9
 8011d78:	f7fb fef8 	bl	800db6c <ucdr_serialize_uint32_t>
 8011d7c:	4028      	ands	r0, r5
 8011d7e:	b2c5      	uxtb	r5, r0
 8011d80:	e7d8      	b.n	8011d34 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8011d82:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011d86:	4648      	mov	r0, r9
 8011d88:	f7fb fef0 	bl	800db6c <ucdr_serialize_uint32_t>
 8011d8c:	4028      	ands	r0, r5
 8011d8e:	b2c5      	uxtb	r5, r0
 8011d90:	e7c7      	b.n	8011d22 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8011d92:	bf00      	nop

08011d94 <uxr_serialize_OBJK_DataWriter_Binary>:
 8011d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d96:	2202      	movs	r2, #2
 8011d98:	460d      	mov	r5, r1
 8011d9a:	4606      	mov	r6, r0
 8011d9c:	f7fb fb30 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8011da0:	78a9      	ldrb	r1, [r5, #2]
 8011da2:	4604      	mov	r4, r0
 8011da4:	4630      	mov	r0, r6
 8011da6:	f7fb fc9d 	bl	800d6e4 <ucdr_serialize_bool>
 8011daa:	78ab      	ldrb	r3, [r5, #2]
 8011dac:	4004      	ands	r4, r0
 8011dae:	b2e4      	uxtb	r4, r4
 8011db0:	b90b      	cbnz	r3, 8011db6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8011db2:	4620      	mov	r0, r4
 8011db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011db6:	f105 0108 	add.w	r1, r5, #8
 8011dba:	4630      	mov	r0, r6
 8011dbc:	f7ff ff96 	bl	8011cec <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011dc0:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8011dc4:	4607      	mov	r7, r0
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	f7fb fc8c 	bl	800d6e4 <ucdr_serialize_bool>
 8011dcc:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011dd0:	4038      	ands	r0, r7
 8011dd2:	b2c7      	uxtb	r7, r0
 8011dd4:	b913      	cbnz	r3, 8011ddc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8011dd6:	403c      	ands	r4, r7
 8011dd8:	4620      	mov	r0, r4
 8011dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ddc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011de0:	4630      	mov	r0, r6
 8011de2:	f7fc f919 	bl	800e018 <ucdr_serialize_uint64_t>
 8011de6:	4007      	ands	r7, r0
 8011de8:	e7f5      	b.n	8011dd6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011dea:	bf00      	nop

08011dec <uxr_deserialize_ObjectVariant>:
 8011dec:	b570      	push	{r4, r5, r6, lr}
 8011dee:	4605      	mov	r5, r0
 8011df0:	460e      	mov	r6, r1
 8011df2:	f7fb fcbb 	bl	800d76c <ucdr_deserialize_uint8_t>
 8011df6:	b168      	cbz	r0, 8011e14 <uxr_deserialize_ObjectVariant+0x28>
 8011df8:	7833      	ldrb	r3, [r6, #0]
 8011dfa:	3b01      	subs	r3, #1
 8011dfc:	4604      	mov	r4, r0
 8011dfe:	2b0d      	cmp	r3, #13
 8011e00:	d809      	bhi.n	8011e16 <uxr_deserialize_ObjectVariant+0x2a>
 8011e02:	e8df f003 	tbb	[pc, r3]
 8011e06:	0a41      	.short	0x0a41
 8011e08:	0a0a2323 	.word	0x0a0a2323
 8011e0c:	10080a0a 	.word	0x10080a0a
 8011e10:	565c1010 	.word	0x565c1010
 8011e14:	2400      	movs	r4, #0
 8011e16:	4620      	mov	r0, r4
 8011e18:	bd70      	pop	{r4, r5, r6, pc}
 8011e1a:	1d31      	adds	r1, r6, #4
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e22:	f7ff be41 	b.w	8011aa8 <uxr_deserialize_DATAWRITER_Representation>
 8011e26:	1d31      	adds	r1, r6, #4
 8011e28:	4628      	mov	r0, r5
 8011e2a:	f7fb fc9f 	bl	800d76c <ucdr_deserialize_uint8_t>
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	d0f0      	beq.n	8011e14 <uxr_deserialize_ObjectVariant+0x28>
 8011e32:	7933      	ldrb	r3, [r6, #4]
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	d001      	beq.n	8011e3c <uxr_deserialize_ObjectVariant+0x50>
 8011e38:	2b02      	cmp	r3, #2
 8011e3a:	d1ec      	bne.n	8011e16 <uxr_deserialize_ObjectVariant+0x2a>
 8011e3c:	68b1      	ldr	r1, [r6, #8]
 8011e3e:	4628      	mov	r0, r5
 8011e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e48:	f004 bcbe 	b.w	80167c8 <ucdr_deserialize_string>
 8011e4c:	1d31      	adds	r1, r6, #4
 8011e4e:	4628      	mov	r0, r5
 8011e50:	f7fb fc8c 	bl	800d76c <ucdr_deserialize_uint8_t>
 8011e54:	4604      	mov	r4, r0
 8011e56:	b170      	cbz	r0, 8011e76 <uxr_deserialize_ObjectVariant+0x8a>
 8011e58:	7933      	ldrb	r3, [r6, #4]
 8011e5a:	2b02      	cmp	r3, #2
 8011e5c:	d04c      	beq.n	8011ef8 <uxr_deserialize_ObjectVariant+0x10c>
 8011e5e:	2b03      	cmp	r3, #3
 8011e60:	d109      	bne.n	8011e76 <uxr_deserialize_ObjectVariant+0x8a>
 8011e62:	f106 0308 	add.w	r3, r6, #8
 8011e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011e6a:	f106 010c 	add.w	r1, r6, #12
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f7fc fff6 	bl	800ee60 <ucdr_deserialize_sequence_uint8_t>
 8011e74:	4604      	mov	r4, r0
 8011e76:	2202      	movs	r2, #2
 8011e78:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	f7fb fb23 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8011e82:	4020      	ands	r0, r4
 8011e84:	b2c4      	uxtb	r4, r0
 8011e86:	e7c6      	b.n	8011e16 <uxr_deserialize_ObjectVariant+0x2a>
 8011e88:	1d31      	adds	r1, r6, #4
 8011e8a:	4628      	mov	r0, r5
 8011e8c:	f7fb fc6e 	bl	800d76c <ucdr_deserialize_uint8_t>
 8011e90:	4604      	mov	r4, r0
 8011e92:	b130      	cbz	r0, 8011ea2 <uxr_deserialize_ObjectVariant+0xb6>
 8011e94:	7933      	ldrb	r3, [r6, #4]
 8011e96:	2b02      	cmp	r3, #2
 8011e98:	d036      	beq.n	8011f08 <uxr_deserialize_ObjectVariant+0x11c>
 8011e9a:	2b03      	cmp	r3, #3
 8011e9c:	d03c      	beq.n	8011f18 <uxr_deserialize_ObjectVariant+0x12c>
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d032      	beq.n	8011f08 <uxr_deserialize_ObjectVariant+0x11c>
 8011ea2:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f7fc fa06 	bl	800e2b8 <ucdr_deserialize_int16_t>
 8011eac:	4020      	ands	r0, r4
 8011eae:	b2c4      	uxtb	r4, r0
 8011eb0:	e7b1      	b.n	8011e16 <uxr_deserialize_ObjectVariant+0x2a>
 8011eb2:	1d31      	adds	r1, r6, #4
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011eba:	f7ff bcab 	b.w	8011814 <uxr_deserialize_CLIENT_Representation>
 8011ebe:	2204      	movs	r2, #4
 8011ec0:	18b1      	adds	r1, r6, r2
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	f7fb fb00 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8011ec8:	2202      	movs	r2, #2
 8011eca:	f106 0108 	add.w	r1, r6, #8
 8011ece:	4604      	mov	r4, r0
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	f7fb faf9 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8011ed6:	2202      	movs	r2, #2
 8011ed8:	4004      	ands	r4, r0
 8011eda:	f106 010a 	add.w	r1, r6, #10
 8011ede:	4628      	mov	r0, r5
 8011ee0:	f7fb faf2 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8011ee4:	b2e4      	uxtb	r4, r4
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	f106 010c 	add.w	r1, r6, #12
 8011eec:	4628      	mov	r0, r5
 8011eee:	401c      	ands	r4, r3
 8011ef0:	f7fb fc0e 	bl	800d710 <ucdr_deserialize_bool>
 8011ef4:	4004      	ands	r4, r0
 8011ef6:	e78e      	b.n	8011e16 <uxr_deserialize_ObjectVariant+0x2a>
 8011ef8:	68b1      	ldr	r1, [r6, #8]
 8011efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011efe:	4628      	mov	r0, r5
 8011f00:	f004 fc62 	bl	80167c8 <ucdr_deserialize_string>
 8011f04:	4604      	mov	r4, r0
 8011f06:	e7b6      	b.n	8011e76 <uxr_deserialize_ObjectVariant+0x8a>
 8011f08:	68b1      	ldr	r1, [r6, #8]
 8011f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f0e:	4628      	mov	r0, r5
 8011f10:	f004 fc5a 	bl	80167c8 <ucdr_deserialize_string>
 8011f14:	4604      	mov	r4, r0
 8011f16:	e7c4      	b.n	8011ea2 <uxr_deserialize_ObjectVariant+0xb6>
 8011f18:	f106 0308 	add.w	r3, r6, #8
 8011f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f20:	f106 010c 	add.w	r1, r6, #12
 8011f24:	4628      	mov	r0, r5
 8011f26:	f7fc ff9b 	bl	800ee60 <ucdr_deserialize_sequence_uint8_t>
 8011f2a:	4604      	mov	r4, r0
 8011f2c:	e7b9      	b.n	8011ea2 <uxr_deserialize_ObjectVariant+0xb6>
 8011f2e:	bf00      	nop

08011f30 <uxr_deserialize_BaseObjectRequest>:
 8011f30:	b570      	push	{r4, r5, r6, lr}
 8011f32:	2202      	movs	r2, #2
 8011f34:	4605      	mov	r5, r0
 8011f36:	460e      	mov	r6, r1
 8011f38:	f7fb fac6 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8011f3c:	2202      	movs	r2, #2
 8011f3e:	4604      	mov	r4, r0
 8011f40:	18b1      	adds	r1, r6, r2
 8011f42:	4628      	mov	r0, r5
 8011f44:	f7fb fac0 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8011f48:	4020      	ands	r0, r4
 8011f4a:	b2c0      	uxtb	r0, r0
 8011f4c:	bd70      	pop	{r4, r5, r6, pc}
 8011f4e:	bf00      	nop

08011f50 <uxr_serialize_ActivityInfoVariant>:
 8011f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f54:	460d      	mov	r5, r1
 8011f56:	7809      	ldrb	r1, [r1, #0]
 8011f58:	4607      	mov	r7, r0
 8011f5a:	f7fb fbf1 	bl	800d740 <ucdr_serialize_uint8_t>
 8011f5e:	4681      	mov	r9, r0
 8011f60:	b138      	cbz	r0, 8011f72 <uxr_serialize_ActivityInfoVariant+0x22>
 8011f62:	782b      	ldrb	r3, [r5, #0]
 8011f64:	2b06      	cmp	r3, #6
 8011f66:	f000 8082 	beq.w	801206e <uxr_serialize_ActivityInfoVariant+0x11e>
 8011f6a:	2b0d      	cmp	r3, #13
 8011f6c:	d016      	beq.n	8011f9c <uxr_serialize_ActivityInfoVariant+0x4c>
 8011f6e:	2b05      	cmp	r3, #5
 8011f70:	d002      	beq.n	8011f78 <uxr_serialize_ActivityInfoVariant+0x28>
 8011f72:	4648      	mov	r0, r9
 8011f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f78:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011f7c:	4638      	mov	r0, r7
 8011f7e:	f7fc f91b 	bl	800e1b8 <ucdr_serialize_int16_t>
 8011f82:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8011f86:	4681      	mov	r9, r0
 8011f88:	4638      	mov	r0, r7
 8011f8a:	f7fc f845 	bl	800e018 <ucdr_serialize_uint64_t>
 8011f8e:	ea09 0000 	and.w	r0, r9, r0
 8011f92:	fa5f f980 	uxtb.w	r9, r0
 8011f96:	4648      	mov	r0, r9
 8011f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f9c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011fa0:	4638      	mov	r0, r7
 8011fa2:	f7fc f909 	bl	800e1b8 <ucdr_serialize_int16_t>
 8011fa6:	68e9      	ldr	r1, [r5, #12]
 8011fa8:	4681      	mov	r9, r0
 8011faa:	4638      	mov	r0, r7
 8011fac:	f7fb fdde 	bl	800db6c <ucdr_serialize_uint32_t>
 8011fb0:	68eb      	ldr	r3, [r5, #12]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d0eb      	beq.n	8011f8e <uxr_serialize_ActivityInfoVariant+0x3e>
 8011fb6:	b320      	cbz	r0, 8012002 <uxr_serialize_ActivityInfoVariant+0xb2>
 8011fb8:	f105 080c 	add.w	r8, r5, #12
 8011fbc:	2600      	movs	r6, #0
 8011fbe:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8011fc2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8011fc6:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8011fca:	4638      	mov	r0, r7
 8011fcc:	f7fb fbb8 	bl	800d740 <ucdr_serialize_uint8_t>
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	d053      	beq.n	801207c <uxr_serialize_ActivityInfoVariant+0x12c>
 8011fd4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011fd8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011fdc:	0074      	lsls	r4, r6, #1
 8011fde:	00c9      	lsls	r1, r1, #3
 8011fe0:	2b03      	cmp	r3, #3
 8011fe2:	d854      	bhi.n	801208e <uxr_serialize_ActivityInfoVariant+0x13e>
 8011fe4:	e8df f003 	tbb	[pc, r3]
 8011fe8:	02102132 	.word	0x02102132
 8011fec:	4441      	add	r1, r8
 8011fee:	4638      	mov	r0, r7
 8011ff0:	6889      	ldr	r1, [r1, #8]
 8011ff2:	f004 fbd9 	bl	80167a8 <ucdr_serialize_string>
 8011ff6:	68ea      	ldr	r2, [r5, #12]
 8011ff8:	3601      	adds	r6, #1
 8011ffa:	4296      	cmp	r6, r2
 8011ffc:	d242      	bcs.n	8012084 <uxr_serialize_ActivityInfoVariant+0x134>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d1dd      	bne.n	8011fbe <uxr_serialize_ActivityInfoVariant+0x6e>
 8012002:	f04f 0900 	mov.w	r9, #0
 8012006:	e7b4      	b.n	8011f72 <uxr_serialize_ActivityInfoVariant+0x22>
 8012008:	3108      	adds	r1, #8
 801200a:	4441      	add	r1, r8
 801200c:	2210      	movs	r2, #16
 801200e:	4638      	mov	r0, r7
 8012010:	f7fb f9f6 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8012014:	4434      	add	r4, r6
 8012016:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801201a:	4604      	mov	r4, r0
 801201c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801201e:	4638      	mov	r0, r7
 8012020:	f7fb fda4 	bl	800db6c <ucdr_serialize_uint32_t>
 8012024:	4020      	ands	r0, r4
 8012026:	b2c0      	uxtb	r0, r0
 8012028:	e7e5      	b.n	8011ff6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801202a:	3108      	adds	r1, #8
 801202c:	4441      	add	r1, r8
 801202e:	2204      	movs	r2, #4
 8012030:	4638      	mov	r0, r7
 8012032:	f7fb f9e5 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8012036:	4434      	add	r4, r6
 8012038:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801203c:	4604      	mov	r4, r0
 801203e:	8b19      	ldrh	r1, [r3, #24]
 8012040:	4638      	mov	r0, r7
 8012042:	f7fb fba9 	bl	800d798 <ucdr_serialize_uint16_t>
 8012046:	4020      	ands	r0, r4
 8012048:	b2c0      	uxtb	r0, r0
 801204a:	e7d4      	b.n	8011ff6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801204c:	3108      	adds	r1, #8
 801204e:	4441      	add	r1, r8
 8012050:	2202      	movs	r2, #2
 8012052:	4638      	mov	r0, r7
 8012054:	f7fb f9d4 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8012058:	4434      	add	r4, r6
 801205a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801205e:	4604      	mov	r4, r0
 8012060:	7d99      	ldrb	r1, [r3, #22]
 8012062:	4638      	mov	r0, r7
 8012064:	f7fb fb6c 	bl	800d740 <ucdr_serialize_uint8_t>
 8012068:	4020      	ands	r0, r4
 801206a:	b2c0      	uxtb	r0, r0
 801206c:	e7c3      	b.n	8011ff6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801206e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012072:	4638      	mov	r0, r7
 8012074:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012078:	f7fc b89e 	b.w	800e1b8 <ucdr_serialize_int16_t>
 801207c:	68ea      	ldr	r2, [r5, #12]
 801207e:	3601      	adds	r6, #1
 8012080:	42b2      	cmp	r2, r6
 8012082:	d8be      	bhi.n	8012002 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012084:	ea09 0900 	and.w	r9, r9, r0
 8012088:	fa5f f989 	uxtb.w	r9, r9
 801208c:	e771      	b.n	8011f72 <uxr_serialize_ActivityInfoVariant+0x22>
 801208e:	68eb      	ldr	r3, [r5, #12]
 8012090:	3601      	adds	r6, #1
 8012092:	429e      	cmp	r6, r3
 8012094:	f10a 0a18 	add.w	sl, sl, #24
 8012098:	d395      	bcc.n	8011fc6 <uxr_serialize_ActivityInfoVariant+0x76>
 801209a:	e76a      	b.n	8011f72 <uxr_serialize_ActivityInfoVariant+0x22>

0801209c <uxr_deserialize_BaseObjectReply>:
 801209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120a0:	2202      	movs	r2, #2
 80120a2:	4606      	mov	r6, r0
 80120a4:	460f      	mov	r7, r1
 80120a6:	f7fb fa0f 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 80120aa:	2202      	movs	r2, #2
 80120ac:	18b9      	adds	r1, r7, r2
 80120ae:	4605      	mov	r5, r0
 80120b0:	4630      	mov	r0, r6
 80120b2:	f7fb fa09 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 80120b6:	1d39      	adds	r1, r7, #4
 80120b8:	4680      	mov	r8, r0
 80120ba:	4630      	mov	r0, r6
 80120bc:	f7fb fb56 	bl	800d76c <ucdr_deserialize_uint8_t>
 80120c0:	1d79      	adds	r1, r7, #5
 80120c2:	4604      	mov	r4, r0
 80120c4:	4630      	mov	r0, r6
 80120c6:	f7fb fb51 	bl	800d76c <ucdr_deserialize_uint8_t>
 80120ca:	ea05 0508 	and.w	r5, r5, r8
 80120ce:	402c      	ands	r4, r5
 80120d0:	4020      	ands	r0, r4
 80120d2:	b2c0      	uxtb	r0, r0
 80120d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080120d8 <uxr_serialize_ReadSpecification>:
 80120d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120dc:	460e      	mov	r6, r1
 80120de:	7809      	ldrb	r1, [r1, #0]
 80120e0:	4607      	mov	r7, r0
 80120e2:	f7fb fb2d 	bl	800d740 <ucdr_serialize_uint8_t>
 80120e6:	7871      	ldrb	r1, [r6, #1]
 80120e8:	4604      	mov	r4, r0
 80120ea:	4638      	mov	r0, r7
 80120ec:	f7fb fb28 	bl	800d740 <ucdr_serialize_uint8_t>
 80120f0:	78b1      	ldrb	r1, [r6, #2]
 80120f2:	4004      	ands	r4, r0
 80120f4:	4638      	mov	r0, r7
 80120f6:	f7fb faf5 	bl	800d6e4 <ucdr_serialize_bool>
 80120fa:	78b3      	ldrb	r3, [r6, #2]
 80120fc:	b2e4      	uxtb	r4, r4
 80120fe:	4004      	ands	r4, r0
 8012100:	b94b      	cbnz	r3, 8012116 <uxr_serialize_ReadSpecification+0x3e>
 8012102:	7a31      	ldrb	r1, [r6, #8]
 8012104:	4638      	mov	r0, r7
 8012106:	f7fb faed 	bl	800d6e4 <ucdr_serialize_bool>
 801210a:	7a33      	ldrb	r3, [r6, #8]
 801210c:	4004      	ands	r4, r0
 801210e:	b943      	cbnz	r3, 8012122 <uxr_serialize_ReadSpecification+0x4a>
 8012110:	4620      	mov	r0, r4
 8012112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012116:	6871      	ldr	r1, [r6, #4]
 8012118:	4638      	mov	r0, r7
 801211a:	f004 fb45 	bl	80167a8 <ucdr_serialize_string>
 801211e:	4004      	ands	r4, r0
 8012120:	e7ef      	b.n	8012102 <uxr_serialize_ReadSpecification+0x2a>
 8012122:	8971      	ldrh	r1, [r6, #10]
 8012124:	4638      	mov	r0, r7
 8012126:	f7fb fb37 	bl	800d798 <ucdr_serialize_uint16_t>
 801212a:	89b1      	ldrh	r1, [r6, #12]
 801212c:	4605      	mov	r5, r0
 801212e:	4638      	mov	r0, r7
 8012130:	f7fb fb32 	bl	800d798 <ucdr_serialize_uint16_t>
 8012134:	89f1      	ldrh	r1, [r6, #14]
 8012136:	4005      	ands	r5, r0
 8012138:	4638      	mov	r0, r7
 801213a:	f7fb fb2d 	bl	800d798 <ucdr_serialize_uint16_t>
 801213e:	8a31      	ldrh	r1, [r6, #16]
 8012140:	4680      	mov	r8, r0
 8012142:	4638      	mov	r0, r7
 8012144:	f7fb fb28 	bl	800d798 <ucdr_serialize_uint16_t>
 8012148:	b2ed      	uxtb	r5, r5
 801214a:	4025      	ands	r5, r4
 801214c:	ea08 0505 	and.w	r5, r8, r5
 8012150:	ea00 0405 	and.w	r4, r0, r5
 8012154:	4620      	mov	r0, r4
 8012156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801215a:	bf00      	nop

0801215c <uxr_serialize_CREATE_CLIENT_Payload>:
 801215c:	f7ff bb02 	b.w	8011764 <uxr_serialize_CLIENT_Representation>

08012160 <uxr_serialize_CREATE_Payload>:
 8012160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012162:	2202      	movs	r2, #2
 8012164:	4607      	mov	r7, r0
 8012166:	460e      	mov	r6, r1
 8012168:	f7fb f94a 	bl	800d400 <ucdr_serialize_array_uint8_t>
 801216c:	2202      	movs	r2, #2
 801216e:	18b1      	adds	r1, r6, r2
 8012170:	4605      	mov	r5, r0
 8012172:	4638      	mov	r0, r7
 8012174:	f7fb f944 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8012178:	7931      	ldrb	r1, [r6, #4]
 801217a:	4604      	mov	r4, r0
 801217c:	4638      	mov	r0, r7
 801217e:	f7fb fadf 	bl	800d740 <ucdr_serialize_uint8_t>
 8012182:	b170      	cbz	r0, 80121a2 <uxr_serialize_CREATE_Payload+0x42>
 8012184:	7933      	ldrb	r3, [r6, #4]
 8012186:	402c      	ands	r4, r5
 8012188:	3b01      	subs	r3, #1
 801218a:	b2e4      	uxtb	r4, r4
 801218c:	2b0d      	cmp	r3, #13
 801218e:	d809      	bhi.n	80121a4 <uxr_serialize_CREATE_Payload+0x44>
 8012190:	e8df f003 	tbb	[pc, r3]
 8012194:	23230a4c 	.word	0x23230a4c
 8012198:	0a0a0a0a 	.word	0x0a0a0a0a
 801219c:	12121208 	.word	0x12121208
 80121a0:	3e45      	.short	0x3e45
 80121a2:	2400      	movs	r4, #0
 80121a4:	4620      	mov	r0, r4
 80121a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121a8:	f106 0108 	add.w	r1, r6, #8
 80121ac:	4638      	mov	r0, r7
 80121ae:	f7ff fbdf 	bl	8011970 <uxr_serialize_DATAWRITER_Representation>
 80121b2:	4004      	ands	r4, r0
 80121b4:	4620      	mov	r0, r4
 80121b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121b8:	7a31      	ldrb	r1, [r6, #8]
 80121ba:	4638      	mov	r0, r7
 80121bc:	f7fb fac0 	bl	800d740 <ucdr_serialize_uint8_t>
 80121c0:	2800      	cmp	r0, #0
 80121c2:	d0ee      	beq.n	80121a2 <uxr_serialize_CREATE_Payload+0x42>
 80121c4:	7a33      	ldrb	r3, [r6, #8]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d001      	beq.n	80121ce <uxr_serialize_CREATE_Payload+0x6e>
 80121ca:	2b02      	cmp	r3, #2
 80121cc:	d1ea      	bne.n	80121a4 <uxr_serialize_CREATE_Payload+0x44>
 80121ce:	68f1      	ldr	r1, [r6, #12]
 80121d0:	4638      	mov	r0, r7
 80121d2:	f004 fae9 	bl	80167a8 <ucdr_serialize_string>
 80121d6:	4004      	ands	r4, r0
 80121d8:	e7e4      	b.n	80121a4 <uxr_serialize_CREATE_Payload+0x44>
 80121da:	7a31      	ldrb	r1, [r6, #8]
 80121dc:	4638      	mov	r0, r7
 80121de:	f7fb faaf 	bl	800d740 <ucdr_serialize_uint8_t>
 80121e2:	4605      	mov	r5, r0
 80121e4:	b158      	cbz	r0, 80121fe <uxr_serialize_CREATE_Payload+0x9e>
 80121e6:	7a33      	ldrb	r3, [r6, #8]
 80121e8:	2b02      	cmp	r3, #2
 80121ea:	d034      	beq.n	8012256 <uxr_serialize_CREATE_Payload+0xf6>
 80121ec:	2b03      	cmp	r3, #3
 80121ee:	d106      	bne.n	80121fe <uxr_serialize_CREATE_Payload+0x9e>
 80121f0:	68f2      	ldr	r2, [r6, #12]
 80121f2:	f106 0110 	add.w	r1, r6, #16
 80121f6:	4638      	mov	r0, r7
 80121f8:	f7fc fe20 	bl	800ee3c <ucdr_serialize_sequence_uint8_t>
 80121fc:	4605      	mov	r5, r0
 80121fe:	2202      	movs	r2, #2
 8012200:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8012204:	4638      	mov	r0, r7
 8012206:	f7fb f8fb 	bl	800d400 <ucdr_serialize_array_uint8_t>
 801220a:	4028      	ands	r0, r5
 801220c:	4004      	ands	r4, r0
 801220e:	e7c9      	b.n	80121a4 <uxr_serialize_CREATE_Payload+0x44>
 8012210:	f106 0108 	add.w	r1, r6, #8
 8012214:	4638      	mov	r0, r7
 8012216:	f7ff faa5 	bl	8011764 <uxr_serialize_CLIENT_Representation>
 801221a:	4004      	ands	r4, r0
 801221c:	e7c2      	b.n	80121a4 <uxr_serialize_CREATE_Payload+0x44>
 801221e:	f106 0108 	add.w	r1, r6, #8
 8012222:	4638      	mov	r0, r7
 8012224:	f7ff fb5a 	bl	80118dc <uxr_serialize_AGENT_Representation>
 8012228:	4004      	ands	r4, r0
 801222a:	e7bb      	b.n	80121a4 <uxr_serialize_CREATE_Payload+0x44>
 801222c:	7a31      	ldrb	r1, [r6, #8]
 801222e:	4638      	mov	r0, r7
 8012230:	f7fb fa86 	bl	800d740 <ucdr_serialize_uint8_t>
 8012234:	4605      	mov	r5, r0
 8012236:	b130      	cbz	r0, 8012246 <uxr_serialize_CREATE_Payload+0xe6>
 8012238:	7a33      	ldrb	r3, [r6, #8]
 801223a:	2b02      	cmp	r3, #2
 801223c:	d011      	beq.n	8012262 <uxr_serialize_CREATE_Payload+0x102>
 801223e:	2b03      	cmp	r3, #3
 8012240:	d015      	beq.n	801226e <uxr_serialize_CREATE_Payload+0x10e>
 8012242:	2b01      	cmp	r3, #1
 8012244:	d00d      	beq.n	8012262 <uxr_serialize_CREATE_Payload+0x102>
 8012246:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801224a:	4638      	mov	r0, r7
 801224c:	f7fb ffb4 	bl	800e1b8 <ucdr_serialize_int16_t>
 8012250:	4028      	ands	r0, r5
 8012252:	4004      	ands	r4, r0
 8012254:	e7a6      	b.n	80121a4 <uxr_serialize_CREATE_Payload+0x44>
 8012256:	68f1      	ldr	r1, [r6, #12]
 8012258:	4638      	mov	r0, r7
 801225a:	f004 faa5 	bl	80167a8 <ucdr_serialize_string>
 801225e:	4605      	mov	r5, r0
 8012260:	e7cd      	b.n	80121fe <uxr_serialize_CREATE_Payload+0x9e>
 8012262:	68f1      	ldr	r1, [r6, #12]
 8012264:	4638      	mov	r0, r7
 8012266:	f004 fa9f 	bl	80167a8 <ucdr_serialize_string>
 801226a:	4605      	mov	r5, r0
 801226c:	e7eb      	b.n	8012246 <uxr_serialize_CREATE_Payload+0xe6>
 801226e:	68f2      	ldr	r2, [r6, #12]
 8012270:	f106 0110 	add.w	r1, r6, #16
 8012274:	4638      	mov	r0, r7
 8012276:	f7fc fde1 	bl	800ee3c <ucdr_serialize_sequence_uint8_t>
 801227a:	4605      	mov	r5, r0
 801227c:	e7e3      	b.n	8012246 <uxr_serialize_CREATE_Payload+0xe6>
 801227e:	bf00      	nop

08012280 <uxr_deserialize_GET_INFO_Payload>:
 8012280:	b570      	push	{r4, r5, r6, lr}
 8012282:	2202      	movs	r2, #2
 8012284:	4605      	mov	r5, r0
 8012286:	460e      	mov	r6, r1
 8012288:	f7fb f91e 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 801228c:	2202      	movs	r2, #2
 801228e:	18b1      	adds	r1, r6, r2
 8012290:	4604      	mov	r4, r0
 8012292:	4628      	mov	r0, r5
 8012294:	f7fb f918 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8012298:	1d31      	adds	r1, r6, #4
 801229a:	4004      	ands	r4, r0
 801229c:	4628      	mov	r0, r5
 801229e:	f7fb fd95 	bl	800ddcc <ucdr_deserialize_uint32_t>
 80122a2:	b2e4      	uxtb	r4, r4
 80122a4:	4020      	ands	r0, r4
 80122a6:	bd70      	pop	{r4, r5, r6, pc}

080122a8 <uxr_serialize_DELETE_Payload>:
 80122a8:	b570      	push	{r4, r5, r6, lr}
 80122aa:	2202      	movs	r2, #2
 80122ac:	4605      	mov	r5, r0
 80122ae:	460e      	mov	r6, r1
 80122b0:	f7fb f8a6 	bl	800d400 <ucdr_serialize_array_uint8_t>
 80122b4:	2202      	movs	r2, #2
 80122b6:	4604      	mov	r4, r0
 80122b8:	18b1      	adds	r1, r6, r2
 80122ba:	4628      	mov	r0, r5
 80122bc:	f7fb f8a0 	bl	800d400 <ucdr_serialize_array_uint8_t>
 80122c0:	4020      	ands	r0, r4
 80122c2:	b2c0      	uxtb	r0, r0
 80122c4:	bd70      	pop	{r4, r5, r6, pc}
 80122c6:	bf00      	nop

080122c8 <uxr_deserialize_STATUS_AGENT_Payload>:
 80122c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122cc:	4605      	mov	r5, r0
 80122ce:	460e      	mov	r6, r1
 80122d0:	f7fb fa4c 	bl	800d76c <ucdr_deserialize_uint8_t>
 80122d4:	1c71      	adds	r1, r6, #1
 80122d6:	4604      	mov	r4, r0
 80122d8:	4628      	mov	r0, r5
 80122da:	f7fb fa47 	bl	800d76c <ucdr_deserialize_uint8_t>
 80122de:	2204      	movs	r2, #4
 80122e0:	18b1      	adds	r1, r6, r2
 80122e2:	4680      	mov	r8, r0
 80122e4:	4628      	mov	r0, r5
 80122e6:	f7fb f8ef 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 80122ea:	f106 0108 	add.w	r1, r6, #8
 80122ee:	4607      	mov	r7, r0
 80122f0:	2202      	movs	r2, #2
 80122f2:	4628      	mov	r0, r5
 80122f4:	f7fb f8e8 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 80122f8:	ea04 0308 	and.w	r3, r4, r8
 80122fc:	b2db      	uxtb	r3, r3
 80122fe:	ea03 0407 	and.w	r4, r3, r7
 8012302:	2202      	movs	r2, #2
 8012304:	4607      	mov	r7, r0
 8012306:	f106 010a 	add.w	r1, r6, #10
 801230a:	4628      	mov	r0, r5
 801230c:	f7fb f8dc 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8012310:	f106 010c 	add.w	r1, r6, #12
 8012314:	4603      	mov	r3, r0
 8012316:	4628      	mov	r0, r5
 8012318:	461d      	mov	r5, r3
 801231a:	f7fb f9f9 	bl	800d710 <ucdr_deserialize_bool>
 801231e:	403c      	ands	r4, r7
 8012320:	4025      	ands	r5, r4
 8012322:	4028      	ands	r0, r5
 8012324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012328 <uxr_deserialize_STATUS_Payload>:
 8012328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801232c:	2202      	movs	r2, #2
 801232e:	4606      	mov	r6, r0
 8012330:	460f      	mov	r7, r1
 8012332:	f7fb f8c9 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8012336:	2202      	movs	r2, #2
 8012338:	18b9      	adds	r1, r7, r2
 801233a:	4605      	mov	r5, r0
 801233c:	4630      	mov	r0, r6
 801233e:	f7fb f8c3 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8012342:	1d39      	adds	r1, r7, #4
 8012344:	4680      	mov	r8, r0
 8012346:	4630      	mov	r0, r6
 8012348:	f7fb fa10 	bl	800d76c <ucdr_deserialize_uint8_t>
 801234c:	1d79      	adds	r1, r7, #5
 801234e:	4604      	mov	r4, r0
 8012350:	4630      	mov	r0, r6
 8012352:	f7fb fa0b 	bl	800d76c <ucdr_deserialize_uint8_t>
 8012356:	ea05 0508 	and.w	r5, r5, r8
 801235a:	402c      	ands	r4, r5
 801235c:	4020      	ands	r0, r4
 801235e:	b2c0      	uxtb	r0, r0
 8012360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012364 <uxr_serialize_INFO_Payload>:
 8012364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012368:	2202      	movs	r2, #2
 801236a:	460c      	mov	r4, r1
 801236c:	4605      	mov	r5, r0
 801236e:	f7fb f847 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8012372:	2202      	movs	r2, #2
 8012374:	18a1      	adds	r1, r4, r2
 8012376:	4680      	mov	r8, r0
 8012378:	4628      	mov	r0, r5
 801237a:	f7fb f841 	bl	800d400 <ucdr_serialize_array_uint8_t>
 801237e:	7921      	ldrb	r1, [r4, #4]
 8012380:	4607      	mov	r7, r0
 8012382:	4628      	mov	r0, r5
 8012384:	f7fb f9dc 	bl	800d740 <ucdr_serialize_uint8_t>
 8012388:	7961      	ldrb	r1, [r4, #5]
 801238a:	4606      	mov	r6, r0
 801238c:	4628      	mov	r0, r5
 801238e:	f7fb f9d7 	bl	800d740 <ucdr_serialize_uint8_t>
 8012392:	ea08 0807 	and.w	r8, r8, r7
 8012396:	ea06 0608 	and.w	r6, r6, r8
 801239a:	4006      	ands	r6, r0
 801239c:	7a21      	ldrb	r1, [r4, #8]
 801239e:	4628      	mov	r0, r5
 80123a0:	f7fb f9a0 	bl	800d6e4 <ucdr_serialize_bool>
 80123a4:	7a23      	ldrb	r3, [r4, #8]
 80123a6:	b2f7      	uxtb	r7, r6
 80123a8:	4606      	mov	r6, r0
 80123aa:	b96b      	cbnz	r3, 80123c8 <uxr_serialize_INFO_Payload+0x64>
 80123ac:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80123b0:	4628      	mov	r0, r5
 80123b2:	f7fb f997 	bl	800d6e4 <ucdr_serialize_bool>
 80123b6:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80123ba:	4030      	ands	r0, r6
 80123bc:	b2c6      	uxtb	r6, r0
 80123be:	b983      	cbnz	r3, 80123e2 <uxr_serialize_INFO_Payload+0x7e>
 80123c0:	ea06 0007 	and.w	r0, r6, r7
 80123c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123c8:	7b21      	ldrb	r1, [r4, #12]
 80123ca:	4628      	mov	r0, r5
 80123cc:	f7fb f9b8 	bl	800d740 <ucdr_serialize_uint8_t>
 80123d0:	b188      	cbz	r0, 80123f6 <uxr_serialize_INFO_Payload+0x92>
 80123d2:	f104 010c 	add.w	r1, r4, #12
 80123d6:	4628      	mov	r0, r5
 80123d8:	f7ff faf2 	bl	80119c0 <uxr_serialize_ObjectVariant.part.0>
 80123dc:	4030      	ands	r0, r6
 80123de:	b2c6      	uxtb	r6, r0
 80123e0:	e7e4      	b.n	80123ac <uxr_serialize_INFO_Payload+0x48>
 80123e2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80123e6:	4628      	mov	r0, r5
 80123e8:	f7ff fdb2 	bl	8011f50 <uxr_serialize_ActivityInfoVariant>
 80123ec:	4006      	ands	r6, r0
 80123ee:	ea06 0007 	and.w	r0, r6, r7
 80123f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f6:	4606      	mov	r6, r0
 80123f8:	e7d8      	b.n	80123ac <uxr_serialize_INFO_Payload+0x48>
 80123fa:	bf00      	nop

080123fc <uxr_serialize_READ_DATA_Payload>:
 80123fc:	b570      	push	{r4, r5, r6, lr}
 80123fe:	2202      	movs	r2, #2
 8012400:	4605      	mov	r5, r0
 8012402:	460e      	mov	r6, r1
 8012404:	f7fa fffc 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8012408:	2202      	movs	r2, #2
 801240a:	18b1      	adds	r1, r6, r2
 801240c:	4604      	mov	r4, r0
 801240e:	4628      	mov	r0, r5
 8012410:	f7fa fff6 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8012414:	1d31      	adds	r1, r6, #4
 8012416:	4004      	ands	r4, r0
 8012418:	4628      	mov	r0, r5
 801241a:	f7ff fe5d 	bl	80120d8 <uxr_serialize_ReadSpecification>
 801241e:	b2e4      	uxtb	r4, r4
 8012420:	4020      	ands	r0, r4
 8012422:	bd70      	pop	{r4, r5, r6, pc}

08012424 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012424:	b570      	push	{r4, r5, r6, lr}
 8012426:	2202      	movs	r2, #2
 8012428:	4605      	mov	r5, r0
 801242a:	460e      	mov	r6, r1
 801242c:	f7fa ffe8 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8012430:	2202      	movs	r2, #2
 8012432:	4604      	mov	r4, r0
 8012434:	18b1      	adds	r1, r6, r2
 8012436:	4628      	mov	r0, r5
 8012438:	f7fa ffe2 	bl	800d400 <ucdr_serialize_array_uint8_t>
 801243c:	4020      	ands	r0, r4
 801243e:	b2c0      	uxtb	r0, r0
 8012440:	bd70      	pop	{r4, r5, r6, pc}
 8012442:	bf00      	nop

08012444 <uxr_serialize_ACKNACK_Payload>:
 8012444:	b570      	push	{r4, r5, r6, lr}
 8012446:	460c      	mov	r4, r1
 8012448:	460e      	mov	r6, r1
 801244a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801244e:	4605      	mov	r5, r0
 8012450:	f7fb f9a2 	bl	800d798 <ucdr_serialize_uint16_t>
 8012454:	2202      	movs	r2, #2
 8012456:	4621      	mov	r1, r4
 8012458:	4604      	mov	r4, r0
 801245a:	4628      	mov	r0, r5
 801245c:	f7fa ffd0 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8012460:	7931      	ldrb	r1, [r6, #4]
 8012462:	4004      	ands	r4, r0
 8012464:	4628      	mov	r0, r5
 8012466:	f7fb f96b 	bl	800d740 <ucdr_serialize_uint8_t>
 801246a:	b2e4      	uxtb	r4, r4
 801246c:	4020      	ands	r0, r4
 801246e:	bd70      	pop	{r4, r5, r6, pc}

08012470 <uxr_deserialize_ACKNACK_Payload>:
 8012470:	b570      	push	{r4, r5, r6, lr}
 8012472:	4605      	mov	r5, r0
 8012474:	460e      	mov	r6, r1
 8012476:	f7fb fa8f 	bl	800d998 <ucdr_deserialize_uint16_t>
 801247a:	2202      	movs	r2, #2
 801247c:	18b1      	adds	r1, r6, r2
 801247e:	4604      	mov	r4, r0
 8012480:	4628      	mov	r0, r5
 8012482:	f7fb f821 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8012486:	1d31      	adds	r1, r6, #4
 8012488:	4004      	ands	r4, r0
 801248a:	4628      	mov	r0, r5
 801248c:	f7fb f96e 	bl	800d76c <ucdr_deserialize_uint8_t>
 8012490:	b2e4      	uxtb	r4, r4
 8012492:	4020      	ands	r0, r4
 8012494:	bd70      	pop	{r4, r5, r6, pc}
 8012496:	bf00      	nop

08012498 <uxr_serialize_HEARTBEAT_Payload>:
 8012498:	b570      	push	{r4, r5, r6, lr}
 801249a:	460d      	mov	r5, r1
 801249c:	8809      	ldrh	r1, [r1, #0]
 801249e:	4606      	mov	r6, r0
 80124a0:	f7fb f97a 	bl	800d798 <ucdr_serialize_uint16_t>
 80124a4:	8869      	ldrh	r1, [r5, #2]
 80124a6:	4604      	mov	r4, r0
 80124a8:	4630      	mov	r0, r6
 80124aa:	f7fb f975 	bl	800d798 <ucdr_serialize_uint16_t>
 80124ae:	7929      	ldrb	r1, [r5, #4]
 80124b0:	4004      	ands	r4, r0
 80124b2:	4630      	mov	r0, r6
 80124b4:	f7fb f944 	bl	800d740 <ucdr_serialize_uint8_t>
 80124b8:	b2e4      	uxtb	r4, r4
 80124ba:	4020      	ands	r0, r4
 80124bc:	bd70      	pop	{r4, r5, r6, pc}
 80124be:	bf00      	nop

080124c0 <uxr_deserialize_HEARTBEAT_Payload>:
 80124c0:	b570      	push	{r4, r5, r6, lr}
 80124c2:	4605      	mov	r5, r0
 80124c4:	460e      	mov	r6, r1
 80124c6:	f7fb fa67 	bl	800d998 <ucdr_deserialize_uint16_t>
 80124ca:	1cb1      	adds	r1, r6, #2
 80124cc:	4604      	mov	r4, r0
 80124ce:	4628      	mov	r0, r5
 80124d0:	f7fb fa62 	bl	800d998 <ucdr_deserialize_uint16_t>
 80124d4:	1d31      	adds	r1, r6, #4
 80124d6:	4004      	ands	r4, r0
 80124d8:	4628      	mov	r0, r5
 80124da:	f7fb f947 	bl	800d76c <ucdr_deserialize_uint8_t>
 80124de:	b2e4      	uxtb	r4, r4
 80124e0:	4020      	ands	r0, r4
 80124e2:	bd70      	pop	{r4, r5, r6, pc}

080124e4 <uxr_serialize_TIMESTAMP_Payload>:
 80124e4:	b570      	push	{r4, r5, r6, lr}
 80124e6:	460d      	mov	r5, r1
 80124e8:	6809      	ldr	r1, [r1, #0]
 80124ea:	4606      	mov	r6, r0
 80124ec:	f7fb ff58 	bl	800e3a0 <ucdr_serialize_int32_t>
 80124f0:	6869      	ldr	r1, [r5, #4]
 80124f2:	4604      	mov	r4, r0
 80124f4:	4630      	mov	r0, r6
 80124f6:	f7fb fb39 	bl	800db6c <ucdr_serialize_uint32_t>
 80124fa:	4020      	ands	r0, r4
 80124fc:	b2c0      	uxtb	r0, r0
 80124fe:	bd70      	pop	{r4, r5, r6, pc}

08012500 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012504:	4605      	mov	r5, r0
 8012506:	460e      	mov	r6, r1
 8012508:	f7fb ffe2 	bl	800e4d0 <ucdr_deserialize_int32_t>
 801250c:	1d31      	adds	r1, r6, #4
 801250e:	4607      	mov	r7, r0
 8012510:	4628      	mov	r0, r5
 8012512:	f7fb fc5b 	bl	800ddcc <ucdr_deserialize_uint32_t>
 8012516:	f106 0108 	add.w	r1, r6, #8
 801251a:	4680      	mov	r8, r0
 801251c:	4628      	mov	r0, r5
 801251e:	f7fb ffd7 	bl	800e4d0 <ucdr_deserialize_int32_t>
 8012522:	f106 010c 	add.w	r1, r6, #12
 8012526:	4604      	mov	r4, r0
 8012528:	4628      	mov	r0, r5
 801252a:	f7fb fc4f 	bl	800ddcc <ucdr_deserialize_uint32_t>
 801252e:	ea07 0708 	and.w	r7, r7, r8
 8012532:	403c      	ands	r4, r7
 8012534:	f106 0110 	add.w	r1, r6, #16
 8012538:	4004      	ands	r4, r0
 801253a:	4628      	mov	r0, r5
 801253c:	f7fb ffc8 	bl	800e4d0 <ucdr_deserialize_int32_t>
 8012540:	f106 0114 	add.w	r1, r6, #20
 8012544:	4607      	mov	r7, r0
 8012546:	4628      	mov	r0, r5
 8012548:	f7fb fc40 	bl	800ddcc <ucdr_deserialize_uint32_t>
 801254c:	b2e4      	uxtb	r4, r4
 801254e:	403c      	ands	r4, r7
 8012550:	4020      	ands	r0, r4
 8012552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012556:	bf00      	nop

08012558 <uxr_serialize_SampleIdentity>:
 8012558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801255c:	220c      	movs	r2, #12
 801255e:	4604      	mov	r4, r0
 8012560:	460d      	mov	r5, r1
 8012562:	f7fa ff4d 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8012566:	2203      	movs	r2, #3
 8012568:	f105 010c 	add.w	r1, r5, #12
 801256c:	4607      	mov	r7, r0
 801256e:	4620      	mov	r0, r4
 8012570:	f7fa ff46 	bl	800d400 <ucdr_serialize_array_uint8_t>
 8012574:	7be9      	ldrb	r1, [r5, #15]
 8012576:	4680      	mov	r8, r0
 8012578:	4620      	mov	r0, r4
 801257a:	f7fb f8e1 	bl	800d740 <ucdr_serialize_uint8_t>
 801257e:	6929      	ldr	r1, [r5, #16]
 8012580:	4606      	mov	r6, r0
 8012582:	4620      	mov	r0, r4
 8012584:	f7fb ff0c 	bl	800e3a0 <ucdr_serialize_int32_t>
 8012588:	6969      	ldr	r1, [r5, #20]
 801258a:	4603      	mov	r3, r0
 801258c:	4620      	mov	r0, r4
 801258e:	ea07 0708 	and.w	r7, r7, r8
 8012592:	461c      	mov	r4, r3
 8012594:	f7fb faea 	bl	800db6c <ucdr_serialize_uint32_t>
 8012598:	403e      	ands	r6, r7
 801259a:	4034      	ands	r4, r6
 801259c:	4020      	ands	r0, r4
 801259e:	b2c0      	uxtb	r0, r0
 80125a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080125a4 <uxr_deserialize_SampleIdentity>:
 80125a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125a8:	220c      	movs	r2, #12
 80125aa:	4604      	mov	r4, r0
 80125ac:	460d      	mov	r5, r1
 80125ae:	f7fa ff8b 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 80125b2:	2203      	movs	r2, #3
 80125b4:	f105 010c 	add.w	r1, r5, #12
 80125b8:	4607      	mov	r7, r0
 80125ba:	4620      	mov	r0, r4
 80125bc:	f7fa ff84 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 80125c0:	f105 010f 	add.w	r1, r5, #15
 80125c4:	4680      	mov	r8, r0
 80125c6:	4620      	mov	r0, r4
 80125c8:	f7fb f8d0 	bl	800d76c <ucdr_deserialize_uint8_t>
 80125cc:	f105 0110 	add.w	r1, r5, #16
 80125d0:	4606      	mov	r6, r0
 80125d2:	4620      	mov	r0, r4
 80125d4:	f7fb ff7c 	bl	800e4d0 <ucdr_deserialize_int32_t>
 80125d8:	f105 0114 	add.w	r1, r5, #20
 80125dc:	4603      	mov	r3, r0
 80125de:	4620      	mov	r0, r4
 80125e0:	ea07 0708 	and.w	r7, r7, r8
 80125e4:	461c      	mov	r4, r3
 80125e6:	f7fb fbf1 	bl	800ddcc <ucdr_deserialize_uint32_t>
 80125ea:	403e      	ands	r6, r7
 80125ec:	4034      	ands	r4, r6
 80125ee:	4020      	ands	r0, r4
 80125f0:	b2c0      	uxtb	r0, r0
 80125f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125f6:	bf00      	nop

080125f8 <rcl_client_get_rmw_handle>:
 80125f8:	b118      	cbz	r0, 8012602 <rcl_client_get_rmw_handle+0xa>
 80125fa:	6800      	ldr	r0, [r0, #0]
 80125fc:	b108      	cbz	r0, 8012602 <rcl_client_get_rmw_handle+0xa>
 80125fe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012602:	4770      	bx	lr

08012604 <rcl_send_request>:
 8012604:	b570      	push	{r4, r5, r6, lr}
 8012606:	b082      	sub	sp, #8
 8012608:	b1e8      	cbz	r0, 8012646 <rcl_send_request+0x42>
 801260a:	4604      	mov	r4, r0
 801260c:	6800      	ldr	r0, [r0, #0]
 801260e:	b1d0      	cbz	r0, 8012646 <rcl_send_request+0x42>
 8012610:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8012614:	b1bb      	cbz	r3, 8012646 <rcl_send_request+0x42>
 8012616:	460e      	mov	r6, r1
 8012618:	b1d1      	cbz	r1, 8012650 <rcl_send_request+0x4c>
 801261a:	4615      	mov	r5, r2
 801261c:	b1c2      	cbz	r2, 8012650 <rcl_send_request+0x4c>
 801261e:	2105      	movs	r1, #5
 8012620:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8012624:	f002 fda4 	bl	8015170 <__atomic_load_8>
 8012628:	6823      	ldr	r3, [r4, #0]
 801262a:	e9c5 0100 	strd	r0, r1, [r5]
 801262e:	462a      	mov	r2, r5
 8012630:	4631      	mov	r1, r6
 8012632:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012636:	f003 fc8f 	bl	8015f58 <rmw_send_request>
 801263a:	4606      	mov	r6, r0
 801263c:	b160      	cbz	r0, 8012658 <rcl_send_request+0x54>
 801263e:	2601      	movs	r6, #1
 8012640:	4630      	mov	r0, r6
 8012642:	b002      	add	sp, #8
 8012644:	bd70      	pop	{r4, r5, r6, pc}
 8012646:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801264a:	4630      	mov	r0, r6
 801264c:	b002      	add	sp, #8
 801264e:	bd70      	pop	{r4, r5, r6, pc}
 8012650:	260b      	movs	r6, #11
 8012652:	4630      	mov	r0, r6
 8012654:	b002      	add	sp, #8
 8012656:	bd70      	pop	{r4, r5, r6, pc}
 8012658:	6820      	ldr	r0, [r4, #0]
 801265a:	2105      	movs	r1, #5
 801265c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012660:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8012664:	9100      	str	r1, [sp, #0]
 8012666:	f002 fdef 	bl	8015248 <__atomic_exchange_8>
 801266a:	4630      	mov	r0, r6
 801266c:	b002      	add	sp, #8
 801266e:	bd70      	pop	{r4, r5, r6, pc}

08012670 <rcl_take_response>:
 8012670:	b570      	push	{r4, r5, r6, lr}
 8012672:	468e      	mov	lr, r1
 8012674:	460c      	mov	r4, r1
 8012676:	4616      	mov	r6, r2
 8012678:	4605      	mov	r5, r0
 801267a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801267e:	b08c      	sub	sp, #48	@ 0x30
 8012680:	f10d 0c18 	add.w	ip, sp, #24
 8012684:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012688:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801268c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012690:	b35d      	cbz	r5, 80126ea <rcl_take_response+0x7a>
 8012692:	682b      	ldr	r3, [r5, #0]
 8012694:	b34b      	cbz	r3, 80126ea <rcl_take_response+0x7a>
 8012696:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801269a:	b330      	cbz	r0, 80126ea <rcl_take_response+0x7a>
 801269c:	b346      	cbz	r6, 80126f0 <rcl_take_response+0x80>
 801269e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80126f8 <rcl_take_response+0x88>
 80126a2:	2300      	movs	r3, #0
 80126a4:	f88d 3007 	strb.w	r3, [sp, #7]
 80126a8:	4632      	mov	r2, r6
 80126aa:	f10d 0307 	add.w	r3, sp, #7
 80126ae:	a902      	add	r1, sp, #8
 80126b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80126b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80126b8:	f003 fd56 	bl	8016168 <rmw_take_response>
 80126bc:	4605      	mov	r5, r0
 80126be:	b9c8      	cbnz	r0, 80126f4 <rcl_take_response+0x84>
 80126c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80126c4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80126c8:	2a00      	cmp	r2, #0
 80126ca:	bf08      	it	eq
 80126cc:	461d      	moveq	r5, r3
 80126ce:	f10d 0e18 	add.w	lr, sp, #24
 80126d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80126d6:	46a4      	mov	ip, r4
 80126d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126dc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80126e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80126e4:	4628      	mov	r0, r5
 80126e6:	b00c      	add	sp, #48	@ 0x30
 80126e8:	bd70      	pop	{r4, r5, r6, pc}
 80126ea:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80126ee:	e7ee      	b.n	80126ce <rcl_take_response+0x5e>
 80126f0:	250b      	movs	r5, #11
 80126f2:	e7ec      	b.n	80126ce <rcl_take_response+0x5e>
 80126f4:	2501      	movs	r5, #1
 80126f6:	e7ea      	b.n	80126ce <rcl_take_response+0x5e>
	...

08012700 <rcl_client_is_valid>:
 8012700:	b130      	cbz	r0, 8012710 <rcl_client_is_valid+0x10>
 8012702:	6800      	ldr	r0, [r0, #0]
 8012704:	b120      	cbz	r0, 8012710 <rcl_client_is_valid+0x10>
 8012706:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801270a:	3800      	subs	r0, #0
 801270c:	bf18      	it	ne
 801270e:	2001      	movne	r0, #1
 8012710:	4770      	bx	lr
 8012712:	bf00      	nop

08012714 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012714:	280b      	cmp	r0, #11
 8012716:	dc0d      	bgt.n	8012734 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012718:	2800      	cmp	r0, #0
 801271a:	db09      	blt.n	8012730 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801271c:	280b      	cmp	r0, #11
 801271e:	d807      	bhi.n	8012730 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012720:	e8df f000 	tbb	[pc, r0]
 8012724:	07060607 	.word	0x07060607
 8012728:	06060606 	.word	0x06060606
 801272c:	07070606 	.word	0x07070606
 8012730:	2001      	movs	r0, #1
 8012732:	4770      	bx	lr
 8012734:	28cb      	cmp	r0, #203	@ 0xcb
 8012736:	bf18      	it	ne
 8012738:	2001      	movne	r0, #1
 801273a:	4770      	bx	lr

0801273c <rcl_get_zero_initialized_context>:
 801273c:	4a03      	ldr	r2, [pc, #12]	@ (801274c <rcl_get_zero_initialized_context+0x10>)
 801273e:	4603      	mov	r3, r0
 8012740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012744:	e883 0003 	stmia.w	r3, {r0, r1}
 8012748:	4618      	mov	r0, r3
 801274a:	4770      	bx	lr
 801274c:	0801a14c 	.word	0x0801a14c

08012750 <rcl_context_is_valid>:
 8012750:	b118      	cbz	r0, 801275a <rcl_context_is_valid+0xa>
 8012752:	6840      	ldr	r0, [r0, #4]
 8012754:	3800      	subs	r0, #0
 8012756:	bf18      	it	ne
 8012758:	2001      	movne	r0, #1
 801275a:	4770      	bx	lr

0801275c <__cleanup_context>:
 801275c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012760:	4606      	mov	r6, r0
 8012762:	6800      	ldr	r0, [r0, #0]
 8012764:	2300      	movs	r3, #0
 8012766:	6073      	str	r3, [r6, #4]
 8012768:	2800      	cmp	r0, #0
 801276a:	d049      	beq.n	8012800 <__cleanup_context+0xa4>
 801276c:	6947      	ldr	r7, [r0, #20]
 801276e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012772:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012776:	b137      	cbz	r7, 8012786 <__cleanup_context+0x2a>
 8012778:	3014      	adds	r0, #20
 801277a:	f7f7 fec1 	bl	800a500 <rcl_init_options_fini>
 801277e:	4607      	mov	r7, r0
 8012780:	2800      	cmp	r0, #0
 8012782:	d144      	bne.n	801280e <__cleanup_context+0xb2>
 8012784:	6830      	ldr	r0, [r6, #0]
 8012786:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012788:	b143      	cbz	r3, 801279c <__cleanup_context+0x40>
 801278a:	3028      	adds	r0, #40	@ 0x28
 801278c:	f7f9 fa84 	bl	800bc98 <rmw_context_fini>
 8012790:	b118      	cbz	r0, 801279a <__cleanup_context+0x3e>
 8012792:	2f00      	cmp	r7, #0
 8012794:	d03e      	beq.n	8012814 <__cleanup_context+0xb8>
 8012796:	f7f8 ffb7 	bl	800b708 <rcutils_reset_error>
 801279a:	6830      	ldr	r0, [r6, #0]
 801279c:	6a03      	ldr	r3, [r0, #32]
 801279e:	b1db      	cbz	r3, 80127d8 <__cleanup_context+0x7c>
 80127a0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80127a4:	2a01      	cmp	r2, #1
 80127a6:	f17c 0100 	sbcs.w	r1, ip, #0
 80127aa:	db11      	blt.n	80127d0 <__cleanup_context+0x74>
 80127ac:	2400      	movs	r4, #0
 80127ae:	4625      	mov	r5, r4
 80127b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80127b4:	4649      	mov	r1, r9
 80127b6:	b1b8      	cbz	r0, 80127e8 <__cleanup_context+0x8c>
 80127b8:	47c0      	blx	r8
 80127ba:	6833      	ldr	r3, [r6, #0]
 80127bc:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80127c0:	3401      	adds	r4, #1
 80127c2:	f145 0500 	adc.w	r5, r5, #0
 80127c6:	4294      	cmp	r4, r2
 80127c8:	eb75 010c 	sbcs.w	r1, r5, ip
 80127cc:	6a1b      	ldr	r3, [r3, #32]
 80127ce:	dbef      	blt.n	80127b0 <__cleanup_context+0x54>
 80127d0:	4618      	mov	r0, r3
 80127d2:	4649      	mov	r1, r9
 80127d4:	47c0      	blx	r8
 80127d6:	6830      	ldr	r0, [r6, #0]
 80127d8:	4649      	mov	r1, r9
 80127da:	47c0      	blx	r8
 80127dc:	2300      	movs	r3, #0
 80127de:	e9c6 3300 	strd	r3, r3, [r6]
 80127e2:	4638      	mov	r0, r7
 80127e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127e8:	3401      	adds	r4, #1
 80127ea:	f145 0500 	adc.w	r5, r5, #0
 80127ee:	4294      	cmp	r4, r2
 80127f0:	eb75 010c 	sbcs.w	r1, r5, ip
 80127f4:	dbdc      	blt.n	80127b0 <__cleanup_context+0x54>
 80127f6:	4618      	mov	r0, r3
 80127f8:	4649      	mov	r1, r9
 80127fa:	47c0      	blx	r8
 80127fc:	6830      	ldr	r0, [r6, #0]
 80127fe:	e7eb      	b.n	80127d8 <__cleanup_context+0x7c>
 8012800:	4607      	mov	r7, r0
 8012802:	2300      	movs	r3, #0
 8012804:	e9c6 3300 	strd	r3, r3, [r6]
 8012808:	4638      	mov	r0, r7
 801280a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801280e:	f7f8 ff7b 	bl	800b708 <rcutils_reset_error>
 8012812:	e7b7      	b.n	8012784 <__cleanup_context+0x28>
 8012814:	f7ff ff7e 	bl	8012714 <rcl_convert_rmw_ret_to_rcl_ret>
 8012818:	4607      	mov	r7, r0
 801281a:	e7bc      	b.n	8012796 <__cleanup_context+0x3a>

0801281c <rcl_init>:
 801281c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012820:	1e05      	subs	r5, r0, #0
 8012822:	b09e      	sub	sp, #120	@ 0x78
 8012824:	460e      	mov	r6, r1
 8012826:	4690      	mov	r8, r2
 8012828:	461f      	mov	r7, r3
 801282a:	f340 809c 	ble.w	8012966 <rcl_init+0x14a>
 801282e:	2900      	cmp	r1, #0
 8012830:	f000 809c 	beq.w	801296c <rcl_init+0x150>
 8012834:	f1a1 0e04 	sub.w	lr, r1, #4
 8012838:	f04f 0c00 	mov.w	ip, #0
 801283c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012840:	f10c 0c01 	add.w	ip, ip, #1
 8012844:	2c00      	cmp	r4, #0
 8012846:	f000 8091 	beq.w	801296c <rcl_init+0x150>
 801284a:	4565      	cmp	r5, ip
 801284c:	d1f6      	bne.n	801283c <rcl_init+0x20>
 801284e:	f1b8 0f00 	cmp.w	r8, #0
 8012852:	f000 808b 	beq.w	801296c <rcl_init+0x150>
 8012856:	f8d8 4000 	ldr.w	r4, [r8]
 801285a:	2c00      	cmp	r4, #0
 801285c:	f000 8086 	beq.w	801296c <rcl_init+0x150>
 8012860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012862:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8012866:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801286a:	6823      	ldr	r3, [r4, #0]
 801286c:	f8cc 3000 	str.w	r3, [ip]
 8012870:	a819      	add	r0, sp, #100	@ 0x64
 8012872:	f7f8 ff23 	bl	800b6bc <rcutils_allocator_is_valid>
 8012876:	2800      	cmp	r0, #0
 8012878:	d078      	beq.n	801296c <rcl_init+0x150>
 801287a:	2f00      	cmp	r7, #0
 801287c:	d076      	beq.n	801296c <rcl_init+0x150>
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d178      	bne.n	8012976 <rcl_init+0x15a>
 8012884:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012888:	2178      	movs	r1, #120	@ 0x78
 801288a:	2001      	movs	r0, #1
 801288c:	4798      	blx	r3
 801288e:	4604      	mov	r4, r0
 8012890:	6038      	str	r0, [r7, #0]
 8012892:	2800      	cmp	r0, #0
 8012894:	f000 80b6 	beq.w	8012a04 <rcl_init+0x1e8>
 8012898:	a802      	add	r0, sp, #8
 801289a:	f002 ffb9 	bl	8015810 <rmw_get_zero_initialized_context>
 801289e:	a902      	add	r1, sp, #8
 80128a0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80128a4:	2250      	movs	r2, #80	@ 0x50
 80128a6:	ac19      	add	r4, sp, #100	@ 0x64
 80128a8:	f005 febf 	bl	801862a <memcpy>
 80128ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128ae:	f8d7 e000 	ldr.w	lr, [r7]
 80128b2:	46f4      	mov	ip, lr
 80128b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128b8:	6823      	ldr	r3, [r4, #0]
 80128ba:	f8cc 3000 	str.w	r3, [ip]
 80128be:	f10e 0114 	add.w	r1, lr, #20
 80128c2:	4640      	mov	r0, r8
 80128c4:	f7f7 fe46 	bl	800a554 <rcl_init_options_copy>
 80128c8:	4604      	mov	r4, r0
 80128ca:	2800      	cmp	r0, #0
 80128cc:	d144      	bne.n	8012958 <rcl_init+0x13c>
 80128ce:	f8d7 9000 	ldr.w	r9, [r7]
 80128d2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80128d6:	f8c9 0020 	str.w	r0, [r9, #32]
 80128da:	f8c9 5018 	str.w	r5, [r9, #24]
 80128de:	f8c9 801c 	str.w	r8, [r9, #28]
 80128e2:	2d00      	cmp	r5, #0
 80128e4:	d04e      	beq.n	8012984 <rcl_init+0x168>
 80128e6:	2e00      	cmp	r6, #0
 80128e8:	d04c      	beq.n	8012984 <rcl_init+0x168>
 80128ea:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80128ee:	2104      	movs	r1, #4
 80128f0:	4628      	mov	r0, r5
 80128f2:	4798      	blx	r3
 80128f4:	f8c9 0020 	str.w	r0, [r9, #32]
 80128f8:	f8d7 9000 	ldr.w	r9, [r7]
 80128fc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012900:	46ca      	mov	sl, r9
 8012902:	b343      	cbz	r3, 8012956 <rcl_init+0x13a>
 8012904:	2d01      	cmp	r5, #1
 8012906:	f178 0300 	sbcs.w	r3, r8, #0
 801290a:	db3b      	blt.n	8012984 <rcl_init+0x168>
 801290c:	2400      	movs	r4, #0
 801290e:	3e04      	subs	r6, #4
 8012910:	46a1      	mov	r9, r4
 8012912:	e00b      	b.n	801292c <rcl_init+0x110>
 8012914:	6831      	ldr	r1, [r6, #0]
 8012916:	f005 fe88 	bl	801862a <memcpy>
 801291a:	3401      	adds	r4, #1
 801291c:	f149 0900 	adc.w	r9, r9, #0
 8012920:	45c8      	cmp	r8, r9
 8012922:	bf08      	it	eq
 8012924:	42a5      	cmpeq	r5, r4
 8012926:	d02b      	beq.n	8012980 <rcl_init+0x164>
 8012928:	f8d7 a000 	ldr.w	sl, [r7]
 801292c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8012930:	f7ed fc80 	bl	8000234 <strlen>
 8012934:	1c42      	adds	r2, r0, #1
 8012936:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012938:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801293a:	f8da a020 	ldr.w	sl, [sl, #32]
 801293e:	9201      	str	r2, [sp, #4]
 8012940:	4610      	mov	r0, r2
 8012942:	4798      	blx	r3
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801294a:	6a1b      	ldr	r3, [r3, #32]
 801294c:	9a01      	ldr	r2, [sp, #4]
 801294e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012952:	2800      	cmp	r0, #0
 8012954:	d1de      	bne.n	8012914 <rcl_init+0xf8>
 8012956:	240a      	movs	r4, #10
 8012958:	4638      	mov	r0, r7
 801295a:	f7ff feff 	bl	801275c <__cleanup_context>
 801295e:	4620      	mov	r0, r4
 8012960:	b01e      	add	sp, #120	@ 0x78
 8012962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012966:	2900      	cmp	r1, #0
 8012968:	f43f af71 	beq.w	801284e <rcl_init+0x32>
 801296c:	240b      	movs	r4, #11
 801296e:	4620      	mov	r0, r4
 8012970:	b01e      	add	sp, #120	@ 0x78
 8012972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012976:	2464      	movs	r4, #100	@ 0x64
 8012978:	4620      	mov	r0, r4
 801297a:	b01e      	add	sp, #120	@ 0x78
 801297c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012980:	f8d7 9000 	ldr.w	r9, [r7]
 8012984:	4926      	ldr	r1, [pc, #152]	@ (8012a20 <rcl_init+0x204>)
 8012986:	680b      	ldr	r3, [r1, #0]
 8012988:	3301      	adds	r3, #1
 801298a:	d036      	beq.n	80129fa <rcl_init+0x1de>
 801298c:	600b      	str	r3, [r1, #0]
 801298e:	461a      	mov	r2, r3
 8012990:	2400      	movs	r4, #0
 8012992:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8012996:	607b      	str	r3, [r7, #4]
 8012998:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801299a:	3301      	adds	r3, #1
 801299c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80129a0:	d034      	beq.n	8012a0c <rcl_init+0x1f0>
 80129a2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80129a6:	b93b      	cbnz	r3, 80129b8 <rcl_init+0x19c>
 80129a8:	3030      	adds	r0, #48	@ 0x30
 80129aa:	f000 f83b 	bl	8012a24 <rcl_get_localhost_only>
 80129ae:	4604      	mov	r4, r0
 80129b0:	2800      	cmp	r0, #0
 80129b2:	d1d1      	bne.n	8012958 <rcl_init+0x13c>
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	6958      	ldr	r0, [r3, #20]
 80129b8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80129ba:	aa18      	add	r2, sp, #96	@ 0x60
 80129bc:	a917      	add	r1, sp, #92	@ 0x5c
 80129be:	f001 f871 	bl	8013aa4 <rcl_validate_enclave_name>
 80129c2:	4604      	mov	r4, r0
 80129c4:	2800      	cmp	r0, #0
 80129c6:	d1c7      	bne.n	8012958 <rcl_init+0x13c>
 80129c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80129ca:	b9eb      	cbnz	r3, 8012a08 <rcl_init+0x1ec>
 80129cc:	6839      	ldr	r1, [r7, #0]
 80129ce:	694b      	ldr	r3, [r1, #20]
 80129d0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80129d2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80129d6:	f000 fb3f 	bl	8013058 <rcl_get_security_options_from_environment>
 80129da:	4604      	mov	r4, r0
 80129dc:	2800      	cmp	r0, #0
 80129de:	d1bb      	bne.n	8012958 <rcl_init+0x13c>
 80129e0:	6839      	ldr	r1, [r7, #0]
 80129e2:	6948      	ldr	r0, [r1, #20]
 80129e4:	3128      	adds	r1, #40	@ 0x28
 80129e6:	3018      	adds	r0, #24
 80129e8:	f7f9 f820 	bl	800ba2c <rmw_init>
 80129ec:	4604      	mov	r4, r0
 80129ee:	2800      	cmp	r0, #0
 80129f0:	d0bd      	beq.n	801296e <rcl_init+0x152>
 80129f2:	f7ff fe8f 	bl	8012714 <rcl_convert_rmw_ret_to_rcl_ret>
 80129f6:	4604      	mov	r4, r0
 80129f8:	e7ae      	b.n	8012958 <rcl_init+0x13c>
 80129fa:	2201      	movs	r2, #1
 80129fc:	461c      	mov	r4, r3
 80129fe:	600a      	str	r2, [r1, #0]
 8012a00:	4613      	mov	r3, r2
 8012a02:	e7c6      	b.n	8012992 <rcl_init+0x176>
 8012a04:	240a      	movs	r4, #10
 8012a06:	e7b2      	b.n	801296e <rcl_init+0x152>
 8012a08:	2401      	movs	r4, #1
 8012a0a:	e7a5      	b.n	8012958 <rcl_init+0x13c>
 8012a0c:	3024      	adds	r0, #36	@ 0x24
 8012a0e:	f004 fc4b 	bl	80172a8 <rcl_get_default_domain_id>
 8012a12:	4604      	mov	r4, r0
 8012a14:	2800      	cmp	r0, #0
 8012a16:	d19f      	bne.n	8012958 <rcl_init+0x13c>
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	6958      	ldr	r0, [r3, #20]
 8012a1c:	e7c1      	b.n	80129a2 <rcl_init+0x186>
 8012a1e:	bf00      	nop
 8012a20:	2000b220 	.word	0x2000b220

08012a24 <rcl_get_localhost_only>:
 8012a24:	b510      	push	{r4, lr}
 8012a26:	b082      	sub	sp, #8
 8012a28:	2300      	movs	r3, #0
 8012a2a:	9301      	str	r3, [sp, #4]
 8012a2c:	b1b8      	cbz	r0, 8012a5e <rcl_get_localhost_only+0x3a>
 8012a2e:	4604      	mov	r4, r0
 8012a30:	a901      	add	r1, sp, #4
 8012a32:	480c      	ldr	r0, [pc, #48]	@ (8012a64 <rcl_get_localhost_only+0x40>)
 8012a34:	f002 fc40 	bl	80152b8 <rcutils_get_env>
 8012a38:	b110      	cbz	r0, 8012a40 <rcl_get_localhost_only+0x1c>
 8012a3a:	2001      	movs	r0, #1
 8012a3c:	b002      	add	sp, #8
 8012a3e:	bd10      	pop	{r4, pc}
 8012a40:	9b01      	ldr	r3, [sp, #4]
 8012a42:	b113      	cbz	r3, 8012a4a <rcl_get_localhost_only+0x26>
 8012a44:	781a      	ldrb	r2, [r3, #0]
 8012a46:	2a31      	cmp	r2, #49	@ 0x31
 8012a48:	d004      	beq.n	8012a54 <rcl_get_localhost_only+0x30>
 8012a4a:	2302      	movs	r3, #2
 8012a4c:	2000      	movs	r0, #0
 8012a4e:	7023      	strb	r3, [r4, #0]
 8012a50:	b002      	add	sp, #8
 8012a52:	bd10      	pop	{r4, pc}
 8012a54:	785b      	ldrb	r3, [r3, #1]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d1f7      	bne.n	8012a4a <rcl_get_localhost_only+0x26>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e7f6      	b.n	8012a4c <rcl_get_localhost_only+0x28>
 8012a5e:	200b      	movs	r0, #11
 8012a60:	b002      	add	sp, #8
 8012a62:	bd10      	pop	{r4, pc}
 8012a64:	0801a154 	.word	0x0801a154

08012a68 <rcl_get_zero_initialized_node>:
 8012a68:	4a03      	ldr	r2, [pc, #12]	@ (8012a78 <rcl_get_zero_initialized_node+0x10>)
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a70:	e883 0003 	stmia.w	r3, {r0, r1}
 8012a74:	4618      	mov	r0, r3
 8012a76:	4770      	bx	lr
 8012a78:	0801a170 	.word	0x0801a170

08012a7c <rcl_node_init>:
 8012a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a80:	b0a9      	sub	sp, #164	@ 0xa4
 8012a82:	4604      	mov	r4, r0
 8012a84:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012a88:	a823      	add	r0, sp, #140	@ 0x8c
 8012a8a:	460e      	mov	r6, r1
 8012a8c:	4615      	mov	r5, r2
 8012a8e:	461f      	mov	r7, r3
 8012a90:	f004 fe7e 	bl	8017790 <rcl_guard_condition_get_default_options>
 8012a94:	f1b8 0f00 	cmp.w	r8, #0
 8012a98:	f000 80e6 	beq.w	8012c68 <rcl_node_init+0x1ec>
 8012a9c:	4640      	mov	r0, r8
 8012a9e:	f7f8 fe0d 	bl	800b6bc <rcutils_allocator_is_valid>
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	f000 80e0 	beq.w	8012c68 <rcl_node_init+0x1ec>
 8012aa8:	2e00      	cmp	r6, #0
 8012aaa:	f000 80dd 	beq.w	8012c68 <rcl_node_init+0x1ec>
 8012aae:	2d00      	cmp	r5, #0
 8012ab0:	f000 80da 	beq.w	8012c68 <rcl_node_init+0x1ec>
 8012ab4:	2c00      	cmp	r4, #0
 8012ab6:	f000 80d7 	beq.w	8012c68 <rcl_node_init+0x1ec>
 8012aba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012abe:	f1b9 0f00 	cmp.w	r9, #0
 8012ac2:	f040 80fd 	bne.w	8012cc0 <rcl_node_init+0x244>
 8012ac6:	2f00      	cmp	r7, #0
 8012ac8:	f000 80ce 	beq.w	8012c68 <rcl_node_init+0x1ec>
 8012acc:	4638      	mov	r0, r7
 8012ace:	f7ff fe3f 	bl	8012750 <rcl_context_is_valid>
 8012ad2:	4682      	mov	sl, r0
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	f000 80cd 	beq.w	8012c74 <rcl_node_init+0x1f8>
 8012ada:	464a      	mov	r2, r9
 8012adc:	a922      	add	r1, sp, #136	@ 0x88
 8012ade:	4630      	mov	r0, r6
 8012ae0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8012ae4:	f003 f812 	bl	8015b0c <rmw_validate_node_name>
 8012ae8:	4681      	mov	r9, r0
 8012aea:	2800      	cmp	r0, #0
 8012aec:	f040 80be 	bne.w	8012c6c <rcl_node_init+0x1f0>
 8012af0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012af2:	2800      	cmp	r0, #0
 8012af4:	f040 80f0 	bne.w	8012cd8 <rcl_node_init+0x25c>
 8012af8:	4628      	mov	r0, r5
 8012afa:	f7ed fb9b 	bl	8000234 <strlen>
 8012afe:	2800      	cmp	r0, #0
 8012b00:	f040 80bb 	bne.w	8012c7a <rcl_node_init+0x1fe>
 8012b04:	4d7c      	ldr	r5, [pc, #496]	@ (8012cf8 <rcl_node_init+0x27c>)
 8012b06:	a922      	add	r1, sp, #136	@ 0x88
 8012b08:	2200      	movs	r2, #0
 8012b0a:	4628      	mov	r0, r5
 8012b0c:	f002 ffe0 	bl	8015ad0 <rmw_validate_namespace>
 8012b10:	4681      	mov	r9, r0
 8012b12:	2800      	cmp	r0, #0
 8012b14:	f040 80aa 	bne.w	8012c6c <rcl_node_init+0x1f0>
 8012b18:	4682      	mov	sl, r0
 8012b1a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012b1c:	2800      	cmp	r0, #0
 8012b1e:	f040 80e0 	bne.w	8012ce2 <rcl_node_init+0x266>
 8012b22:	f8d8 3000 	ldr.w	r3, [r8]
 8012b26:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012b2a:	2078      	movs	r0, #120	@ 0x78
 8012b2c:	4798      	blx	r3
 8012b2e:	4681      	mov	r9, r0
 8012b30:	6060      	str	r0, [r4, #4]
 8012b32:	2800      	cmp	r0, #0
 8012b34:	f000 80ca 	beq.w	8012ccc <rcl_node_init+0x250>
 8012b38:	2200      	movs	r2, #0
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8012b40:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8012b44:	a808      	add	r0, sp, #32
 8012b46:	f000 f907 	bl	8012d58 <rcl_node_get_default_options>
 8012b4a:	a908      	add	r1, sp, #32
 8012b4c:	4648      	mov	r0, r9
 8012b4e:	2268      	movs	r2, #104	@ 0x68
 8012b50:	f005 fd6b 	bl	801862a <memcpy>
 8012b54:	6861      	ldr	r1, [r4, #4]
 8012b56:	6027      	str	r7, [r4, #0]
 8012b58:	4640      	mov	r0, r8
 8012b5a:	f000 f90b 	bl	8012d74 <rcl_node_options_copy>
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d158      	bne.n	8012c14 <rcl_node_init+0x198>
 8012b62:	4628      	mov	r0, r5
 8012b64:	f7ed fb66 	bl	8000234 <strlen>
 8012b68:	4428      	add	r0, r5
 8012b6a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8012b6e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8012b72:	2b2f      	cmp	r3, #47	@ 0x2f
 8012b74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012b78:	9300      	str	r3, [sp, #0]
 8012b7a:	bf0c      	ite	eq
 8012b7c:	4b5f      	ldreq	r3, [pc, #380]	@ (8012cfc <rcl_node_init+0x280>)
 8012b7e:	4b60      	ldrne	r3, [pc, #384]	@ (8012d00 <rcl_node_init+0x284>)
 8012b80:	9302      	str	r3, [sp, #8]
 8012b82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012b86:	9301      	str	r3, [sp, #4]
 8012b88:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012b8c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012b90:	f002 fbba 	bl	8015308 <rcutils_format_string_limit>
 8012b94:	6823      	ldr	r3, [r4, #0]
 8012b96:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8012b9a:	6818      	ldr	r0, [r3, #0]
 8012b9c:	4631      	mov	r1, r6
 8012b9e:	3028      	adds	r0, #40	@ 0x28
 8012ba0:	462a      	mov	r2, r5
 8012ba2:	6866      	ldr	r6, [r4, #4]
 8012ba4:	f7f9 f924 	bl	800bdf0 <rmw_create_node>
 8012ba8:	6863      	ldr	r3, [r4, #4]
 8012baa:	66b0      	str	r0, [r6, #104]	@ 0x68
 8012bac:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012bae:	2800      	cmp	r0, #0
 8012bb0:	d032      	beq.n	8012c18 <rcl_node_init+0x19c>
 8012bb2:	f7f9 f9b1 	bl	800bf18 <rmw_node_get_graph_guard_condition>
 8012bb6:	4681      	mov	r9, r0
 8012bb8:	b360      	cbz	r0, 8012c14 <rcl_node_init+0x198>
 8012bba:	f8d8 3000 	ldr.w	r3, [r8]
 8012bbe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012bc2:	6866      	ldr	r6, [r4, #4]
 8012bc4:	2008      	movs	r0, #8
 8012bc6:	4798      	blx	r3
 8012bc8:	6863      	ldr	r3, [r4, #4]
 8012bca:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8012bcc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8012bd0:	f1bb 0f00 	cmp.w	fp, #0
 8012bd4:	d020      	beq.n	8012c18 <rcl_node_init+0x19c>
 8012bd6:	a806      	add	r0, sp, #24
 8012bd8:	f004 fcfe 	bl	80175d8 <rcl_get_zero_initialized_guard_condition>
 8012bdc:	a806      	add	r0, sp, #24
 8012bde:	c803      	ldmia	r0, {r0, r1}
 8012be0:	6863      	ldr	r3, [r4, #4]
 8012be2:	46c4      	mov	ip, r8
 8012be4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8012be8:	e88b 0003 	stmia.w	fp, {r0, r1}
 8012bec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012bf0:	ae23      	add	r6, sp, #140	@ 0x8c
 8012bf2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012bf4:	f8dc 3000 	ldr.w	r3, [ip]
 8012bf8:	6033      	str	r3, [r6, #0]
 8012bfa:	ab28      	add	r3, sp, #160	@ 0xa0
 8012bfc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012c00:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012c04:	4649      	mov	r1, r9
 8012c06:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012c08:	463a      	mov	r2, r7
 8012c0a:	4670      	mov	r0, lr
 8012c0c:	f004 fd3a 	bl	8017684 <rcl_guard_condition_init_from_rmw>
 8012c10:	4681      	mov	r9, r0
 8012c12:	b328      	cbz	r0, 8012c60 <rcl_node_init+0x1e4>
 8012c14:	6863      	ldr	r3, [r4, #4]
 8012c16:	b1f3      	cbz	r3, 8012c56 <rcl_node_init+0x1da>
 8012c18:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012c1a:	b128      	cbz	r0, 8012c28 <rcl_node_init+0x1ac>
 8012c1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012c20:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012c24:	4798      	blx	r3
 8012c26:	6863      	ldr	r3, [r4, #4]
 8012c28:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012c2a:	b110      	cbz	r0, 8012c32 <rcl_node_init+0x1b6>
 8012c2c:	f7f9 f8f8 	bl	800be20 <rmw_destroy_node>
 8012c30:	6863      	ldr	r3, [r4, #4]
 8012c32:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012c34:	b148      	cbz	r0, 8012c4a <rcl_node_init+0x1ce>
 8012c36:	f004 fd85 	bl	8017744 <rcl_guard_condition_fini>
 8012c3a:	6863      	ldr	r3, [r4, #4]
 8012c3c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012c40:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012c42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012c46:	4798      	blx	r3
 8012c48:	6863      	ldr	r3, [r4, #4]
 8012c4a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012c54:	4798      	blx	r3
 8012c56:	2300      	movs	r3, #0
 8012c58:	e9c4 3300 	strd	r3, r3, [r4]
 8012c5c:	f04f 0901 	mov.w	r9, #1
 8012c60:	f1ba 0f00 	cmp.w	sl, #0
 8012c64:	d125      	bne.n	8012cb2 <rcl_node_init+0x236>
 8012c66:	e001      	b.n	8012c6c <rcl_node_init+0x1f0>
 8012c68:	f04f 090b 	mov.w	r9, #11
 8012c6c:	4648      	mov	r0, r9
 8012c6e:	b029      	add	sp, #164	@ 0xa4
 8012c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c74:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8012c78:	e7f8      	b.n	8012c6c <rcl_node_init+0x1f0>
 8012c7a:	782b      	ldrb	r3, [r5, #0]
 8012c7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8012c7e:	f43f af42 	beq.w	8012b06 <rcl_node_init+0x8a>
 8012c82:	9503      	str	r5, [sp, #12]
 8012c84:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8012d04 <rcl_node_init+0x288>)
 8012c8c:	9302      	str	r3, [sp, #8]
 8012c8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012c92:	9301      	str	r3, [sp, #4]
 8012c94:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012c98:	f002 fb36 	bl	8015308 <rcutils_format_string_limit>
 8012c9c:	4605      	mov	r5, r0
 8012c9e:	b340      	cbz	r0, 8012cf2 <rcl_node_init+0x276>
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	a922      	add	r1, sp, #136	@ 0x88
 8012ca4:	9222      	str	r2, [sp, #136]	@ 0x88
 8012ca6:	f002 ff13 	bl	8015ad0 <rmw_validate_namespace>
 8012caa:	4681      	mov	r9, r0
 8012cac:	2800      	cmp	r0, #0
 8012cae:	f43f af34 	beq.w	8012b1a <rcl_node_init+0x9e>
 8012cb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012cb6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012cba:	4628      	mov	r0, r5
 8012cbc:	4798      	blx	r3
 8012cbe:	e7d5      	b.n	8012c6c <rcl_node_init+0x1f0>
 8012cc0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8012cc4:	4648      	mov	r0, r9
 8012cc6:	b029      	add	sp, #164	@ 0xa4
 8012cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ccc:	f04f 090a 	mov.w	r9, #10
 8012cd0:	f1ba 0f00 	cmp.w	sl, #0
 8012cd4:	d1ed      	bne.n	8012cb2 <rcl_node_init+0x236>
 8012cd6:	e7c9      	b.n	8012c6c <rcl_node_init+0x1f0>
 8012cd8:	f002 ff6a 	bl	8015bb0 <rmw_node_name_validation_result_string>
 8012cdc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8012ce0:	e7c4      	b.n	8012c6c <rcl_node_init+0x1f0>
 8012ce2:	f002 ff07 	bl	8015af4 <rmw_namespace_validation_result_string>
 8012ce6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8012cea:	f1ba 0f00 	cmp.w	sl, #0
 8012cee:	d1e0      	bne.n	8012cb2 <rcl_node_init+0x236>
 8012cf0:	e7bc      	b.n	8012c6c <rcl_node_init+0x1f0>
 8012cf2:	f04f 090a 	mov.w	r9, #10
 8012cf6:	e7b9      	b.n	8012c6c <rcl_node_init+0x1f0>
 8012cf8:	08019bd8 	.word	0x08019bd8
 8012cfc:	08019c24 	.word	0x08019c24
 8012d00:	08019bdc 	.word	0x08019bdc
 8012d04:	0801a16c 	.word	0x0801a16c

08012d08 <rcl_node_is_valid>:
 8012d08:	b130      	cbz	r0, 8012d18 <rcl_node_is_valid+0x10>
 8012d0a:	6843      	ldr	r3, [r0, #4]
 8012d0c:	b123      	cbz	r3, 8012d18 <rcl_node_is_valid+0x10>
 8012d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012d10:	b113      	cbz	r3, 8012d18 <rcl_node_is_valid+0x10>
 8012d12:	6800      	ldr	r0, [r0, #0]
 8012d14:	f7ff bd1c 	b.w	8012750 <rcl_context_is_valid>
 8012d18:	2000      	movs	r0, #0
 8012d1a:	4770      	bx	lr

08012d1c <rcl_node_get_name>:
 8012d1c:	b120      	cbz	r0, 8012d28 <rcl_node_get_name+0xc>
 8012d1e:	6840      	ldr	r0, [r0, #4]
 8012d20:	b110      	cbz	r0, 8012d28 <rcl_node_get_name+0xc>
 8012d22:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012d24:	b100      	cbz	r0, 8012d28 <rcl_node_get_name+0xc>
 8012d26:	6880      	ldr	r0, [r0, #8]
 8012d28:	4770      	bx	lr
 8012d2a:	bf00      	nop

08012d2c <rcl_node_get_namespace>:
 8012d2c:	b120      	cbz	r0, 8012d38 <rcl_node_get_namespace+0xc>
 8012d2e:	6840      	ldr	r0, [r0, #4]
 8012d30:	b110      	cbz	r0, 8012d38 <rcl_node_get_namespace+0xc>
 8012d32:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012d34:	b100      	cbz	r0, 8012d38 <rcl_node_get_namespace+0xc>
 8012d36:	68c0      	ldr	r0, [r0, #12]
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop

08012d3c <rcl_node_get_options>:
 8012d3c:	b128      	cbz	r0, 8012d4a <rcl_node_get_options+0xe>
 8012d3e:	6840      	ldr	r0, [r0, #4]
 8012d40:	b118      	cbz	r0, 8012d4a <rcl_node_get_options+0xe>
 8012d42:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	bf08      	it	eq
 8012d48:	2000      	moveq	r0, #0
 8012d4a:	4770      	bx	lr

08012d4c <rcl_node_get_rmw_handle>:
 8012d4c:	b110      	cbz	r0, 8012d54 <rcl_node_get_rmw_handle+0x8>
 8012d4e:	6840      	ldr	r0, [r0, #4]
 8012d50:	b100      	cbz	r0, 8012d54 <rcl_node_get_rmw_handle+0x8>
 8012d52:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012d54:	4770      	bx	lr
 8012d56:	bf00      	nop

08012d58 <rcl_node_get_default_options>:
 8012d58:	b510      	push	{r4, lr}
 8012d5a:	2268      	movs	r2, #104	@ 0x68
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	2100      	movs	r1, #0
 8012d60:	f005 fb9a 	bl	8018498 <memset>
 8012d64:	4620      	mov	r0, r4
 8012d66:	f7f8 fc9b 	bl	800b6a0 <rcutils_get_default_allocator>
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	7523      	strb	r3, [r4, #20]
 8012d6e:	4620      	mov	r0, r4
 8012d70:	bd10      	pop	{r4, pc}
 8012d72:	bf00      	nop

08012d74 <rcl_node_options_copy>:
 8012d74:	b1d0      	cbz	r0, 8012dac <rcl_node_options_copy+0x38>
 8012d76:	b570      	push	{r4, r5, r6, lr}
 8012d78:	460c      	mov	r4, r1
 8012d7a:	b1a9      	cbz	r1, 8012da8 <rcl_node_options_copy+0x34>
 8012d7c:	4288      	cmp	r0, r1
 8012d7e:	4684      	mov	ip, r0
 8012d80:	d012      	beq.n	8012da8 <rcl_node_options_copy+0x34>
 8012d82:	4605      	mov	r5, r0
 8012d84:	8a86      	ldrh	r6, [r0, #20]
 8012d86:	468e      	mov	lr, r1
 8012d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d8a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d8e:	682b      	ldr	r3, [r5, #0]
 8012d90:	f8ce 3000 	str.w	r3, [lr]
 8012d94:	f10c 0118 	add.w	r1, ip, #24
 8012d98:	2250      	movs	r2, #80	@ 0x50
 8012d9a:	82a6      	strh	r6, [r4, #20]
 8012d9c:	f104 0018 	add.w	r0, r4, #24
 8012da0:	f005 fc43 	bl	801862a <memcpy>
 8012da4:	2000      	movs	r0, #0
 8012da6:	bd70      	pop	{r4, r5, r6, pc}
 8012da8:	200b      	movs	r0, #11
 8012daa:	bd70      	pop	{r4, r5, r6, pc}
 8012dac:	200b      	movs	r0, #11
 8012dae:	4770      	bx	lr

08012db0 <rcl_node_resolve_name>:
 8012db0:	b082      	sub	sp, #8
 8012db2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db6:	b091      	sub	sp, #68	@ 0x44
 8012db8:	ac1a      	add	r4, sp, #104	@ 0x68
 8012dba:	e884 000c 	stmia.w	r4, {r2, r3}
 8012dbe:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012dc2:	2800      	cmp	r0, #0
 8012dc4:	d03b      	beq.n	8012e3e <rcl_node_resolve_name+0x8e>
 8012dc6:	460c      	mov	r4, r1
 8012dc8:	4605      	mov	r5, r0
 8012dca:	f7ff ffb7 	bl	8012d3c <rcl_node_get_options>
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	d037      	beq.n	8012e42 <rcl_node_resolve_name+0x92>
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	f7ff ffa2 	bl	8012d1c <rcl_node_get_name>
 8012dd8:	4606      	mov	r6, r0
 8012dda:	4628      	mov	r0, r5
 8012ddc:	f7ff ffa6 	bl	8012d2c <rcl_node_get_namespace>
 8012de0:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012de4:	4681      	mov	r9, r0
 8012de6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012dea:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012dec:	46ac      	mov	ip, r5
 8012dee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012df2:	f8de 3000 	ldr.w	r3, [lr]
 8012df6:	f8cc 3000 	str.w	r3, [ip]
 8012dfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012dfc:	b1fb      	cbz	r3, 8012e3e <rcl_node_resolve_name+0x8e>
 8012dfe:	468a      	mov	sl, r1
 8012e00:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012e04:	f002 fbd8 	bl	80155b8 <rcutils_get_zero_initialized_string_map>
 8012e08:	ab10      	add	r3, sp, #64	@ 0x40
 8012e0a:	9008      	str	r0, [sp, #32]
 8012e0c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012e10:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012e14:	2100      	movs	r1, #0
 8012e16:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012e1a:	a808      	add	r0, sp, #32
 8012e1c:	f002 fc44 	bl	80156a8 <rcutils_string_map_init>
 8012e20:	4607      	mov	r7, r0
 8012e22:	b180      	cbz	r0, 8012e46 <rcl_node_resolve_name+0x96>
 8012e24:	f7f8 fc58 	bl	800b6d8 <rcutils_get_error_string>
 8012e28:	f7f8 fc6e 	bl	800b708 <rcutils_reset_error>
 8012e2c:	2f0a      	cmp	r7, #10
 8012e2e:	bf18      	it	ne
 8012e30:	2701      	movne	r7, #1
 8012e32:	4638      	mov	r0, r7
 8012e34:	b011      	add	sp, #68	@ 0x44
 8012e36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e3a:	b002      	add	sp, #8
 8012e3c:	4770      	bx	lr
 8012e3e:	270b      	movs	r7, #11
 8012e40:	e7f7      	b.n	8012e32 <rcl_node_resolve_name+0x82>
 8012e42:	2701      	movs	r7, #1
 8012e44:	e7f5      	b.n	8012e32 <rcl_node_resolve_name+0x82>
 8012e46:	9009      	str	r0, [sp, #36]	@ 0x24
 8012e48:	9007      	str	r0, [sp, #28]
 8012e4a:	a808      	add	r0, sp, #32
 8012e4c:	f004 fbbe 	bl	80175cc <rcl_get_default_topic_name_substitutions>
 8012e50:	4607      	mov	r7, r0
 8012e52:	b1a8      	cbz	r0, 8012e80 <rcl_node_resolve_name+0xd0>
 8012e54:	280a      	cmp	r0, #10
 8012e56:	9c07      	ldr	r4, [sp, #28]
 8012e58:	d000      	beq.n	8012e5c <rcl_node_resolve_name+0xac>
 8012e5a:	2701      	movs	r7, #1
 8012e5c:	a808      	add	r0, sp, #32
 8012e5e:	f002 fc63 	bl	8015728 <rcutils_string_map_fini>
 8012e62:	2800      	cmp	r0, #0
 8012e64:	d13d      	bne.n	8012ee2 <rcl_node_resolve_name+0x132>
 8012e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e68:	4659      	mov	r1, fp
 8012e6a:	47d0      	blx	sl
 8012e6c:	4659      	mov	r1, fp
 8012e6e:	4620      	mov	r0, r4
 8012e70:	47d0      	blx	sl
 8012e72:	f1b8 0f00 	cmp.w	r8, #0
 8012e76:	d0dc      	beq.n	8012e32 <rcl_node_resolve_name+0x82>
 8012e78:	2f67      	cmp	r7, #103	@ 0x67
 8012e7a:	bf08      	it	eq
 8012e7c:	2768      	moveq	r7, #104	@ 0x68
 8012e7e:	e7d8      	b.n	8012e32 <rcl_node_resolve_name+0x82>
 8012e80:	ab09      	add	r3, sp, #36	@ 0x24
 8012e82:	9305      	str	r3, [sp, #20]
 8012e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e86:	46ec      	mov	ip, sp
 8012e88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012e8c:	682b      	ldr	r3, [r5, #0]
 8012e8e:	f8cc 3000 	str.w	r3, [ip]
 8012e92:	464a      	mov	r2, r9
 8012e94:	4631      	mov	r1, r6
 8012e96:	4620      	mov	r0, r4
 8012e98:	ab08      	add	r3, sp, #32
 8012e9a:	f004 fa39 	bl	8017310 <rcl_expand_topic_name>
 8012e9e:	4607      	mov	r7, r0
 8012ea0:	b9b8      	cbnz	r0, 8012ed2 <rcl_node_resolve_name+0x122>
 8012ea2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012ea4:	9009      	str	r0, [sp, #36]	@ 0x24
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	a90a      	add	r1, sp, #40	@ 0x28
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f002 fd4c 	bl	8015948 <rmw_validate_full_topic_name>
 8012eb0:	b988      	cbnz	r0, 8012ed6 <rcl_node_resolve_name+0x126>
 8012eb2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012eb4:	b9d5      	cbnz	r5, 8012eec <rcl_node_resolve_name+0x13c>
 8012eb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012eb8:	a808      	add	r0, sp, #32
 8012eba:	601c      	str	r4, [r3, #0]
 8012ebc:	f002 fc34 	bl	8015728 <rcutils_string_map_fini>
 8012ec0:	4607      	mov	r7, r0
 8012ec2:	b1a8      	cbz	r0, 8012ef0 <rcl_node_resolve_name+0x140>
 8012ec4:	f7f8 fc08 	bl	800b6d8 <rcutils_get_error_string>
 8012ec8:	462c      	mov	r4, r5
 8012eca:	f7f8 fc1d 	bl	800b708 <rcutils_reset_error>
 8012ece:	2701      	movs	r7, #1
 8012ed0:	e7c9      	b.n	8012e66 <rcl_node_resolve_name+0xb6>
 8012ed2:	9c07      	ldr	r4, [sp, #28]
 8012ed4:	e7c2      	b.n	8012e5c <rcl_node_resolve_name+0xac>
 8012ed6:	f7f8 fbff 	bl	800b6d8 <rcutils_get_error_string>
 8012eda:	2701      	movs	r7, #1
 8012edc:	f7f8 fc14 	bl	800b708 <rcutils_reset_error>
 8012ee0:	e7bc      	b.n	8012e5c <rcl_node_resolve_name+0xac>
 8012ee2:	f7f8 fbf9 	bl	800b6d8 <rcutils_get_error_string>
 8012ee6:	f7f8 fc0f 	bl	800b708 <rcutils_reset_error>
 8012eea:	e7bc      	b.n	8012e66 <rcl_node_resolve_name+0xb6>
 8012eec:	2767      	movs	r7, #103	@ 0x67
 8012eee:	e7b5      	b.n	8012e5c <rcl_node_resolve_name+0xac>
 8012ef0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ef2:	4659      	mov	r1, fp
 8012ef4:	47d0      	blx	sl
 8012ef6:	4659      	mov	r1, fp
 8012ef8:	4638      	mov	r0, r7
 8012efa:	47d0      	blx	sl
 8012efc:	e799      	b.n	8012e32 <rcl_node_resolve_name+0x82>
 8012efe:	bf00      	nop

08012f00 <exact_match_lookup>:
 8012f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f02:	f102 0708 	add.w	r7, r2, #8
 8012f06:	460b      	mov	r3, r1
 8012f08:	4614      	mov	r4, r2
 8012f0a:	4606      	mov	r6, r0
 8012f0c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012f10:	b085      	sub	sp, #20
 8012f12:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012f16:	4618      	mov	r0, r3
 8012f18:	4919      	ldr	r1, [pc, #100]	@ (8012f80 <exact_match_lookup+0x80>)
 8012f1a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012f1e:	f002 f9e5 	bl	80152ec <rcutils_join_path>
 8012f22:	7833      	ldrb	r3, [r6, #0]
 8012f24:	2b2f      	cmp	r3, #47	@ 0x2f
 8012f26:	4605      	mov	r5, r0
 8012f28:	d023      	beq.n	8012f72 <exact_match_lookup+0x72>
 8012f2a:	f104 030c 	add.w	r3, r4, #12
 8012f2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012f32:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012f36:	1c70      	adds	r0, r6, #1
 8012f38:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012f3c:	f002 f9dc 	bl	80152f8 <rcutils_to_native_path>
 8012f40:	4606      	mov	r6, r0
 8012f42:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012f46:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012f4a:	4631      	mov	r1, r6
 8012f4c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012f50:	4628      	mov	r0, r5
 8012f52:	f002 f9cb 	bl	80152ec <rcutils_join_path>
 8012f56:	6862      	ldr	r2, [r4, #4]
 8012f58:	6921      	ldr	r1, [r4, #16]
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	4630      	mov	r0, r6
 8012f5e:	461e      	mov	r6, r3
 8012f60:	4790      	blx	r2
 8012f62:	4628      	mov	r0, r5
 8012f64:	6863      	ldr	r3, [r4, #4]
 8012f66:	6921      	ldr	r1, [r4, #16]
 8012f68:	4798      	blx	r3
 8012f6a:	4635      	mov	r5, r6
 8012f6c:	4628      	mov	r0, r5
 8012f6e:	b005      	add	sp, #20
 8012f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f72:	7873      	ldrb	r3, [r6, #1]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d1d8      	bne.n	8012f2a <exact_match_lookup+0x2a>
 8012f78:	4628      	mov	r0, r5
 8012f7a:	b005      	add	sp, #20
 8012f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f7e:	bf00      	nop
 8012f80:	0801a1b4 	.word	0x0801a1b4

08012f84 <rcl_get_secure_root>:
 8012f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f88:	b085      	sub	sp, #20
 8012f8a:	b168      	cbz	r0, 8012fa8 <rcl_get_secure_root+0x24>
 8012f8c:	4607      	mov	r7, r0
 8012f8e:	4608      	mov	r0, r1
 8012f90:	460c      	mov	r4, r1
 8012f92:	f7f8 fb93 	bl	800b6bc <rcutils_allocator_is_valid>
 8012f96:	b138      	cbz	r0, 8012fa8 <rcl_get_secure_root+0x24>
 8012f98:	2300      	movs	r3, #0
 8012f9a:	482d      	ldr	r0, [pc, #180]	@ (8013050 <rcl_get_secure_root+0xcc>)
 8012f9c:	9303      	str	r3, [sp, #12]
 8012f9e:	a903      	add	r1, sp, #12
 8012fa0:	f002 f98a 	bl	80152b8 <rcutils_get_env>
 8012fa4:	4605      	mov	r5, r0
 8012fa6:	b120      	cbz	r0, 8012fb2 <rcl_get_secure_root+0x2e>
 8012fa8:	2500      	movs	r5, #0
 8012faa:	4628      	mov	r0, r5
 8012fac:	b005      	add	sp, #20
 8012fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fb2:	9b03      	ldr	r3, [sp, #12]
 8012fb4:	781a      	ldrb	r2, [r3, #0]
 8012fb6:	2a00      	cmp	r2, #0
 8012fb8:	d0f6      	beq.n	8012fa8 <rcl_get_secure_root+0x24>
 8012fba:	f104 090c 	add.w	r9, r4, #12
 8012fbe:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012fc2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012fcc:	f002 fab6 	bl	801553c <rcutils_strdup>
 8012fd0:	4680      	mov	r8, r0
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	d0e8      	beq.n	8012fa8 <rcl_get_secure_root+0x24>
 8012fd6:	481f      	ldr	r0, [pc, #124]	@ (8013054 <rcl_get_secure_root+0xd0>)
 8012fd8:	9503      	str	r5, [sp, #12]
 8012fda:	a903      	add	r1, sp, #12
 8012fdc:	f002 f96c 	bl	80152b8 <rcutils_get_env>
 8012fe0:	b160      	cbz	r0, 8012ffc <rcl_get_secure_root+0x78>
 8012fe2:	2600      	movs	r6, #0
 8012fe4:	6863      	ldr	r3, [r4, #4]
 8012fe6:	6921      	ldr	r1, [r4, #16]
 8012fe8:	4630      	mov	r0, r6
 8012fea:	4798      	blx	r3
 8012fec:	4640      	mov	r0, r8
 8012fee:	6863      	ldr	r3, [r4, #4]
 8012ff0:	6921      	ldr	r1, [r4, #16]
 8012ff2:	4798      	blx	r3
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	b005      	add	sp, #20
 8012ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ffc:	9b03      	ldr	r3, [sp, #12]
 8012ffe:	781e      	ldrb	r6, [r3, #0]
 8013000:	b1f6      	cbz	r6, 8013040 <rcl_get_secure_root+0xbc>
 8013002:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013006:	e88d 0003 	stmia.w	sp, {r0, r1}
 801300a:	4618      	mov	r0, r3
 801300c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013010:	f002 fa94 	bl	801553c <rcutils_strdup>
 8013014:	4606      	mov	r6, r0
 8013016:	2800      	cmp	r0, #0
 8013018:	d0e3      	beq.n	8012fe2 <rcl_get_secure_root+0x5e>
 801301a:	4622      	mov	r2, r4
 801301c:	4641      	mov	r1, r8
 801301e:	f7ff ff6f 	bl	8012f00 <exact_match_lookup>
 8013022:	4605      	mov	r5, r0
 8013024:	2d00      	cmp	r5, #0
 8013026:	d0dd      	beq.n	8012fe4 <rcl_get_secure_root+0x60>
 8013028:	4628      	mov	r0, r5
 801302a:	f002 f95d 	bl	80152e8 <rcutils_is_directory>
 801302e:	4603      	mov	r3, r0
 8013030:	2800      	cmp	r0, #0
 8013032:	d1d7      	bne.n	8012fe4 <rcl_get_secure_root+0x60>
 8013034:	4628      	mov	r0, r5
 8013036:	6921      	ldr	r1, [r4, #16]
 8013038:	461d      	mov	r5, r3
 801303a:	6863      	ldr	r3, [r4, #4]
 801303c:	4798      	blx	r3
 801303e:	e7d1      	b.n	8012fe4 <rcl_get_secure_root+0x60>
 8013040:	4622      	mov	r2, r4
 8013042:	4638      	mov	r0, r7
 8013044:	4641      	mov	r1, r8
 8013046:	f7ff ff5b 	bl	8012f00 <exact_match_lookup>
 801304a:	4605      	mov	r5, r0
 801304c:	e7ea      	b.n	8013024 <rcl_get_secure_root+0xa0>
 801304e:	bf00      	nop
 8013050:	0801a1c0 	.word	0x0801a1c0
 8013054:	0801a1d8 	.word	0x0801a1d8

08013058 <rcl_get_security_options_from_environment>:
 8013058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801305c:	b082      	sub	sp, #8
 801305e:	2300      	movs	r3, #0
 8013060:	4606      	mov	r6, r0
 8013062:	460f      	mov	r7, r1
 8013064:	4820      	ldr	r0, [pc, #128]	@ (80130e8 <rcl_get_security_options_from_environment+0x90>)
 8013066:	9301      	str	r3, [sp, #4]
 8013068:	a901      	add	r1, sp, #4
 801306a:	4690      	mov	r8, r2
 801306c:	f002 f924 	bl	80152b8 <rcutils_get_env>
 8013070:	b120      	cbz	r0, 801307c <rcl_get_security_options_from_environment+0x24>
 8013072:	2501      	movs	r5, #1
 8013074:	4628      	mov	r0, r5
 8013076:	b002      	add	sp, #8
 8013078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801307c:	491b      	ldr	r1, [pc, #108]	@ (80130ec <rcl_get_security_options_from_environment+0x94>)
 801307e:	4604      	mov	r4, r0
 8013080:	9801      	ldr	r0, [sp, #4]
 8013082:	f7ed f8cd 	bl	8000220 <strcmp>
 8013086:	4605      	mov	r5, r0
 8013088:	b9e8      	cbnz	r0, 80130c6 <rcl_get_security_options_from_environment+0x6e>
 801308a:	9001      	str	r0, [sp, #4]
 801308c:	f1b8 0f00 	cmp.w	r8, #0
 8013090:	d020      	beq.n	80130d4 <rcl_get_security_options_from_environment+0x7c>
 8013092:	4817      	ldr	r0, [pc, #92]	@ (80130f0 <rcl_get_security_options_from_environment+0x98>)
 8013094:	a901      	add	r1, sp, #4
 8013096:	f002 f90f 	bl	80152b8 <rcutils_get_env>
 801309a:	2800      	cmp	r0, #0
 801309c:	d1e9      	bne.n	8013072 <rcl_get_security_options_from_environment+0x1a>
 801309e:	4915      	ldr	r1, [pc, #84]	@ (80130f4 <rcl_get_security_options_from_environment+0x9c>)
 80130a0:	9801      	ldr	r0, [sp, #4]
 80130a2:	f7ed f8bd 	bl	8000220 <strcmp>
 80130a6:	fab0 f080 	clz	r0, r0
 80130aa:	0940      	lsrs	r0, r0, #5
 80130ac:	f888 0000 	strb.w	r0, [r8]
 80130b0:	4639      	mov	r1, r7
 80130b2:	4630      	mov	r0, r6
 80130b4:	f7ff ff66 	bl	8012f84 <rcl_get_secure_root>
 80130b8:	b170      	cbz	r0, 80130d8 <rcl_get_security_options_from_environment+0x80>
 80130ba:	f8c8 0004 	str.w	r0, [r8, #4]
 80130be:	4628      	mov	r0, r5
 80130c0:	b002      	add	sp, #8
 80130c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130c6:	4625      	mov	r5, r4
 80130c8:	4628      	mov	r0, r5
 80130ca:	f888 4000 	strb.w	r4, [r8]
 80130ce:	b002      	add	sp, #8
 80130d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130d4:	250b      	movs	r5, #11
 80130d6:	e7cd      	b.n	8013074 <rcl_get_security_options_from_environment+0x1c>
 80130d8:	f898 5000 	ldrb.w	r5, [r8]
 80130dc:	f1a5 0501 	sub.w	r5, r5, #1
 80130e0:	fab5 f585 	clz	r5, r5
 80130e4:	096d      	lsrs	r5, r5, #5
 80130e6:	e7c5      	b.n	8013074 <rcl_get_security_options_from_environment+0x1c>
 80130e8:	0801a178 	.word	0x0801a178
 80130ec:	0801a18c 	.word	0x0801a18c
 80130f0:	0801a194 	.word	0x0801a194
 80130f4:	0801a1ac 	.word	0x0801a1ac

080130f8 <rcl_service_get_rmw_handle>:
 80130f8:	b118      	cbz	r0, 8013102 <rcl_service_get_rmw_handle+0xa>
 80130fa:	6800      	ldr	r0, [r0, #0]
 80130fc:	b108      	cbz	r0, 8013102 <rcl_service_get_rmw_handle+0xa>
 80130fe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013102:	4770      	bx	lr

08013104 <rcl_take_request>:
 8013104:	b570      	push	{r4, r5, r6, lr}
 8013106:	468e      	mov	lr, r1
 8013108:	460c      	mov	r4, r1
 801310a:	4616      	mov	r6, r2
 801310c:	4605      	mov	r5, r0
 801310e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013112:	b08c      	sub	sp, #48	@ 0x30
 8013114:	f10d 0c18 	add.w	ip, sp, #24
 8013118:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801311c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013120:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013124:	b30d      	cbz	r5, 801316a <rcl_take_request+0x66>
 8013126:	682b      	ldr	r3, [r5, #0]
 8013128:	b1fb      	cbz	r3, 801316a <rcl_take_request+0x66>
 801312a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801312e:	b1e0      	cbz	r0, 801316a <rcl_take_request+0x66>
 8013130:	b336      	cbz	r6, 8013180 <rcl_take_request+0x7c>
 8013132:	2300      	movs	r3, #0
 8013134:	f88d 3007 	strb.w	r3, [sp, #7]
 8013138:	4632      	mov	r2, r6
 801313a:	f10d 0307 	add.w	r3, sp, #7
 801313e:	a902      	add	r1, sp, #8
 8013140:	f002 ff58 	bl	8015ff4 <rmw_take_request>
 8013144:	4605      	mov	r5, r0
 8013146:	b198      	cbz	r0, 8013170 <rcl_take_request+0x6c>
 8013148:	280a      	cmp	r0, #10
 801314a:	bf18      	it	ne
 801314c:	2501      	movne	r5, #1
 801314e:	f10d 0e18 	add.w	lr, sp, #24
 8013152:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013156:	46a4      	mov	ip, r4
 8013158:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801315c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013160:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013164:	4628      	mov	r0, r5
 8013166:	b00c      	add	sp, #48	@ 0x30
 8013168:	bd70      	pop	{r4, r5, r6, pc}
 801316a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801316e:	e7ee      	b.n	801314e <rcl_take_request+0x4a>
 8013170:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013174:	f240 2359 	movw	r3, #601	@ 0x259
 8013178:	2a00      	cmp	r2, #0
 801317a:	bf08      	it	eq
 801317c:	461d      	moveq	r5, r3
 801317e:	e7e6      	b.n	801314e <rcl_take_request+0x4a>
 8013180:	250b      	movs	r5, #11
 8013182:	e7e4      	b.n	801314e <rcl_take_request+0x4a>

08013184 <rcl_send_response>:
 8013184:	b170      	cbz	r0, 80131a4 <rcl_send_response+0x20>
 8013186:	6800      	ldr	r0, [r0, #0]
 8013188:	b160      	cbz	r0, 80131a4 <rcl_send_response+0x20>
 801318a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801318e:	b148      	cbz	r0, 80131a4 <rcl_send_response+0x20>
 8013190:	b159      	cbz	r1, 80131aa <rcl_send_response+0x26>
 8013192:	b510      	push	{r4, lr}
 8013194:	b15a      	cbz	r2, 80131ae <rcl_send_response+0x2a>
 8013196:	f002 ff8b 	bl	80160b0 <rmw_send_response>
 801319a:	b110      	cbz	r0, 80131a2 <rcl_send_response+0x1e>
 801319c:	2802      	cmp	r0, #2
 801319e:	bf18      	it	ne
 80131a0:	2001      	movne	r0, #1
 80131a2:	bd10      	pop	{r4, pc}
 80131a4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80131a8:	4770      	bx	lr
 80131aa:	200b      	movs	r0, #11
 80131ac:	4770      	bx	lr
 80131ae:	200b      	movs	r0, #11
 80131b0:	bd10      	pop	{r4, pc}
 80131b2:	bf00      	nop

080131b4 <rcl_service_is_valid>:
 80131b4:	b130      	cbz	r0, 80131c4 <rcl_service_is_valid+0x10>
 80131b6:	6800      	ldr	r0, [r0, #0]
 80131b8:	b120      	cbz	r0, 80131c4 <rcl_service_is_valid+0x10>
 80131ba:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80131be:	3800      	subs	r0, #0
 80131c0:	bf18      	it	ne
 80131c2:	2001      	movne	r0, #1
 80131c4:	4770      	bx	lr
 80131c6:	bf00      	nop

080131c8 <rcl_take>:
 80131c8:	2800      	cmp	r0, #0
 80131ca:	d04a      	beq.n	8013262 <rcl_take+0x9a>
 80131cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d0:	4604      	mov	r4, r0
 80131d2:	6800      	ldr	r0, [r0, #0]
 80131d4:	b0a4      	sub	sp, #144	@ 0x90
 80131d6:	2800      	cmp	r0, #0
 80131d8:	d03b      	beq.n	8013252 <rcl_take+0x8a>
 80131da:	461f      	mov	r7, r3
 80131dc:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d036      	beq.n	8013252 <rcl_take+0x8a>
 80131e4:	460e      	mov	r6, r1
 80131e6:	2900      	cmp	r1, #0
 80131e8:	d039      	beq.n	801325e <rcl_take+0x96>
 80131ea:	4615      	mov	r5, r2
 80131ec:	2a00      	cmp	r2, #0
 80131ee:	d03c      	beq.n	801326a <rcl_take+0xa2>
 80131f0:	a802      	add	r0, sp, #8
 80131f2:	f002 fba1 	bl	8015938 <rmw_get_zero_initialized_message_info>
 80131f6:	f10d 0c08 	add.w	ip, sp, #8
 80131fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80131fe:	46ae      	mov	lr, r5
 8013200:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013204:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013208:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801320c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013210:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013214:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013218:	f04f 0800 	mov.w	r8, #0
 801321c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8013220:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8013224:	6822      	ldr	r2, [r4, #0]
 8013226:	462b      	mov	r3, r5
 8013228:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 801322c:	9700      	str	r7, [sp, #0]
 801322e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8013232:	4631      	mov	r1, r6
 8013234:	f002 ffe2 	bl	80161fc <rmw_take_with_info>
 8013238:	4603      	mov	r3, r0
 801323a:	b9c0      	cbnz	r0, 801326e <rcl_take+0xa6>
 801323c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8013240:	f240 1291 	movw	r2, #401	@ 0x191
 8013244:	2900      	cmp	r1, #0
 8013246:	bf08      	it	eq
 8013248:	4613      	moveq	r3, r2
 801324a:	4618      	mov	r0, r3
 801324c:	b024      	add	sp, #144	@ 0x90
 801324e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013252:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013256:	4618      	mov	r0, r3
 8013258:	b024      	add	sp, #144	@ 0x90
 801325a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801325e:	230b      	movs	r3, #11
 8013260:	e7f3      	b.n	801324a <rcl_take+0x82>
 8013262:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013266:	4618      	mov	r0, r3
 8013268:	4770      	bx	lr
 801326a:	ad14      	add	r5, sp, #80	@ 0x50
 801326c:	e7c0      	b.n	80131f0 <rcl_take+0x28>
 801326e:	f7ff fa51 	bl	8012714 <rcl_convert_rmw_ret_to_rcl_ret>
 8013272:	4603      	mov	r3, r0
 8013274:	e7e9      	b.n	801324a <rcl_take+0x82>
 8013276:	bf00      	nop

08013278 <rcl_subscription_get_rmw_handle>:
 8013278:	b118      	cbz	r0, 8013282 <rcl_subscription_get_rmw_handle+0xa>
 801327a:	6800      	ldr	r0, [r0, #0]
 801327c:	b108      	cbz	r0, 8013282 <rcl_subscription_get_rmw_handle+0xa>
 801327e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8013282:	4770      	bx	lr

08013284 <rcl_subscription_is_valid>:
 8013284:	b130      	cbz	r0, 8013294 <rcl_subscription_is_valid+0x10>
 8013286:	6800      	ldr	r0, [r0, #0]
 8013288:	b120      	cbz	r0, 8013294 <rcl_subscription_is_valid+0x10>
 801328a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801328e:	3800      	subs	r0, #0
 8013290:	bf18      	it	ne
 8013292:	2001      	movne	r0, #1
 8013294:	4770      	bx	lr
 8013296:	bf00      	nop

08013298 <rcl_get_system_time>:
 8013298:	4608      	mov	r0, r1
 801329a:	f7f8 ba51 	b.w	800b740 <rcutils_system_time_now>
 801329e:	bf00      	nop

080132a0 <rcl_get_steady_time>:
 80132a0:	4608      	mov	r0, r1
 80132a2:	f7f8 ba75 	b.w	800b790 <rcutils_steady_time_now>
 80132a6:	bf00      	nop

080132a8 <rcl_get_ros_time>:
 80132a8:	7a03      	ldrb	r3, [r0, #8]
 80132aa:	b510      	push	{r4, lr}
 80132ac:	460c      	mov	r4, r1
 80132ae:	b133      	cbz	r3, 80132be <rcl_get_ros_time+0x16>
 80132b0:	2105      	movs	r1, #5
 80132b2:	f001 ff5d 	bl	8015170 <__atomic_load_8>
 80132b6:	e9c4 0100 	strd	r0, r1, [r4]
 80132ba:	2000      	movs	r0, #0
 80132bc:	bd10      	pop	{r4, pc}
 80132be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132c2:	4608      	mov	r0, r1
 80132c4:	f7f8 ba3c 	b.w	800b740 <rcutils_system_time_now>

080132c8 <rcl_clock_init>:
 80132c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ca:	4605      	mov	r5, r0
 80132cc:	4610      	mov	r0, r2
 80132ce:	4614      	mov	r4, r2
 80132d0:	460e      	mov	r6, r1
 80132d2:	f7f8 f9f3 	bl	800b6bc <rcutils_allocator_is_valid>
 80132d6:	b128      	cbz	r0, 80132e4 <rcl_clock_init+0x1c>
 80132d8:	2d03      	cmp	r5, #3
 80132da:	d803      	bhi.n	80132e4 <rcl_clock_init+0x1c>
 80132dc:	e8df f005 	tbb	[pc, r5]
 80132e0:	06532e1d 	.word	0x06532e1d
 80132e4:	f04f 0c0b 	mov.w	ip, #11
 80132e8:	4660      	mov	r0, ip
 80132ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132ec:	2e00      	cmp	r6, #0
 80132ee:	d0f9      	beq.n	80132e4 <rcl_clock_init+0x1c>
 80132f0:	2c00      	cmp	r4, #0
 80132f2:	d0f7      	beq.n	80132e4 <rcl_clock_init+0x1c>
 80132f4:	2300      	movs	r3, #0
 80132f6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80132fa:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80133b0 <rcl_clock_init+0xe8>
 80132fe:	6133      	str	r3, [r6, #16]
 8013300:	f106 0514 	add.w	r5, r6, #20
 8013304:	469c      	mov	ip, r3
 8013306:	2703      	movs	r7, #3
 8013308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801330a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801330c:	6823      	ldr	r3, [r4, #0]
 801330e:	602b      	str	r3, [r5, #0]
 8013310:	7037      	strb	r7, [r6, #0]
 8013312:	f8c6 e00c 	str.w	lr, [r6, #12]
 8013316:	4660      	mov	r0, ip
 8013318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801331a:	2e00      	cmp	r6, #0
 801331c:	d0e2      	beq.n	80132e4 <rcl_clock_init+0x1c>
 801331e:	2300      	movs	r3, #0
 8013320:	7033      	strb	r3, [r6, #0]
 8013322:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013326:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801332a:	469c      	mov	ip, r3
 801332c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801332e:	f106 0514 	add.w	r5, r6, #20
 8013332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013334:	6823      	ldr	r3, [r4, #0]
 8013336:	602b      	str	r3, [r5, #0]
 8013338:	4660      	mov	r0, ip
 801333a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801333c:	2e00      	cmp	r6, #0
 801333e:	d0d1      	beq.n	80132e4 <rcl_clock_init+0x1c>
 8013340:	2c00      	cmp	r4, #0
 8013342:	d0cf      	beq.n	80132e4 <rcl_clock_init+0x1c>
 8013344:	2700      	movs	r7, #0
 8013346:	7037      	strb	r7, [r6, #0]
 8013348:	46a4      	mov	ip, r4
 801334a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801334e:	f106 0514 	add.w	r5, r6, #20
 8013352:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8013356:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801335a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801335c:	f8dc 3000 	ldr.w	r3, [ip]
 8013360:	602b      	str	r3, [r5, #0]
 8013362:	6921      	ldr	r1, [r4, #16]
 8013364:	6823      	ldr	r3, [r4, #0]
 8013366:	2010      	movs	r0, #16
 8013368:	4798      	blx	r3
 801336a:	6130      	str	r0, [r6, #16]
 801336c:	b1d0      	cbz	r0, 80133a4 <rcl_clock_init+0xdc>
 801336e:	2200      	movs	r2, #0
 8013370:	2300      	movs	r3, #0
 8013372:	e9c0 2300 	strd	r2, r3, [r0]
 8013376:	2301      	movs	r3, #1
 8013378:	7207      	strb	r7, [r0, #8]
 801337a:	4a0c      	ldr	r2, [pc, #48]	@ (80133ac <rcl_clock_init+0xe4>)
 801337c:	7033      	strb	r3, [r6, #0]
 801337e:	46bc      	mov	ip, r7
 8013380:	60f2      	str	r2, [r6, #12]
 8013382:	4660      	mov	r0, ip
 8013384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013386:	2e00      	cmp	r6, #0
 8013388:	d0ac      	beq.n	80132e4 <rcl_clock_init+0x1c>
 801338a:	2c00      	cmp	r4, #0
 801338c:	d0aa      	beq.n	80132e4 <rcl_clock_init+0x1c>
 801338e:	2300      	movs	r3, #0
 8013390:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013394:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80133b4 <rcl_clock_init+0xec>
 8013398:	6133      	str	r3, [r6, #16]
 801339a:	f106 0514 	add.w	r5, r6, #20
 801339e:	469c      	mov	ip, r3
 80133a0:	2702      	movs	r7, #2
 80133a2:	e7b1      	b.n	8013308 <rcl_clock_init+0x40>
 80133a4:	f04f 0c0a 	mov.w	ip, #10
 80133a8:	e79e      	b.n	80132e8 <rcl_clock_init+0x20>
 80133aa:	bf00      	nop
 80133ac:	080132a9 	.word	0x080132a9
 80133b0:	080132a1 	.word	0x080132a1
 80133b4:	08013299 	.word	0x08013299

080133b8 <rcl_clock_get_now>:
 80133b8:	b140      	cbz	r0, 80133cc <rcl_clock_get_now+0x14>
 80133ba:	b139      	cbz	r1, 80133cc <rcl_clock_get_now+0x14>
 80133bc:	7803      	ldrb	r3, [r0, #0]
 80133be:	b11b      	cbz	r3, 80133c8 <rcl_clock_get_now+0x10>
 80133c0:	68c3      	ldr	r3, [r0, #12]
 80133c2:	b10b      	cbz	r3, 80133c8 <rcl_clock_get_now+0x10>
 80133c4:	6900      	ldr	r0, [r0, #16]
 80133c6:	4718      	bx	r3
 80133c8:	2001      	movs	r0, #1
 80133ca:	4770      	bx	lr
 80133cc:	200b      	movs	r0, #11
 80133ce:	4770      	bx	lr

080133d0 <rcl_clock_add_jump_callback>:
 80133d0:	b082      	sub	sp, #8
 80133d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133d6:	a906      	add	r1, sp, #24
 80133d8:	e881 000c 	stmia.w	r1, {r2, r3}
 80133dc:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80133e0:	b320      	cbz	r0, 801342c <rcl_clock_add_jump_callback+0x5c>
 80133e2:	4604      	mov	r4, r0
 80133e4:	3014      	adds	r0, #20
 80133e6:	f7f8 f969 	bl	800b6bc <rcutils_allocator_is_valid>
 80133ea:	b1f8      	cbz	r0, 801342c <rcl_clock_add_jump_callback+0x5c>
 80133ec:	b1f6      	cbz	r6, 801342c <rcl_clock_add_jump_callback+0x5c>
 80133ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	db1b      	blt.n	801342c <rcl_clock_add_jump_callback+0x5c>
 80133f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80133f8:	2a01      	cmp	r2, #1
 80133fa:	f173 0300 	sbcs.w	r3, r3, #0
 80133fe:	da15      	bge.n	801342c <rcl_clock_add_jump_callback+0x5c>
 8013400:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8013404:	2f00      	cmp	r7, #0
 8013406:	d042      	beq.n	801348e <rcl_clock_add_jump_callback+0xbe>
 8013408:	2300      	movs	r3, #0
 801340a:	4602      	mov	r2, r0
 801340c:	e003      	b.n	8013416 <rcl_clock_add_jump_callback+0x46>
 801340e:	42bb      	cmp	r3, r7
 8013410:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8013414:	d011      	beq.n	801343a <rcl_clock_add_jump_callback+0x6a>
 8013416:	6811      	ldr	r1, [r2, #0]
 8013418:	42b1      	cmp	r1, r6
 801341a:	f103 0301 	add.w	r3, r3, #1
 801341e:	d1f6      	bne.n	801340e <rcl_clock_add_jump_callback+0x3e>
 8013420:	6a11      	ldr	r1, [r2, #32]
 8013422:	42a9      	cmp	r1, r5
 8013424:	d1f3      	bne.n	801340e <rcl_clock_add_jump_callback+0x3e>
 8013426:	f04f 0e01 	mov.w	lr, #1
 801342a:	e001      	b.n	8013430 <rcl_clock_add_jump_callback+0x60>
 801342c:	f04f 0e0b 	mov.w	lr, #11
 8013430:	4670      	mov	r0, lr
 8013432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013436:	b002      	add	sp, #8
 8013438:	4770      	bx	lr
 801343a:	3301      	adds	r3, #1
 801343c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013440:	00d9      	lsls	r1, r3, #3
 8013442:	69e3      	ldr	r3, [r4, #28]
 8013444:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013446:	4798      	blx	r3
 8013448:	b1f0      	cbz	r0, 8013488 <rcl_clock_add_jump_callback+0xb8>
 801344a:	68a3      	ldr	r3, [r4, #8]
 801344c:	6060      	str	r0, [r4, #4]
 801344e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8013452:	f10d 0c18 	add.w	ip, sp, #24
 8013456:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801345a:	f103 0801 	add.w	r8, r3, #1
 801345e:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8013462:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013466:	f106 0708 	add.w	r7, r6, #8
 801346a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801346c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8013470:	f04f 0e00 	mov.w	lr, #0
 8013474:	e887 0003 	stmia.w	r7, {r0, r1}
 8013478:	6235      	str	r5, [r6, #32]
 801347a:	4670      	mov	r0, lr
 801347c:	f8c4 8008 	str.w	r8, [r4, #8]
 8013480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013484:	b002      	add	sp, #8
 8013486:	4770      	bx	lr
 8013488:	f04f 0e0a 	mov.w	lr, #10
 801348c:	e7d0      	b.n	8013430 <rcl_clock_add_jump_callback+0x60>
 801348e:	2128      	movs	r1, #40	@ 0x28
 8013490:	e7d7      	b.n	8013442 <rcl_clock_add_jump_callback+0x72>
 8013492:	bf00      	nop

08013494 <rcl_clock_remove_jump_callback>:
 8013494:	2800      	cmp	r0, #0
 8013496:	d057      	beq.n	8013548 <rcl_clock_remove_jump_callback+0xb4>
 8013498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801349c:	4605      	mov	r5, r0
 801349e:	3014      	adds	r0, #20
 80134a0:	4688      	mov	r8, r1
 80134a2:	4692      	mov	sl, r2
 80134a4:	f7f8 f90a 	bl	800b6bc <rcutils_allocator_is_valid>
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d03b      	beq.n	8013524 <rcl_clock_remove_jump_callback+0x90>
 80134ac:	f1b8 0f00 	cmp.w	r8, #0
 80134b0:	d038      	beq.n	8013524 <rcl_clock_remove_jump_callback+0x90>
 80134b2:	68ae      	ldr	r6, [r5, #8]
 80134b4:	b166      	cbz	r6, 80134d0 <rcl_clock_remove_jump_callback+0x3c>
 80134b6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80134ba:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80134be:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80134c2:	464c      	mov	r4, r9
 80134c4:	6823      	ldr	r3, [r4, #0]
 80134c6:	4543      	cmp	r3, r8
 80134c8:	d005      	beq.n	80134d6 <rcl_clock_remove_jump_callback+0x42>
 80134ca:	3428      	adds	r4, #40	@ 0x28
 80134cc:	42a7      	cmp	r7, r4
 80134ce:	d1f9      	bne.n	80134c4 <rcl_clock_remove_jump_callback+0x30>
 80134d0:	2001      	movs	r0, #1
 80134d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134d6:	6a23      	ldr	r3, [r4, #32]
 80134d8:	3428      	adds	r4, #40	@ 0x28
 80134da:	42bc      	cmp	r4, r7
 80134dc:	d02d      	beq.n	801353a <rcl_clock_remove_jump_callback+0xa6>
 80134de:	4553      	cmp	r3, sl
 80134e0:	d1f0      	bne.n	80134c4 <rcl_clock_remove_jump_callback+0x30>
 80134e2:	46a6      	mov	lr, r4
 80134e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134e8:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80134ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80134fc:	3428      	adds	r4, #40	@ 0x28
 80134fe:	42a7      	cmp	r7, r4
 8013500:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013504:	d1ed      	bne.n	80134e2 <rcl_clock_remove_jump_callback+0x4e>
 8013506:	3e01      	subs	r6, #1
 8013508:	60ae      	str	r6, [r5, #8]
 801350a:	b176      	cbz	r6, 801352a <rcl_clock_remove_jump_callback+0x96>
 801350c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8013510:	69eb      	ldr	r3, [r5, #28]
 8013512:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8013514:	00f1      	lsls	r1, r6, #3
 8013516:	4648      	mov	r0, r9
 8013518:	4798      	blx	r3
 801351a:	b1b8      	cbz	r0, 801354c <rcl_clock_remove_jump_callback+0xb8>
 801351c:	6068      	str	r0, [r5, #4]
 801351e:	2000      	movs	r0, #0
 8013520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013524:	200b      	movs	r0, #11
 8013526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801352a:	4648      	mov	r0, r9
 801352c:	69ab      	ldr	r3, [r5, #24]
 801352e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8013530:	4798      	blx	r3
 8013532:	606e      	str	r6, [r5, #4]
 8013534:	4630      	mov	r0, r6
 8013536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801353a:	4553      	cmp	r3, sl
 801353c:	d1c8      	bne.n	80134d0 <rcl_clock_remove_jump_callback+0x3c>
 801353e:	3e01      	subs	r6, #1
 8013540:	60ae      	str	r6, [r5, #8]
 8013542:	2e00      	cmp	r6, #0
 8013544:	d1e2      	bne.n	801350c <rcl_clock_remove_jump_callback+0x78>
 8013546:	e7f0      	b.n	801352a <rcl_clock_remove_jump_callback+0x96>
 8013548:	200b      	movs	r0, #11
 801354a:	4770      	bx	lr
 801354c:	200a      	movs	r0, #10
 801354e:	e7ea      	b.n	8013526 <rcl_clock_remove_jump_callback+0x92>

08013550 <_rcl_timer_time_jump>:
 8013550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013554:	4605      	mov	r5, r0
 8013556:	b084      	sub	sp, #16
 8013558:	4614      	mov	r4, r2
 801355a:	b131      	cbz	r1, 801356a <_rcl_timer_time_jump+0x1a>
 801355c:	7803      	ldrb	r3, [r0, #0]
 801355e:	3b02      	subs	r3, #2
 8013560:	2b01      	cmp	r3, #1
 8013562:	d93f      	bls.n	80135e4 <_rcl_timer_time_jump+0x94>
 8013564:	b004      	add	sp, #16
 8013566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801356a:	6813      	ldr	r3, [r2, #0]
 801356c:	a902      	add	r1, sp, #8
 801356e:	6818      	ldr	r0, [r3, #0]
 8013570:	f7ff ff22 	bl	80133b8 <rcl_clock_get_now>
 8013574:	2800      	cmp	r0, #0
 8013576:	d1f5      	bne.n	8013564 <_rcl_timer_time_jump+0x14>
 8013578:	6820      	ldr	r0, [r4, #0]
 801357a:	2105      	movs	r1, #5
 801357c:	3020      	adds	r0, #32
 801357e:	f001 fdf7 	bl	8015170 <__atomic_load_8>
 8013582:	6823      	ldr	r3, [r4, #0]
 8013584:	4681      	mov	r9, r0
 8013586:	4688      	mov	r8, r1
 8013588:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801358c:	2105      	movs	r1, #5
 801358e:	f001 fdef 	bl	8015170 <__atomic_load_8>
 8013592:	4607      	mov	r7, r0
 8013594:	6820      	ldr	r0, [r4, #0]
 8013596:	460e      	mov	r6, r1
 8013598:	3018      	adds	r0, #24
 801359a:	2105      	movs	r1, #5
 801359c:	f001 fde8 	bl	8015170 <__atomic_load_8>
 80135a0:	782b      	ldrb	r3, [r5, #0]
 80135a2:	9a02      	ldr	r2, [sp, #8]
 80135a4:	3b02      	subs	r3, #2
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	460d      	mov	r5, r1
 80135aa:	9b03      	ldr	r3, [sp, #12]
 80135ac:	4682      	mov	sl, r0
 80135ae:	d937      	bls.n	8013620 <_rcl_timer_time_jump+0xd0>
 80135b0:	42ba      	cmp	r2, r7
 80135b2:	eb73 0106 	sbcs.w	r1, r3, r6
 80135b6:	da5f      	bge.n	8013678 <_rcl_timer_time_jump+0x128>
 80135b8:	454a      	cmp	r2, r9
 80135ba:	eb73 0108 	sbcs.w	r1, r3, r8
 80135be:	dad1      	bge.n	8013564 <_rcl_timer_time_jump+0x14>
 80135c0:	6820      	ldr	r0, [r4, #0]
 80135c2:	eb1a 0202 	adds.w	r2, sl, r2
 80135c6:	eb43 0305 	adc.w	r3, r3, r5
 80135ca:	2505      	movs	r5, #5
 80135cc:	3028      	adds	r0, #40	@ 0x28
 80135ce:	9500      	str	r5, [sp, #0]
 80135d0:	f001 fe04 	bl	80151dc <__atomic_store_8>
 80135d4:	6820      	ldr	r0, [r4, #0]
 80135d6:	9500      	str	r5, [sp, #0]
 80135d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80135dc:	3020      	adds	r0, #32
 80135de:	f001 fdfd 	bl	80151dc <__atomic_store_8>
 80135e2:	e7bf      	b.n	8013564 <_rcl_timer_time_jump+0x14>
 80135e4:	6813      	ldr	r3, [r2, #0]
 80135e6:	a902      	add	r1, sp, #8
 80135e8:	6818      	ldr	r0, [r3, #0]
 80135ea:	f7ff fee5 	bl	80133b8 <rcl_clock_get_now>
 80135ee:	2800      	cmp	r0, #0
 80135f0:	d1b8      	bne.n	8013564 <_rcl_timer_time_jump+0x14>
 80135f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80135f6:	4313      	orrs	r3, r2
 80135f8:	d0b4      	beq.n	8013564 <_rcl_timer_time_jump+0x14>
 80135fa:	6820      	ldr	r0, [r4, #0]
 80135fc:	2105      	movs	r1, #5
 80135fe:	3028      	adds	r0, #40	@ 0x28
 8013600:	f001 fdb6 	bl	8015170 <__atomic_load_8>
 8013604:	9d02      	ldr	r5, [sp, #8]
 8013606:	9b03      	ldr	r3, [sp, #12]
 8013608:	4602      	mov	r2, r0
 801360a:	6820      	ldr	r0, [r4, #0]
 801360c:	1b52      	subs	r2, r2, r5
 801360e:	f04f 0405 	mov.w	r4, #5
 8013612:	9400      	str	r4, [sp, #0]
 8013614:	eb61 0303 	sbc.w	r3, r1, r3
 8013618:	3030      	adds	r0, #48	@ 0x30
 801361a:	f001 fddf 	bl	80151dc <__atomic_store_8>
 801361e:	e7a1      	b.n	8013564 <_rcl_timer_time_jump+0x14>
 8013620:	4313      	orrs	r3, r2
 8013622:	d09f      	beq.n	8013564 <_rcl_timer_time_jump+0x14>
 8013624:	6820      	ldr	r0, [r4, #0]
 8013626:	f04f 0805 	mov.w	r8, #5
 801362a:	2300      	movs	r3, #0
 801362c:	f8cd 8000 	str.w	r8, [sp]
 8013630:	3030      	adds	r0, #48	@ 0x30
 8013632:	2200      	movs	r2, #0
 8013634:	f001 fe08 	bl	8015248 <__atomic_exchange_8>
 8013638:	ea51 0300 	orrs.w	r3, r1, r0
 801363c:	4606      	mov	r6, r0
 801363e:	460f      	mov	r7, r1
 8013640:	d090      	beq.n	8013564 <_rcl_timer_time_jump+0x14>
 8013642:	9a02      	ldr	r2, [sp, #8]
 8013644:	9b03      	ldr	r3, [sp, #12]
 8013646:	f8cd 8000 	str.w	r8, [sp]
 801364a:	1a12      	subs	r2, r2, r0
 801364c:	6820      	ldr	r0, [r4, #0]
 801364e:	eb63 0301 	sbc.w	r3, r3, r1
 8013652:	eb12 020a 	adds.w	r2, r2, sl
 8013656:	eb43 0305 	adc.w	r3, r3, r5
 801365a:	3028      	adds	r0, #40	@ 0x28
 801365c:	f001 fdbe 	bl	80151dc <__atomic_store_8>
 8013660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013664:	f8cd 8000 	str.w	r8, [sp]
 8013668:	6820      	ldr	r0, [r4, #0]
 801366a:	1b92      	subs	r2, r2, r6
 801366c:	eb63 0307 	sbc.w	r3, r3, r7
 8013670:	3020      	adds	r0, #32
 8013672:	f001 fdb3 	bl	80151dc <__atomic_store_8>
 8013676:	e775      	b.n	8013564 <_rcl_timer_time_jump+0x14>
 8013678:	6820      	ldr	r0, [r4, #0]
 801367a:	3008      	adds	r0, #8
 801367c:	f004 f8a4 	bl	80177c8 <rcl_trigger_guard_condition>
 8013680:	e770      	b.n	8013564 <_rcl_timer_time_jump+0x14>
 8013682:	bf00      	nop

08013684 <rcl_get_zero_initialized_timer>:
 8013684:	4b01      	ldr	r3, [pc, #4]	@ (801368c <rcl_get_zero_initialized_timer+0x8>)
 8013686:	6818      	ldr	r0, [r3, #0]
 8013688:	4770      	bx	lr
 801368a:	bf00      	nop
 801368c:	0801a1f8 	.word	0x0801a1f8

08013690 <rcl_timer_init>:
 8013690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013694:	b0aa      	sub	sp, #168	@ 0xa8
 8013696:	4604      	mov	r4, r0
 8013698:	a835      	add	r0, sp, #212	@ 0xd4
 801369a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 801369e:	460d      	mov	r5, r1
 80136a0:	4692      	mov	sl, r2
 80136a2:	f7f8 f80b 	bl	800b6bc <rcutils_allocator_is_valid>
 80136a6:	2800      	cmp	r0, #0
 80136a8:	d064      	beq.n	8013774 <rcl_timer_init+0xe4>
 80136aa:	2c00      	cmp	r4, #0
 80136ac:	d062      	beq.n	8013774 <rcl_timer_init+0xe4>
 80136ae:	2d00      	cmp	r5, #0
 80136b0:	d060      	beq.n	8013774 <rcl_timer_init+0xe4>
 80136b2:	2f00      	cmp	r7, #0
 80136b4:	db5e      	blt.n	8013774 <rcl_timer_init+0xe4>
 80136b6:	6823      	ldr	r3, [r4, #0]
 80136b8:	b123      	cbz	r3, 80136c4 <rcl_timer_init+0x34>
 80136ba:	2664      	movs	r6, #100	@ 0x64
 80136bc:	4630      	mov	r0, r6
 80136be:	b02a      	add	sp, #168	@ 0xa8
 80136c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136c4:	a908      	add	r1, sp, #32
 80136c6:	4628      	mov	r0, r5
 80136c8:	f7ff fe76 	bl	80133b8 <rcl_clock_get_now>
 80136cc:	4606      	mov	r6, r0
 80136ce:	2800      	cmp	r0, #0
 80136d0:	d1f4      	bne.n	80136bc <rcl_timer_init+0x2c>
 80136d2:	ae06      	add	r6, sp, #24
 80136d4:	4630      	mov	r0, r6
 80136d6:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80136da:	f003 ff7d 	bl	80175d8 <rcl_get_zero_initialized_guard_condition>
 80136de:	e896 0003 	ldmia.w	r6, {r0, r1}
 80136e2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80136e6:	ae0b      	add	r6, sp, #44	@ 0x2c
 80136e8:	e889 0003 	stmia.w	r9, {r0, r1}
 80136ec:	4630      	mov	r0, r6
 80136ee:	f004 f84f 	bl	8017790 <rcl_guard_condition_get_default_options>
 80136f2:	ab0d      	add	r3, sp, #52	@ 0x34
 80136f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80136f8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80136fc:	4651      	mov	r1, sl
 80136fe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013702:	4648      	mov	r0, r9
 8013704:	f003 ff72 	bl	80175ec <rcl_guard_condition_init>
 8013708:	4606      	mov	r6, r0
 801370a:	2800      	cmp	r0, #0
 801370c:	d1d6      	bne.n	80136bc <rcl_timer_init+0x2c>
 801370e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	2b01      	cmp	r3, #1
 8013714:	d033      	beq.n	801377e <rcl_timer_init+0xee>
 8013716:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8013718:	911a      	str	r1, [sp, #104]	@ 0x68
 801371a:	4642      	mov	r2, r8
 801371c:	463b      	mov	r3, r7
 801371e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8013722:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013726:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80137d8 <rcl_timer_init+0x148>
 801372a:	eb12 0008 	adds.w	r0, r2, r8
 801372e:	eb47 0103 	adc.w	r1, r7, r3
 8013732:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8013736:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801373a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801373e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8013742:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013746:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801374a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801374e:	f8de 3000 	ldr.w	r3, [lr]
 8013752:	f8cc 3000 	str.w	r3, [ip]
 8013756:	f04f 0a00 	mov.w	sl, #0
 801375a:	4619      	mov	r1, r3
 801375c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8013760:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8013762:	2050      	movs	r0, #80	@ 0x50
 8013764:	4798      	blx	r3
 8013766:	6020      	str	r0, [r4, #0]
 8013768:	b358      	cbz	r0, 80137c2 <rcl_timer_init+0x132>
 801376a:	2250      	movs	r2, #80	@ 0x50
 801376c:	a916      	add	r1, sp, #88	@ 0x58
 801376e:	f004 ff5c 	bl	801862a <memcpy>
 8013772:	e7a3      	b.n	80136bc <rcl_timer_init+0x2c>
 8013774:	260b      	movs	r6, #11
 8013776:	4630      	mov	r0, r6
 8013778:	b02a      	add	sp, #168	@ 0xa8
 801377a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801377e:	2001      	movs	r0, #1
 8013780:	2100      	movs	r1, #0
 8013782:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8013786:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801378a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801378e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8013792:	4a13      	ldr	r2, [pc, #76]	@ (80137e0 <rcl_timer_init+0x150>)
 8013794:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8013798:	9405      	str	r4, [sp, #20]
 801379a:	9204      	str	r2, [sp, #16]
 801379c:	ab12      	add	r3, sp, #72	@ 0x48
 801379e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80137a0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80137a4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80137a8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80137ac:	4628      	mov	r0, r5
 80137ae:	f7ff fe0f 	bl	80133d0 <rcl_clock_add_jump_callback>
 80137b2:	4682      	mov	sl, r0
 80137b4:	2800      	cmp	r0, #0
 80137b6:	d0ae      	beq.n	8013716 <rcl_timer_init+0x86>
 80137b8:	4648      	mov	r0, r9
 80137ba:	f003 ffc3 	bl	8017744 <rcl_guard_condition_fini>
 80137be:	4656      	mov	r6, sl
 80137c0:	e77c      	b.n	80136bc <rcl_timer_init+0x2c>
 80137c2:	4648      	mov	r0, r9
 80137c4:	f003 ffbe 	bl	8017744 <rcl_guard_condition_fini>
 80137c8:	4905      	ldr	r1, [pc, #20]	@ (80137e0 <rcl_timer_init+0x150>)
 80137ca:	4622      	mov	r2, r4
 80137cc:	4628      	mov	r0, r5
 80137ce:	f7ff fe61 	bl	8013494 <rcl_clock_remove_jump_callback>
 80137d2:	260a      	movs	r6, #10
 80137d4:	e772      	b.n	80136bc <rcl_timer_init+0x2c>
 80137d6:	bf00      	nop
	...
 80137e0:	08013551 	.word	0x08013551

080137e4 <rcl_timer_call>:
 80137e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e8:	b087      	sub	sp, #28
 80137ea:	2800      	cmp	r0, #0
 80137ec:	d06d      	beq.n	80138ca <rcl_timer_call+0xe6>
 80137ee:	6803      	ldr	r3, [r0, #0]
 80137f0:	4604      	mov	r4, r0
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d063      	beq.n	80138be <rcl_timer_call+0xda>
 80137f6:	f3bf 8f5b 	dmb	ish
 80137fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80137fe:	f3bf 8f5b 	dmb	ish
 8013802:	2b00      	cmp	r3, #0
 8013804:	d150      	bne.n	80138a8 <rcl_timer_call+0xc4>
 8013806:	6803      	ldr	r3, [r0, #0]
 8013808:	a904      	add	r1, sp, #16
 801380a:	6818      	ldr	r0, [r3, #0]
 801380c:	f7ff fdd4 	bl	80133b8 <rcl_clock_get_now>
 8013810:	4605      	mov	r5, r0
 8013812:	2800      	cmp	r0, #0
 8013814:	d14a      	bne.n	80138ac <rcl_timer_call+0xc8>
 8013816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801381a:	2b00      	cmp	r3, #0
 801381c:	db4a      	blt.n	80138b4 <rcl_timer_call+0xd0>
 801381e:	6820      	ldr	r0, [r4, #0]
 8013820:	f04f 0a05 	mov.w	sl, #5
 8013824:	f8cd a000 	str.w	sl, [sp]
 8013828:	3020      	adds	r0, #32
 801382a:	f001 fd0d 	bl	8015248 <__atomic_exchange_8>
 801382e:	6823      	ldr	r3, [r4, #0]
 8013830:	f3bf 8f5b 	dmb	ish
 8013834:	4680      	mov	r8, r0
 8013836:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801383a:	f3bf 8f5b 	dmb	ish
 801383e:	6820      	ldr	r0, [r4, #0]
 8013840:	4689      	mov	r9, r1
 8013842:	3028      	adds	r0, #40	@ 0x28
 8013844:	4651      	mov	r1, sl
 8013846:	f001 fc93 	bl	8015170 <__atomic_load_8>
 801384a:	4606      	mov	r6, r0
 801384c:	6820      	ldr	r0, [r4, #0]
 801384e:	460f      	mov	r7, r1
 8013850:	3018      	adds	r0, #24
 8013852:	4651      	mov	r1, sl
 8013854:	f001 fc8c 	bl	8015170 <__atomic_load_8>
 8013858:	1836      	adds	r6, r6, r0
 801385a:	4602      	mov	r2, r0
 801385c:	4682      	mov	sl, r0
 801385e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8013862:	eb47 0701 	adc.w	r7, r7, r1
 8013866:	4286      	cmp	r6, r0
 8013868:	460b      	mov	r3, r1
 801386a:	eb77 010c 	sbcs.w	r1, r7, ip
 801386e:	da04      	bge.n	801387a <rcl_timer_call+0x96>
 8013870:	ea53 0102 	orrs.w	r1, r3, r2
 8013874:	d12e      	bne.n	80138d4 <rcl_timer_call+0xf0>
 8013876:	4606      	mov	r6, r0
 8013878:	4667      	mov	r7, ip
 801387a:	6820      	ldr	r0, [r4, #0]
 801387c:	2105      	movs	r1, #5
 801387e:	4632      	mov	r2, r6
 8013880:	463b      	mov	r3, r7
 8013882:	3028      	adds	r0, #40	@ 0x28
 8013884:	9100      	str	r1, [sp, #0]
 8013886:	f001 fca9 	bl	80151dc <__atomic_store_8>
 801388a:	f1bb 0f00 	cmp.w	fp, #0
 801388e:	d00d      	beq.n	80138ac <rcl_timer_call+0xc8>
 8013890:	9a04      	ldr	r2, [sp, #16]
 8013892:	9b05      	ldr	r3, [sp, #20]
 8013894:	ebb2 0208 	subs.w	r2, r2, r8
 8013898:	4620      	mov	r0, r4
 801389a:	eb63 0309 	sbc.w	r3, r3, r9
 801389e:	47d8      	blx	fp
 80138a0:	4628      	mov	r0, r5
 80138a2:	b007      	add	sp, #28
 80138a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a8:	f240 3521 	movw	r5, #801	@ 0x321
 80138ac:	4628      	mov	r0, r5
 80138ae:	b007      	add	sp, #28
 80138b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b4:	2501      	movs	r5, #1
 80138b6:	4628      	mov	r0, r5
 80138b8:	b007      	add	sp, #28
 80138ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138be:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80138c2:	4628      	mov	r0, r5
 80138c4:	b007      	add	sp, #28
 80138c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ca:	250b      	movs	r5, #11
 80138cc:	4628      	mov	r0, r5
 80138ce:	b007      	add	sp, #28
 80138d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138d4:	1b80      	subs	r0, r0, r6
 80138d6:	eb6c 0107 	sbc.w	r1, ip, r7
 80138da:	3801      	subs	r0, #1
 80138dc:	f161 0100 	sbc.w	r1, r1, #0
 80138e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80138e4:	f7ed f970 	bl	8000bc8 <__aeabi_ldivmod>
 80138e8:	9b02      	ldr	r3, [sp, #8]
 80138ea:	3001      	adds	r0, #1
 80138ec:	f141 0100 	adc.w	r1, r1, #0
 80138f0:	fb00 f303 	mul.w	r3, r0, r3
 80138f4:	fb01 330a 	mla	r3, r1, sl, r3
 80138f8:	fba0 0a0a 	umull	r0, sl, r0, sl
 80138fc:	1986      	adds	r6, r0, r6
 80138fe:	4453      	add	r3, sl
 8013900:	eb43 0707 	adc.w	r7, r3, r7
 8013904:	e7b9      	b.n	801387a <rcl_timer_call+0x96>
 8013906:	bf00      	nop

08013908 <rcl_timer_is_ready>:
 8013908:	b570      	push	{r4, r5, r6, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	b378      	cbz	r0, 801396e <rcl_timer_is_ready+0x66>
 801390e:	6803      	ldr	r3, [r0, #0]
 8013910:	4604      	mov	r4, r0
 8013912:	b383      	cbz	r3, 8013976 <rcl_timer_is_ready+0x6e>
 8013914:	460d      	mov	r5, r1
 8013916:	b351      	cbz	r1, 801396e <rcl_timer_is_ready+0x66>
 8013918:	f3bf 8f5b 	dmb	ish
 801391c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013920:	f3bf 8f5b 	dmb	ish
 8013924:	b953      	cbnz	r3, 801393c <rcl_timer_is_ready+0x34>
 8013926:	6803      	ldr	r3, [r0, #0]
 8013928:	4669      	mov	r1, sp
 801392a:	6818      	ldr	r0, [r3, #0]
 801392c:	f7ff fd44 	bl	80133b8 <rcl_clock_get_now>
 8013930:	4606      	mov	r6, r0
 8013932:	b140      	cbz	r0, 8013946 <rcl_timer_is_ready+0x3e>
 8013934:	f240 3321 	movw	r3, #801	@ 0x321
 8013938:	4298      	cmp	r0, r3
 801393a:	d101      	bne.n	8013940 <rcl_timer_is_ready+0x38>
 801393c:	2600      	movs	r6, #0
 801393e:	702e      	strb	r6, [r5, #0]
 8013940:	4630      	mov	r0, r6
 8013942:	b002      	add	sp, #8
 8013944:	bd70      	pop	{r4, r5, r6, pc}
 8013946:	6820      	ldr	r0, [r4, #0]
 8013948:	2105      	movs	r1, #5
 801394a:	3028      	adds	r0, #40	@ 0x28
 801394c:	f001 fc10 	bl	8015170 <__atomic_load_8>
 8013950:	9b00      	ldr	r3, [sp, #0]
 8013952:	1ac0      	subs	r0, r0, r3
 8013954:	9b01      	ldr	r3, [sp, #4]
 8013956:	eb61 0103 	sbc.w	r1, r1, r3
 801395a:	2801      	cmp	r0, #1
 801395c:	f171 0300 	sbcs.w	r3, r1, #0
 8013960:	bfb4      	ite	lt
 8013962:	2301      	movlt	r3, #1
 8013964:	2300      	movge	r3, #0
 8013966:	4630      	mov	r0, r6
 8013968:	702b      	strb	r3, [r5, #0]
 801396a:	b002      	add	sp, #8
 801396c:	bd70      	pop	{r4, r5, r6, pc}
 801396e:	260b      	movs	r6, #11
 8013970:	4630      	mov	r0, r6
 8013972:	b002      	add	sp, #8
 8013974:	bd70      	pop	{r4, r5, r6, pc}
 8013976:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801397a:	e7e1      	b.n	8013940 <rcl_timer_is_ready+0x38>

0801397c <rcl_timer_get_time_until_next_call>:
 801397c:	b570      	push	{r4, r5, r6, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	b330      	cbz	r0, 80139d0 <rcl_timer_get_time_until_next_call+0x54>
 8013982:	6803      	ldr	r3, [r0, #0]
 8013984:	4604      	mov	r4, r0
 8013986:	b33b      	cbz	r3, 80139d8 <rcl_timer_get_time_until_next_call+0x5c>
 8013988:	460d      	mov	r5, r1
 801398a:	b309      	cbz	r1, 80139d0 <rcl_timer_get_time_until_next_call+0x54>
 801398c:	f3bf 8f5b 	dmb	ish
 8013990:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013994:	f3bf 8f5b 	dmb	ish
 8013998:	b9ab      	cbnz	r3, 80139c6 <rcl_timer_get_time_until_next_call+0x4a>
 801399a:	6803      	ldr	r3, [r0, #0]
 801399c:	4669      	mov	r1, sp
 801399e:	6818      	ldr	r0, [r3, #0]
 80139a0:	f7ff fd0a 	bl	80133b8 <rcl_clock_get_now>
 80139a4:	4606      	mov	r6, r0
 80139a6:	b958      	cbnz	r0, 80139c0 <rcl_timer_get_time_until_next_call+0x44>
 80139a8:	6820      	ldr	r0, [r4, #0]
 80139aa:	2105      	movs	r1, #5
 80139ac:	3028      	adds	r0, #40	@ 0x28
 80139ae:	f001 fbdf 	bl	8015170 <__atomic_load_8>
 80139b2:	9b00      	ldr	r3, [sp, #0]
 80139b4:	1ac0      	subs	r0, r0, r3
 80139b6:	9b01      	ldr	r3, [sp, #4]
 80139b8:	6028      	str	r0, [r5, #0]
 80139ba:	eb61 0103 	sbc.w	r1, r1, r3
 80139be:	6069      	str	r1, [r5, #4]
 80139c0:	4630      	mov	r0, r6
 80139c2:	b002      	add	sp, #8
 80139c4:	bd70      	pop	{r4, r5, r6, pc}
 80139c6:	f240 3621 	movw	r6, #801	@ 0x321
 80139ca:	4630      	mov	r0, r6
 80139cc:	b002      	add	sp, #8
 80139ce:	bd70      	pop	{r4, r5, r6, pc}
 80139d0:	260b      	movs	r6, #11
 80139d2:	4630      	mov	r0, r6
 80139d4:	b002      	add	sp, #8
 80139d6:	bd70      	pop	{r4, r5, r6, pc}
 80139d8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80139dc:	e7f0      	b.n	80139c0 <rcl_timer_get_time_until_next_call+0x44>
 80139de:	bf00      	nop

080139e0 <rcl_timer_get_guard_condition>:
 80139e0:	b130      	cbz	r0, 80139f0 <rcl_timer_get_guard_condition+0x10>
 80139e2:	6800      	ldr	r0, [r0, #0]
 80139e4:	b120      	cbz	r0, 80139f0 <rcl_timer_get_guard_condition+0x10>
 80139e6:	68c3      	ldr	r3, [r0, #12]
 80139e8:	b10b      	cbz	r3, 80139ee <rcl_timer_get_guard_condition+0xe>
 80139ea:	3008      	adds	r0, #8
 80139ec:	4770      	bx	lr
 80139ee:	4618      	mov	r0, r3
 80139f0:	4770      	bx	lr
 80139f2:	bf00      	nop

080139f4 <rcl_validate_enclave_name_with_size>:
 80139f4:	b378      	cbz	r0, 8013a56 <rcl_validate_enclave_name_with_size+0x62>
 80139f6:	b570      	push	{r4, r5, r6, lr}
 80139f8:	4615      	mov	r5, r2
 80139fa:	b0c2      	sub	sp, #264	@ 0x108
 80139fc:	b302      	cbz	r2, 8013a40 <rcl_validate_enclave_name_with_size+0x4c>
 80139fe:	461e      	mov	r6, r3
 8013a00:	466a      	mov	r2, sp
 8013a02:	ab01      	add	r3, sp, #4
 8013a04:	460c      	mov	r4, r1
 8013a06:	f002 f815 	bl	8015a34 <rmw_validate_namespace_with_size>
 8013a0a:	4684      	mov	ip, r0
 8013a0c:	b9e8      	cbnz	r0, 8013a4a <rcl_validate_enclave_name_with_size+0x56>
 8013a0e:	9b00      	ldr	r3, [sp, #0]
 8013a10:	b923      	cbnz	r3, 8013a1c <rcl_validate_enclave_name_with_size+0x28>
 8013a12:	2300      	movs	r3, #0
 8013a14:	602b      	str	r3, [r5, #0]
 8013a16:	4660      	mov	r0, ip
 8013a18:	b042      	add	sp, #264	@ 0x108
 8013a1a:	bd70      	pop	{r4, r5, r6, pc}
 8013a1c:	2b07      	cmp	r3, #7
 8013a1e:	d007      	beq.n	8013a30 <rcl_validate_enclave_name_with_size+0x3c>
 8013a20:	1e5a      	subs	r2, r3, #1
 8013a22:	2a05      	cmp	r2, #5
 8013a24:	d833      	bhi.n	8013a8e <rcl_validate_enclave_name_with_size+0x9a>
 8013a26:	e8df f002 	tbb	[pc, r2]
 8013a2a:	2c2f      	.short	0x2c2f
 8013a2c:	1a232629 	.word	0x1a232629
 8013a30:	2cff      	cmp	r4, #255	@ 0xff
 8013a32:	d9ee      	bls.n	8013a12 <rcl_validate_enclave_name_with_size+0x1e>
 8013a34:	602b      	str	r3, [r5, #0]
 8013a36:	2e00      	cmp	r6, #0
 8013a38:	d0ed      	beq.n	8013a16 <rcl_validate_enclave_name_with_size+0x22>
 8013a3a:	23fe      	movs	r3, #254	@ 0xfe
 8013a3c:	6033      	str	r3, [r6, #0]
 8013a3e:	e7ea      	b.n	8013a16 <rcl_validate_enclave_name_with_size+0x22>
 8013a40:	f04f 0c0b 	mov.w	ip, #11
 8013a44:	4660      	mov	r0, ip
 8013a46:	b042      	add	sp, #264	@ 0x108
 8013a48:	bd70      	pop	{r4, r5, r6, pc}
 8013a4a:	f7fe fe63 	bl	8012714 <rcl_convert_rmw_ret_to_rcl_ret>
 8013a4e:	4684      	mov	ip, r0
 8013a50:	4660      	mov	r0, ip
 8013a52:	b042      	add	sp, #264	@ 0x108
 8013a54:	bd70      	pop	{r4, r5, r6, pc}
 8013a56:	f04f 0c0b 	mov.w	ip, #11
 8013a5a:	4660      	mov	r0, ip
 8013a5c:	4770      	bx	lr
 8013a5e:	2306      	movs	r3, #6
 8013a60:	602b      	str	r3, [r5, #0]
 8013a62:	2e00      	cmp	r6, #0
 8013a64:	d0d7      	beq.n	8013a16 <rcl_validate_enclave_name_with_size+0x22>
 8013a66:	9b01      	ldr	r3, [sp, #4]
 8013a68:	6033      	str	r3, [r6, #0]
 8013a6a:	4660      	mov	r0, ip
 8013a6c:	b042      	add	sp, #264	@ 0x108
 8013a6e:	bd70      	pop	{r4, r5, r6, pc}
 8013a70:	2305      	movs	r3, #5
 8013a72:	602b      	str	r3, [r5, #0]
 8013a74:	e7f5      	b.n	8013a62 <rcl_validate_enclave_name_with_size+0x6e>
 8013a76:	2304      	movs	r3, #4
 8013a78:	602b      	str	r3, [r5, #0]
 8013a7a:	e7f2      	b.n	8013a62 <rcl_validate_enclave_name_with_size+0x6e>
 8013a7c:	2303      	movs	r3, #3
 8013a7e:	602b      	str	r3, [r5, #0]
 8013a80:	e7ef      	b.n	8013a62 <rcl_validate_enclave_name_with_size+0x6e>
 8013a82:	2302      	movs	r3, #2
 8013a84:	602b      	str	r3, [r5, #0]
 8013a86:	e7ec      	b.n	8013a62 <rcl_validate_enclave_name_with_size+0x6e>
 8013a88:	2301      	movs	r3, #1
 8013a8a:	602b      	str	r3, [r5, #0]
 8013a8c:	e7e9      	b.n	8013a62 <rcl_validate_enclave_name_with_size+0x6e>
 8013a8e:	4a04      	ldr	r2, [pc, #16]	@ (8013aa0 <rcl_validate_enclave_name_with_size+0xac>)
 8013a90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013a94:	a802      	add	r0, sp, #8
 8013a96:	f001 fd25 	bl	80154e4 <rcutils_snprintf>
 8013a9a:	f04f 0c01 	mov.w	ip, #1
 8013a9e:	e7ba      	b.n	8013a16 <rcl_validate_enclave_name_with_size+0x22>
 8013aa0:	0801a1fc 	.word	0x0801a1fc

08013aa4 <rcl_validate_enclave_name>:
 8013aa4:	b168      	cbz	r0, 8013ac2 <rcl_validate_enclave_name+0x1e>
 8013aa6:	b570      	push	{r4, r5, r6, lr}
 8013aa8:	460d      	mov	r5, r1
 8013aaa:	4616      	mov	r6, r2
 8013aac:	4604      	mov	r4, r0
 8013aae:	f7ec fbc1 	bl	8000234 <strlen>
 8013ab2:	4633      	mov	r3, r6
 8013ab4:	4601      	mov	r1, r0
 8013ab6:	462a      	mov	r2, r5
 8013ab8:	4620      	mov	r0, r4
 8013aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013abe:	f7ff bf99 	b.w	80139f4 <rcl_validate_enclave_name_with_size>
 8013ac2:	200b      	movs	r0, #11
 8013ac4:	4770      	bx	lr
 8013ac6:	bf00      	nop

08013ac8 <rcl_get_zero_initialized_wait_set>:
 8013ac8:	b510      	push	{r4, lr}
 8013aca:	4c08      	ldr	r4, [pc, #32]	@ (8013aec <rcl_get_zero_initialized_wait_set+0x24>)
 8013acc:	4686      	mov	lr, r0
 8013ace:	4684      	mov	ip, r0
 8013ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ad2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ade:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ae2:	6823      	ldr	r3, [r4, #0]
 8013ae4:	f8cc 3000 	str.w	r3, [ip]
 8013ae8:	4670      	mov	r0, lr
 8013aea:	bd10      	pop	{r4, pc}
 8013aec:	0801a25c 	.word	0x0801a25c

08013af0 <rcl_wait_set_is_valid>:
 8013af0:	b118      	cbz	r0, 8013afa <rcl_wait_set_is_valid+0xa>
 8013af2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013af4:	3800      	subs	r0, #0
 8013af6:	bf18      	it	ne
 8013af8:	2001      	movne	r0, #1
 8013afa:	4770      	bx	lr

08013afc <rcl_wait_set_fini>:
 8013afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b00:	b082      	sub	sp, #8
 8013b02:	2800      	cmp	r0, #0
 8013b04:	f000 8095 	beq.w	8013c32 <rcl_wait_set_fini+0x136>
 8013b08:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	2e00      	cmp	r6, #0
 8013b0e:	f000 808c 	beq.w	8013c2a <rcl_wait_set_fini+0x12e>
 8013b12:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8013b14:	f002 fd48 	bl	80165a8 <rmw_destroy_wait_set>
 8013b18:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013b1a:	1e06      	subs	r6, r0, #0
 8013b1c:	bf18      	it	ne
 8013b1e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8013b22:	2d00      	cmp	r5, #0
 8013b24:	f000 8081 	beq.w	8013c2a <rcl_wait_set_fini+0x12e>
 8013b28:	6820      	ldr	r0, [r4, #0]
 8013b2a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013b2e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013b30:	2700      	movs	r7, #0
 8013b32:	6067      	str	r7, [r4, #4]
 8013b34:	602f      	str	r7, [r5, #0]
 8013b36:	b120      	cbz	r0, 8013b42 <rcl_wait_set_fini+0x46>
 8013b38:	9101      	str	r1, [sp, #4]
 8013b3a:	47c0      	blx	r8
 8013b3c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013b3e:	9901      	ldr	r1, [sp, #4]
 8013b40:	6027      	str	r7, [r4, #0]
 8013b42:	68a8      	ldr	r0, [r5, #8]
 8013b44:	b120      	cbz	r0, 8013b50 <rcl_wait_set_fini+0x54>
 8013b46:	47c0      	blx	r8
 8013b48:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013b50:	68a0      	ldr	r0, [r4, #8]
 8013b52:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013b54:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013b56:	f04f 0800 	mov.w	r8, #0
 8013b5a:	f8c4 800c 	str.w	r8, [r4, #12]
 8013b5e:	f8c5 800c 	str.w	r8, [r5, #12]
 8013b62:	b128      	cbz	r0, 8013b70 <rcl_wait_set_fini+0x74>
 8013b64:	47b8      	blx	r7
 8013b66:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013b68:	f8c4 8008 	str.w	r8, [r4, #8]
 8013b6c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013b6e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013b70:	6968      	ldr	r0, [r5, #20]
 8013b72:	f04f 0800 	mov.w	r8, #0
 8013b76:	f8c5 8010 	str.w	r8, [r5, #16]
 8013b7a:	b128      	cbz	r0, 8013b88 <rcl_wait_set_fini+0x8c>
 8013b7c:	47b8      	blx	r7
 8013b7e:	f8c5 8014 	str.w	r8, [r5, #20]
 8013b82:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013b84:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013b86:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013b88:	6920      	ldr	r0, [r4, #16]
 8013b8a:	f04f 0800 	mov.w	r8, #0
 8013b8e:	f8c4 8014 	str.w	r8, [r4, #20]
 8013b92:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8013b96:	b128      	cbz	r0, 8013ba4 <rcl_wait_set_fini+0xa8>
 8013b98:	47b8      	blx	r7
 8013b9a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013b9c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013ba0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013ba2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013ba4:	69a0      	ldr	r0, [r4, #24]
 8013ba6:	f04f 0800 	mov.w	r8, #0
 8013baa:	f8c4 801c 	str.w	r8, [r4, #28]
 8013bae:	f8c5 8018 	str.w	r8, [r5, #24]
 8013bb2:	b128      	cbz	r0, 8013bc0 <rcl_wait_set_fini+0xc4>
 8013bb4:	9101      	str	r1, [sp, #4]
 8013bb6:	47b8      	blx	r7
 8013bb8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013bba:	9901      	ldr	r1, [sp, #4]
 8013bbc:	f8c4 8018 	str.w	r8, [r4, #24]
 8013bc0:	6a28      	ldr	r0, [r5, #32]
 8013bc2:	b120      	cbz	r0, 8013bce <rcl_wait_set_fini+0xd2>
 8013bc4:	47b8      	blx	r7
 8013bc6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013bc8:	2300      	movs	r3, #0
 8013bca:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8013bce:	6a20      	ldr	r0, [r4, #32]
 8013bd0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013bd4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013bd6:	2700      	movs	r7, #0
 8013bd8:	6267      	str	r7, [r4, #36]	@ 0x24
 8013bda:	626f      	str	r7, [r5, #36]	@ 0x24
 8013bdc:	b120      	cbz	r0, 8013be8 <rcl_wait_set_fini+0xec>
 8013bde:	9101      	str	r1, [sp, #4]
 8013be0:	47c0      	blx	r8
 8013be2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013be4:	9901      	ldr	r1, [sp, #4]
 8013be6:	6227      	str	r7, [r4, #32]
 8013be8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8013bea:	b120      	cbz	r0, 8013bf6 <rcl_wait_set_fini+0xfa>
 8013bec:	47c0      	blx	r8
 8013bee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013bf6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013bf8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013bfc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013bfe:	2700      	movs	r7, #0
 8013c00:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8013c02:	632f      	str	r7, [r5, #48]	@ 0x30
 8013c04:	b120      	cbz	r0, 8013c10 <rcl_wait_set_fini+0x114>
 8013c06:	9101      	str	r1, [sp, #4]
 8013c08:	47c0      	blx	r8
 8013c0a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013c0c:	9901      	ldr	r1, [sp, #4]
 8013c0e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8013c10:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8013c12:	b120      	cbz	r0, 8013c1e <rcl_wait_set_fini+0x122>
 8013c14:	47c0      	blx	r8
 8013c16:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013c18:	2300      	movs	r3, #0
 8013c1a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8013c1e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013c20:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013c22:	4628      	mov	r0, r5
 8013c24:	4798      	blx	r3
 8013c26:	2300      	movs	r3, #0
 8013c28:	6323      	str	r3, [r4, #48]	@ 0x30
 8013c2a:	4630      	mov	r0, r6
 8013c2c:	b002      	add	sp, #8
 8013c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c32:	260b      	movs	r6, #11
 8013c34:	4630      	mov	r0, r6
 8013c36:	b002      	add	sp, #8
 8013c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c3c <rcl_wait_set_add_subscription>:
 8013c3c:	b318      	cbz	r0, 8013c86 <rcl_wait_set_add_subscription+0x4a>
 8013c3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013c40:	b570      	push	{r4, r5, r6, lr}
 8013c42:	4604      	mov	r4, r0
 8013c44:	b30b      	cbz	r3, 8013c8a <rcl_wait_set_add_subscription+0x4e>
 8013c46:	b319      	cbz	r1, 8013c90 <rcl_wait_set_add_subscription+0x54>
 8013c48:	681d      	ldr	r5, [r3, #0]
 8013c4a:	6840      	ldr	r0, [r0, #4]
 8013c4c:	4285      	cmp	r5, r0
 8013c4e:	d217      	bcs.n	8013c80 <rcl_wait_set_add_subscription+0x44>
 8013c50:	6820      	ldr	r0, [r4, #0]
 8013c52:	1c6e      	adds	r6, r5, #1
 8013c54:	601e      	str	r6, [r3, #0]
 8013c56:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013c5a:	b102      	cbz	r2, 8013c5e <rcl_wait_set_add_subscription+0x22>
 8013c5c:	6015      	str	r5, [r2, #0]
 8013c5e:	4608      	mov	r0, r1
 8013c60:	f7ff fb0a 	bl	8013278 <rcl_subscription_get_rmw_handle>
 8013c64:	b150      	cbz	r0, 8013c7c <rcl_wait_set_add_subscription+0x40>
 8013c66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c68:	6842      	ldr	r2, [r0, #4]
 8013c6a:	689b      	ldr	r3, [r3, #8]
 8013c6c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013c70:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013c72:	6853      	ldr	r3, [r2, #4]
 8013c74:	3301      	adds	r3, #1
 8013c76:	2000      	movs	r0, #0
 8013c78:	6053      	str	r3, [r2, #4]
 8013c7a:	bd70      	pop	{r4, r5, r6, pc}
 8013c7c:	2001      	movs	r0, #1
 8013c7e:	bd70      	pop	{r4, r5, r6, pc}
 8013c80:	f240 3086 	movw	r0, #902	@ 0x386
 8013c84:	bd70      	pop	{r4, r5, r6, pc}
 8013c86:	200b      	movs	r0, #11
 8013c88:	4770      	bx	lr
 8013c8a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013c8e:	bd70      	pop	{r4, r5, r6, pc}
 8013c90:	200b      	movs	r0, #11
 8013c92:	bd70      	pop	{r4, r5, r6, pc}

08013c94 <rcl_wait_set_clear>:
 8013c94:	2800      	cmp	r0, #0
 8013c96:	d073      	beq.n	8013d80 <rcl_wait_set_clear+0xec>
 8013c98:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013c9a:	b510      	push	{r4, lr}
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d070      	beq.n	8013d84 <rcl_wait_set_clear+0xf0>
 8013ca2:	6800      	ldr	r0, [r0, #0]
 8013ca4:	b138      	cbz	r0, 8013cb6 <rcl_wait_set_clear+0x22>
 8013ca6:	6862      	ldr	r2, [r4, #4]
 8013ca8:	2100      	movs	r1, #0
 8013caa:	0092      	lsls	r2, r2, #2
 8013cac:	f004 fbf4 	bl	8018498 <memset>
 8013cb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	601a      	str	r2, [r3, #0]
 8013cb6:	68a0      	ldr	r0, [r4, #8]
 8013cb8:	b138      	cbz	r0, 8013cca <rcl_wait_set_clear+0x36>
 8013cba:	68e2      	ldr	r2, [r4, #12]
 8013cbc:	2100      	movs	r1, #0
 8013cbe:	0092      	lsls	r2, r2, #2
 8013cc0:	f004 fbea 	bl	8018498 <memset>
 8013cc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	60da      	str	r2, [r3, #12]
 8013cca:	69a0      	ldr	r0, [r4, #24]
 8013ccc:	b138      	cbz	r0, 8013cde <rcl_wait_set_clear+0x4a>
 8013cce:	69e2      	ldr	r2, [r4, #28]
 8013cd0:	2100      	movs	r1, #0
 8013cd2:	0092      	lsls	r2, r2, #2
 8013cd4:	f004 fbe0 	bl	8018498 <memset>
 8013cd8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013cda:	2200      	movs	r2, #0
 8013cdc:	619a      	str	r2, [r3, #24]
 8013cde:	6a20      	ldr	r0, [r4, #32]
 8013ce0:	b138      	cbz	r0, 8013cf2 <rcl_wait_set_clear+0x5e>
 8013ce2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013ce4:	2100      	movs	r1, #0
 8013ce6:	0092      	lsls	r2, r2, #2
 8013ce8:	f004 fbd6 	bl	8018498 <memset>
 8013cec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013cee:	2200      	movs	r2, #0
 8013cf0:	625a      	str	r2, [r3, #36]	@ 0x24
 8013cf2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013cf4:	b138      	cbz	r0, 8013d06 <rcl_wait_set_clear+0x72>
 8013cf6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013cf8:	2100      	movs	r1, #0
 8013cfa:	0092      	lsls	r2, r2, #2
 8013cfc:	f004 fbcc 	bl	8018498 <memset>
 8013d00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d02:	2200      	movs	r2, #0
 8013d04:	631a      	str	r2, [r3, #48]	@ 0x30
 8013d06:	6920      	ldr	r0, [r4, #16]
 8013d08:	b138      	cbz	r0, 8013d1a <rcl_wait_set_clear+0x86>
 8013d0a:	6962      	ldr	r2, [r4, #20]
 8013d0c:	2100      	movs	r1, #0
 8013d0e:	0092      	lsls	r2, r2, #2
 8013d10:	f004 fbc2 	bl	8018498 <memset>
 8013d14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d16:	2200      	movs	r2, #0
 8013d18:	641a      	str	r2, [r3, #64]	@ 0x40
 8013d1a:	6898      	ldr	r0, [r3, #8]
 8013d1c:	b138      	cbz	r0, 8013d2e <rcl_wait_set_clear+0x9a>
 8013d1e:	685a      	ldr	r2, [r3, #4]
 8013d20:	2100      	movs	r1, #0
 8013d22:	0092      	lsls	r2, r2, #2
 8013d24:	f004 fbb8 	bl	8018498 <memset>
 8013d28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	605a      	str	r2, [r3, #4]
 8013d2e:	6958      	ldr	r0, [r3, #20]
 8013d30:	b138      	cbz	r0, 8013d42 <rcl_wait_set_clear+0xae>
 8013d32:	691a      	ldr	r2, [r3, #16]
 8013d34:	2100      	movs	r1, #0
 8013d36:	0092      	lsls	r2, r2, #2
 8013d38:	f004 fbae 	bl	8018498 <memset>
 8013d3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d3e:	2200      	movs	r2, #0
 8013d40:	611a      	str	r2, [r3, #16]
 8013d42:	6a18      	ldr	r0, [r3, #32]
 8013d44:	b138      	cbz	r0, 8013d56 <rcl_wait_set_clear+0xc2>
 8013d46:	69da      	ldr	r2, [r3, #28]
 8013d48:	2100      	movs	r1, #0
 8013d4a:	0092      	lsls	r2, r2, #2
 8013d4c:	f004 fba4 	bl	8018498 <memset>
 8013d50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d52:	2200      	movs	r2, #0
 8013d54:	61da      	str	r2, [r3, #28]
 8013d56:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013d58:	b138      	cbz	r0, 8013d6a <rcl_wait_set_clear+0xd6>
 8013d5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013d5c:	2100      	movs	r1, #0
 8013d5e:	0092      	lsls	r2, r2, #2
 8013d60:	f004 fb9a 	bl	8018498 <memset>
 8013d64:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d66:	2200      	movs	r2, #0
 8013d68:	629a      	str	r2, [r3, #40]	@ 0x28
 8013d6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013d6c:	b138      	cbz	r0, 8013d7e <rcl_wait_set_clear+0xea>
 8013d6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013d70:	2100      	movs	r1, #0
 8013d72:	0092      	lsls	r2, r2, #2
 8013d74:	f004 fb90 	bl	8018498 <memset>
 8013d78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d7a:	2000      	movs	r0, #0
 8013d7c:	6358      	str	r0, [r3, #52]	@ 0x34
 8013d7e:	bd10      	pop	{r4, pc}
 8013d80:	200b      	movs	r0, #11
 8013d82:	4770      	bx	lr
 8013d84:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d88:	bd10      	pop	{r4, pc}
 8013d8a:	bf00      	nop

08013d8c <rcl_wait_set_resize>:
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	f000 8185 	beq.w	801409c <rcl_wait_set_resize+0x310>
 8013d92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d96:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8013d98:	b083      	sub	sp, #12
 8013d9a:	4605      	mov	r5, r0
 8013d9c:	2c00      	cmp	r4, #0
 8013d9e:	f000 817f 	beq.w	80140a0 <rcl_wait_set_resize+0x314>
 8013da2:	f04f 0900 	mov.w	r9, #0
 8013da6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8013daa:	461f      	mov	r7, r3
 8013dac:	4688      	mov	r8, r1
 8013dae:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8013db2:	4616      	mov	r6, r2
 8013db4:	f8c0 9004 	str.w	r9, [r0, #4]
 8013db8:	f8c4 9000 	str.w	r9, [r4]
 8013dbc:	2900      	cmp	r1, #0
 8013dbe:	f000 80bd 	beq.w	8013f3c <rcl_wait_set_resize+0x1b0>
 8013dc2:	008c      	lsls	r4, r1, #2
 8013dc4:	6800      	ldr	r0, [r0, #0]
 8013dc6:	9301      	str	r3, [sp, #4]
 8013dc8:	4652      	mov	r2, sl
 8013dca:	4621      	mov	r1, r4
 8013dcc:	4798      	blx	r3
 8013dce:	9b01      	ldr	r3, [sp, #4]
 8013dd0:	6028      	str	r0, [r5, #0]
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	f000 80cb 	beq.w	8013f6e <rcl_wait_set_resize+0x1e2>
 8013dd8:	4622      	mov	r2, r4
 8013dda:	4649      	mov	r1, r9
 8013ddc:	9301      	str	r3, [sp, #4]
 8013dde:	f004 fb5b 	bl	8018498 <memset>
 8013de2:	f8c5 8004 	str.w	r8, [r5, #4]
 8013de6:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8013dea:	9b01      	ldr	r3, [sp, #4]
 8013dec:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013df0:	f8c8 9004 	str.w	r9, [r8, #4]
 8013df4:	4652      	mov	r2, sl
 8013df6:	4621      	mov	r1, r4
 8013df8:	4798      	blx	r3
 8013dfa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013dfc:	f8c8 0008 	str.w	r0, [r8, #8]
 8013e00:	689b      	ldr	r3, [r3, #8]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	f000 80ac 	beq.w	8013f60 <rcl_wait_set_resize+0x1d4>
 8013e08:	4622      	mov	r2, r4
 8013e0a:	4649      	mov	r1, r9
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f004 fb43 	bl	8018498 <memset>
 8013e12:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013e14:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013e18:	f04f 0800 	mov.w	r8, #0
 8013e1c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8013e20:	f8c5 800c 	str.w	r8, [r5, #12]
 8013e24:	f8c4 800c 	str.w	r8, [r4, #12]
 8013e28:	2e00      	cmp	r6, #0
 8013e2a:	f040 80a4 	bne.w	8013f76 <rcl_wait_set_resize+0x1ea>
 8013e2e:	68a8      	ldr	r0, [r5, #8]
 8013e30:	b128      	cbz	r0, 8013e3e <rcl_wait_set_resize+0xb2>
 8013e32:	4649      	mov	r1, r9
 8013e34:	4790      	blx	r2
 8013e36:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013e38:	60ae      	str	r6, [r5, #8]
 8013e3a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013e3e:	f04f 0800 	mov.w	r8, #0
 8013e42:	19f6      	adds	r6, r6, r7
 8013e44:	f8c4 8010 	str.w	r8, [r4, #16]
 8013e48:	f040 80ac 	bne.w	8013fa4 <rcl_wait_set_resize+0x218>
 8013e4c:	6960      	ldr	r0, [r4, #20]
 8013e4e:	b130      	cbz	r0, 8013e5e <rcl_wait_set_resize+0xd2>
 8013e50:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8013e52:	4649      	mov	r1, r9
 8013e54:	4798      	blx	r3
 8013e56:	6166      	str	r6, [r4, #20]
 8013e58:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013e5a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013e5e:	2600      	movs	r6, #0
 8013e60:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013e64:	616e      	str	r6, [r5, #20]
 8013e66:	6426      	str	r6, [r4, #64]	@ 0x40
 8013e68:	2f00      	cmp	r7, #0
 8013e6a:	f040 80ad 	bne.w	8013fc8 <rcl_wait_set_resize+0x23c>
 8013e6e:	6928      	ldr	r0, [r5, #16]
 8013e70:	b138      	cbz	r0, 8013e82 <rcl_wait_set_resize+0xf6>
 8013e72:	4649      	mov	r1, r9
 8013e74:	47d0      	blx	sl
 8013e76:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013e78:	612f      	str	r7, [r5, #16]
 8013e7a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013e7e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013e82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e84:	2600      	movs	r6, #0
 8013e86:	61ee      	str	r6, [r5, #28]
 8013e88:	61a6      	str	r6, [r4, #24]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	f040 80af 	bne.w	8013fee <rcl_wait_set_resize+0x262>
 8013e90:	69a8      	ldr	r0, [r5, #24]
 8013e92:	b120      	cbz	r0, 8013e9e <rcl_wait_set_resize+0x112>
 8013e94:	4649      	mov	r1, r9
 8013e96:	47d0      	blx	sl
 8013e98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e9a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013e9c:	61ab      	str	r3, [r5, #24]
 8013e9e:	6a20      	ldr	r0, [r4, #32]
 8013ea0:	b128      	cbz	r0, 8013eae <rcl_wait_set_resize+0x122>
 8013ea2:	4649      	mov	r1, r9
 8013ea4:	47d0      	blx	sl
 8013ea6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013eb0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013eb2:	2600      	movs	r6, #0
 8013eb4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013eb8:	626e      	str	r6, [r5, #36]	@ 0x24
 8013eba:	6266      	str	r6, [r4, #36]	@ 0x24
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	f000 80b6 	beq.w	801402e <rcl_wait_set_resize+0x2a2>
 8013ec2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8013ec6:	6a28      	ldr	r0, [r5, #32]
 8013ec8:	463a      	mov	r2, r7
 8013eca:	4651      	mov	r1, sl
 8013ecc:	47c8      	blx	r9
 8013ece:	6228      	str	r0, [r5, #32]
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	d04c      	beq.n	8013f6e <rcl_wait_set_resize+0x1e2>
 8013ed4:	4652      	mov	r2, sl
 8013ed6:	4631      	mov	r1, r6
 8013ed8:	f004 fade 	bl	8018498 <memset>
 8013edc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013ee0:	626b      	str	r3, [r5, #36]	@ 0x24
 8013ee2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013ee4:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013ee6:	463a      	mov	r2, r7
 8013ee8:	4651      	mov	r1, sl
 8013eea:	47c8      	blx	r9
 8013eec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013eee:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013ef0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8013ef2:	2c00      	cmp	r4, #0
 8013ef4:	f000 80f0 	beq.w	80140d8 <rcl_wait_set_resize+0x34c>
 8013ef8:	4620      	mov	r0, r4
 8013efa:	4652      	mov	r2, sl
 8013efc:	4631      	mov	r1, r6
 8013efe:	f004 facb 	bl	8018498 <memset>
 8013f02:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013f04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f06:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013f08:	2600      	movs	r6, #0
 8013f0a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013f0e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013f10:	6326      	str	r6, [r4, #48]	@ 0x30
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	f040 809d 	bne.w	8014052 <rcl_wait_set_resize+0x2c6>
 8013f18:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013f1a:	b120      	cbz	r0, 8013f26 <rcl_wait_set_resize+0x19a>
 8013f1c:	4639      	mov	r1, r7
 8013f1e:	47c0      	blx	r8
 8013f20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f22:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013f24:	62ab      	str	r3, [r5, #40]	@ 0x28
 8013f26:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013f28:	b310      	cbz	r0, 8013f70 <rcl_wait_set_resize+0x1e4>
 8013f2a:	4639      	mov	r1, r7
 8013f2c:	47c0      	blx	r8
 8013f2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013f30:	2000      	movs	r0, #0
 8013f32:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8013f36:	b003      	add	sp, #12
 8013f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f3c:	6800      	ldr	r0, [r0, #0]
 8013f3e:	b120      	cbz	r0, 8013f4a <rcl_wait_set_resize+0x1be>
 8013f40:	4651      	mov	r1, sl
 8013f42:	47d8      	blx	fp
 8013f44:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013f46:	f8c5 8000 	str.w	r8, [r5]
 8013f4a:	68a0      	ldr	r0, [r4, #8]
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	f43f af61 	beq.w	8013e14 <rcl_wait_set_resize+0x88>
 8013f52:	4651      	mov	r1, sl
 8013f54:	47d8      	blx	fp
 8013f56:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013f58:	2300      	movs	r3, #0
 8013f5a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8013f5e:	e759      	b.n	8013e14 <rcl_wait_set_resize+0x88>
 8013f60:	6828      	ldr	r0, [r5, #0]
 8013f62:	9301      	str	r3, [sp, #4]
 8013f64:	4651      	mov	r1, sl
 8013f66:	47d8      	blx	fp
 8013f68:	9b01      	ldr	r3, [sp, #4]
 8013f6a:	e9c5 3300 	strd	r3, r3, [r5]
 8013f6e:	200a      	movs	r0, #10
 8013f70:	b003      	add	sp, #12
 8013f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f76:	00b4      	lsls	r4, r6, #2
 8013f78:	68a8      	ldr	r0, [r5, #8]
 8013f7a:	464a      	mov	r2, r9
 8013f7c:	4621      	mov	r1, r4
 8013f7e:	4798      	blx	r3
 8013f80:	60a8      	str	r0, [r5, #8]
 8013f82:	2800      	cmp	r0, #0
 8013f84:	d0f3      	beq.n	8013f6e <rcl_wait_set_resize+0x1e2>
 8013f86:	4622      	mov	r2, r4
 8013f88:	4641      	mov	r1, r8
 8013f8a:	f004 fa85 	bl	8018498 <memset>
 8013f8e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013f90:	60ee      	str	r6, [r5, #12]
 8013f92:	f04f 0800 	mov.w	r8, #0
 8013f96:	19f6      	adds	r6, r6, r7
 8013f98:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013f9c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013fa0:	f43f af54 	beq.w	8013e4c <rcl_wait_set_resize+0xc0>
 8013fa4:	00b6      	lsls	r6, r6, #2
 8013fa6:	464a      	mov	r2, r9
 8013fa8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8013faa:	6960      	ldr	r0, [r4, #20]
 8013fac:	4631      	mov	r1, r6
 8013fae:	4798      	blx	r3
 8013fb0:	4681      	mov	r9, r0
 8013fb2:	6160      	str	r0, [r4, #20]
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	d076      	beq.n	80140a6 <rcl_wait_set_resize+0x31a>
 8013fb8:	4632      	mov	r2, r6
 8013fba:	4641      	mov	r1, r8
 8013fbc:	f004 fa6c 	bl	8018498 <memset>
 8013fc0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013fc2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013fc6:	e74a      	b.n	8013e5e <rcl_wait_set_resize+0xd2>
 8013fc8:	00bc      	lsls	r4, r7, #2
 8013fca:	6928      	ldr	r0, [r5, #16]
 8013fcc:	464a      	mov	r2, r9
 8013fce:	4621      	mov	r1, r4
 8013fd0:	47c0      	blx	r8
 8013fd2:	6128      	str	r0, [r5, #16]
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	d0ca      	beq.n	8013f6e <rcl_wait_set_resize+0x1e2>
 8013fd8:	4622      	mov	r2, r4
 8013fda:	4631      	mov	r1, r6
 8013fdc:	f004 fa5c 	bl	8018498 <memset>
 8013fe0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013fe2:	616f      	str	r7, [r5, #20]
 8013fe4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013fe8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013fec:	e749      	b.n	8013e82 <rcl_wait_set_resize+0xf6>
 8013fee:	009c      	lsls	r4, r3, #2
 8013ff0:	69a8      	ldr	r0, [r5, #24]
 8013ff2:	464a      	mov	r2, r9
 8013ff4:	4621      	mov	r1, r4
 8013ff6:	47c0      	blx	r8
 8013ff8:	61a8      	str	r0, [r5, #24]
 8013ffa:	2800      	cmp	r0, #0
 8013ffc:	d0b7      	beq.n	8013f6e <rcl_wait_set_resize+0x1e2>
 8013ffe:	4622      	mov	r2, r4
 8014000:	4631      	mov	r1, r6
 8014002:	f004 fa49 	bl	8018498 <memset>
 8014006:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801400a:	61eb      	str	r3, [r5, #28]
 801400c:	6a38      	ldr	r0, [r7, #32]
 801400e:	61fe      	str	r6, [r7, #28]
 8014010:	464a      	mov	r2, r9
 8014012:	4621      	mov	r1, r4
 8014014:	47c0      	blx	r8
 8014016:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014018:	6238      	str	r0, [r7, #32]
 801401a:	6a1f      	ldr	r7, [r3, #32]
 801401c:	2f00      	cmp	r7, #0
 801401e:	d054      	beq.n	80140ca <rcl_wait_set_resize+0x33e>
 8014020:	4622      	mov	r2, r4
 8014022:	4631      	mov	r1, r6
 8014024:	4638      	mov	r0, r7
 8014026:	f004 fa37 	bl	8018498 <memset>
 801402a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801402c:	e73f      	b.n	8013eae <rcl_wait_set_resize+0x122>
 801402e:	6a28      	ldr	r0, [r5, #32]
 8014030:	b120      	cbz	r0, 801403c <rcl_wait_set_resize+0x2b0>
 8014032:	4639      	mov	r1, r7
 8014034:	47c0      	blx	r8
 8014036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014038:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801403a:	622b      	str	r3, [r5, #32]
 801403c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801403e:	2800      	cmp	r0, #0
 8014040:	f43f af60 	beq.w	8013f04 <rcl_wait_set_resize+0x178>
 8014044:	4639      	mov	r1, r7
 8014046:	47c0      	blx	r8
 8014048:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801404a:	2300      	movs	r3, #0
 801404c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014050:	e758      	b.n	8013f04 <rcl_wait_set_resize+0x178>
 8014052:	009c      	lsls	r4, r3, #2
 8014054:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014056:	463a      	mov	r2, r7
 8014058:	4621      	mov	r1, r4
 801405a:	47c8      	blx	r9
 801405c:	62a8      	str	r0, [r5, #40]	@ 0x28
 801405e:	2800      	cmp	r0, #0
 8014060:	d085      	beq.n	8013f6e <rcl_wait_set_resize+0x1e2>
 8014062:	4622      	mov	r2, r4
 8014064:	4631      	mov	r1, r6
 8014066:	f004 fa17 	bl	8018498 <memset>
 801406a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801406e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014070:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8014072:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8014076:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801407a:	463a      	mov	r2, r7
 801407c:	4621      	mov	r1, r4
 801407e:	47c8      	blx	r9
 8014080:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014082:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8014086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014088:	b36b      	cbz	r3, 80140e6 <rcl_wait_set_resize+0x35a>
 801408a:	4622      	mov	r2, r4
 801408c:	4631      	mov	r1, r6
 801408e:	4618      	mov	r0, r3
 8014090:	f004 fa02 	bl	8018498 <memset>
 8014094:	4630      	mov	r0, r6
 8014096:	b003      	add	sp, #12
 8014098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801409c:	200b      	movs	r0, #11
 801409e:	4770      	bx	lr
 80140a0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80140a4:	e764      	b.n	8013f70 <rcl_wait_set_resize+0x1e4>
 80140a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80140a8:	68a8      	ldr	r0, [r5, #8]
 80140aa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80140ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80140ae:	4798      	blx	r3
 80140b0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80140b2:	6928      	ldr	r0, [r5, #16]
 80140b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80140b6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80140b8:	f8c5 900c 	str.w	r9, [r5, #12]
 80140bc:	f8c5 9008 	str.w	r9, [r5, #8]
 80140c0:	4790      	blx	r2
 80140c2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80140c6:	200a      	movs	r0, #10
 80140c8:	e752      	b.n	8013f70 <rcl_wait_set_resize+0x1e4>
 80140ca:	69a8      	ldr	r0, [r5, #24]
 80140cc:	4649      	mov	r1, r9
 80140ce:	47d0      	blx	sl
 80140d0:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80140d4:	200a      	movs	r0, #10
 80140d6:	e74b      	b.n	8013f70 <rcl_wait_set_resize+0x1e4>
 80140d8:	6a28      	ldr	r0, [r5, #32]
 80140da:	4639      	mov	r1, r7
 80140dc:	47c0      	blx	r8
 80140de:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80140e2:	200a      	movs	r0, #10
 80140e4:	e744      	b.n	8013f70 <rcl_wait_set_resize+0x1e4>
 80140e6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80140e8:	9301      	str	r3, [sp, #4]
 80140ea:	4639      	mov	r1, r7
 80140ec:	47c0      	blx	r8
 80140ee:	9b01      	ldr	r3, [sp, #4]
 80140f0:	200a      	movs	r0, #10
 80140f2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80140f6:	e73b      	b.n	8013f70 <rcl_wait_set_resize+0x1e4>

080140f8 <rcl_wait_set_init>:
 80140f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140fc:	b084      	sub	sp, #16
 80140fe:	4604      	mov	r4, r0
 8014100:	a810      	add	r0, sp, #64	@ 0x40
 8014102:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8014106:	460f      	mov	r7, r1
 8014108:	4690      	mov	r8, r2
 801410a:	4699      	mov	r9, r3
 801410c:	f7f7 fad6 	bl	800b6bc <rcutils_allocator_is_valid>
 8014110:	2800      	cmp	r0, #0
 8014112:	d06b      	beq.n	80141ec <rcl_wait_set_init+0xf4>
 8014114:	2c00      	cmp	r4, #0
 8014116:	d069      	beq.n	80141ec <rcl_wait_set_init+0xf4>
 8014118:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801411a:	b125      	cbz	r5, 8014126 <rcl_wait_set_init+0x2e>
 801411c:	2564      	movs	r5, #100	@ 0x64
 801411e:	4628      	mov	r0, r5
 8014120:	b004      	add	sp, #16
 8014122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014126:	f1ba 0f00 	cmp.w	sl, #0
 801412a:	d05f      	beq.n	80141ec <rcl_wait_set_init+0xf4>
 801412c:	4650      	mov	r0, sl
 801412e:	f7fe fb0f 	bl	8012750 <rcl_context_is_valid>
 8014132:	2800      	cmp	r0, #0
 8014134:	d067      	beq.n	8014206 <rcl_wait_set_init+0x10e>
 8014136:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014138:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801413a:	205c      	movs	r0, #92	@ 0x5c
 801413c:	4798      	blx	r3
 801413e:	6320      	str	r0, [r4, #48]	@ 0x30
 8014140:	2800      	cmp	r0, #0
 8014142:	d062      	beq.n	801420a <rcl_wait_set_init+0x112>
 8014144:	4629      	mov	r1, r5
 8014146:	225c      	movs	r2, #92	@ 0x5c
 8014148:	f004 f9a6 	bl	8018498 <memset>
 801414c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014150:	eb03 0e02 	add.w	lr, r3, r2
 8014154:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014156:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014158:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801415c:	449e      	add	lr, r3
 801415e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014162:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014166:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801416a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801416e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8014172:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8014176:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801417a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801417e:	f8da a000 	ldr.w	sl, [sl]
 8014182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014184:	44c6      	add	lr, r8
 8014186:	f8dc 3000 	ldr.w	r3, [ip]
 801418a:	602b      	str	r3, [r5, #0]
 801418c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8014190:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8014194:	f002 f9fe 	bl	8016594 <rmw_create_wait_set>
 8014198:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801419a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 801419c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801419e:	b350      	cbz	r0, 80141f6 <rcl_wait_set_init+0xfe>
 80141a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141a2:	9302      	str	r3, [sp, #8]
 80141a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80141a6:	9301      	str	r3, [sp, #4]
 80141a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80141aa:	9300      	str	r3, [sp, #0]
 80141ac:	4642      	mov	r2, r8
 80141ae:	464b      	mov	r3, r9
 80141b0:	4639      	mov	r1, r7
 80141b2:	4620      	mov	r0, r4
 80141b4:	f7ff fdea 	bl	8013d8c <rcl_wait_set_resize>
 80141b8:	4605      	mov	r5, r0
 80141ba:	2800      	cmp	r0, #0
 80141bc:	d0af      	beq.n	801411e <rcl_wait_set_init+0x26>
 80141be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80141c0:	bb2b      	cbnz	r3, 801420e <rcl_wait_set_init+0x116>
 80141c2:	2600      	movs	r6, #0
 80141c4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80141c8:	9600      	str	r6, [sp, #0]
 80141ca:	4633      	mov	r3, r6
 80141cc:	4632      	mov	r2, r6
 80141ce:	4631      	mov	r1, r6
 80141d0:	4620      	mov	r0, r4
 80141d2:	f7ff fddb 	bl	8013d8c <rcl_wait_set_resize>
 80141d6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80141d8:	2800      	cmp	r0, #0
 80141da:	d0a0      	beq.n	801411e <rcl_wait_set_init+0x26>
 80141dc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80141de:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80141e0:	4798      	blx	r3
 80141e2:	4628      	mov	r0, r5
 80141e4:	6326      	str	r6, [r4, #48]	@ 0x30
 80141e6:	b004      	add	sp, #16
 80141e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141ec:	250b      	movs	r5, #11
 80141ee:	4628      	mov	r0, r5
 80141f0:	b004      	add	sp, #16
 80141f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141f6:	2501      	movs	r5, #1
 80141f8:	f002 f9d6 	bl	80165a8 <rmw_destroy_wait_set>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	bf18      	it	ne
 8014200:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8014204:	e7dd      	b.n	80141c2 <rcl_wait_set_init+0xca>
 8014206:	2565      	movs	r5, #101	@ 0x65
 8014208:	e789      	b.n	801411e <rcl_wait_set_init+0x26>
 801420a:	250a      	movs	r5, #10
 801420c:	e787      	b.n	801411e <rcl_wait_set_init+0x26>
 801420e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014210:	e7f2      	b.n	80141f8 <rcl_wait_set_init+0x100>
 8014212:	bf00      	nop

08014214 <rcl_wait_set_add_guard_condition>:
 8014214:	b318      	cbz	r0, 801425e <rcl_wait_set_add_guard_condition+0x4a>
 8014216:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014218:	b570      	push	{r4, r5, r6, lr}
 801421a:	4604      	mov	r4, r0
 801421c:	b30b      	cbz	r3, 8014262 <rcl_wait_set_add_guard_condition+0x4e>
 801421e:	b319      	cbz	r1, 8014268 <rcl_wait_set_add_guard_condition+0x54>
 8014220:	68dd      	ldr	r5, [r3, #12]
 8014222:	68c0      	ldr	r0, [r0, #12]
 8014224:	4285      	cmp	r5, r0
 8014226:	d217      	bcs.n	8014258 <rcl_wait_set_add_guard_condition+0x44>
 8014228:	68a0      	ldr	r0, [r4, #8]
 801422a:	1c6e      	adds	r6, r5, #1
 801422c:	60de      	str	r6, [r3, #12]
 801422e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014232:	b102      	cbz	r2, 8014236 <rcl_wait_set_add_guard_condition+0x22>
 8014234:	6015      	str	r5, [r2, #0]
 8014236:	4608      	mov	r0, r1
 8014238:	f003 fad6 	bl	80177e8 <rcl_guard_condition_get_rmw_handle>
 801423c:	b150      	cbz	r0, 8014254 <rcl_wait_set_add_guard_condition+0x40>
 801423e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014240:	6842      	ldr	r2, [r0, #4]
 8014242:	695b      	ldr	r3, [r3, #20]
 8014244:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014248:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801424a:	6913      	ldr	r3, [r2, #16]
 801424c:	3301      	adds	r3, #1
 801424e:	2000      	movs	r0, #0
 8014250:	6113      	str	r3, [r2, #16]
 8014252:	bd70      	pop	{r4, r5, r6, pc}
 8014254:	2001      	movs	r0, #1
 8014256:	bd70      	pop	{r4, r5, r6, pc}
 8014258:	f240 3086 	movw	r0, #902	@ 0x386
 801425c:	bd70      	pop	{r4, r5, r6, pc}
 801425e:	200b      	movs	r0, #11
 8014260:	4770      	bx	lr
 8014262:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014266:	bd70      	pop	{r4, r5, r6, pc}
 8014268:	200b      	movs	r0, #11
 801426a:	bd70      	pop	{r4, r5, r6, pc}

0801426c <rcl_wait_set_add_timer>:
 801426c:	b328      	cbz	r0, 80142ba <rcl_wait_set_add_timer+0x4e>
 801426e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014270:	b570      	push	{r4, r5, r6, lr}
 8014272:	4604      	mov	r4, r0
 8014274:	b31b      	cbz	r3, 80142be <rcl_wait_set_add_timer+0x52>
 8014276:	b329      	cbz	r1, 80142c4 <rcl_wait_set_add_timer+0x58>
 8014278:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801427a:	6965      	ldr	r5, [r4, #20]
 801427c:	42a8      	cmp	r0, r5
 801427e:	d219      	bcs.n	80142b4 <rcl_wait_set_add_timer+0x48>
 8014280:	6925      	ldr	r5, [r4, #16]
 8014282:	1c46      	adds	r6, r0, #1
 8014284:	641e      	str	r6, [r3, #64]	@ 0x40
 8014286:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801428a:	b102      	cbz	r2, 801428e <rcl_wait_set_add_timer+0x22>
 801428c:	6010      	str	r0, [r2, #0]
 801428e:	4608      	mov	r0, r1
 8014290:	f7ff fba6 	bl	80139e0 <rcl_timer_get_guard_condition>
 8014294:	b168      	cbz	r0, 80142b2 <rcl_wait_set_add_timer+0x46>
 8014296:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014298:	68e3      	ldr	r3, [r4, #12]
 801429a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801429c:	3b01      	subs	r3, #1
 801429e:	441d      	add	r5, r3
 80142a0:	f003 faa2 	bl	80177e8 <rcl_guard_condition_get_rmw_handle>
 80142a4:	b180      	cbz	r0, 80142c8 <rcl_wait_set_add_timer+0x5c>
 80142a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80142a8:	6842      	ldr	r2, [r0, #4]
 80142aa:	695b      	ldr	r3, [r3, #20]
 80142ac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80142b0:	2000      	movs	r0, #0
 80142b2:	bd70      	pop	{r4, r5, r6, pc}
 80142b4:	f240 3086 	movw	r0, #902	@ 0x386
 80142b8:	bd70      	pop	{r4, r5, r6, pc}
 80142ba:	200b      	movs	r0, #11
 80142bc:	4770      	bx	lr
 80142be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80142c2:	bd70      	pop	{r4, r5, r6, pc}
 80142c4:	200b      	movs	r0, #11
 80142c6:	bd70      	pop	{r4, r5, r6, pc}
 80142c8:	2001      	movs	r0, #1
 80142ca:	bd70      	pop	{r4, r5, r6, pc}

080142cc <rcl_wait_set_add_client>:
 80142cc:	b318      	cbz	r0, 8014316 <rcl_wait_set_add_client+0x4a>
 80142ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80142d0:	b570      	push	{r4, r5, r6, lr}
 80142d2:	4604      	mov	r4, r0
 80142d4:	b30b      	cbz	r3, 801431a <rcl_wait_set_add_client+0x4e>
 80142d6:	b319      	cbz	r1, 8014320 <rcl_wait_set_add_client+0x54>
 80142d8:	699d      	ldr	r5, [r3, #24]
 80142da:	69c0      	ldr	r0, [r0, #28]
 80142dc:	4285      	cmp	r5, r0
 80142de:	d217      	bcs.n	8014310 <rcl_wait_set_add_client+0x44>
 80142e0:	69a0      	ldr	r0, [r4, #24]
 80142e2:	1c6e      	adds	r6, r5, #1
 80142e4:	619e      	str	r6, [r3, #24]
 80142e6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80142ea:	b102      	cbz	r2, 80142ee <rcl_wait_set_add_client+0x22>
 80142ec:	6015      	str	r5, [r2, #0]
 80142ee:	4608      	mov	r0, r1
 80142f0:	f7fe f982 	bl	80125f8 <rcl_client_get_rmw_handle>
 80142f4:	b150      	cbz	r0, 801430c <rcl_wait_set_add_client+0x40>
 80142f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80142f8:	6842      	ldr	r2, [r0, #4]
 80142fa:	6a1b      	ldr	r3, [r3, #32]
 80142fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014300:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014302:	69d3      	ldr	r3, [r2, #28]
 8014304:	3301      	adds	r3, #1
 8014306:	2000      	movs	r0, #0
 8014308:	61d3      	str	r3, [r2, #28]
 801430a:	bd70      	pop	{r4, r5, r6, pc}
 801430c:	2001      	movs	r0, #1
 801430e:	bd70      	pop	{r4, r5, r6, pc}
 8014310:	f240 3086 	movw	r0, #902	@ 0x386
 8014314:	bd70      	pop	{r4, r5, r6, pc}
 8014316:	200b      	movs	r0, #11
 8014318:	4770      	bx	lr
 801431a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801431e:	bd70      	pop	{r4, r5, r6, pc}
 8014320:	200b      	movs	r0, #11
 8014322:	bd70      	pop	{r4, r5, r6, pc}

08014324 <rcl_wait_set_add_service>:
 8014324:	b318      	cbz	r0, 801436e <rcl_wait_set_add_service+0x4a>
 8014326:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014328:	b570      	push	{r4, r5, r6, lr}
 801432a:	4604      	mov	r4, r0
 801432c:	b30b      	cbz	r3, 8014372 <rcl_wait_set_add_service+0x4e>
 801432e:	b319      	cbz	r1, 8014378 <rcl_wait_set_add_service+0x54>
 8014330:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8014332:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014334:	4285      	cmp	r5, r0
 8014336:	d217      	bcs.n	8014368 <rcl_wait_set_add_service+0x44>
 8014338:	6a20      	ldr	r0, [r4, #32]
 801433a:	1c6e      	adds	r6, r5, #1
 801433c:	625e      	str	r6, [r3, #36]	@ 0x24
 801433e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014342:	b102      	cbz	r2, 8014346 <rcl_wait_set_add_service+0x22>
 8014344:	6015      	str	r5, [r2, #0]
 8014346:	4608      	mov	r0, r1
 8014348:	f7fe fed6 	bl	80130f8 <rcl_service_get_rmw_handle>
 801434c:	b150      	cbz	r0, 8014364 <rcl_wait_set_add_service+0x40>
 801434e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014350:	6842      	ldr	r2, [r0, #4]
 8014352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014354:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014358:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801435a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801435c:	3301      	adds	r3, #1
 801435e:	2000      	movs	r0, #0
 8014360:	6293      	str	r3, [r2, #40]	@ 0x28
 8014362:	bd70      	pop	{r4, r5, r6, pc}
 8014364:	2001      	movs	r0, #1
 8014366:	bd70      	pop	{r4, r5, r6, pc}
 8014368:	f240 3086 	movw	r0, #902	@ 0x386
 801436c:	bd70      	pop	{r4, r5, r6, pc}
 801436e:	200b      	movs	r0, #11
 8014370:	4770      	bx	lr
 8014372:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014376:	bd70      	pop	{r4, r5, r6, pc}
 8014378:	200b      	movs	r0, #11
 801437a:	bd70      	pop	{r4, r5, r6, pc}
 801437c:	0000      	movs	r0, r0
	...

08014380 <rcl_wait>:
 8014380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014384:	ed2d 8b02 	vpush	{d8}
 8014388:	b08d      	sub	sp, #52	@ 0x34
 801438a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801438e:	2800      	cmp	r0, #0
 8014390:	f000 8143 	beq.w	801461a <rcl_wait+0x29a>
 8014394:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014396:	4605      	mov	r5, r0
 8014398:	2e00      	cmp	r6, #0
 801439a:	f000 8112 	beq.w	80145c2 <rcl_wait+0x242>
 801439e:	6843      	ldr	r3, [r0, #4]
 80143a0:	b983      	cbnz	r3, 80143c4 <rcl_wait+0x44>
 80143a2:	68eb      	ldr	r3, [r5, #12]
 80143a4:	b973      	cbnz	r3, 80143c4 <rcl_wait+0x44>
 80143a6:	696b      	ldr	r3, [r5, #20]
 80143a8:	b963      	cbnz	r3, 80143c4 <rcl_wait+0x44>
 80143aa:	69eb      	ldr	r3, [r5, #28]
 80143ac:	b953      	cbnz	r3, 80143c4 <rcl_wait+0x44>
 80143ae:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80143b0:	b943      	cbnz	r3, 80143c4 <rcl_wait+0x44>
 80143b2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80143b4:	b933      	cbnz	r3, 80143c4 <rcl_wait+0x44>
 80143b6:	f240 3085 	movw	r0, #901	@ 0x385
 80143ba:	b00d      	add	sp, #52	@ 0x34
 80143bc:	ecbd 8b02 	vpop	{d8}
 80143c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c4:	9b04      	ldr	r3, [sp, #16]
 80143c6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80143c8:	2b01      	cmp	r3, #1
 80143ca:	9b05      	ldr	r3, [sp, #20]
 80143cc:	f173 0300 	sbcs.w	r3, r3, #0
 80143d0:	f2c0 80f0 	blt.w	80145b4 <rcl_wait+0x234>
 80143d4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80143d8:	4643      	mov	r3, r8
 80143da:	2a00      	cmp	r2, #0
 80143dc:	f000 8133 	beq.w	8014646 <rcl_wait+0x2c6>
 80143e0:	2400      	movs	r4, #0
 80143e2:	4613      	mov	r3, r2
 80143e4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8014658 <rcl_wait+0x2d8>
 80143e8:	46a2      	mov	sl, r4
 80143ea:	46a3      	mov	fp, r4
 80143ec:	f240 3921 	movw	r9, #801	@ 0x321
 80143f0:	4632      	mov	r2, r6
 80143f2:	e014      	b.n	801441e <rcl_wait+0x9e>
 80143f4:	2800      	cmp	r0, #0
 80143f6:	d1e0      	bne.n	80143ba <rcl_wait+0x3a>
 80143f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80143fc:	4542      	cmp	r2, r8
 80143fe:	eb73 0107 	sbcs.w	r1, r3, r7
 8014402:	da03      	bge.n	801440c <rcl_wait+0x8c>
 8014404:	4690      	mov	r8, r2
 8014406:	461f      	mov	r7, r3
 8014408:	f04f 0b01 	mov.w	fp, #1
 801440c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801440e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8014410:	3401      	adds	r4, #1
 8014412:	f14a 0a00 	adc.w	sl, sl, #0
 8014416:	429c      	cmp	r4, r3
 8014418:	f17a 0100 	sbcs.w	r1, sl, #0
 801441c:	d228      	bcs.n	8014470 <rcl_wait+0xf0>
 801441e:	6928      	ldr	r0, [r5, #16]
 8014420:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014424:	a908      	add	r1, sp, #32
 8014426:	00a6      	lsls	r6, r4, #2
 8014428:	2800      	cmp	r0, #0
 801442a:	d0f1      	beq.n	8014410 <rcl_wait+0x90>
 801442c:	68eb      	ldr	r3, [r5, #12]
 801442e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8014432:	4423      	add	r3, r4
 8014434:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8014438:	f1be 0f00 	cmp.w	lr, #0
 801443c:	d006      	beq.n	801444c <rcl_wait+0xcc>
 801443e:	6913      	ldr	r3, [r2, #16]
 8014440:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8014444:	3301      	adds	r3, #1
 8014446:	6113      	str	r3, [r2, #16]
 8014448:	692b      	ldr	r3, [r5, #16]
 801444a:	5998      	ldr	r0, [r3, r6]
 801444c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014450:	f7ff fa94 	bl	801397c <rcl_timer_get_time_until_next_call>
 8014454:	4548      	cmp	r0, r9
 8014456:	d1cd      	bne.n	80143f4 <rcl_wait+0x74>
 8014458:	692b      	ldr	r3, [r5, #16]
 801445a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801445c:	2100      	movs	r1, #0
 801445e:	5199      	str	r1, [r3, r6]
 8014460:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8014462:	3401      	adds	r4, #1
 8014464:	f14a 0a00 	adc.w	sl, sl, #0
 8014468:	429c      	cmp	r4, r3
 801446a:	f17a 0100 	sbcs.w	r1, sl, #0
 801446e:	d3d6      	bcc.n	801441e <rcl_wait+0x9e>
 8014470:	4616      	mov	r6, r2
 8014472:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014476:	4313      	orrs	r3, r2
 8014478:	46d9      	mov	r9, fp
 801447a:	f040 80a9 	bne.w	80145d0 <rcl_wait+0x250>
 801447e:	2300      	movs	r3, #0
 8014480:	2200      	movs	r2, #0
 8014482:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014486:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801448a:	ab08      	add	r3, sp, #32
 801448c:	9302      	str	r3, [sp, #8]
 801448e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8014490:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8014494:	e9cd 3200 	strd	r3, r2, [sp]
 8014498:	f106 0110 	add.w	r1, r6, #16
 801449c:	f106 031c 	add.w	r3, r6, #28
 80144a0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80144a4:	1d30      	adds	r0, r6, #4
 80144a6:	f001 fefd 	bl	80162a4 <rmw_wait>
 80144aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80144ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80144ae:	4680      	mov	r8, r0
 80144b0:	b1ca      	cbz	r2, 80144e6 <rcl_wait+0x166>
 80144b2:	2400      	movs	r4, #0
 80144b4:	4627      	mov	r7, r4
 80144b6:	692a      	ldr	r2, [r5, #16]
 80144b8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80144bc:	f10d 011f 	add.w	r1, sp, #31
 80144c0:	00a6      	lsls	r6, r4, #2
 80144c2:	b160      	cbz	r0, 80144de <rcl_wait+0x15e>
 80144c4:	f88d 701f 	strb.w	r7, [sp, #31]
 80144c8:	f7ff fa1e 	bl	8013908 <rcl_timer_is_ready>
 80144cc:	2800      	cmp	r0, #0
 80144ce:	f47f af74 	bne.w	80143ba <rcl_wait+0x3a>
 80144d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80144d6:	b90b      	cbnz	r3, 80144dc <rcl_wait+0x15c>
 80144d8:	692a      	ldr	r2, [r5, #16]
 80144da:	5193      	str	r3, [r2, r6]
 80144dc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80144de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80144e0:	3401      	adds	r4, #1
 80144e2:	42a2      	cmp	r2, r4
 80144e4:	d8e7      	bhi.n	80144b6 <rcl_wait+0x136>
 80144e6:	f038 0002 	bics.w	r0, r8, #2
 80144ea:	f040 8090 	bne.w	801460e <rcl_wait+0x28e>
 80144ee:	686e      	ldr	r6, [r5, #4]
 80144f0:	4602      	mov	r2, r0
 80144f2:	b91e      	cbnz	r6, 80144fc <rcl_wait+0x17c>
 80144f4:	e00d      	b.n	8014512 <rcl_wait+0x192>
 80144f6:	3201      	adds	r2, #1
 80144f8:	42b2      	cmp	r2, r6
 80144fa:	d00a      	beq.n	8014512 <rcl_wait+0x192>
 80144fc:	6899      	ldr	r1, [r3, #8]
 80144fe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014502:	2900      	cmp	r1, #0
 8014504:	d1f7      	bne.n	80144f6 <rcl_wait+0x176>
 8014506:	682c      	ldr	r4, [r5, #0]
 8014508:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801450c:	3201      	adds	r2, #1
 801450e:	42b2      	cmp	r2, r6
 8014510:	d1f4      	bne.n	80144fc <rcl_wait+0x17c>
 8014512:	68ee      	ldr	r6, [r5, #12]
 8014514:	2200      	movs	r2, #0
 8014516:	b91e      	cbnz	r6, 8014520 <rcl_wait+0x1a0>
 8014518:	e00d      	b.n	8014536 <rcl_wait+0x1b6>
 801451a:	3201      	adds	r2, #1
 801451c:	42b2      	cmp	r2, r6
 801451e:	d00a      	beq.n	8014536 <rcl_wait+0x1b6>
 8014520:	6959      	ldr	r1, [r3, #20]
 8014522:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014526:	2900      	cmp	r1, #0
 8014528:	d1f7      	bne.n	801451a <rcl_wait+0x19a>
 801452a:	68ac      	ldr	r4, [r5, #8]
 801452c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014530:	3201      	adds	r2, #1
 8014532:	42b2      	cmp	r2, r6
 8014534:	d1f4      	bne.n	8014520 <rcl_wait+0x1a0>
 8014536:	69ee      	ldr	r6, [r5, #28]
 8014538:	2200      	movs	r2, #0
 801453a:	b91e      	cbnz	r6, 8014544 <rcl_wait+0x1c4>
 801453c:	e00d      	b.n	801455a <rcl_wait+0x1da>
 801453e:	3201      	adds	r2, #1
 8014540:	42b2      	cmp	r2, r6
 8014542:	d00a      	beq.n	801455a <rcl_wait+0x1da>
 8014544:	6a19      	ldr	r1, [r3, #32]
 8014546:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801454a:	2900      	cmp	r1, #0
 801454c:	d1f7      	bne.n	801453e <rcl_wait+0x1be>
 801454e:	69ac      	ldr	r4, [r5, #24]
 8014550:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014554:	3201      	adds	r2, #1
 8014556:	42b2      	cmp	r2, r6
 8014558:	d1f4      	bne.n	8014544 <rcl_wait+0x1c4>
 801455a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801455c:	2200      	movs	r2, #0
 801455e:	b91e      	cbnz	r6, 8014568 <rcl_wait+0x1e8>
 8014560:	e00d      	b.n	801457e <rcl_wait+0x1fe>
 8014562:	3201      	adds	r2, #1
 8014564:	4296      	cmp	r6, r2
 8014566:	d00a      	beq.n	801457e <rcl_wait+0x1fe>
 8014568:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801456a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801456e:	2900      	cmp	r1, #0
 8014570:	d1f7      	bne.n	8014562 <rcl_wait+0x1e2>
 8014572:	6a2c      	ldr	r4, [r5, #32]
 8014574:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014578:	3201      	adds	r2, #1
 801457a:	4296      	cmp	r6, r2
 801457c:	d1f4      	bne.n	8014568 <rcl_wait+0x1e8>
 801457e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8014580:	2200      	movs	r2, #0
 8014582:	b91e      	cbnz	r6, 801458c <rcl_wait+0x20c>
 8014584:	e00d      	b.n	80145a2 <rcl_wait+0x222>
 8014586:	3201      	adds	r2, #1
 8014588:	42b2      	cmp	r2, r6
 801458a:	d00a      	beq.n	80145a2 <rcl_wait+0x222>
 801458c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801458e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014592:	2900      	cmp	r1, #0
 8014594:	d1f7      	bne.n	8014586 <rcl_wait+0x206>
 8014596:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8014598:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801459c:	3201      	adds	r2, #1
 801459e:	42b2      	cmp	r2, r6
 80145a0:	d1f4      	bne.n	801458c <rcl_wait+0x20c>
 80145a2:	f1b8 0f02 	cmp.w	r8, #2
 80145a6:	f47f af08 	bne.w	80143ba <rcl_wait+0x3a>
 80145aa:	464b      	mov	r3, r9
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	bf08      	it	eq
 80145b0:	2002      	moveq	r0, #2
 80145b2:	e702      	b.n	80143ba <rcl_wait+0x3a>
 80145b4:	2a00      	cmp	r2, #0
 80145b6:	d03a      	beq.n	801462e <rcl_wait+0x2ae>
 80145b8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80145bc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80145c0:	e70e      	b.n	80143e0 <rcl_wait+0x60>
 80145c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80145c6:	b00d      	add	sp, #52	@ 0x34
 80145c8:	ecbd 8b02 	vpop	{d8}
 80145cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145d0:	9b04      	ldr	r3, [sp, #16]
 80145d2:	2b01      	cmp	r3, #1
 80145d4:	9b05      	ldr	r3, [sp, #20]
 80145d6:	f173 0300 	sbcs.w	r3, r3, #0
 80145da:	db24      	blt.n	8014626 <rcl_wait+0x2a6>
 80145dc:	2f00      	cmp	r7, #0
 80145de:	bfbc      	itt	lt
 80145e0:	f04f 0800 	movlt.w	r8, #0
 80145e4:	4647      	movlt	r7, r8
 80145e6:	a31e      	add	r3, pc, #120	@ (adr r3, 8014660 <rcl_wait+0x2e0>)
 80145e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ec:	4640      	mov	r0, r8
 80145ee:	4639      	mov	r1, r7
 80145f0:	f7ec faea 	bl	8000bc8 <__aeabi_ldivmod>
 80145f4:	a31a      	add	r3, pc, #104	@ (adr r3, 8014660 <rcl_wait+0x2e0>)
 80145f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80145fe:	4640      	mov	r0, r8
 8014600:	4639      	mov	r1, r7
 8014602:	f7ec fae1 	bl	8000bc8 <__aeabi_ldivmod>
 8014606:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801460a:	ab08      	add	r3, sp, #32
 801460c:	e73e      	b.n	801448c <rcl_wait+0x10c>
 801460e:	2001      	movs	r0, #1
 8014610:	b00d      	add	sp, #52	@ 0x34
 8014612:	ecbd 8b02 	vpop	{d8}
 8014616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801461a:	200b      	movs	r0, #11
 801461c:	b00d      	add	sp, #52	@ 0x34
 801461e:	ecbd 8b02 	vpop	{d8}
 8014622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014626:	465b      	mov	r3, fp
 8014628:	2b00      	cmp	r3, #0
 801462a:	d1d7      	bne.n	80145dc <rcl_wait+0x25c>
 801462c:	e72e      	b.n	801448c <rcl_wait+0x10c>
 801462e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014632:	430b      	orrs	r3, r1
 8014634:	bf08      	it	eq
 8014636:	4691      	moveq	r9, r2
 8014638:	f43f af21 	beq.w	801447e <rcl_wait+0xfe>
 801463c:	9b04      	ldr	r3, [sp, #16]
 801463e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014642:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014646:	2b01      	cmp	r3, #1
 8014648:	9b05      	ldr	r3, [sp, #20]
 801464a:	f173 0300 	sbcs.w	r3, r3, #0
 801464e:	f04f 0300 	mov.w	r3, #0
 8014652:	4699      	mov	r9, r3
 8014654:	dac2      	bge.n	80145dc <rcl_wait+0x25c>
 8014656:	e719      	b.n	801448c <rcl_wait+0x10c>
 8014658:	ffffffff 	.word	0xffffffff
 801465c:	7fffffff 	.word	0x7fffffff
 8014660:	3b9aca00 	.word	0x3b9aca00
 8014664:	00000000 	.word	0x00000000

08014668 <rcl_action_take_goal_response>:
 8014668:	2800      	cmp	r0, #0
 801466a:	d039      	beq.n	80146e0 <rcl_action_take_goal_response+0x78>
 801466c:	b570      	push	{r4, r5, r6, lr}
 801466e:	4604      	mov	r4, r0
 8014670:	6800      	ldr	r0, [r0, #0]
 8014672:	b380      	cbz	r0, 80146d6 <rcl_action_take_goal_response+0x6e>
 8014674:	460d      	mov	r5, r1
 8014676:	4616      	mov	r6, r2
 8014678:	f7fe f842 	bl	8012700 <rcl_client_is_valid>
 801467c:	b330      	cbz	r0, 80146cc <rcl_action_take_goal_response+0x64>
 801467e:	6820      	ldr	r0, [r4, #0]
 8014680:	3004      	adds	r0, #4
 8014682:	f7fe f83d 	bl	8012700 <rcl_client_is_valid>
 8014686:	b308      	cbz	r0, 80146cc <rcl_action_take_goal_response+0x64>
 8014688:	6820      	ldr	r0, [r4, #0]
 801468a:	3008      	adds	r0, #8
 801468c:	f7fe f838 	bl	8012700 <rcl_client_is_valid>
 8014690:	b1e0      	cbz	r0, 80146cc <rcl_action_take_goal_response+0x64>
 8014692:	6820      	ldr	r0, [r4, #0]
 8014694:	300c      	adds	r0, #12
 8014696:	f7fe fdf5 	bl	8013284 <rcl_subscription_is_valid>
 801469a:	b1b8      	cbz	r0, 80146cc <rcl_action_take_goal_response+0x64>
 801469c:	6820      	ldr	r0, [r4, #0]
 801469e:	3010      	adds	r0, #16
 80146a0:	f7fe fdf0 	bl	8013284 <rcl_subscription_is_valid>
 80146a4:	b190      	cbz	r0, 80146cc <rcl_action_take_goal_response+0x64>
 80146a6:	b1cd      	cbz	r5, 80146dc <rcl_action_take_goal_response+0x74>
 80146a8:	b1c6      	cbz	r6, 80146dc <rcl_action_take_goal_response+0x74>
 80146aa:	6820      	ldr	r0, [r4, #0]
 80146ac:	4632      	mov	r2, r6
 80146ae:	4629      	mov	r1, r5
 80146b0:	f7fd ffde 	bl	8012670 <rcl_take_response>
 80146b4:	b148      	cbz	r0, 80146ca <rcl_action_take_goal_response+0x62>
 80146b6:	280a      	cmp	r0, #10
 80146b8:	d007      	beq.n	80146ca <rcl_action_take_goal_response+0x62>
 80146ba:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80146be:	f640 0337 	movw	r3, #2103	@ 0x837
 80146c2:	4290      	cmp	r0, r2
 80146c4:	bf0c      	ite	eq
 80146c6:	4618      	moveq	r0, r3
 80146c8:	2001      	movne	r0, #1
 80146ca:	bd70      	pop	{r4, r5, r6, pc}
 80146cc:	f7f7 f81c 	bl	800b708 <rcutils_reset_error>
 80146d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80146d4:	bd70      	pop	{r4, r5, r6, pc}
 80146d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80146da:	bd70      	pop	{r4, r5, r6, pc}
 80146dc:	200b      	movs	r0, #11
 80146de:	bd70      	pop	{r4, r5, r6, pc}
 80146e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80146e4:	4770      	bx	lr
 80146e6:	bf00      	nop

080146e8 <rcl_action_send_result_request>:
 80146e8:	b390      	cbz	r0, 8014750 <rcl_action_send_result_request+0x68>
 80146ea:	b570      	push	{r4, r5, r6, lr}
 80146ec:	4604      	mov	r4, r0
 80146ee:	6800      	ldr	r0, [r0, #0]
 80146f0:	b348      	cbz	r0, 8014746 <rcl_action_send_result_request+0x5e>
 80146f2:	460d      	mov	r5, r1
 80146f4:	4616      	mov	r6, r2
 80146f6:	f7fe f803 	bl	8012700 <rcl_client_is_valid>
 80146fa:	b1f8      	cbz	r0, 801473c <rcl_action_send_result_request+0x54>
 80146fc:	6820      	ldr	r0, [r4, #0]
 80146fe:	3004      	adds	r0, #4
 8014700:	f7fd fffe 	bl	8012700 <rcl_client_is_valid>
 8014704:	b1d0      	cbz	r0, 801473c <rcl_action_send_result_request+0x54>
 8014706:	6820      	ldr	r0, [r4, #0]
 8014708:	3008      	adds	r0, #8
 801470a:	f7fd fff9 	bl	8012700 <rcl_client_is_valid>
 801470e:	b1a8      	cbz	r0, 801473c <rcl_action_send_result_request+0x54>
 8014710:	6820      	ldr	r0, [r4, #0]
 8014712:	300c      	adds	r0, #12
 8014714:	f7fe fdb6 	bl	8013284 <rcl_subscription_is_valid>
 8014718:	b180      	cbz	r0, 801473c <rcl_action_send_result_request+0x54>
 801471a:	6820      	ldr	r0, [r4, #0]
 801471c:	3010      	adds	r0, #16
 801471e:	f7fe fdb1 	bl	8013284 <rcl_subscription_is_valid>
 8014722:	b158      	cbz	r0, 801473c <rcl_action_send_result_request+0x54>
 8014724:	b195      	cbz	r5, 801474c <rcl_action_send_result_request+0x64>
 8014726:	b18e      	cbz	r6, 801474c <rcl_action_send_result_request+0x64>
 8014728:	6820      	ldr	r0, [r4, #0]
 801472a:	4632      	mov	r2, r6
 801472c:	4629      	mov	r1, r5
 801472e:	3008      	adds	r0, #8
 8014730:	f7fd ff68 	bl	8012604 <rcl_send_request>
 8014734:	3800      	subs	r0, #0
 8014736:	bf18      	it	ne
 8014738:	2001      	movne	r0, #1
 801473a:	bd70      	pop	{r4, r5, r6, pc}
 801473c:	f7f6 ffe4 	bl	800b708 <rcutils_reset_error>
 8014740:	f640 0036 	movw	r0, #2102	@ 0x836
 8014744:	bd70      	pop	{r4, r5, r6, pc}
 8014746:	f640 0036 	movw	r0, #2102	@ 0x836
 801474a:	bd70      	pop	{r4, r5, r6, pc}
 801474c:	200b      	movs	r0, #11
 801474e:	bd70      	pop	{r4, r5, r6, pc}
 8014750:	f640 0036 	movw	r0, #2102	@ 0x836
 8014754:	4770      	bx	lr
 8014756:	bf00      	nop

08014758 <rcl_action_take_result_response>:
 8014758:	2800      	cmp	r0, #0
 801475a:	d03a      	beq.n	80147d2 <rcl_action_take_result_response+0x7a>
 801475c:	b570      	push	{r4, r5, r6, lr}
 801475e:	4604      	mov	r4, r0
 8014760:	6800      	ldr	r0, [r0, #0]
 8014762:	b388      	cbz	r0, 80147c8 <rcl_action_take_result_response+0x70>
 8014764:	460d      	mov	r5, r1
 8014766:	4616      	mov	r6, r2
 8014768:	f7fd ffca 	bl	8012700 <rcl_client_is_valid>
 801476c:	b338      	cbz	r0, 80147be <rcl_action_take_result_response+0x66>
 801476e:	6820      	ldr	r0, [r4, #0]
 8014770:	3004      	adds	r0, #4
 8014772:	f7fd ffc5 	bl	8012700 <rcl_client_is_valid>
 8014776:	b310      	cbz	r0, 80147be <rcl_action_take_result_response+0x66>
 8014778:	6820      	ldr	r0, [r4, #0]
 801477a:	3008      	adds	r0, #8
 801477c:	f7fd ffc0 	bl	8012700 <rcl_client_is_valid>
 8014780:	b1e8      	cbz	r0, 80147be <rcl_action_take_result_response+0x66>
 8014782:	6820      	ldr	r0, [r4, #0]
 8014784:	300c      	adds	r0, #12
 8014786:	f7fe fd7d 	bl	8013284 <rcl_subscription_is_valid>
 801478a:	b1c0      	cbz	r0, 80147be <rcl_action_take_result_response+0x66>
 801478c:	6820      	ldr	r0, [r4, #0]
 801478e:	3010      	adds	r0, #16
 8014790:	f7fe fd78 	bl	8013284 <rcl_subscription_is_valid>
 8014794:	b198      	cbz	r0, 80147be <rcl_action_take_result_response+0x66>
 8014796:	b1d5      	cbz	r5, 80147ce <rcl_action_take_result_response+0x76>
 8014798:	b1ce      	cbz	r6, 80147ce <rcl_action_take_result_response+0x76>
 801479a:	6820      	ldr	r0, [r4, #0]
 801479c:	4632      	mov	r2, r6
 801479e:	4629      	mov	r1, r5
 80147a0:	3008      	adds	r0, #8
 80147a2:	f7fd ff65 	bl	8012670 <rcl_take_response>
 80147a6:	b148      	cbz	r0, 80147bc <rcl_action_take_result_response+0x64>
 80147a8:	280a      	cmp	r0, #10
 80147aa:	d007      	beq.n	80147bc <rcl_action_take_result_response+0x64>
 80147ac:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80147b0:	f640 0337 	movw	r3, #2103	@ 0x837
 80147b4:	4290      	cmp	r0, r2
 80147b6:	bf0c      	ite	eq
 80147b8:	4618      	moveq	r0, r3
 80147ba:	2001      	movne	r0, #1
 80147bc:	bd70      	pop	{r4, r5, r6, pc}
 80147be:	f7f6 ffa3 	bl	800b708 <rcutils_reset_error>
 80147c2:	f640 0036 	movw	r0, #2102	@ 0x836
 80147c6:	bd70      	pop	{r4, r5, r6, pc}
 80147c8:	f640 0036 	movw	r0, #2102	@ 0x836
 80147cc:	bd70      	pop	{r4, r5, r6, pc}
 80147ce:	200b      	movs	r0, #11
 80147d0:	bd70      	pop	{r4, r5, r6, pc}
 80147d2:	f640 0036 	movw	r0, #2102	@ 0x836
 80147d6:	4770      	bx	lr

080147d8 <rcl_action_take_cancel_response>:
 80147d8:	2800      	cmp	r0, #0
 80147da:	d03a      	beq.n	8014852 <rcl_action_take_cancel_response+0x7a>
 80147dc:	b570      	push	{r4, r5, r6, lr}
 80147de:	4604      	mov	r4, r0
 80147e0:	6800      	ldr	r0, [r0, #0]
 80147e2:	b388      	cbz	r0, 8014848 <rcl_action_take_cancel_response+0x70>
 80147e4:	460d      	mov	r5, r1
 80147e6:	4616      	mov	r6, r2
 80147e8:	f7fd ff8a 	bl	8012700 <rcl_client_is_valid>
 80147ec:	b338      	cbz	r0, 801483e <rcl_action_take_cancel_response+0x66>
 80147ee:	6820      	ldr	r0, [r4, #0]
 80147f0:	3004      	adds	r0, #4
 80147f2:	f7fd ff85 	bl	8012700 <rcl_client_is_valid>
 80147f6:	b310      	cbz	r0, 801483e <rcl_action_take_cancel_response+0x66>
 80147f8:	6820      	ldr	r0, [r4, #0]
 80147fa:	3008      	adds	r0, #8
 80147fc:	f7fd ff80 	bl	8012700 <rcl_client_is_valid>
 8014800:	b1e8      	cbz	r0, 801483e <rcl_action_take_cancel_response+0x66>
 8014802:	6820      	ldr	r0, [r4, #0]
 8014804:	300c      	adds	r0, #12
 8014806:	f7fe fd3d 	bl	8013284 <rcl_subscription_is_valid>
 801480a:	b1c0      	cbz	r0, 801483e <rcl_action_take_cancel_response+0x66>
 801480c:	6820      	ldr	r0, [r4, #0]
 801480e:	3010      	adds	r0, #16
 8014810:	f7fe fd38 	bl	8013284 <rcl_subscription_is_valid>
 8014814:	b198      	cbz	r0, 801483e <rcl_action_take_cancel_response+0x66>
 8014816:	b1d5      	cbz	r5, 801484e <rcl_action_take_cancel_response+0x76>
 8014818:	b1ce      	cbz	r6, 801484e <rcl_action_take_cancel_response+0x76>
 801481a:	6820      	ldr	r0, [r4, #0]
 801481c:	4632      	mov	r2, r6
 801481e:	4629      	mov	r1, r5
 8014820:	3004      	adds	r0, #4
 8014822:	f7fd ff25 	bl	8012670 <rcl_take_response>
 8014826:	b148      	cbz	r0, 801483c <rcl_action_take_cancel_response+0x64>
 8014828:	280a      	cmp	r0, #10
 801482a:	d007      	beq.n	801483c <rcl_action_take_cancel_response+0x64>
 801482c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014830:	f640 0337 	movw	r3, #2103	@ 0x837
 8014834:	4290      	cmp	r0, r2
 8014836:	bf0c      	ite	eq
 8014838:	4618      	moveq	r0, r3
 801483a:	2001      	movne	r0, #1
 801483c:	bd70      	pop	{r4, r5, r6, pc}
 801483e:	f7f6 ff63 	bl	800b708 <rcutils_reset_error>
 8014842:	f640 0036 	movw	r0, #2102	@ 0x836
 8014846:	bd70      	pop	{r4, r5, r6, pc}
 8014848:	f640 0036 	movw	r0, #2102	@ 0x836
 801484c:	bd70      	pop	{r4, r5, r6, pc}
 801484e:	200b      	movs	r0, #11
 8014850:	bd70      	pop	{r4, r5, r6, pc}
 8014852:	f640 0036 	movw	r0, #2102	@ 0x836
 8014856:	4770      	bx	lr

08014858 <rcl_action_take_feedback>:
 8014858:	2800      	cmp	r0, #0
 801485a:	d038      	beq.n	80148ce <rcl_action_take_feedback+0x76>
 801485c:	b530      	push	{r4, r5, lr}
 801485e:	4604      	mov	r4, r0
 8014860:	6800      	ldr	r0, [r0, #0]
 8014862:	b091      	sub	sp, #68	@ 0x44
 8014864:	b378      	cbz	r0, 80148c6 <rcl_action_take_feedback+0x6e>
 8014866:	460d      	mov	r5, r1
 8014868:	f7fd ff4a 	bl	8012700 <rcl_client_is_valid>
 801486c:	b328      	cbz	r0, 80148ba <rcl_action_take_feedback+0x62>
 801486e:	6820      	ldr	r0, [r4, #0]
 8014870:	3004      	adds	r0, #4
 8014872:	f7fd ff45 	bl	8012700 <rcl_client_is_valid>
 8014876:	b300      	cbz	r0, 80148ba <rcl_action_take_feedback+0x62>
 8014878:	6820      	ldr	r0, [r4, #0]
 801487a:	3008      	adds	r0, #8
 801487c:	f7fd ff40 	bl	8012700 <rcl_client_is_valid>
 8014880:	b1d8      	cbz	r0, 80148ba <rcl_action_take_feedback+0x62>
 8014882:	6820      	ldr	r0, [r4, #0]
 8014884:	300c      	adds	r0, #12
 8014886:	f7fe fcfd 	bl	8013284 <rcl_subscription_is_valid>
 801488a:	b1b0      	cbz	r0, 80148ba <rcl_action_take_feedback+0x62>
 801488c:	6820      	ldr	r0, [r4, #0]
 801488e:	3010      	adds	r0, #16
 8014890:	f7fe fcf8 	bl	8013284 <rcl_subscription_is_valid>
 8014894:	b188      	cbz	r0, 80148ba <rcl_action_take_feedback+0x62>
 8014896:	b1ed      	cbz	r5, 80148d4 <rcl_action_take_feedback+0x7c>
 8014898:	6820      	ldr	r0, [r4, #0]
 801489a:	2300      	movs	r3, #0
 801489c:	466a      	mov	r2, sp
 801489e:	4629      	mov	r1, r5
 80148a0:	300c      	adds	r0, #12
 80148a2:	f7fe fc91 	bl	80131c8 <rcl_take>
 80148a6:	b160      	cbz	r0, 80148c2 <rcl_action_take_feedback+0x6a>
 80148a8:	f240 1391 	movw	r3, #401	@ 0x191
 80148ac:	4298      	cmp	r0, r3
 80148ae:	d014      	beq.n	80148da <rcl_action_take_feedback+0x82>
 80148b0:	280a      	cmp	r0, #10
 80148b2:	bf18      	it	ne
 80148b4:	2001      	movne	r0, #1
 80148b6:	b011      	add	sp, #68	@ 0x44
 80148b8:	bd30      	pop	{r4, r5, pc}
 80148ba:	f7f6 ff25 	bl	800b708 <rcutils_reset_error>
 80148be:	f640 0036 	movw	r0, #2102	@ 0x836
 80148c2:	b011      	add	sp, #68	@ 0x44
 80148c4:	bd30      	pop	{r4, r5, pc}
 80148c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80148ca:	b011      	add	sp, #68	@ 0x44
 80148cc:	bd30      	pop	{r4, r5, pc}
 80148ce:	f640 0036 	movw	r0, #2102	@ 0x836
 80148d2:	4770      	bx	lr
 80148d4:	200b      	movs	r0, #11
 80148d6:	b011      	add	sp, #68	@ 0x44
 80148d8:	bd30      	pop	{r4, r5, pc}
 80148da:	f640 0037 	movw	r0, #2103	@ 0x837
 80148de:	e7f0      	b.n	80148c2 <rcl_action_take_feedback+0x6a>

080148e0 <rcl_action_wait_set_add_action_client>:
 80148e0:	2800      	cmp	r0, #0
 80148e2:	d048      	beq.n	8014976 <rcl_action_wait_set_add_action_client+0x96>
 80148e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148e6:	460c      	mov	r4, r1
 80148e8:	2900      	cmp	r1, #0
 80148ea:	d03c      	beq.n	8014966 <rcl_action_wait_set_add_action_client+0x86>
 80148ec:	4605      	mov	r5, r0
 80148ee:	6808      	ldr	r0, [r1, #0]
 80148f0:	2800      	cmp	r0, #0
 80148f2:	d038      	beq.n	8014966 <rcl_action_wait_set_add_action_client+0x86>
 80148f4:	4617      	mov	r7, r2
 80148f6:	461e      	mov	r6, r3
 80148f8:	f7fd ff02 	bl	8012700 <rcl_client_is_valid>
 80148fc:	b3b0      	cbz	r0, 801496c <rcl_action_wait_set_add_action_client+0x8c>
 80148fe:	6820      	ldr	r0, [r4, #0]
 8014900:	3004      	adds	r0, #4
 8014902:	f7fd fefd 	bl	8012700 <rcl_client_is_valid>
 8014906:	b388      	cbz	r0, 801496c <rcl_action_wait_set_add_action_client+0x8c>
 8014908:	6820      	ldr	r0, [r4, #0]
 801490a:	3008      	adds	r0, #8
 801490c:	f7fd fef8 	bl	8012700 <rcl_client_is_valid>
 8014910:	b360      	cbz	r0, 801496c <rcl_action_wait_set_add_action_client+0x8c>
 8014912:	6820      	ldr	r0, [r4, #0]
 8014914:	300c      	adds	r0, #12
 8014916:	f7fe fcb5 	bl	8013284 <rcl_subscription_is_valid>
 801491a:	b338      	cbz	r0, 801496c <rcl_action_wait_set_add_action_client+0x8c>
 801491c:	6820      	ldr	r0, [r4, #0]
 801491e:	3010      	adds	r0, #16
 8014920:	f7fe fcb0 	bl	8013284 <rcl_subscription_is_valid>
 8014924:	b310      	cbz	r0, 801496c <rcl_action_wait_set_add_action_client+0x8c>
 8014926:	6821      	ldr	r1, [r4, #0]
 8014928:	4628      	mov	r0, r5
 801492a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801492e:	f7ff fccd 	bl	80142cc <rcl_wait_set_add_client>
 8014932:	b9b8      	cbnz	r0, 8014964 <rcl_action_wait_set_add_action_client+0x84>
 8014934:	6821      	ldr	r1, [r4, #0]
 8014936:	4628      	mov	r0, r5
 8014938:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801493c:	3104      	adds	r1, #4
 801493e:	f7ff fcc5 	bl	80142cc <rcl_wait_set_add_client>
 8014942:	b978      	cbnz	r0, 8014964 <rcl_action_wait_set_add_action_client+0x84>
 8014944:	6821      	ldr	r1, [r4, #0]
 8014946:	4628      	mov	r0, r5
 8014948:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801494c:	3108      	adds	r1, #8
 801494e:	f7ff fcbd 	bl	80142cc <rcl_wait_set_add_client>
 8014952:	b938      	cbnz	r0, 8014964 <rcl_action_wait_set_add_action_client+0x84>
 8014954:	6821      	ldr	r1, [r4, #0]
 8014956:	4628      	mov	r0, r5
 8014958:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801495c:	310c      	adds	r1, #12
 801495e:	f7ff f96d 	bl	8013c3c <rcl_wait_set_add_subscription>
 8014962:	b158      	cbz	r0, 801497c <rcl_action_wait_set_add_action_client+0x9c>
 8014964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014966:	f640 0036 	movw	r0, #2102	@ 0x836
 801496a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801496c:	f7f6 fecc 	bl	800b708 <rcutils_reset_error>
 8014970:	f640 0036 	movw	r0, #2102	@ 0x836
 8014974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014976:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801497a:	4770      	bx	lr
 801497c:	6821      	ldr	r1, [r4, #0]
 801497e:	4628      	mov	r0, r5
 8014980:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8014984:	3110      	adds	r1, #16
 8014986:	f7ff f959 	bl	8013c3c <rcl_wait_set_add_subscription>
 801498a:	2800      	cmp	r0, #0
 801498c:	d1ea      	bne.n	8014964 <rcl_action_wait_set_add_action_client+0x84>
 801498e:	b11f      	cbz	r7, 8014998 <rcl_action_wait_set_add_action_client+0xb8>
 8014990:	6823      	ldr	r3, [r4, #0]
 8014992:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8014996:	603b      	str	r3, [r7, #0]
 8014998:	2e00      	cmp	r6, #0
 801499a:	d0e3      	beq.n	8014964 <rcl_action_wait_set_add_action_client+0x84>
 801499c:	6823      	ldr	r3, [r4, #0]
 801499e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80149a2:	6033      	str	r3, [r6, #0]
 80149a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149a6:	bf00      	nop

080149a8 <rcl_action_client_wait_set_get_entities_ready>:
 80149a8:	2800      	cmp	r0, #0
 80149aa:	f000 808d 	beq.w	8014ac8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80149ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149b2:	460c      	mov	r4, r1
 80149b4:	2900      	cmp	r1, #0
 80149b6:	d077      	beq.n	8014aa8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80149b8:	4605      	mov	r5, r0
 80149ba:	6808      	ldr	r0, [r1, #0]
 80149bc:	2800      	cmp	r0, #0
 80149be:	d073      	beq.n	8014aa8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80149c0:	4616      	mov	r6, r2
 80149c2:	461f      	mov	r7, r3
 80149c4:	f7fd fe9c 	bl	8012700 <rcl_client_is_valid>
 80149c8:	2800      	cmp	r0, #0
 80149ca:	d071      	beq.n	8014ab0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80149cc:	6820      	ldr	r0, [r4, #0]
 80149ce:	3004      	adds	r0, #4
 80149d0:	f7fd fe96 	bl	8012700 <rcl_client_is_valid>
 80149d4:	2800      	cmp	r0, #0
 80149d6:	d06b      	beq.n	8014ab0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80149d8:	6820      	ldr	r0, [r4, #0]
 80149da:	3008      	adds	r0, #8
 80149dc:	f7fd fe90 	bl	8012700 <rcl_client_is_valid>
 80149e0:	2800      	cmp	r0, #0
 80149e2:	d065      	beq.n	8014ab0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80149e4:	6820      	ldr	r0, [r4, #0]
 80149e6:	300c      	adds	r0, #12
 80149e8:	f7fe fc4c 	bl	8013284 <rcl_subscription_is_valid>
 80149ec:	2800      	cmp	r0, #0
 80149ee:	d05f      	beq.n	8014ab0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80149f0:	6820      	ldr	r0, [r4, #0]
 80149f2:	3010      	adds	r0, #16
 80149f4:	f7fe fc46 	bl	8013284 <rcl_subscription_is_valid>
 80149f8:	2800      	cmp	r0, #0
 80149fa:	d059      	beq.n	8014ab0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80149fc:	2e00      	cmp	r6, #0
 80149fe:	d060      	beq.n	8014ac2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014a00:	2f00      	cmp	r7, #0
 8014a02:	d05e      	beq.n	8014ac2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014a04:	9b06      	ldr	r3, [sp, #24]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d05b      	beq.n	8014ac2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014a0a:	9b07      	ldr	r3, [sp, #28]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d058      	beq.n	8014ac2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014a10:	9b08      	ldr	r3, [sp, #32]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d055      	beq.n	8014ac2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014a16:	6823      	ldr	r3, [r4, #0]
 8014a18:	686a      	ldr	r2, [r5, #4]
 8014a1a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8014a1e:	428a      	cmp	r2, r1
 8014a20:	d94c      	bls.n	8014abc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014a22:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8014a26:	4282      	cmp	r2, r0
 8014a28:	d948      	bls.n	8014abc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014a2a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8014a2e:	69ea      	ldr	r2, [r5, #28]
 8014a30:	42a2      	cmp	r2, r4
 8014a32:	d943      	bls.n	8014abc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014a34:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8014a38:	4562      	cmp	r2, ip
 8014a3a:	d93f      	bls.n	8014abc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014a3c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8014a40:	4572      	cmp	r2, lr
 8014a42:	d93b      	bls.n	8014abc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014a44:	69aa      	ldr	r2, [r5, #24]
 8014a46:	682d      	ldr	r5, [r5, #0]
 8014a48:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8014a4c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014a50:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8014a54:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014a58:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8014a5c:	f103 0c0c 	add.w	ip, r3, #12
 8014a60:	eba5 050c 	sub.w	r5, r5, ip
 8014a64:	fab5 f585 	clz	r5, r5
 8014a68:	096d      	lsrs	r5, r5, #5
 8014a6a:	7035      	strb	r5, [r6, #0]
 8014a6c:	f103 0510 	add.w	r5, r3, #16
 8014a70:	1b64      	subs	r4, r4, r5
 8014a72:	fab4 f484 	clz	r4, r4
 8014a76:	0964      	lsrs	r4, r4, #5
 8014a78:	703c      	strb	r4, [r7, #0]
 8014a7a:	eba3 0008 	sub.w	r0, r3, r8
 8014a7e:	1d1c      	adds	r4, r3, #4
 8014a80:	3308      	adds	r3, #8
 8014a82:	1ad3      	subs	r3, r2, r3
 8014a84:	fab0 f080 	clz	r0, r0
 8014a88:	9a06      	ldr	r2, [sp, #24]
 8014a8a:	0940      	lsrs	r0, r0, #5
 8014a8c:	1b09      	subs	r1, r1, r4
 8014a8e:	7010      	strb	r0, [r2, #0]
 8014a90:	fab1 f181 	clz	r1, r1
 8014a94:	9a07      	ldr	r2, [sp, #28]
 8014a96:	0949      	lsrs	r1, r1, #5
 8014a98:	7011      	strb	r1, [r2, #0]
 8014a9a:	fab3 f383 	clz	r3, r3
 8014a9e:	9a08      	ldr	r2, [sp, #32]
 8014aa0:	095b      	lsrs	r3, r3, #5
 8014aa2:	2000      	movs	r0, #0
 8014aa4:	7013      	strb	r3, [r2, #0]
 8014aa6:	e001      	b.n	8014aac <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014aa8:	f640 0036 	movw	r0, #2102	@ 0x836
 8014aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ab0:	f7f6 fe2a 	bl	800b708 <rcutils_reset_error>
 8014ab4:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014abc:	2001      	movs	r0, #1
 8014abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ac2:	200b      	movs	r0, #11
 8014ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ac8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop

08014ad0 <rcl_action_take_goal_request>:
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	d039      	beq.n	8014b48 <rcl_action_take_goal_request+0x78>
 8014ad4:	b570      	push	{r4, r5, r6, lr}
 8014ad6:	4604      	mov	r4, r0
 8014ad8:	6800      	ldr	r0, [r0, #0]
 8014ada:	b380      	cbz	r0, 8014b3e <rcl_action_take_goal_request+0x6e>
 8014adc:	460d      	mov	r5, r1
 8014ade:	4616      	mov	r6, r2
 8014ae0:	f7fe fb68 	bl	80131b4 <rcl_service_is_valid>
 8014ae4:	b330      	cbz	r0, 8014b34 <rcl_action_take_goal_request+0x64>
 8014ae6:	6820      	ldr	r0, [r4, #0]
 8014ae8:	3004      	adds	r0, #4
 8014aea:	f7fe fb63 	bl	80131b4 <rcl_service_is_valid>
 8014aee:	b308      	cbz	r0, 8014b34 <rcl_action_take_goal_request+0x64>
 8014af0:	6820      	ldr	r0, [r4, #0]
 8014af2:	3008      	adds	r0, #8
 8014af4:	f7fe fb5e 	bl	80131b4 <rcl_service_is_valid>
 8014af8:	b1e0      	cbz	r0, 8014b34 <rcl_action_take_goal_request+0x64>
 8014afa:	6820      	ldr	r0, [r4, #0]
 8014afc:	300c      	adds	r0, #12
 8014afe:	f7f5 fe8b 	bl	800a818 <rcl_publisher_is_valid>
 8014b02:	b1b8      	cbz	r0, 8014b34 <rcl_action_take_goal_request+0x64>
 8014b04:	6820      	ldr	r0, [r4, #0]
 8014b06:	3010      	adds	r0, #16
 8014b08:	f7f5 fe86 	bl	800a818 <rcl_publisher_is_valid>
 8014b0c:	b190      	cbz	r0, 8014b34 <rcl_action_take_goal_request+0x64>
 8014b0e:	b1cd      	cbz	r5, 8014b44 <rcl_action_take_goal_request+0x74>
 8014b10:	b1c6      	cbz	r6, 8014b44 <rcl_action_take_goal_request+0x74>
 8014b12:	6820      	ldr	r0, [r4, #0]
 8014b14:	4632      	mov	r2, r6
 8014b16:	4629      	mov	r1, r5
 8014b18:	f7fe faf4 	bl	8013104 <rcl_take_request>
 8014b1c:	b148      	cbz	r0, 8014b32 <rcl_action_take_goal_request+0x62>
 8014b1e:	280a      	cmp	r0, #10
 8014b20:	d007      	beq.n	8014b32 <rcl_action_take_goal_request+0x62>
 8014b22:	f240 2259 	movw	r2, #601	@ 0x259
 8014b26:	f640 0399 	movw	r3, #2201	@ 0x899
 8014b2a:	4290      	cmp	r0, r2
 8014b2c:	bf0c      	ite	eq
 8014b2e:	4618      	moveq	r0, r3
 8014b30:	2001      	movne	r0, #1
 8014b32:	bd70      	pop	{r4, r5, r6, pc}
 8014b34:	f7f6 fde8 	bl	800b708 <rcutils_reset_error>
 8014b38:	f640 0098 	movw	r0, #2200	@ 0x898
 8014b3c:	bd70      	pop	{r4, r5, r6, pc}
 8014b3e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014b42:	bd70      	pop	{r4, r5, r6, pc}
 8014b44:	200b      	movs	r0, #11
 8014b46:	bd70      	pop	{r4, r5, r6, pc}
 8014b48:	f640 0098 	movw	r0, #2200	@ 0x898
 8014b4c:	4770      	bx	lr
 8014b4e:	bf00      	nop

08014b50 <rcl_action_send_goal_response>:
 8014b50:	b390      	cbz	r0, 8014bb8 <rcl_action_send_goal_response+0x68>
 8014b52:	b570      	push	{r4, r5, r6, lr}
 8014b54:	4604      	mov	r4, r0
 8014b56:	6800      	ldr	r0, [r0, #0]
 8014b58:	b348      	cbz	r0, 8014bae <rcl_action_send_goal_response+0x5e>
 8014b5a:	460d      	mov	r5, r1
 8014b5c:	4616      	mov	r6, r2
 8014b5e:	f7fe fb29 	bl	80131b4 <rcl_service_is_valid>
 8014b62:	b1f8      	cbz	r0, 8014ba4 <rcl_action_send_goal_response+0x54>
 8014b64:	6820      	ldr	r0, [r4, #0]
 8014b66:	3004      	adds	r0, #4
 8014b68:	f7fe fb24 	bl	80131b4 <rcl_service_is_valid>
 8014b6c:	b1d0      	cbz	r0, 8014ba4 <rcl_action_send_goal_response+0x54>
 8014b6e:	6820      	ldr	r0, [r4, #0]
 8014b70:	3008      	adds	r0, #8
 8014b72:	f7fe fb1f 	bl	80131b4 <rcl_service_is_valid>
 8014b76:	b1a8      	cbz	r0, 8014ba4 <rcl_action_send_goal_response+0x54>
 8014b78:	6820      	ldr	r0, [r4, #0]
 8014b7a:	300c      	adds	r0, #12
 8014b7c:	f7f5 fe4c 	bl	800a818 <rcl_publisher_is_valid>
 8014b80:	b180      	cbz	r0, 8014ba4 <rcl_action_send_goal_response+0x54>
 8014b82:	6820      	ldr	r0, [r4, #0]
 8014b84:	3010      	adds	r0, #16
 8014b86:	f7f5 fe47 	bl	800a818 <rcl_publisher_is_valid>
 8014b8a:	b158      	cbz	r0, 8014ba4 <rcl_action_send_goal_response+0x54>
 8014b8c:	b195      	cbz	r5, 8014bb4 <rcl_action_send_goal_response+0x64>
 8014b8e:	b18e      	cbz	r6, 8014bb4 <rcl_action_send_goal_response+0x64>
 8014b90:	6820      	ldr	r0, [r4, #0]
 8014b92:	4632      	mov	r2, r6
 8014b94:	4629      	mov	r1, r5
 8014b96:	f7fe faf5 	bl	8013184 <rcl_send_response>
 8014b9a:	b110      	cbz	r0, 8014ba2 <rcl_action_send_goal_response+0x52>
 8014b9c:	2802      	cmp	r0, #2
 8014b9e:	bf18      	it	ne
 8014ba0:	2001      	movne	r0, #1
 8014ba2:	bd70      	pop	{r4, r5, r6, pc}
 8014ba4:	f7f6 fdb0 	bl	800b708 <rcutils_reset_error>
 8014ba8:	f640 0098 	movw	r0, #2200	@ 0x898
 8014bac:	bd70      	pop	{r4, r5, r6, pc}
 8014bae:	f640 0098 	movw	r0, #2200	@ 0x898
 8014bb2:	bd70      	pop	{r4, r5, r6, pc}
 8014bb4:	200b      	movs	r0, #11
 8014bb6:	bd70      	pop	{r4, r5, r6, pc}
 8014bb8:	f640 0098 	movw	r0, #2200	@ 0x898
 8014bbc:	4770      	bx	lr
 8014bbe:	bf00      	nop

08014bc0 <rcl_action_take_result_request>:
 8014bc0:	2800      	cmp	r0, #0
 8014bc2:	d03a      	beq.n	8014c3a <rcl_action_take_result_request+0x7a>
 8014bc4:	b570      	push	{r4, r5, r6, lr}
 8014bc6:	4604      	mov	r4, r0
 8014bc8:	6800      	ldr	r0, [r0, #0]
 8014bca:	b388      	cbz	r0, 8014c30 <rcl_action_take_result_request+0x70>
 8014bcc:	460d      	mov	r5, r1
 8014bce:	4616      	mov	r6, r2
 8014bd0:	f7fe faf0 	bl	80131b4 <rcl_service_is_valid>
 8014bd4:	b338      	cbz	r0, 8014c26 <rcl_action_take_result_request+0x66>
 8014bd6:	6820      	ldr	r0, [r4, #0]
 8014bd8:	3004      	adds	r0, #4
 8014bda:	f7fe faeb 	bl	80131b4 <rcl_service_is_valid>
 8014bde:	b310      	cbz	r0, 8014c26 <rcl_action_take_result_request+0x66>
 8014be0:	6820      	ldr	r0, [r4, #0]
 8014be2:	3008      	adds	r0, #8
 8014be4:	f7fe fae6 	bl	80131b4 <rcl_service_is_valid>
 8014be8:	b1e8      	cbz	r0, 8014c26 <rcl_action_take_result_request+0x66>
 8014bea:	6820      	ldr	r0, [r4, #0]
 8014bec:	300c      	adds	r0, #12
 8014bee:	f7f5 fe13 	bl	800a818 <rcl_publisher_is_valid>
 8014bf2:	b1c0      	cbz	r0, 8014c26 <rcl_action_take_result_request+0x66>
 8014bf4:	6820      	ldr	r0, [r4, #0]
 8014bf6:	3010      	adds	r0, #16
 8014bf8:	f7f5 fe0e 	bl	800a818 <rcl_publisher_is_valid>
 8014bfc:	b198      	cbz	r0, 8014c26 <rcl_action_take_result_request+0x66>
 8014bfe:	b1d5      	cbz	r5, 8014c36 <rcl_action_take_result_request+0x76>
 8014c00:	b1ce      	cbz	r6, 8014c36 <rcl_action_take_result_request+0x76>
 8014c02:	6820      	ldr	r0, [r4, #0]
 8014c04:	4632      	mov	r2, r6
 8014c06:	4629      	mov	r1, r5
 8014c08:	3008      	adds	r0, #8
 8014c0a:	f7fe fa7b 	bl	8013104 <rcl_take_request>
 8014c0e:	b148      	cbz	r0, 8014c24 <rcl_action_take_result_request+0x64>
 8014c10:	280a      	cmp	r0, #10
 8014c12:	d007      	beq.n	8014c24 <rcl_action_take_result_request+0x64>
 8014c14:	f240 2259 	movw	r2, #601	@ 0x259
 8014c18:	f640 0399 	movw	r3, #2201	@ 0x899
 8014c1c:	4290      	cmp	r0, r2
 8014c1e:	bf0c      	ite	eq
 8014c20:	4618      	moveq	r0, r3
 8014c22:	2001      	movne	r0, #1
 8014c24:	bd70      	pop	{r4, r5, r6, pc}
 8014c26:	f7f6 fd6f 	bl	800b708 <rcutils_reset_error>
 8014c2a:	f640 0098 	movw	r0, #2200	@ 0x898
 8014c2e:	bd70      	pop	{r4, r5, r6, pc}
 8014c30:	f640 0098 	movw	r0, #2200	@ 0x898
 8014c34:	bd70      	pop	{r4, r5, r6, pc}
 8014c36:	200b      	movs	r0, #11
 8014c38:	bd70      	pop	{r4, r5, r6, pc}
 8014c3a:	f640 0098 	movw	r0, #2200	@ 0x898
 8014c3e:	4770      	bx	lr

08014c40 <rcl_action_take_cancel_request>:
 8014c40:	2800      	cmp	r0, #0
 8014c42:	d03a      	beq.n	8014cba <rcl_action_take_cancel_request+0x7a>
 8014c44:	b570      	push	{r4, r5, r6, lr}
 8014c46:	4604      	mov	r4, r0
 8014c48:	6800      	ldr	r0, [r0, #0]
 8014c4a:	b388      	cbz	r0, 8014cb0 <rcl_action_take_cancel_request+0x70>
 8014c4c:	460d      	mov	r5, r1
 8014c4e:	4616      	mov	r6, r2
 8014c50:	f7fe fab0 	bl	80131b4 <rcl_service_is_valid>
 8014c54:	b338      	cbz	r0, 8014ca6 <rcl_action_take_cancel_request+0x66>
 8014c56:	6820      	ldr	r0, [r4, #0]
 8014c58:	3004      	adds	r0, #4
 8014c5a:	f7fe faab 	bl	80131b4 <rcl_service_is_valid>
 8014c5e:	b310      	cbz	r0, 8014ca6 <rcl_action_take_cancel_request+0x66>
 8014c60:	6820      	ldr	r0, [r4, #0]
 8014c62:	3008      	adds	r0, #8
 8014c64:	f7fe faa6 	bl	80131b4 <rcl_service_is_valid>
 8014c68:	b1e8      	cbz	r0, 8014ca6 <rcl_action_take_cancel_request+0x66>
 8014c6a:	6820      	ldr	r0, [r4, #0]
 8014c6c:	300c      	adds	r0, #12
 8014c6e:	f7f5 fdd3 	bl	800a818 <rcl_publisher_is_valid>
 8014c72:	b1c0      	cbz	r0, 8014ca6 <rcl_action_take_cancel_request+0x66>
 8014c74:	6820      	ldr	r0, [r4, #0]
 8014c76:	3010      	adds	r0, #16
 8014c78:	f7f5 fdce 	bl	800a818 <rcl_publisher_is_valid>
 8014c7c:	b198      	cbz	r0, 8014ca6 <rcl_action_take_cancel_request+0x66>
 8014c7e:	b1d5      	cbz	r5, 8014cb6 <rcl_action_take_cancel_request+0x76>
 8014c80:	b1ce      	cbz	r6, 8014cb6 <rcl_action_take_cancel_request+0x76>
 8014c82:	6820      	ldr	r0, [r4, #0]
 8014c84:	4632      	mov	r2, r6
 8014c86:	4629      	mov	r1, r5
 8014c88:	3004      	adds	r0, #4
 8014c8a:	f7fe fa3b 	bl	8013104 <rcl_take_request>
 8014c8e:	b148      	cbz	r0, 8014ca4 <rcl_action_take_cancel_request+0x64>
 8014c90:	280a      	cmp	r0, #10
 8014c92:	d007      	beq.n	8014ca4 <rcl_action_take_cancel_request+0x64>
 8014c94:	f240 2259 	movw	r2, #601	@ 0x259
 8014c98:	f640 0399 	movw	r3, #2201	@ 0x899
 8014c9c:	4290      	cmp	r0, r2
 8014c9e:	bf0c      	ite	eq
 8014ca0:	4618      	moveq	r0, r3
 8014ca2:	2001      	movne	r0, #1
 8014ca4:	bd70      	pop	{r4, r5, r6, pc}
 8014ca6:	f7f6 fd2f 	bl	800b708 <rcutils_reset_error>
 8014caa:	f640 0098 	movw	r0, #2200	@ 0x898
 8014cae:	bd70      	pop	{r4, r5, r6, pc}
 8014cb0:	f640 0098 	movw	r0, #2200	@ 0x898
 8014cb4:	bd70      	pop	{r4, r5, r6, pc}
 8014cb6:	200b      	movs	r0, #11
 8014cb8:	bd70      	pop	{r4, r5, r6, pc}
 8014cba:	f640 0098 	movw	r0, #2200	@ 0x898
 8014cbe:	4770      	bx	lr

08014cc0 <rcl_action_send_cancel_response>:
 8014cc0:	b398      	cbz	r0, 8014d2a <rcl_action_send_cancel_response+0x6a>
 8014cc2:	b570      	push	{r4, r5, r6, lr}
 8014cc4:	4604      	mov	r4, r0
 8014cc6:	6800      	ldr	r0, [r0, #0]
 8014cc8:	b350      	cbz	r0, 8014d20 <rcl_action_send_cancel_response+0x60>
 8014cca:	460d      	mov	r5, r1
 8014ccc:	4616      	mov	r6, r2
 8014cce:	f7fe fa71 	bl	80131b4 <rcl_service_is_valid>
 8014cd2:	b300      	cbz	r0, 8014d16 <rcl_action_send_cancel_response+0x56>
 8014cd4:	6820      	ldr	r0, [r4, #0]
 8014cd6:	3004      	adds	r0, #4
 8014cd8:	f7fe fa6c 	bl	80131b4 <rcl_service_is_valid>
 8014cdc:	b1d8      	cbz	r0, 8014d16 <rcl_action_send_cancel_response+0x56>
 8014cde:	6820      	ldr	r0, [r4, #0]
 8014ce0:	3008      	adds	r0, #8
 8014ce2:	f7fe fa67 	bl	80131b4 <rcl_service_is_valid>
 8014ce6:	b1b0      	cbz	r0, 8014d16 <rcl_action_send_cancel_response+0x56>
 8014ce8:	6820      	ldr	r0, [r4, #0]
 8014cea:	300c      	adds	r0, #12
 8014cec:	f7f5 fd94 	bl	800a818 <rcl_publisher_is_valid>
 8014cf0:	b188      	cbz	r0, 8014d16 <rcl_action_send_cancel_response+0x56>
 8014cf2:	6820      	ldr	r0, [r4, #0]
 8014cf4:	3010      	adds	r0, #16
 8014cf6:	f7f5 fd8f 	bl	800a818 <rcl_publisher_is_valid>
 8014cfa:	b160      	cbz	r0, 8014d16 <rcl_action_send_cancel_response+0x56>
 8014cfc:	b19d      	cbz	r5, 8014d26 <rcl_action_send_cancel_response+0x66>
 8014cfe:	b196      	cbz	r6, 8014d26 <rcl_action_send_cancel_response+0x66>
 8014d00:	6820      	ldr	r0, [r4, #0]
 8014d02:	4632      	mov	r2, r6
 8014d04:	4629      	mov	r1, r5
 8014d06:	3004      	adds	r0, #4
 8014d08:	f7fe fa3c 	bl	8013184 <rcl_send_response>
 8014d0c:	b110      	cbz	r0, 8014d14 <rcl_action_send_cancel_response+0x54>
 8014d0e:	2802      	cmp	r0, #2
 8014d10:	bf18      	it	ne
 8014d12:	2001      	movne	r0, #1
 8014d14:	bd70      	pop	{r4, r5, r6, pc}
 8014d16:	f7f6 fcf7 	bl	800b708 <rcutils_reset_error>
 8014d1a:	f640 0098 	movw	r0, #2200	@ 0x898
 8014d1e:	bd70      	pop	{r4, r5, r6, pc}
 8014d20:	f640 0098 	movw	r0, #2200	@ 0x898
 8014d24:	bd70      	pop	{r4, r5, r6, pc}
 8014d26:	200b      	movs	r0, #11
 8014d28:	bd70      	pop	{r4, r5, r6, pc}
 8014d2a:	f640 0098 	movw	r0, #2200	@ 0x898
 8014d2e:	4770      	bx	lr

08014d30 <rcl_action_wait_set_add_action_server>:
 8014d30:	2800      	cmp	r0, #0
 8014d32:	d04d      	beq.n	8014dd0 <rcl_action_wait_set_add_action_server+0xa0>
 8014d34:	b570      	push	{r4, r5, r6, lr}
 8014d36:	460c      	mov	r4, r1
 8014d38:	b159      	cbz	r1, 8014d52 <rcl_action_wait_set_add_action_server+0x22>
 8014d3a:	4605      	mov	r5, r0
 8014d3c:	6808      	ldr	r0, [r1, #0]
 8014d3e:	b140      	cbz	r0, 8014d52 <rcl_action_wait_set_add_action_server+0x22>
 8014d40:	4616      	mov	r6, r2
 8014d42:	f7fe fa37 	bl	80131b4 <rcl_service_is_valid>
 8014d46:	b120      	cbz	r0, 8014d52 <rcl_action_wait_set_add_action_server+0x22>
 8014d48:	6820      	ldr	r0, [r4, #0]
 8014d4a:	3004      	adds	r0, #4
 8014d4c:	f7fe fa32 	bl	80131b4 <rcl_service_is_valid>
 8014d50:	b910      	cbnz	r0, 8014d58 <rcl_action_wait_set_add_action_server+0x28>
 8014d52:	f640 0098 	movw	r0, #2200	@ 0x898
 8014d56:	bd70      	pop	{r4, r5, r6, pc}
 8014d58:	6820      	ldr	r0, [r4, #0]
 8014d5a:	3008      	adds	r0, #8
 8014d5c:	f7fe fa2a 	bl	80131b4 <rcl_service_is_valid>
 8014d60:	2800      	cmp	r0, #0
 8014d62:	d0f6      	beq.n	8014d52 <rcl_action_wait_set_add_action_server+0x22>
 8014d64:	6820      	ldr	r0, [r4, #0]
 8014d66:	300c      	adds	r0, #12
 8014d68:	f7f5 fd6e 	bl	800a848 <rcl_publisher_is_valid_except_context>
 8014d6c:	2800      	cmp	r0, #0
 8014d6e:	d0f0      	beq.n	8014d52 <rcl_action_wait_set_add_action_server+0x22>
 8014d70:	6820      	ldr	r0, [r4, #0]
 8014d72:	3010      	adds	r0, #16
 8014d74:	f7f5 fd68 	bl	800a848 <rcl_publisher_is_valid_except_context>
 8014d78:	2800      	cmp	r0, #0
 8014d7a:	d0ea      	beq.n	8014d52 <rcl_action_wait_set_add_action_server+0x22>
 8014d7c:	6821      	ldr	r1, [r4, #0]
 8014d7e:	4628      	mov	r0, r5
 8014d80:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8014d84:	f7ff face 	bl	8014324 <rcl_wait_set_add_service>
 8014d88:	2800      	cmp	r0, #0
 8014d8a:	d1e4      	bne.n	8014d56 <rcl_action_wait_set_add_action_server+0x26>
 8014d8c:	6821      	ldr	r1, [r4, #0]
 8014d8e:	4628      	mov	r0, r5
 8014d90:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8014d94:	3104      	adds	r1, #4
 8014d96:	f7ff fac5 	bl	8014324 <rcl_wait_set_add_service>
 8014d9a:	2800      	cmp	r0, #0
 8014d9c:	d1db      	bne.n	8014d56 <rcl_action_wait_set_add_action_server+0x26>
 8014d9e:	6821      	ldr	r1, [r4, #0]
 8014da0:	4628      	mov	r0, r5
 8014da2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8014da6:	3108      	adds	r1, #8
 8014da8:	f7ff fabc 	bl	8014324 <rcl_wait_set_add_service>
 8014dac:	2800      	cmp	r0, #0
 8014dae:	d1d2      	bne.n	8014d56 <rcl_action_wait_set_add_action_server+0x26>
 8014db0:	6821      	ldr	r1, [r4, #0]
 8014db2:	4628      	mov	r0, r5
 8014db4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014db8:	3114      	adds	r1, #20
 8014dba:	f7ff fa57 	bl	801426c <rcl_wait_set_add_timer>
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	d1c9      	bne.n	8014d56 <rcl_action_wait_set_add_action_server+0x26>
 8014dc2:	2e00      	cmp	r6, #0
 8014dc4:	d0c7      	beq.n	8014d56 <rcl_action_wait_set_add_action_server+0x26>
 8014dc6:	6823      	ldr	r3, [r4, #0]
 8014dc8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8014dcc:	6033      	str	r3, [r6, #0]
 8014dce:	bd70      	pop	{r4, r5, r6, pc}
 8014dd0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014dd4:	4770      	bx	lr
 8014dd6:	bf00      	nop

08014dd8 <rcl_action_server_wait_set_get_entities_ready>:
 8014dd8:	2800      	cmp	r0, #0
 8014dda:	d05a      	beq.n	8014e92 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8014ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dde:	460c      	mov	r4, r1
 8014de0:	b161      	cbz	r1, 8014dfc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014de2:	4605      	mov	r5, r0
 8014de4:	6808      	ldr	r0, [r1, #0]
 8014de6:	b148      	cbz	r0, 8014dfc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014de8:	4616      	mov	r6, r2
 8014dea:	461f      	mov	r7, r3
 8014dec:	f7fe f9e2 	bl	80131b4 <rcl_service_is_valid>
 8014df0:	b120      	cbz	r0, 8014dfc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014df2:	6820      	ldr	r0, [r4, #0]
 8014df4:	3004      	adds	r0, #4
 8014df6:	f7fe f9dd 	bl	80131b4 <rcl_service_is_valid>
 8014dfa:	b910      	cbnz	r0, 8014e02 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8014dfc:	f640 0098 	movw	r0, #2200	@ 0x898
 8014e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e02:	6820      	ldr	r0, [r4, #0]
 8014e04:	3008      	adds	r0, #8
 8014e06:	f7fe f9d5 	bl	80131b4 <rcl_service_is_valid>
 8014e0a:	2800      	cmp	r0, #0
 8014e0c:	d0f6      	beq.n	8014dfc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014e0e:	6820      	ldr	r0, [r4, #0]
 8014e10:	300c      	adds	r0, #12
 8014e12:	f7f5 fd19 	bl	800a848 <rcl_publisher_is_valid_except_context>
 8014e16:	2800      	cmp	r0, #0
 8014e18:	d0f0      	beq.n	8014dfc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014e1a:	6820      	ldr	r0, [r4, #0]
 8014e1c:	3010      	adds	r0, #16
 8014e1e:	f7f5 fd13 	bl	800a848 <rcl_publisher_is_valid_except_context>
 8014e22:	2800      	cmp	r0, #0
 8014e24:	d0ea      	beq.n	8014dfc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014e26:	b3be      	cbz	r6, 8014e98 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014e28:	b3b7      	cbz	r7, 8014e98 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014e2a:	9b06      	ldr	r3, [sp, #24]
 8014e2c:	b3a3      	cbz	r3, 8014e98 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014e2e:	9b07      	ldr	r3, [sp, #28]
 8014e30:	b393      	cbz	r3, 8014e98 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014e32:	6821      	ldr	r1, [r4, #0]
 8014e34:	692a      	ldr	r2, [r5, #16]
 8014e36:	6a2c      	ldr	r4, [r5, #32]
 8014e38:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8014e3c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8014e40:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8014e44:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8014e48:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8014e4c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8014e50:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014e54:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8014e58:	1a64      	subs	r4, r4, r1
 8014e5a:	fab4 f484 	clz	r4, r4
 8014e5e:	0964      	lsrs	r4, r4, #5
 8014e60:	7034      	strb	r4, [r6, #0]
 8014e62:	1d0c      	adds	r4, r1, #4
 8014e64:	1b1b      	subs	r3, r3, r4
 8014e66:	fab3 f383 	clz	r3, r3
 8014e6a:	095b      	lsrs	r3, r3, #5
 8014e6c:	f101 0408 	add.w	r4, r1, #8
 8014e70:	703b      	strb	r3, [r7, #0]
 8014e72:	f101 0314 	add.w	r3, r1, #20
 8014e76:	1b01      	subs	r1, r0, r4
 8014e78:	1ad3      	subs	r3, r2, r3
 8014e7a:	fab1 f181 	clz	r1, r1
 8014e7e:	9a06      	ldr	r2, [sp, #24]
 8014e80:	0949      	lsrs	r1, r1, #5
 8014e82:	7011      	strb	r1, [r2, #0]
 8014e84:	fab3 f383 	clz	r3, r3
 8014e88:	9a07      	ldr	r2, [sp, #28]
 8014e8a:	095b      	lsrs	r3, r3, #5
 8014e8c:	2000      	movs	r0, #0
 8014e8e:	7013      	strb	r3, [r2, #0]
 8014e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e92:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014e96:	4770      	bx	lr
 8014e98:	200b      	movs	r0, #11
 8014e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014e9c <_execute_event_handler>:
 8014e9c:	2002      	movs	r0, #2
 8014e9e:	4770      	bx	lr

08014ea0 <_cancel_goal_event_handler>:
 8014ea0:	2003      	movs	r0, #3
 8014ea2:	4770      	bx	lr

08014ea4 <_succeed_event_handler>:
 8014ea4:	2004      	movs	r0, #4
 8014ea6:	4770      	bx	lr

08014ea8 <_abort_event_handler>:
 8014ea8:	2006      	movs	r0, #6
 8014eaa:	4770      	bx	lr

08014eac <_canceled_event_handler>:
 8014eac:	2005      	movs	r0, #5
 8014eae:	4770      	bx	lr

08014eb0 <rcl_action_transition_goal_state>:
 8014eb0:	b2c2      	uxtb	r2, r0
 8014eb2:	2a06      	cmp	r2, #6
 8014eb4:	d80c      	bhi.n	8014ed0 <rcl_action_transition_goal_state+0x20>
 8014eb6:	2904      	cmp	r1, #4
 8014eb8:	d80a      	bhi.n	8014ed0 <rcl_action_transition_goal_state+0x20>
 8014eba:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8014ebe:	b410      	push	{r4}
 8014ec0:	1853      	adds	r3, r2, r1
 8014ec2:	4c06      	ldr	r4, [pc, #24]	@ (8014edc <rcl_action_transition_goal_state+0x2c>)
 8014ec4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014ec8:	b123      	cbz	r3, 8014ed4 <rcl_action_transition_goal_state+0x24>
 8014eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ece:	4718      	bx	r3
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	4770      	bx	lr
 8014ed4:	2000      	movs	r0, #0
 8014ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014eda:	4770      	bx	lr
 8014edc:	0801a290 	.word	0x0801a290

08014ee0 <rcl_action_get_zero_initialized_cancel_response>:
 8014ee0:	b510      	push	{r4, lr}
 8014ee2:	4c07      	ldr	r4, [pc, #28]	@ (8014f00 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014ee4:	4686      	mov	lr, r0
 8014ee6:	4684      	mov	ip, r0
 8014ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014eea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ef0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ef4:	6823      	ldr	r3, [r4, #0]
 8014ef6:	f8cc 3000 	str.w	r3, [ip]
 8014efa:	4670      	mov	r0, lr
 8014efc:	bd10      	pop	{r4, pc}
 8014efe:	bf00      	nop
 8014f00:	0801a31c 	.word	0x0801a31c

08014f04 <rclc_action_send_result_request>:
 8014f04:	b1d0      	cbz	r0, 8014f3c <rclc_action_send_result_request+0x38>
 8014f06:	b500      	push	{lr}
 8014f08:	4684      	mov	ip, r0
 8014f0a:	b087      	sub	sp, #28
 8014f0c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014f10:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8014f14:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014f18:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8014f1c:	f10d 0e08 	add.w	lr, sp, #8
 8014f20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014f24:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014f28:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8014f2c:	a902      	add	r1, sp, #8
 8014f2e:	3010      	adds	r0, #16
 8014f30:	f7ff fbda 	bl	80146e8 <rcl_action_send_result_request>
 8014f34:	b920      	cbnz	r0, 8014f40 <rclc_action_send_result_request+0x3c>
 8014f36:	b007      	add	sp, #28
 8014f38:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f3c:	200b      	movs	r0, #11
 8014f3e:	4770      	bx	lr
 8014f40:	9001      	str	r0, [sp, #4]
 8014f42:	f7f6 fbe1 	bl	800b708 <rcutils_reset_error>
 8014f46:	9801      	ldr	r0, [sp, #4]
 8014f48:	b007      	add	sp, #28
 8014f4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f4e:	bf00      	nop

08014f50 <rclc_action_take_goal_handle>:
 8014f50:	b160      	cbz	r0, 8014f6c <rclc_action_take_goal_handle+0x1c>
 8014f52:	6883      	ldr	r3, [r0, #8]
 8014f54:	b143      	cbz	r3, 8014f68 <rclc_action_take_goal_handle+0x18>
 8014f56:	6819      	ldr	r1, [r3, #0]
 8014f58:	6081      	str	r1, [r0, #8]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	721a      	strb	r2, [r3, #8]
 8014f5e:	68c1      	ldr	r1, [r0, #12]
 8014f60:	6019      	str	r1, [r3, #0]
 8014f62:	621a      	str	r2, [r3, #32]
 8014f64:	849a      	strh	r2, [r3, #36]	@ 0x24
 8014f66:	60c3      	str	r3, [r0, #12]
 8014f68:	4618      	mov	r0, r3
 8014f6a:	4770      	bx	lr
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	e7fb      	b.n	8014f68 <rclc_action_take_goal_handle+0x18>

08014f70 <rclc_action_remove_used_goal_handle>:
 8014f70:	b180      	cbz	r0, 8014f94 <rclc_action_remove_used_goal_handle+0x24>
 8014f72:	b179      	cbz	r1, 8014f94 <rclc_action_remove_used_goal_handle+0x24>
 8014f74:	68c3      	ldr	r3, [r0, #12]
 8014f76:	4299      	cmp	r1, r3
 8014f78:	d00d      	beq.n	8014f96 <rclc_action_remove_used_goal_handle+0x26>
 8014f7a:	b12b      	cbz	r3, 8014f88 <rclc_action_remove_used_goal_handle+0x18>
 8014f7c:	681a      	ldr	r2, [r3, #0]
 8014f7e:	4291      	cmp	r1, r2
 8014f80:	d003      	beq.n	8014f8a <rclc_action_remove_used_goal_handle+0x1a>
 8014f82:	4613      	mov	r3, r2
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d1f9      	bne.n	8014f7c <rclc_action_remove_used_goal_handle+0xc>
 8014f88:	4770      	bx	lr
 8014f8a:	680a      	ldr	r2, [r1, #0]
 8014f8c:	601a      	str	r2, [r3, #0]
 8014f8e:	6883      	ldr	r3, [r0, #8]
 8014f90:	600b      	str	r3, [r1, #0]
 8014f92:	6081      	str	r1, [r0, #8]
 8014f94:	4770      	bx	lr
 8014f96:	680b      	ldr	r3, [r1, #0]
 8014f98:	60c3      	str	r3, [r0, #12]
 8014f9a:	e7f8      	b.n	8014f8e <rclc_action_remove_used_goal_handle+0x1e>

08014f9c <rclc_action_find_goal_handle_by_uuid>:
 8014f9c:	b538      	push	{r3, r4, r5, lr}
 8014f9e:	b180      	cbz	r0, 8014fc2 <rclc_action_find_goal_handle_by_uuid+0x26>
 8014fa0:	460d      	mov	r5, r1
 8014fa2:	b181      	cbz	r1, 8014fc6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8014fa4:	68c4      	ldr	r4, [r0, #12]
 8014fa6:	b914      	cbnz	r4, 8014fae <rclc_action_find_goal_handle_by_uuid+0x12>
 8014fa8:	e009      	b.n	8014fbe <rclc_action_find_goal_handle_by_uuid+0x22>
 8014faa:	6824      	ldr	r4, [r4, #0]
 8014fac:	b13c      	cbz	r4, 8014fbe <rclc_action_find_goal_handle_by_uuid+0x22>
 8014fae:	f104 0009 	add.w	r0, r4, #9
 8014fb2:	2210      	movs	r2, #16
 8014fb4:	4629      	mov	r1, r5
 8014fb6:	f003 fa45 	bl	8018444 <memcmp>
 8014fba:	2800      	cmp	r0, #0
 8014fbc:	d1f5      	bne.n	8014faa <rclc_action_find_goal_handle_by_uuid+0xe>
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	bd38      	pop	{r3, r4, r5, pc}
 8014fc2:	4604      	mov	r4, r0
 8014fc4:	e7fb      	b.n	8014fbe <rclc_action_find_goal_handle_by_uuid+0x22>
 8014fc6:	460c      	mov	r4, r1
 8014fc8:	e7f9      	b.n	8014fbe <rclc_action_find_goal_handle_by_uuid+0x22>
 8014fca:	bf00      	nop

08014fcc <rclc_action_find_first_handle_by_status>:
 8014fcc:	b140      	cbz	r0, 8014fe0 <rclc_action_find_first_handle_by_status+0x14>
 8014fce:	68c0      	ldr	r0, [r0, #12]
 8014fd0:	b910      	cbnz	r0, 8014fd8 <rclc_action_find_first_handle_by_status+0xc>
 8014fd2:	e005      	b.n	8014fe0 <rclc_action_find_first_handle_by_status+0x14>
 8014fd4:	6800      	ldr	r0, [r0, #0]
 8014fd6:	b118      	cbz	r0, 8014fe0 <rclc_action_find_first_handle_by_status+0x14>
 8014fd8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014fdc:	428b      	cmp	r3, r1
 8014fde:	d1f9      	bne.n	8014fd4 <rclc_action_find_first_handle_by_status+0x8>
 8014fe0:	4770      	bx	lr
 8014fe2:	bf00      	nop

08014fe4 <rclc_action_find_first_terminated_handle>:
 8014fe4:	b140      	cbz	r0, 8014ff8 <rclc_action_find_first_terminated_handle+0x14>
 8014fe6:	68c0      	ldr	r0, [r0, #12]
 8014fe8:	b910      	cbnz	r0, 8014ff0 <rclc_action_find_first_terminated_handle+0xc>
 8014fea:	e005      	b.n	8014ff8 <rclc_action_find_first_terminated_handle+0x14>
 8014fec:	6800      	ldr	r0, [r0, #0]
 8014fee:	b118      	cbz	r0, 8014ff8 <rclc_action_find_first_terminated_handle+0x14>
 8014ff0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014ff4:	2b03      	cmp	r3, #3
 8014ff6:	ddf9      	ble.n	8014fec <rclc_action_find_first_terminated_handle+0x8>
 8014ff8:	4770      	bx	lr
 8014ffa:	bf00      	nop

08014ffc <rclc_action_find_handle_by_goal_request_sequence_number>:
 8014ffc:	b170      	cbz	r0, 801501c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014ffe:	68c0      	ldr	r0, [r0, #12]
 8015000:	b160      	cbz	r0, 801501c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015002:	b410      	push	{r4}
 8015004:	e001      	b.n	801500a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015006:	6800      	ldr	r0, [r0, #0]
 8015008:	b128      	cbz	r0, 8015016 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801500a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801500e:	4299      	cmp	r1, r3
 8015010:	bf08      	it	eq
 8015012:	4294      	cmpeq	r4, r2
 8015014:	d1f7      	bne.n	8015006 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015016:	f85d 4b04 	ldr.w	r4, [sp], #4
 801501a:	4770      	bx	lr
 801501c:	4770      	bx	lr
 801501e:	bf00      	nop

08015020 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015020:	b170      	cbz	r0, 8015040 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015022:	68c0      	ldr	r0, [r0, #12]
 8015024:	b160      	cbz	r0, 8015040 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015026:	b410      	push	{r4}
 8015028:	e001      	b.n	801502e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801502a:	6800      	ldr	r0, [r0, #0]
 801502c:	b128      	cbz	r0, 801503a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801502e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015032:	4299      	cmp	r1, r3
 8015034:	bf08      	it	eq
 8015036:	4294      	cmpeq	r4, r2
 8015038:	d1f7      	bne.n	801502a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801503a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801503e:	4770      	bx	lr
 8015040:	4770      	bx	lr
 8015042:	bf00      	nop

08015044 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015044:	b170      	cbz	r0, 8015064 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015046:	68c0      	ldr	r0, [r0, #12]
 8015048:	b160      	cbz	r0, 8015064 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801504a:	b410      	push	{r4}
 801504c:	e001      	b.n	8015052 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801504e:	6800      	ldr	r0, [r0, #0]
 8015050:	b128      	cbz	r0, 801505e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015052:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8015056:	4299      	cmp	r1, r3
 8015058:	bf08      	it	eq
 801505a:	4294      	cmpeq	r4, r2
 801505c:	d1f7      	bne.n	801504e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801505e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015062:	4770      	bx	lr
 8015064:	4770      	bx	lr
 8015066:	bf00      	nop

08015068 <rclc_action_find_first_handle_with_goal_response>:
 8015068:	b140      	cbz	r0, 801507c <rclc_action_find_first_handle_with_goal_response+0x14>
 801506a:	68c0      	ldr	r0, [r0, #12]
 801506c:	b910      	cbnz	r0, 8015074 <rclc_action_find_first_handle_with_goal_response+0xc>
 801506e:	e005      	b.n	801507c <rclc_action_find_first_handle_with_goal_response+0x14>
 8015070:	6800      	ldr	r0, [r0, #0]
 8015072:	b118      	cbz	r0, 801507c <rclc_action_find_first_handle_with_goal_response+0x14>
 8015074:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d0f9      	beq.n	8015070 <rclc_action_find_first_handle_with_goal_response+0x8>
 801507c:	4770      	bx	lr
 801507e:	bf00      	nop

08015080 <rclc_action_find_first_handle_with_result_response>:
 8015080:	b140      	cbz	r0, 8015094 <rclc_action_find_first_handle_with_result_response+0x14>
 8015082:	68c0      	ldr	r0, [r0, #12]
 8015084:	b910      	cbnz	r0, 801508c <rclc_action_find_first_handle_with_result_response+0xc>
 8015086:	e005      	b.n	8015094 <rclc_action_find_first_handle_with_result_response+0x14>
 8015088:	6800      	ldr	r0, [r0, #0]
 801508a:	b118      	cbz	r0, 8015094 <rclc_action_find_first_handle_with_result_response+0x14>
 801508c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015090:	2b00      	cmp	r3, #0
 8015092:	d0f9      	beq.n	8015088 <rclc_action_find_first_handle_with_result_response+0x8>
 8015094:	4770      	bx	lr
 8015096:	bf00      	nop

08015098 <rclc_action_server_response_goal_request>:
 8015098:	b198      	cbz	r0, 80150c2 <rclc_action_server_response_goal_request+0x2a>
 801509a:	b510      	push	{r4, lr}
 801509c:	6844      	ldr	r4, [r0, #4]
 801509e:	b086      	sub	sp, #24
 80150a0:	2200      	movs	r2, #0
 80150a2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80150a6:	460b      	mov	r3, r1
 80150a8:	9205      	str	r2, [sp, #20]
 80150aa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80150ae:	aa03      	add	r2, sp, #12
 80150b0:	f104 0010 	add.w	r0, r4, #16
 80150b4:	f88d 300c 	strb.w	r3, [sp, #12]
 80150b8:	f7ff fd4a 	bl	8014b50 <rcl_action_send_goal_response>
 80150bc:	b918      	cbnz	r0, 80150c6 <rclc_action_server_response_goal_request+0x2e>
 80150be:	b006      	add	sp, #24
 80150c0:	bd10      	pop	{r4, pc}
 80150c2:	200b      	movs	r0, #11
 80150c4:	4770      	bx	lr
 80150c6:	9001      	str	r0, [sp, #4]
 80150c8:	f7f6 fb1e 	bl	800b708 <rcutils_reset_error>
 80150cc:	9801      	ldr	r0, [sp, #4]
 80150ce:	b006      	add	sp, #24
 80150d0:	bd10      	pop	{r4, pc}
 80150d2:	bf00      	nop
 80150d4:	0000      	movs	r0, r0
	...

080150d8 <rclc_action_server_goal_cancel_accept>:
 80150d8:	b310      	cbz	r0, 8015120 <rclc_action_server_goal_cancel_accept+0x48>
 80150da:	b510      	push	{r4, lr}
 80150dc:	b090      	sub	sp, #64	@ 0x40
 80150de:	4604      	mov	r4, r0
 80150e0:	a806      	add	r0, sp, #24
 80150e2:	f7ff fefd 	bl	8014ee0 <rcl_action_get_zero_initialized_cancel_response>
 80150e6:	2300      	movs	r3, #0
 80150e8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80150ec:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80150f0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80150f4:	f88d 3018 	strb.w	r3, [sp, #24]
 80150f8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80150fc:	f8cd d01c 	str.w	sp, [sp, #28]
 8015100:	46ec      	mov	ip, sp
 8015102:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015106:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015128 <rclc_action_server_goal_cancel_accept+0x50>
 801510a:	6860      	ldr	r0, [r4, #4]
 801510c:	aa06      	add	r2, sp, #24
 801510e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015112:	3010      	adds	r0, #16
 8015114:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015118:	f7ff fdd2 	bl	8014cc0 <rcl_action_send_cancel_response>
 801511c:	b010      	add	sp, #64	@ 0x40
 801511e:	bd10      	pop	{r4, pc}
 8015120:	200b      	movs	r0, #11
 8015122:	4770      	bx	lr
 8015124:	f3af 8000 	nop.w
 8015128:	00000001 	.word	0x00000001
 801512c:	00000001 	.word	0x00000001

08015130 <rclc_action_server_goal_cancel_reject>:
 8015130:	b082      	sub	sp, #8
 8015132:	b530      	push	{r4, r5, lr}
 8015134:	b08b      	sub	sp, #44	@ 0x2c
 8015136:	ac0e      	add	r4, sp, #56	@ 0x38
 8015138:	e884 000c 	stmia.w	r4, {r2, r3}
 801513c:	b188      	cbz	r0, 8015162 <rclc_action_server_goal_cancel_reject+0x32>
 801513e:	4604      	mov	r4, r0
 8015140:	a801      	add	r0, sp, #4
 8015142:	460d      	mov	r5, r1
 8015144:	f7ff fecc 	bl	8014ee0 <rcl_action_get_zero_initialized_cancel_response>
 8015148:	aa01      	add	r2, sp, #4
 801514a:	a90e      	add	r1, sp, #56	@ 0x38
 801514c:	f104 0010 	add.w	r0, r4, #16
 8015150:	f88d 5004 	strb.w	r5, [sp, #4]
 8015154:	f7ff fdb4 	bl	8014cc0 <rcl_action_send_cancel_response>
 8015158:	b00b      	add	sp, #44	@ 0x2c
 801515a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801515e:	b002      	add	sp, #8
 8015160:	4770      	bx	lr
 8015162:	200b      	movs	r0, #11
 8015164:	b00b      	add	sp, #44	@ 0x2c
 8015166:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801516a:	b002      	add	sp, #8
 801516c:	4770      	bx	lr
 801516e:	bf00      	nop

08015170 <__atomic_load_8>:
 8015170:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015174:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015178:	4a15      	ldr	r2, [pc, #84]	@ (80151d0 <__atomic_load_8+0x60>)
 801517a:	4b16      	ldr	r3, [pc, #88]	@ (80151d4 <__atomic_load_8+0x64>)
 801517c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015180:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015184:	fb02 f101 	mul.w	r1, r2, r1
 8015188:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801518c:	fba3 2301 	umull	r2, r3, r3, r1
 8015190:	091b      	lsrs	r3, r3, #4
 8015192:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015196:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801519a:	b4d0      	push	{r4, r6, r7}
 801519c:	4c0e      	ldr	r4, [pc, #56]	@ (80151d8 <__atomic_load_8+0x68>)
 801519e:	1ac9      	subs	r1, r1, r3
 80151a0:	1862      	adds	r2, r4, r1
 80151a2:	f04f 0c01 	mov.w	ip, #1
 80151a6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80151aa:	e8c2 cf46 	strexb	r6, ip, [r2]
 80151ae:	2e00      	cmp	r6, #0
 80151b0:	d1f9      	bne.n	80151a6 <__atomic_load_8+0x36>
 80151b2:	f3bf 8f5b 	dmb	ish
 80151b6:	b2db      	uxtb	r3, r3
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d1f4      	bne.n	80151a6 <__atomic_load_8+0x36>
 80151bc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80151c0:	f3bf 8f5b 	dmb	ish
 80151c4:	5463      	strb	r3, [r4, r1]
 80151c6:	4630      	mov	r0, r6
 80151c8:	4639      	mov	r1, r7
 80151ca:	bcd0      	pop	{r4, r6, r7}
 80151cc:	4770      	bx	lr
 80151ce:	bf00      	nop
 80151d0:	27d4eb2d 	.word	0x27d4eb2d
 80151d4:	b21642c9 	.word	0xb21642c9
 80151d8:	2000b224 	.word	0x2000b224

080151dc <__atomic_store_8>:
 80151dc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80151e0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80151e4:	b570      	push	{r4, r5, r6, lr}
 80151e6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80151ea:	4c14      	ldr	r4, [pc, #80]	@ (801523c <__atomic_store_8+0x60>)
 80151ec:	4d14      	ldr	r5, [pc, #80]	@ (8015240 <__atomic_store_8+0x64>)
 80151ee:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80151f2:	fb04 f101 	mul.w	r1, r4, r1
 80151f6:	4c13      	ldr	r4, [pc, #76]	@ (8015244 <__atomic_store_8+0x68>)
 80151f8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80151fc:	fba4 4e01 	umull	r4, lr, r4, r1
 8015200:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8015204:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8015208:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801520c:	eba1 0e0e 	sub.w	lr, r1, lr
 8015210:	eb05 0c0e 	add.w	ip, r5, lr
 8015214:	f04f 0401 	mov.w	r4, #1
 8015218:	e8dc 1f4f 	ldrexb	r1, [ip]
 801521c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8015220:	2e00      	cmp	r6, #0
 8015222:	d1f9      	bne.n	8015218 <__atomic_store_8+0x3c>
 8015224:	f3bf 8f5b 	dmb	ish
 8015228:	b2c9      	uxtb	r1, r1
 801522a:	2900      	cmp	r1, #0
 801522c:	d1f4      	bne.n	8015218 <__atomic_store_8+0x3c>
 801522e:	e9c0 2300 	strd	r2, r3, [r0]
 8015232:	f3bf 8f5b 	dmb	ish
 8015236:	f805 100e 	strb.w	r1, [r5, lr]
 801523a:	bd70      	pop	{r4, r5, r6, pc}
 801523c:	27d4eb2d 	.word	0x27d4eb2d
 8015240:	2000b224 	.word	0x2000b224
 8015244:	b21642c9 	.word	0xb21642c9

08015248 <__atomic_exchange_8>:
 8015248:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801524c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8015250:	4916      	ldr	r1, [pc, #88]	@ (80152ac <__atomic_exchange_8+0x64>)
 8015252:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8015256:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801525a:	fb01 fc0c 	mul.w	ip, r1, ip
 801525e:	4914      	ldr	r1, [pc, #80]	@ (80152b0 <__atomic_exchange_8+0x68>)
 8015260:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8015264:	b570      	push	{r4, r5, r6, lr}
 8015266:	4605      	mov	r5, r0
 8015268:	fba1 010c 	umull	r0, r1, r1, ip
 801526c:	0909      	lsrs	r1, r1, #4
 801526e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8015272:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8015276:	4e0f      	ldr	r6, [pc, #60]	@ (80152b4 <__atomic_exchange_8+0x6c>)
 8015278:	ebac 0c01 	sub.w	ip, ip, r1
 801527c:	eb06 010c 	add.w	r1, r6, ip
 8015280:	f04f 0e01 	mov.w	lr, #1
 8015284:	e8d1 4f4f 	ldrexb	r4, [r1]
 8015288:	e8c1 ef40 	strexb	r0, lr, [r1]
 801528c:	2800      	cmp	r0, #0
 801528e:	d1f9      	bne.n	8015284 <__atomic_exchange_8+0x3c>
 8015290:	f3bf 8f5b 	dmb	ish
 8015294:	b2e4      	uxtb	r4, r4
 8015296:	2c00      	cmp	r4, #0
 8015298:	d1f4      	bne.n	8015284 <__atomic_exchange_8+0x3c>
 801529a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801529e:	e9c5 2300 	strd	r2, r3, [r5]
 80152a2:	f3bf 8f5b 	dmb	ish
 80152a6:	f806 400c 	strb.w	r4, [r6, ip]
 80152aa:	bd70      	pop	{r4, r5, r6, pc}
 80152ac:	27d4eb2d 	.word	0x27d4eb2d
 80152b0:	b21642c9 	.word	0xb21642c9
 80152b4:	2000b224 	.word	0x2000b224

080152b8 <rcutils_get_env>:
 80152b8:	b168      	cbz	r0, 80152d6 <rcutils_get_env+0x1e>
 80152ba:	b510      	push	{r4, lr}
 80152bc:	460c      	mov	r4, r1
 80152be:	b129      	cbz	r1, 80152cc <rcutils_get_env+0x14>
 80152c0:	f002 fc2e 	bl	8017b20 <getenv>
 80152c4:	b120      	cbz	r0, 80152d0 <rcutils_get_env+0x18>
 80152c6:	6020      	str	r0, [r4, #0]
 80152c8:	2000      	movs	r0, #0
 80152ca:	bd10      	pop	{r4, pc}
 80152cc:	4803      	ldr	r0, [pc, #12]	@ (80152dc <rcutils_get_env+0x24>)
 80152ce:	bd10      	pop	{r4, pc}
 80152d0:	4b03      	ldr	r3, [pc, #12]	@ (80152e0 <rcutils_get_env+0x28>)
 80152d2:	6023      	str	r3, [r4, #0]
 80152d4:	bd10      	pop	{r4, pc}
 80152d6:	4803      	ldr	r0, [pc, #12]	@ (80152e4 <rcutils_get_env+0x2c>)
 80152d8:	4770      	bx	lr
 80152da:	bf00      	nop
 80152dc:	0801a35c 	.word	0x0801a35c
 80152e0:	0801a74c 	.word	0x0801a74c
 80152e4:	0801a340 	.word	0x0801a340

080152e8 <rcutils_is_directory>:
 80152e8:	2000      	movs	r0, #0
 80152ea:	4770      	bx	lr

080152ec <rcutils_join_path>:
 80152ec:	b082      	sub	sp, #8
 80152ee:	e88d 000c 	stmia.w	sp, {r2, r3}
 80152f2:	2000      	movs	r0, #0
 80152f4:	b002      	add	sp, #8
 80152f6:	4770      	bx	lr

080152f8 <rcutils_to_native_path>:
 80152f8:	b084      	sub	sp, #16
 80152fa:	a801      	add	r0, sp, #4
 80152fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015300:	b004      	add	sp, #16
 8015302:	2000      	movs	r0, #0
 8015304:	4770      	bx	lr
 8015306:	bf00      	nop

08015308 <rcutils_format_string_limit>:
 8015308:	b40f      	push	{r0, r1, r2, r3}
 801530a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801530c:	b083      	sub	sp, #12
 801530e:	ac08      	add	r4, sp, #32
 8015310:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015316:	b34e      	cbz	r6, 801536c <rcutils_format_string_limit+0x64>
 8015318:	a808      	add	r0, sp, #32
 801531a:	f7f6 f9cf 	bl	800b6bc <rcutils_allocator_is_valid>
 801531e:	b328      	cbz	r0, 801536c <rcutils_format_string_limit+0x64>
 8015320:	2100      	movs	r1, #0
 8015322:	ab0f      	add	r3, sp, #60	@ 0x3c
 8015324:	4632      	mov	r2, r6
 8015326:	4608      	mov	r0, r1
 8015328:	e9cd 3300 	strd	r3, r3, [sp]
 801532c:	f000 f8f4 	bl	8015518 <rcutils_vsnprintf>
 8015330:	1c43      	adds	r3, r0, #1
 8015332:	4605      	mov	r5, r0
 8015334:	d01a      	beq.n	801536c <rcutils_format_string_limit+0x64>
 8015336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015338:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801533a:	1c47      	adds	r7, r0, #1
 801533c:	429f      	cmp	r7, r3
 801533e:	bf84      	itt	hi
 8015340:	461f      	movhi	r7, r3
 8015342:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8015346:	4638      	mov	r0, r7
 8015348:	9b08      	ldr	r3, [sp, #32]
 801534a:	4798      	blx	r3
 801534c:	4604      	mov	r4, r0
 801534e:	b168      	cbz	r0, 801536c <rcutils_format_string_limit+0x64>
 8015350:	9b01      	ldr	r3, [sp, #4]
 8015352:	4632      	mov	r2, r6
 8015354:	4639      	mov	r1, r7
 8015356:	f000 f8df 	bl	8015518 <rcutils_vsnprintf>
 801535a:	2800      	cmp	r0, #0
 801535c:	db02      	blt.n	8015364 <rcutils_format_string_limit+0x5c>
 801535e:	2300      	movs	r3, #0
 8015360:	5563      	strb	r3, [r4, r5]
 8015362:	e004      	b.n	801536e <rcutils_format_string_limit+0x66>
 8015364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015366:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015368:	4620      	mov	r0, r4
 801536a:	4798      	blx	r3
 801536c:	2400      	movs	r4, #0
 801536e:	4620      	mov	r0, r4
 8015370:	b003      	add	sp, #12
 8015372:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015376:	b004      	add	sp, #16
 8015378:	4770      	bx	lr
 801537a:	bf00      	nop

0801537c <rcutils_repl_str>:
 801537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015380:	ed2d 8b02 	vpush	{d8}
 8015384:	b087      	sub	sp, #28
 8015386:	4680      	mov	r8, r0
 8015388:	4608      	mov	r0, r1
 801538a:	f8cd 8004 	str.w	r8, [sp, #4]
 801538e:	ee08 2a10 	vmov	s16, r2
 8015392:	468a      	mov	sl, r1
 8015394:	4699      	mov	r9, r3
 8015396:	f7ea ff4d 	bl	8000234 <strlen>
 801539a:	2600      	movs	r6, #0
 801539c:	4647      	mov	r7, r8
 801539e:	9002      	str	r0, [sp, #8]
 80153a0:	46b3      	mov	fp, r6
 80153a2:	2510      	movs	r5, #16
 80153a4:	46b0      	mov	r8, r6
 80153a6:	e01d      	b.n	80153e4 <rcutils_repl_str+0x68>
 80153a8:	f10b 0b01 	add.w	fp, fp, #1
 80153ac:	455e      	cmp	r6, fp
 80153ae:	d211      	bcs.n	80153d4 <rcutils_repl_str+0x58>
 80153b0:	442e      	add	r6, r5
 80153b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80153b6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80153ba:	00b1      	lsls	r1, r6, #2
 80153bc:	4798      	blx	r3
 80153be:	2800      	cmp	r0, #0
 80153c0:	f000 8088 	beq.w	80154d4 <rcutils_repl_str+0x158>
 80153c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80153c8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80153cc:	4680      	mov	r8, r0
 80153ce:	bf28      	it	cs
 80153d0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80153d4:	9a01      	ldr	r2, [sp, #4]
 80153d6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80153da:	1aa2      	subs	r2, r4, r2
 80153dc:	f843 2c04 	str.w	r2, [r3, #-4]
 80153e0:	9b02      	ldr	r3, [sp, #8]
 80153e2:	18e7      	adds	r7, r4, r3
 80153e4:	4651      	mov	r1, sl
 80153e6:	4638      	mov	r0, r7
 80153e8:	f003 f87d 	bl	80184e6 <strstr>
 80153ec:	4604      	mov	r4, r0
 80153ee:	4640      	mov	r0, r8
 80153f0:	2c00      	cmp	r4, #0
 80153f2:	d1d9      	bne.n	80153a8 <rcutils_repl_str+0x2c>
 80153f4:	46b8      	mov	r8, r7
 80153f6:	4607      	mov	r7, r0
 80153f8:	4640      	mov	r0, r8
 80153fa:	f7ea ff1b 	bl	8000234 <strlen>
 80153fe:	9b01      	ldr	r3, [sp, #4]
 8015400:	eba8 0303 	sub.w	r3, r8, r3
 8015404:	181c      	adds	r4, r3, r0
 8015406:	9404      	str	r4, [sp, #16]
 8015408:	f1bb 0f00 	cmp.w	fp, #0
 801540c:	d04a      	beq.n	80154a4 <rcutils_repl_str+0x128>
 801540e:	ee18 0a10 	vmov	r0, s16
 8015412:	f7ea ff0f 	bl	8000234 <strlen>
 8015416:	9b02      	ldr	r3, [sp, #8]
 8015418:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801541c:	1ac3      	subs	r3, r0, r3
 801541e:	fb0b 4303 	mla	r3, fp, r3, r4
 8015422:	461a      	mov	r2, r3
 8015424:	9305      	str	r3, [sp, #20]
 8015426:	4606      	mov	r6, r0
 8015428:	f8d9 3000 	ldr.w	r3, [r9]
 801542c:	1c50      	adds	r0, r2, #1
 801542e:	4798      	blx	r3
 8015430:	9003      	str	r0, [sp, #12]
 8015432:	2800      	cmp	r0, #0
 8015434:	d04f      	beq.n	80154d6 <rcutils_repl_str+0x15a>
 8015436:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801543a:	683a      	ldr	r2, [r7, #0]
 801543c:	4641      	mov	r1, r8
 801543e:	f003 f8f4 	bl	801862a <memcpy>
 8015442:	683d      	ldr	r5, [r7, #0]
 8015444:	9b03      	ldr	r3, [sp, #12]
 8015446:	9701      	str	r7, [sp, #4]
 8015448:	46ba      	mov	sl, r7
 801544a:	441d      	add	r5, r3
 801544c:	9f02      	ldr	r7, [sp, #8]
 801544e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015452:	2401      	movs	r4, #1
 8015454:	46d1      	mov	r9, sl
 8015456:	ee18 aa10 	vmov	sl, s16
 801545a:	e00a      	b.n	8015472 <rcutils_repl_str+0xf6>
 801545c:	f8d9 5000 	ldr.w	r5, [r9]
 8015460:	1aaa      	subs	r2, r5, r2
 8015462:	1885      	adds	r5, r0, r2
 8015464:	f003 f8e1 	bl	801862a <memcpy>
 8015468:	45a3      	cmp	fp, r4
 801546a:	f104 0201 	add.w	r2, r4, #1
 801546e:	d935      	bls.n	80154dc <rcutils_repl_str+0x160>
 8015470:	4614      	mov	r4, r2
 8015472:	4632      	mov	r2, r6
 8015474:	4651      	mov	r1, sl
 8015476:	4628      	mov	r0, r5
 8015478:	f003 f8d7 	bl	801862a <memcpy>
 801547c:	f859 2b04 	ldr.w	r2, [r9], #4
 8015480:	45a3      	cmp	fp, r4
 8015482:	443a      	add	r2, r7
 8015484:	eb05 0006 	add.w	r0, r5, r6
 8015488:	eb08 0102 	add.w	r1, r8, r2
 801548c:	d1e6      	bne.n	801545c <rcutils_repl_str+0xe0>
 801548e:	9b04      	ldr	r3, [sp, #16]
 8015490:	1a9a      	subs	r2, r3, r2
 8015492:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8015496:	f003 f8c8 	bl	801862a <memcpy>
 801549a:	9a03      	ldr	r2, [sp, #12]
 801549c:	9905      	ldr	r1, [sp, #20]
 801549e:	2300      	movs	r3, #0
 80154a0:	5453      	strb	r3, [r2, r1]
 80154a2:	e00b      	b.n	80154bc <rcutils_repl_str+0x140>
 80154a4:	4620      	mov	r0, r4
 80154a6:	f8d9 3000 	ldr.w	r3, [r9]
 80154aa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80154ae:	3001      	adds	r0, #1
 80154b0:	4798      	blx	r3
 80154b2:	9003      	str	r0, [sp, #12]
 80154b4:	b110      	cbz	r0, 80154bc <rcutils_repl_str+0x140>
 80154b6:	9901      	ldr	r1, [sp, #4]
 80154b8:	f003 f8af 	bl	801861a <strcpy>
 80154bc:	4638      	mov	r0, r7
 80154be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80154c2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80154c6:	4798      	blx	r3
 80154c8:	9803      	ldr	r0, [sp, #12]
 80154ca:	b007      	add	sp, #28
 80154cc:	ecbd 8b02 	vpop	{d8}
 80154d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154d4:	4647      	mov	r7, r8
 80154d6:	2300      	movs	r3, #0
 80154d8:	9303      	str	r3, [sp, #12]
 80154da:	e7ef      	b.n	80154bc <rcutils_repl_str+0x140>
 80154dc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80154e0:	e7db      	b.n	801549a <rcutils_repl_str+0x11e>
 80154e2:	bf00      	nop

080154e4 <rcutils_snprintf>:
 80154e4:	b40c      	push	{r2, r3}
 80154e6:	b530      	push	{r4, r5, lr}
 80154e8:	b083      	sub	sp, #12
 80154ea:	ab06      	add	r3, sp, #24
 80154ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80154f0:	9301      	str	r3, [sp, #4]
 80154f2:	b152      	cbz	r2, 801550a <rcutils_snprintf+0x26>
 80154f4:	b138      	cbz	r0, 8015506 <rcutils_snprintf+0x22>
 80154f6:	b141      	cbz	r1, 801550a <rcutils_snprintf+0x26>
 80154f8:	f002 ff02 	bl	8018300 <vsniprintf>
 80154fc:	b003      	add	sp, #12
 80154fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015502:	b002      	add	sp, #8
 8015504:	4770      	bx	lr
 8015506:	2900      	cmp	r1, #0
 8015508:	d0f6      	beq.n	80154f8 <rcutils_snprintf+0x14>
 801550a:	f003 f859 	bl	80185c0 <__errno>
 801550e:	2316      	movs	r3, #22
 8015510:	6003      	str	r3, [r0, #0]
 8015512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015516:	e7f1      	b.n	80154fc <rcutils_snprintf+0x18>

08015518 <rcutils_vsnprintf>:
 8015518:	b570      	push	{r4, r5, r6, lr}
 801551a:	b13a      	cbz	r2, 801552c <rcutils_vsnprintf+0x14>
 801551c:	b120      	cbz	r0, 8015528 <rcutils_vsnprintf+0x10>
 801551e:	b129      	cbz	r1, 801552c <rcutils_vsnprintf+0x14>
 8015520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015524:	f002 beec 	b.w	8018300 <vsniprintf>
 8015528:	2900      	cmp	r1, #0
 801552a:	d0f9      	beq.n	8015520 <rcutils_vsnprintf+0x8>
 801552c:	f003 f848 	bl	80185c0 <__errno>
 8015530:	2316      	movs	r3, #22
 8015532:	6003      	str	r3, [r0, #0]
 8015534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015538:	bd70      	pop	{r4, r5, r6, pc}
 801553a:	bf00      	nop

0801553c <rcutils_strdup>:
 801553c:	b084      	sub	sp, #16
 801553e:	b570      	push	{r4, r5, r6, lr}
 8015540:	b082      	sub	sp, #8
 8015542:	ac07      	add	r4, sp, #28
 8015544:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015548:	4605      	mov	r5, r0
 801554a:	b1b0      	cbz	r0, 801557a <rcutils_strdup+0x3e>
 801554c:	f7ea fe72 	bl	8000234 <strlen>
 8015550:	1c42      	adds	r2, r0, #1
 8015552:	9b07      	ldr	r3, [sp, #28]
 8015554:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015556:	9201      	str	r2, [sp, #4]
 8015558:	4606      	mov	r6, r0
 801555a:	4610      	mov	r0, r2
 801555c:	4798      	blx	r3
 801555e:	4604      	mov	r4, r0
 8015560:	b128      	cbz	r0, 801556e <rcutils_strdup+0x32>
 8015562:	9a01      	ldr	r2, [sp, #4]
 8015564:	4629      	mov	r1, r5
 8015566:	f003 f860 	bl	801862a <memcpy>
 801556a:	2300      	movs	r3, #0
 801556c:	55a3      	strb	r3, [r4, r6]
 801556e:	4620      	mov	r0, r4
 8015570:	b002      	add	sp, #8
 8015572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015576:	b004      	add	sp, #16
 8015578:	4770      	bx	lr
 801557a:	4604      	mov	r4, r0
 801557c:	e7f7      	b.n	801556e <rcutils_strdup+0x32>
 801557e:	bf00      	nop

08015580 <rcutils_strndup>:
 8015580:	b082      	sub	sp, #8
 8015582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015584:	ac06      	add	r4, sp, #24
 8015586:	e884 000c 	stmia.w	r4, {r2, r3}
 801558a:	4605      	mov	r5, r0
 801558c:	b188      	cbz	r0, 80155b2 <rcutils_strndup+0x32>
 801558e:	1c4f      	adds	r7, r1, #1
 8015590:	460e      	mov	r6, r1
 8015592:	4638      	mov	r0, r7
 8015594:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015596:	4790      	blx	r2
 8015598:	4604      	mov	r4, r0
 801559a:	b128      	cbz	r0, 80155a8 <rcutils_strndup+0x28>
 801559c:	463a      	mov	r2, r7
 801559e:	4629      	mov	r1, r5
 80155a0:	f003 f843 	bl	801862a <memcpy>
 80155a4:	2300      	movs	r3, #0
 80155a6:	55a3      	strb	r3, [r4, r6]
 80155a8:	4620      	mov	r0, r4
 80155aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80155ae:	b002      	add	sp, #8
 80155b0:	4770      	bx	lr
 80155b2:	4604      	mov	r4, r0
 80155b4:	e7f8      	b.n	80155a8 <rcutils_strndup+0x28>
 80155b6:	bf00      	nop

080155b8 <rcutils_get_zero_initialized_string_map>:
 80155b8:	4b01      	ldr	r3, [pc, #4]	@ (80155c0 <rcutils_get_zero_initialized_string_map+0x8>)
 80155ba:	2000      	movs	r0, #0
 80155bc:	6018      	str	r0, [r3, #0]
 80155be:	4770      	bx	lr
 80155c0:	2000b23c 	.word	0x2000b23c

080155c4 <rcutils_string_map_reserve>:
 80155c4:	2800      	cmp	r0, #0
 80155c6:	d05f      	beq.n	8015688 <rcutils_string_map_reserve+0xc4>
 80155c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155cc:	460c      	mov	r4, r1
 80155ce:	6801      	ldr	r1, [r0, #0]
 80155d0:	b082      	sub	sp, #8
 80155d2:	4605      	mov	r5, r0
 80155d4:	b129      	cbz	r1, 80155e2 <rcutils_string_map_reserve+0x1e>
 80155d6:	68cb      	ldr	r3, [r1, #12]
 80155d8:	42a3      	cmp	r3, r4
 80155da:	d906      	bls.n	80155ea <rcutils_string_map_reserve+0x26>
 80155dc:	461c      	mov	r4, r3
 80155de:	2900      	cmp	r1, #0
 80155e0:	d1f9      	bne.n	80155d6 <rcutils_string_map_reserve+0x12>
 80155e2:	201f      	movs	r0, #31
 80155e4:	b002      	add	sp, #8
 80155e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ea:	688b      	ldr	r3, [r1, #8]
 80155ec:	42a3      	cmp	r3, r4
 80155ee:	d047      	beq.n	8015680 <rcutils_string_map_reserve+0xbc>
 80155f0:	6a0e      	ldr	r6, [r1, #32]
 80155f2:	2c00      	cmp	r4, #0
 80155f4:	d034      	beq.n	8015660 <rcutils_string_map_reserve+0x9c>
 80155f6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80155fa:	d243      	bcs.n	8015684 <rcutils_string_map_reserve+0xc0>
 80155fc:	00a7      	lsls	r7, r4, #2
 80155fe:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8015602:	6808      	ldr	r0, [r1, #0]
 8015604:	4632      	mov	r2, r6
 8015606:	4639      	mov	r1, r7
 8015608:	47c0      	blx	r8
 801560a:	2800      	cmp	r0, #0
 801560c:	d03a      	beq.n	8015684 <rcutils_string_map_reserve+0xc0>
 801560e:	682b      	ldr	r3, [r5, #0]
 8015610:	4632      	mov	r2, r6
 8015612:	6018      	str	r0, [r3, #0]
 8015614:	4639      	mov	r1, r7
 8015616:	6858      	ldr	r0, [r3, #4]
 8015618:	47c0      	blx	r8
 801561a:	2800      	cmp	r0, #0
 801561c:	d032      	beq.n	8015684 <rcutils_string_map_reserve+0xc0>
 801561e:	682d      	ldr	r5, [r5, #0]
 8015620:	68ab      	ldr	r3, [r5, #8]
 8015622:	6068      	str	r0, [r5, #4]
 8015624:	42a3      	cmp	r3, r4
 8015626:	d226      	bcs.n	8015676 <rcutils_string_map_reserve+0xb2>
 8015628:	682a      	ldr	r2, [r5, #0]
 801562a:	eb00 0c07 	add.w	ip, r0, r7
 801562e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8015632:	45e6      	cmp	lr, ip
 8015634:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8015638:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801563c:	d203      	bcs.n	8015646 <rcutils_string_map_reserve+0x82>
 801563e:	eb02 0c07 	add.w	ip, r2, r7
 8015642:	4566      	cmp	r6, ip
 8015644:	d322      	bcc.n	801568c <rcutils_string_map_reserve+0xc8>
 8015646:	1ae3      	subs	r3, r4, r3
 8015648:	009a      	lsls	r2, r3, #2
 801564a:	4670      	mov	r0, lr
 801564c:	2100      	movs	r1, #0
 801564e:	9201      	str	r2, [sp, #4]
 8015650:	f002 ff22 	bl	8018498 <memset>
 8015654:	9a01      	ldr	r2, [sp, #4]
 8015656:	2100      	movs	r1, #0
 8015658:	4630      	mov	r0, r6
 801565a:	f002 ff1d 	bl	8018498 <memset>
 801565e:	e00a      	b.n	8015676 <rcutils_string_map_reserve+0xb2>
 8015660:	694f      	ldr	r7, [r1, #20]
 8015662:	6808      	ldr	r0, [r1, #0]
 8015664:	4631      	mov	r1, r6
 8015666:	47b8      	blx	r7
 8015668:	682b      	ldr	r3, [r5, #0]
 801566a:	4631      	mov	r1, r6
 801566c:	6858      	ldr	r0, [r3, #4]
 801566e:	601c      	str	r4, [r3, #0]
 8015670:	47b8      	blx	r7
 8015672:	682d      	ldr	r5, [r5, #0]
 8015674:	606c      	str	r4, [r5, #4]
 8015676:	2000      	movs	r0, #0
 8015678:	60ac      	str	r4, [r5, #8]
 801567a:	b002      	add	sp, #8
 801567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015680:	2000      	movs	r0, #0
 8015682:	e7af      	b.n	80155e4 <rcutils_string_map_reserve+0x20>
 8015684:	200a      	movs	r0, #10
 8015686:	e7ad      	b.n	80155e4 <rcutils_string_map_reserve+0x20>
 8015688:	200b      	movs	r0, #11
 801568a:	4770      	bx	lr
 801568c:	1f0b      	subs	r3, r1, #4
 801568e:	4418      	add	r0, r3
 8015690:	4413      	add	r3, r2
 8015692:	3a04      	subs	r2, #4
 8015694:	4417      	add	r7, r2
 8015696:	2200      	movs	r2, #0
 8015698:	f843 2f04 	str.w	r2, [r3, #4]!
 801569c:	42bb      	cmp	r3, r7
 801569e:	f840 2f04 	str.w	r2, [r0, #4]!
 80156a2:	d1f9      	bne.n	8015698 <rcutils_string_map_reserve+0xd4>
 80156a4:	e7e7      	b.n	8015676 <rcutils_string_map_reserve+0xb2>
 80156a6:	bf00      	nop

080156a8 <rcutils_string_map_init>:
 80156a8:	b082      	sub	sp, #8
 80156aa:	b570      	push	{r4, r5, r6, lr}
 80156ac:	ac04      	add	r4, sp, #16
 80156ae:	e884 000c 	stmia.w	r4, {r2, r3}
 80156b2:	b380      	cbz	r0, 8015716 <rcutils_string_map_init+0x6e>
 80156b4:	6806      	ldr	r6, [r0, #0]
 80156b6:	4604      	mov	r4, r0
 80156b8:	b12e      	cbz	r6, 80156c6 <rcutils_string_map_init+0x1e>
 80156ba:	251e      	movs	r5, #30
 80156bc:	4628      	mov	r0, r5
 80156be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156c2:	b002      	add	sp, #8
 80156c4:	4770      	bx	lr
 80156c6:	a804      	add	r0, sp, #16
 80156c8:	460d      	mov	r5, r1
 80156ca:	f7f5 fff7 	bl	800b6bc <rcutils_allocator_is_valid>
 80156ce:	b310      	cbz	r0, 8015716 <rcutils_string_map_init+0x6e>
 80156d0:	9b04      	ldr	r3, [sp, #16]
 80156d2:	9908      	ldr	r1, [sp, #32]
 80156d4:	2024      	movs	r0, #36	@ 0x24
 80156d6:	4798      	blx	r3
 80156d8:	6020      	str	r0, [r4, #0]
 80156da:	b310      	cbz	r0, 8015722 <rcutils_string_map_init+0x7a>
 80156dc:	f10d 0e10 	add.w	lr, sp, #16
 80156e0:	e9c0 6600 	strd	r6, r6, [r0]
 80156e4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80156e8:	f100 0c10 	add.w	ip, r0, #16
 80156ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80156f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156f4:	f8de 3000 	ldr.w	r3, [lr]
 80156f8:	f8cc 3000 	str.w	r3, [ip]
 80156fc:	4629      	mov	r1, r5
 80156fe:	4620      	mov	r0, r4
 8015700:	f7ff ff60 	bl	80155c4 <rcutils_string_map_reserve>
 8015704:	4605      	mov	r5, r0
 8015706:	2800      	cmp	r0, #0
 8015708:	d0d8      	beq.n	80156bc <rcutils_string_map_init+0x14>
 801570a:	9b05      	ldr	r3, [sp, #20]
 801570c:	9908      	ldr	r1, [sp, #32]
 801570e:	6820      	ldr	r0, [r4, #0]
 8015710:	4798      	blx	r3
 8015712:	6026      	str	r6, [r4, #0]
 8015714:	e7d2      	b.n	80156bc <rcutils_string_map_init+0x14>
 8015716:	250b      	movs	r5, #11
 8015718:	4628      	mov	r0, r5
 801571a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801571e:	b002      	add	sp, #8
 8015720:	4770      	bx	lr
 8015722:	250a      	movs	r5, #10
 8015724:	e7ca      	b.n	80156bc <rcutils_string_map_init+0x14>
 8015726:	bf00      	nop

08015728 <rcutils_string_map_fini>:
 8015728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801572c:	b082      	sub	sp, #8
 801572e:	2800      	cmp	r0, #0
 8015730:	d03a      	beq.n	80157a8 <rcutils_string_map_fini+0x80>
 8015732:	6804      	ldr	r4, [r0, #0]
 8015734:	4606      	mov	r6, r0
 8015736:	2c00      	cmp	r4, #0
 8015738:	d032      	beq.n	80157a0 <rcutils_string_map_fini+0x78>
 801573a:	68a3      	ldr	r3, [r4, #8]
 801573c:	b32b      	cbz	r3, 801578a <rcutils_string_map_fini+0x62>
 801573e:	2500      	movs	r5, #0
 8015740:	6822      	ldr	r2, [r4, #0]
 8015742:	462f      	mov	r7, r5
 8015744:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015748:	b1e0      	cbz	r0, 8015784 <rcutils_string_map_fini+0x5c>
 801574a:	6a21      	ldr	r1, [r4, #32]
 801574c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8015750:	9101      	str	r1, [sp, #4]
 8015752:	47c0      	blx	r8
 8015754:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015758:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801575c:	9901      	ldr	r1, [sp, #4]
 801575e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015762:	47c0      	blx	r8
 8015764:	68e3      	ldr	r3, [r4, #12]
 8015766:	6862      	ldr	r2, [r4, #4]
 8015768:	3b01      	subs	r3, #1
 801576a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801576e:	60e3      	str	r3, [r4, #12]
 8015770:	6834      	ldr	r4, [r6, #0]
 8015772:	68a3      	ldr	r3, [r4, #8]
 8015774:	3501      	adds	r5, #1
 8015776:	429d      	cmp	r5, r3
 8015778:	d207      	bcs.n	801578a <rcutils_string_map_fini+0x62>
 801577a:	6822      	ldr	r2, [r4, #0]
 801577c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015780:	2800      	cmp	r0, #0
 8015782:	d1e2      	bne.n	801574a <rcutils_string_map_fini+0x22>
 8015784:	3501      	adds	r5, #1
 8015786:	429d      	cmp	r5, r3
 8015788:	d3dc      	bcc.n	8015744 <rcutils_string_map_fini+0x1c>
 801578a:	2100      	movs	r1, #0
 801578c:	4630      	mov	r0, r6
 801578e:	f7ff ff19 	bl	80155c4 <rcutils_string_map_reserve>
 8015792:	4604      	mov	r4, r0
 8015794:	b920      	cbnz	r0, 80157a0 <rcutils_string_map_fini+0x78>
 8015796:	6830      	ldr	r0, [r6, #0]
 8015798:	6943      	ldr	r3, [r0, #20]
 801579a:	6a01      	ldr	r1, [r0, #32]
 801579c:	4798      	blx	r3
 801579e:	6034      	str	r4, [r6, #0]
 80157a0:	4620      	mov	r0, r4
 80157a2:	b002      	add	sp, #8
 80157a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157a8:	240b      	movs	r4, #11
 80157aa:	4620      	mov	r0, r4
 80157ac:	b002      	add	sp, #8
 80157ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157b2:	bf00      	nop

080157b4 <rcutils_string_map_getn>:
 80157b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b8:	b300      	cbz	r0, 80157fc <rcutils_string_map_getn+0x48>
 80157ba:	6807      	ldr	r7, [r0, #0]
 80157bc:	b1ff      	cbz	r7, 80157fe <rcutils_string_map_getn+0x4a>
 80157be:	4688      	mov	r8, r1
 80157c0:	b1e1      	cbz	r1, 80157fc <rcutils_string_map_getn+0x48>
 80157c2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80157c6:	683e      	ldr	r6, [r7, #0]
 80157c8:	f1ba 0f00 	cmp.w	sl, #0
 80157cc:	d016      	beq.n	80157fc <rcutils_string_map_getn+0x48>
 80157ce:	4691      	mov	r9, r2
 80157d0:	3e04      	subs	r6, #4
 80157d2:	2400      	movs	r4, #0
 80157d4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80157d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80157dc:	4628      	mov	r0, r5
 80157de:	3401      	adds	r4, #1
 80157e0:	b155      	cbz	r5, 80157f8 <rcutils_string_map_getn+0x44>
 80157e2:	f7ea fd27 	bl	8000234 <strlen>
 80157e6:	4548      	cmp	r0, r9
 80157e8:	4602      	mov	r2, r0
 80157ea:	4629      	mov	r1, r5
 80157ec:	bf38      	it	cc
 80157ee:	464a      	movcc	r2, r9
 80157f0:	4640      	mov	r0, r8
 80157f2:	f002 fe66 	bl	80184c2 <strncmp>
 80157f6:	b128      	cbz	r0, 8015804 <rcutils_string_map_getn+0x50>
 80157f8:	45a2      	cmp	sl, r4
 80157fa:	d1eb      	bne.n	80157d4 <rcutils_string_map_getn+0x20>
 80157fc:	2700      	movs	r7, #0
 80157fe:	4638      	mov	r0, r7
 8015800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	f853 700b 	ldr.w	r7, [r3, fp]
 801580a:	4638      	mov	r0, r7
 801580c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015810 <rmw_get_zero_initialized_context>:
 8015810:	b510      	push	{r4, lr}
 8015812:	4604      	mov	r4, r0
 8015814:	3010      	adds	r0, #16
 8015816:	f7f5 ffe3 	bl	800b7e0 <rmw_get_zero_initialized_init_options>
 801581a:	2300      	movs	r3, #0
 801581c:	2000      	movs	r0, #0
 801581e:	2100      	movs	r1, #0
 8015820:	e9c4 0100 	strd	r0, r1, [r4]
 8015824:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8015828:	60a3      	str	r3, [r4, #8]
 801582a:	4620      	mov	r0, r4
 801582c:	bd10      	pop	{r4, pc}
 801582e:	bf00      	nop

08015830 <rmw_time_equal>:
 8015830:	b4f0      	push	{r4, r5, r6, r7}
 8015832:	b084      	sub	sp, #16
 8015834:	ac04      	add	r4, sp, #16
 8015836:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801583a:	4603      	mov	r3, r0
 801583c:	4924      	ldr	r1, [pc, #144]	@ (80158d0 <rmw_time_equal+0xa0>)
 801583e:	9e03      	ldr	r6, [sp, #12]
 8015840:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015844:	2202      	movs	r2, #2
 8015846:	4299      	cmp	r1, r3
 8015848:	41aa      	sbcs	r2, r5
 801584a:	d330      	bcc.n	80158ae <rmw_time_equal+0x7e>
 801584c:	4c21      	ldr	r4, [pc, #132]	@ (80158d4 <rmw_time_equal+0xa4>)
 801584e:	fba3 3204 	umull	r3, r2, r3, r4
 8015852:	fb04 2205 	mla	r2, r4, r5, r2
 8015856:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801585a:	43dd      	mvns	r5, r3
 801585c:	1a8c      	subs	r4, r1, r2
 801585e:	4285      	cmp	r5, r0
 8015860:	41b4      	sbcs	r4, r6
 8015862:	d332      	bcc.n	80158ca <rmw_time_equal+0x9a>
 8015864:	eb10 0c03 	adds.w	ip, r0, r3
 8015868:	eb42 0106 	adc.w	r1, r2, r6
 801586c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015870:	4817      	ldr	r0, [pc, #92]	@ (80158d0 <rmw_time_equal+0xa0>)
 8015872:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015874:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8015876:	2202      	movs	r2, #2
 8015878:	4298      	cmp	r0, r3
 801587a:	41b2      	sbcs	r2, r6
 801587c:	d31c      	bcc.n	80158b8 <rmw_time_equal+0x88>
 801587e:	4c15      	ldr	r4, [pc, #84]	@ (80158d4 <rmw_time_equal+0xa4>)
 8015880:	fba3 3204 	umull	r3, r2, r3, r4
 8015884:	fb04 2206 	mla	r2, r4, r6, r2
 8015888:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801588c:	43de      	mvns	r6, r3
 801588e:	1a84      	subs	r4, r0, r2
 8015890:	42ae      	cmp	r6, r5
 8015892:	41bc      	sbcs	r4, r7
 8015894:	d315      	bcc.n	80158c2 <rmw_time_equal+0x92>
 8015896:	195b      	adds	r3, r3, r5
 8015898:	eb42 0207 	adc.w	r2, r2, r7
 801589c:	428a      	cmp	r2, r1
 801589e:	bf08      	it	eq
 80158a0:	4563      	cmpeq	r3, ip
 80158a2:	bf0c      	ite	eq
 80158a4:	2001      	moveq	r0, #1
 80158a6:	2000      	movne	r0, #0
 80158a8:	b004      	add	sp, #16
 80158aa:	bcf0      	pop	{r4, r5, r6, r7}
 80158ac:	4770      	bx	lr
 80158ae:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80158b2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80158b6:	e7d9      	b.n	801586c <rmw_time_equal+0x3c>
 80158b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80158bc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80158c0:	e7ec      	b.n	801589c <rmw_time_equal+0x6c>
 80158c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80158c6:	4602      	mov	r2, r0
 80158c8:	e7e8      	b.n	801589c <rmw_time_equal+0x6c>
 80158ca:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80158ce:	e7cd      	b.n	801586c <rmw_time_equal+0x3c>
 80158d0:	25c17d04 	.word	0x25c17d04
 80158d4:	3b9aca00 	.word	0x3b9aca00

080158d8 <rmw_time_total_nsec>:
 80158d8:	b470      	push	{r4, r5, r6}
 80158da:	b085      	sub	sp, #20
 80158dc:	ac04      	add	r4, sp, #16
 80158de:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80158e2:	4603      	mov	r3, r0
 80158e4:	4912      	ldr	r1, [pc, #72]	@ (8015930 <rmw_time_total_nsec+0x58>)
 80158e6:	9e03      	ldr	r6, [sp, #12]
 80158e8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80158ec:	2202      	movs	r2, #2
 80158ee:	4299      	cmp	r1, r3
 80158f0:	41aa      	sbcs	r2, r5
 80158f2:	d311      	bcc.n	8015918 <rmw_time_total_nsec+0x40>
 80158f4:	4c0f      	ldr	r4, [pc, #60]	@ (8015934 <rmw_time_total_nsec+0x5c>)
 80158f6:	fba3 3204 	umull	r3, r2, r3, r4
 80158fa:	fb04 2205 	mla	r2, r4, r5, r2
 80158fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015902:	43dd      	mvns	r5, r3
 8015904:	1a8c      	subs	r4, r1, r2
 8015906:	4285      	cmp	r5, r0
 8015908:	41b4      	sbcs	r4, r6
 801590a:	d30c      	bcc.n	8015926 <rmw_time_total_nsec+0x4e>
 801590c:	1818      	adds	r0, r3, r0
 801590e:	eb42 0106 	adc.w	r1, r2, r6
 8015912:	b005      	add	sp, #20
 8015914:	bc70      	pop	{r4, r5, r6}
 8015916:	4770      	bx	lr
 8015918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801591c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015920:	b005      	add	sp, #20
 8015922:	bc70      	pop	{r4, r5, r6}
 8015924:	4770      	bx	lr
 8015926:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801592a:	b005      	add	sp, #20
 801592c:	bc70      	pop	{r4, r5, r6}
 801592e:	4770      	bx	lr
 8015930:	25c17d04 	.word	0x25c17d04
 8015934:	3b9aca00 	.word	0x3b9aca00

08015938 <rmw_get_zero_initialized_message_info>:
 8015938:	b510      	push	{r4, lr}
 801593a:	2240      	movs	r2, #64	@ 0x40
 801593c:	4604      	mov	r4, r0
 801593e:	2100      	movs	r1, #0
 8015940:	f002 fdaa 	bl	8018498 <memset>
 8015944:	4620      	mov	r0, r4
 8015946:	bd10      	pop	{r4, pc}

08015948 <rmw_validate_full_topic_name>:
 8015948:	2800      	cmp	r0, #0
 801594a:	d057      	beq.n	80159fc <rmw_validate_full_topic_name+0xb4>
 801594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015950:	460d      	mov	r5, r1
 8015952:	2900      	cmp	r1, #0
 8015954:	d054      	beq.n	8015a00 <rmw_validate_full_topic_name+0xb8>
 8015956:	4616      	mov	r6, r2
 8015958:	4604      	mov	r4, r0
 801595a:	f7ea fc6b 	bl	8000234 <strlen>
 801595e:	b148      	cbz	r0, 8015974 <rmw_validate_full_topic_name+0x2c>
 8015960:	7823      	ldrb	r3, [r4, #0]
 8015962:	2b2f      	cmp	r3, #47	@ 0x2f
 8015964:	d00d      	beq.n	8015982 <rmw_validate_full_topic_name+0x3a>
 8015966:	2302      	movs	r3, #2
 8015968:	602b      	str	r3, [r5, #0]
 801596a:	b13e      	cbz	r6, 801597c <rmw_validate_full_topic_name+0x34>
 801596c:	2000      	movs	r0, #0
 801596e:	6030      	str	r0, [r6, #0]
 8015970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015974:	2301      	movs	r3, #1
 8015976:	602b      	str	r3, [r5, #0]
 8015978:	2e00      	cmp	r6, #0
 801597a:	d1f7      	bne.n	801596c <rmw_validate_full_topic_name+0x24>
 801597c:	2000      	movs	r0, #0
 801597e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015982:	1e43      	subs	r3, r0, #1
 8015984:	5ce2      	ldrb	r2, [r4, r3]
 8015986:	2a2f      	cmp	r2, #47	@ 0x2f
 8015988:	d03c      	beq.n	8015a04 <rmw_validate_full_topic_name+0xbc>
 801598a:	1e63      	subs	r3, r4, #1
 801598c:	eb03 0800 	add.w	r8, r3, r0
 8015990:	f1c4 0e01 	rsb	lr, r4, #1
 8015994:	eb0e 0703 	add.w	r7, lr, r3
 8015998:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801599c:	f021 0220 	bic.w	r2, r1, #32
 80159a0:	3a41      	subs	r2, #65	@ 0x41
 80159a2:	2a19      	cmp	r2, #25
 80159a4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80159a8:	d90b      	bls.n	80159c2 <rmw_validate_full_topic_name+0x7a>
 80159aa:	295f      	cmp	r1, #95	@ 0x5f
 80159ac:	d009      	beq.n	80159c2 <rmw_validate_full_topic_name+0x7a>
 80159ae:	f1bc 0f0a 	cmp.w	ip, #10
 80159b2:	d906      	bls.n	80159c2 <rmw_validate_full_topic_name+0x7a>
 80159b4:	2304      	movs	r3, #4
 80159b6:	602b      	str	r3, [r5, #0]
 80159b8:	2e00      	cmp	r6, #0
 80159ba:	d0df      	beq.n	801597c <rmw_validate_full_topic_name+0x34>
 80159bc:	6037      	str	r7, [r6, #0]
 80159be:	2000      	movs	r0, #0
 80159c0:	e7d6      	b.n	8015970 <rmw_validate_full_topic_name+0x28>
 80159c2:	4543      	cmp	r3, r8
 80159c4:	d1e6      	bne.n	8015994 <rmw_validate_full_topic_name+0x4c>
 80159c6:	4f1a      	ldr	r7, [pc, #104]	@ (8015a30 <rmw_validate_full_topic_name+0xe8>)
 80159c8:	2301      	movs	r3, #1
 80159ca:	e004      	b.n	80159d6 <rmw_validate_full_topic_name+0x8e>
 80159cc:	4298      	cmp	r0, r3
 80159ce:	f104 0401 	add.w	r4, r4, #1
 80159d2:	d91c      	bls.n	8015a0e <rmw_validate_full_topic_name+0xc6>
 80159d4:	4613      	mov	r3, r2
 80159d6:	4298      	cmp	r0, r3
 80159d8:	f103 0201 	add.w	r2, r3, #1
 80159dc:	d0f6      	beq.n	80159cc <rmw_validate_full_topic_name+0x84>
 80159de:	7821      	ldrb	r1, [r4, #0]
 80159e0:	292f      	cmp	r1, #47	@ 0x2f
 80159e2:	d1f3      	bne.n	80159cc <rmw_validate_full_topic_name+0x84>
 80159e4:	7861      	ldrb	r1, [r4, #1]
 80159e6:	292f      	cmp	r1, #47	@ 0x2f
 80159e8:	d01c      	beq.n	8015a24 <rmw_validate_full_topic_name+0xdc>
 80159ea:	5dc9      	ldrb	r1, [r1, r7]
 80159ec:	0749      	lsls	r1, r1, #29
 80159ee:	d5ed      	bpl.n	80159cc <rmw_validate_full_topic_name+0x84>
 80159f0:	2206      	movs	r2, #6
 80159f2:	602a      	str	r2, [r5, #0]
 80159f4:	2e00      	cmp	r6, #0
 80159f6:	d0c1      	beq.n	801597c <rmw_validate_full_topic_name+0x34>
 80159f8:	6033      	str	r3, [r6, #0]
 80159fa:	e7bf      	b.n	801597c <rmw_validate_full_topic_name+0x34>
 80159fc:	200b      	movs	r0, #11
 80159fe:	4770      	bx	lr
 8015a00:	200b      	movs	r0, #11
 8015a02:	e7b5      	b.n	8015970 <rmw_validate_full_topic_name+0x28>
 8015a04:	2203      	movs	r2, #3
 8015a06:	602a      	str	r2, [r5, #0]
 8015a08:	2e00      	cmp	r6, #0
 8015a0a:	d1f5      	bne.n	80159f8 <rmw_validate_full_topic_name+0xb0>
 8015a0c:	e7b6      	b.n	801597c <rmw_validate_full_topic_name+0x34>
 8015a0e:	28f7      	cmp	r0, #247	@ 0xf7
 8015a10:	d802      	bhi.n	8015a18 <rmw_validate_full_topic_name+0xd0>
 8015a12:	2000      	movs	r0, #0
 8015a14:	6028      	str	r0, [r5, #0]
 8015a16:	e7ab      	b.n	8015970 <rmw_validate_full_topic_name+0x28>
 8015a18:	2307      	movs	r3, #7
 8015a1a:	602b      	str	r3, [r5, #0]
 8015a1c:	2e00      	cmp	r6, #0
 8015a1e:	d0ad      	beq.n	801597c <rmw_validate_full_topic_name+0x34>
 8015a20:	23f6      	movs	r3, #246	@ 0xf6
 8015a22:	e7e9      	b.n	80159f8 <rmw_validate_full_topic_name+0xb0>
 8015a24:	2205      	movs	r2, #5
 8015a26:	602a      	str	r2, [r5, #0]
 8015a28:	2e00      	cmp	r6, #0
 8015a2a:	d1e5      	bne.n	80159f8 <rmw_validate_full_topic_name+0xb0>
 8015a2c:	e7a6      	b.n	801597c <rmw_validate_full_topic_name+0x34>
 8015a2e:	bf00      	nop
 8015a30:	0801a862 	.word	0x0801a862

08015a34 <rmw_validate_namespace_with_size>:
 8015a34:	b340      	cbz	r0, 8015a88 <rmw_validate_namespace_with_size+0x54>
 8015a36:	b570      	push	{r4, r5, r6, lr}
 8015a38:	4614      	mov	r4, r2
 8015a3a:	b0c2      	sub	sp, #264	@ 0x108
 8015a3c:	b332      	cbz	r2, 8015a8c <rmw_validate_namespace_with_size+0x58>
 8015a3e:	2901      	cmp	r1, #1
 8015a40:	460d      	mov	r5, r1
 8015a42:	461e      	mov	r6, r3
 8015a44:	d102      	bne.n	8015a4c <rmw_validate_namespace_with_size+0x18>
 8015a46:	7803      	ldrb	r3, [r0, #0]
 8015a48:	2b2f      	cmp	r3, #47	@ 0x2f
 8015a4a:	d012      	beq.n	8015a72 <rmw_validate_namespace_with_size+0x3e>
 8015a4c:	aa01      	add	r2, sp, #4
 8015a4e:	4669      	mov	r1, sp
 8015a50:	f7ff ff7a 	bl	8015948 <rmw_validate_full_topic_name>
 8015a54:	b978      	cbnz	r0, 8015a76 <rmw_validate_namespace_with_size+0x42>
 8015a56:	9b00      	ldr	r3, [sp, #0]
 8015a58:	b14b      	cbz	r3, 8015a6e <rmw_validate_namespace_with_size+0x3a>
 8015a5a:	2b07      	cmp	r3, #7
 8015a5c:	d007      	beq.n	8015a6e <rmw_validate_namespace_with_size+0x3a>
 8015a5e:	1e5a      	subs	r2, r3, #1
 8015a60:	2a05      	cmp	r2, #5
 8015a62:	d82b      	bhi.n	8015abc <rmw_validate_namespace_with_size+0x88>
 8015a64:	e8df f002 	tbb	[pc, r2]
 8015a68:	1e212427 	.word	0x1e212427
 8015a6c:	141b      	.short	0x141b
 8015a6e:	2df5      	cmp	r5, #245	@ 0xf5
 8015a70:	d803      	bhi.n	8015a7a <rmw_validate_namespace_with_size+0x46>
 8015a72:	2000      	movs	r0, #0
 8015a74:	6020      	str	r0, [r4, #0]
 8015a76:	b042      	add	sp, #264	@ 0x108
 8015a78:	bd70      	pop	{r4, r5, r6, pc}
 8015a7a:	2307      	movs	r3, #7
 8015a7c:	6023      	str	r3, [r4, #0]
 8015a7e:	2e00      	cmp	r6, #0
 8015a80:	d0f9      	beq.n	8015a76 <rmw_validate_namespace_with_size+0x42>
 8015a82:	23f4      	movs	r3, #244	@ 0xf4
 8015a84:	6033      	str	r3, [r6, #0]
 8015a86:	e7f6      	b.n	8015a76 <rmw_validate_namespace_with_size+0x42>
 8015a88:	200b      	movs	r0, #11
 8015a8a:	4770      	bx	lr
 8015a8c:	200b      	movs	r0, #11
 8015a8e:	e7f2      	b.n	8015a76 <rmw_validate_namespace_with_size+0x42>
 8015a90:	2306      	movs	r3, #6
 8015a92:	6023      	str	r3, [r4, #0]
 8015a94:	2e00      	cmp	r6, #0
 8015a96:	d0ee      	beq.n	8015a76 <rmw_validate_namespace_with_size+0x42>
 8015a98:	9b01      	ldr	r3, [sp, #4]
 8015a9a:	6033      	str	r3, [r6, #0]
 8015a9c:	e7eb      	b.n	8015a76 <rmw_validate_namespace_with_size+0x42>
 8015a9e:	2305      	movs	r3, #5
 8015aa0:	6023      	str	r3, [r4, #0]
 8015aa2:	e7f7      	b.n	8015a94 <rmw_validate_namespace_with_size+0x60>
 8015aa4:	2304      	movs	r3, #4
 8015aa6:	6023      	str	r3, [r4, #0]
 8015aa8:	e7f4      	b.n	8015a94 <rmw_validate_namespace_with_size+0x60>
 8015aaa:	2303      	movs	r3, #3
 8015aac:	6023      	str	r3, [r4, #0]
 8015aae:	e7f1      	b.n	8015a94 <rmw_validate_namespace_with_size+0x60>
 8015ab0:	2302      	movs	r3, #2
 8015ab2:	6023      	str	r3, [r4, #0]
 8015ab4:	e7ee      	b.n	8015a94 <rmw_validate_namespace_with_size+0x60>
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	6023      	str	r3, [r4, #0]
 8015aba:	e7eb      	b.n	8015a94 <rmw_validate_namespace_with_size+0x60>
 8015abc:	4a03      	ldr	r2, [pc, #12]	@ (8015acc <rmw_validate_namespace_with_size+0x98>)
 8015abe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015ac2:	a802      	add	r0, sp, #8
 8015ac4:	f7ff fd0e 	bl	80154e4 <rcutils_snprintf>
 8015ac8:	2001      	movs	r0, #1
 8015aca:	e7d4      	b.n	8015a76 <rmw_validate_namespace_with_size+0x42>
 8015acc:	0801a378 	.word	0x0801a378

08015ad0 <rmw_validate_namespace>:
 8015ad0:	b168      	cbz	r0, 8015aee <rmw_validate_namespace+0x1e>
 8015ad2:	b570      	push	{r4, r5, r6, lr}
 8015ad4:	460d      	mov	r5, r1
 8015ad6:	4616      	mov	r6, r2
 8015ad8:	4604      	mov	r4, r0
 8015ada:	f7ea fbab 	bl	8000234 <strlen>
 8015ade:	4633      	mov	r3, r6
 8015ae0:	4601      	mov	r1, r0
 8015ae2:	462a      	mov	r2, r5
 8015ae4:	4620      	mov	r0, r4
 8015ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015aea:	f7ff bfa3 	b.w	8015a34 <rmw_validate_namespace_with_size>
 8015aee:	200b      	movs	r0, #11
 8015af0:	4770      	bx	lr
 8015af2:	bf00      	nop

08015af4 <rmw_namespace_validation_result_string>:
 8015af4:	2807      	cmp	r0, #7
 8015af6:	bf9a      	itte	ls
 8015af8:	4b02      	ldrls	r3, [pc, #8]	@ (8015b04 <rmw_namespace_validation_result_string+0x10>)
 8015afa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015afe:	4802      	ldrhi	r0, [pc, #8]	@ (8015b08 <rmw_namespace_validation_result_string+0x14>)
 8015b00:	4770      	bx	lr
 8015b02:	bf00      	nop
 8015b04:	0801a570 	.word	0x0801a570
 8015b08:	0801a3c8 	.word	0x0801a3c8

08015b0c <rmw_validate_node_name>:
 8015b0c:	2800      	cmp	r0, #0
 8015b0e:	d03b      	beq.n	8015b88 <rmw_validate_node_name+0x7c>
 8015b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b14:	460d      	mov	r5, r1
 8015b16:	2900      	cmp	r1, #0
 8015b18:	d038      	beq.n	8015b8c <rmw_validate_node_name+0x80>
 8015b1a:	4616      	mov	r6, r2
 8015b1c:	4604      	mov	r4, r0
 8015b1e:	f7ea fb89 	bl	8000234 <strlen>
 8015b22:	b1e0      	cbz	r0, 8015b5e <rmw_validate_node_name+0x52>
 8015b24:	1e63      	subs	r3, r4, #1
 8015b26:	eb03 0800 	add.w	r8, r3, r0
 8015b2a:	f1c4 0101 	rsb	r1, r4, #1
 8015b2e:	18cf      	adds	r7, r1, r3
 8015b30:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8015b34:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015b38:	f02e 0c20 	bic.w	ip, lr, #32
 8015b3c:	2a09      	cmp	r2, #9
 8015b3e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8015b42:	d914      	bls.n	8015b6e <rmw_validate_node_name+0x62>
 8015b44:	f1bc 0f19 	cmp.w	ip, #25
 8015b48:	d911      	bls.n	8015b6e <rmw_validate_node_name+0x62>
 8015b4a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8015b4e:	d00e      	beq.n	8015b6e <rmw_validate_node_name+0x62>
 8015b50:	2302      	movs	r3, #2
 8015b52:	602b      	str	r3, [r5, #0]
 8015b54:	b106      	cbz	r6, 8015b58 <rmw_validate_node_name+0x4c>
 8015b56:	6037      	str	r7, [r6, #0]
 8015b58:	2000      	movs	r0, #0
 8015b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b5e:	2301      	movs	r3, #1
 8015b60:	602b      	str	r3, [r5, #0]
 8015b62:	2e00      	cmp	r6, #0
 8015b64:	d0f8      	beq.n	8015b58 <rmw_validate_node_name+0x4c>
 8015b66:	2000      	movs	r0, #0
 8015b68:	6030      	str	r0, [r6, #0]
 8015b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b6e:	4543      	cmp	r3, r8
 8015b70:	d1dd      	bne.n	8015b2e <rmw_validate_node_name+0x22>
 8015b72:	7822      	ldrb	r2, [r4, #0]
 8015b74:	4b0d      	ldr	r3, [pc, #52]	@ (8015bac <rmw_validate_node_name+0xa0>)
 8015b76:	5cd3      	ldrb	r3, [r2, r3]
 8015b78:	f013 0304 	ands.w	r3, r3, #4
 8015b7c:	d110      	bne.n	8015ba0 <rmw_validate_node_name+0x94>
 8015b7e:	28ff      	cmp	r0, #255	@ 0xff
 8015b80:	d806      	bhi.n	8015b90 <rmw_validate_node_name+0x84>
 8015b82:	602b      	str	r3, [r5, #0]
 8015b84:	4618      	mov	r0, r3
 8015b86:	e7e8      	b.n	8015b5a <rmw_validate_node_name+0x4e>
 8015b88:	200b      	movs	r0, #11
 8015b8a:	4770      	bx	lr
 8015b8c:	200b      	movs	r0, #11
 8015b8e:	e7e4      	b.n	8015b5a <rmw_validate_node_name+0x4e>
 8015b90:	2204      	movs	r2, #4
 8015b92:	602a      	str	r2, [r5, #0]
 8015b94:	2e00      	cmp	r6, #0
 8015b96:	d0df      	beq.n	8015b58 <rmw_validate_node_name+0x4c>
 8015b98:	22fe      	movs	r2, #254	@ 0xfe
 8015b9a:	6032      	str	r2, [r6, #0]
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	e7dc      	b.n	8015b5a <rmw_validate_node_name+0x4e>
 8015ba0:	2303      	movs	r3, #3
 8015ba2:	602b      	str	r3, [r5, #0]
 8015ba4:	2e00      	cmp	r6, #0
 8015ba6:	d1de      	bne.n	8015b66 <rmw_validate_node_name+0x5a>
 8015ba8:	e7d6      	b.n	8015b58 <rmw_validate_node_name+0x4c>
 8015baa:	bf00      	nop
 8015bac:	0801a862 	.word	0x0801a862

08015bb0 <rmw_node_name_validation_result_string>:
 8015bb0:	2804      	cmp	r0, #4
 8015bb2:	bf9a      	itte	ls
 8015bb4:	4b02      	ldrls	r3, [pc, #8]	@ (8015bc0 <rmw_node_name_validation_result_string+0x10>)
 8015bb6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015bba:	4802      	ldrhi	r0, [pc, #8]	@ (8015bc4 <rmw_node_name_validation_result_string+0x14>)
 8015bbc:	4770      	bx	lr
 8015bbe:	bf00      	nop
 8015bc0:	0801a67c 	.word	0x0801a67c
 8015bc4:	0801a590 	.word	0x0801a590

08015bc8 <on_status>:
 8015bc8:	b082      	sub	sp, #8
 8015bca:	b002      	add	sp, #8
 8015bcc:	4770      	bx	lr
 8015bce:	bf00      	nop

08015bd0 <on_topic>:
 8015bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bd4:	4a22      	ldr	r2, [pc, #136]	@ (8015c60 <on_topic+0x90>)
 8015bd6:	b094      	sub	sp, #80	@ 0x50
 8015bd8:	6812      	ldr	r2, [r2, #0]
 8015bda:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8015bdc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015be0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015be4:	b3c2      	cbz	r2, 8015c58 <on_topic+0x88>
 8015be6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015bea:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015bee:	e001      	b.n	8015bf4 <on_topic+0x24>
 8015bf0:	6852      	ldr	r2, [r2, #4]
 8015bf2:	b38a      	cbz	r2, 8015c58 <on_topic+0x88>
 8015bf4:	6894      	ldr	r4, [r2, #8]
 8015bf6:	8aa3      	ldrh	r3, [r4, #20]
 8015bf8:	428b      	cmp	r3, r1
 8015bfa:	d1f9      	bne.n	8015bf0 <on_topic+0x20>
 8015bfc:	7da3      	ldrb	r3, [r4, #22]
 8015bfe:	4283      	cmp	r3, r0
 8015c00:	d1f6      	bne.n	8015bf0 <on_topic+0x20>
 8015c02:	2248      	movs	r2, #72	@ 0x48
 8015c04:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015c08:	4668      	mov	r0, sp
 8015c0a:	f002 fd0e 	bl	801862a <memcpy>
 8015c0e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015c12:	cb0c      	ldmia	r3, {r2, r3}
 8015c14:	4620      	mov	r0, r4
 8015c16:	f7f6 fdf5 	bl	800c804 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015c1a:	4607      	mov	r7, r0
 8015c1c:	b1e0      	cbz	r0, 8015c58 <on_topic+0x88>
 8015c1e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015c22:	4632      	mov	r2, r6
 8015c24:	4628      	mov	r0, r5
 8015c26:	f108 0110 	add.w	r1, r8, #16
 8015c2a:	f7f7 fc4d 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8015c2e:	b930      	cbnz	r0, 8015c3e <on_topic+0x6e>
 8015c30:	480c      	ldr	r0, [pc, #48]	@ (8015c64 <on_topic+0x94>)
 8015c32:	4639      	mov	r1, r7
 8015c34:	b014      	add	sp, #80	@ 0x50
 8015c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c3a:	f000 b8bd 	b.w	8015db8 <put_memory>
 8015c3e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015c42:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8015c46:	f7f6 fbdb 	bl	800c400 <rmw_uros_epoch_nanos>
 8015c4a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015c4e:	2305      	movs	r3, #5
 8015c50:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015c54:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015c58:	b014      	add	sp, #80	@ 0x50
 8015c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c5e:	bf00      	nop
 8015c60:	2000b1ec 	.word	0x2000b1ec
 8015c64:	2000b1dc 	.word	0x2000b1dc

08015c68 <on_request>:
 8015c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c6c:	4823      	ldr	r0, [pc, #140]	@ (8015cfc <on_request+0x94>)
 8015c6e:	b094      	sub	sp, #80	@ 0x50
 8015c70:	6800      	ldr	r0, [r0, #0]
 8015c72:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015c74:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015c78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015c7a:	2800      	cmp	r0, #0
 8015c7c:	d03b      	beq.n	8015cf6 <on_request+0x8e>
 8015c7e:	461d      	mov	r5, r3
 8015c80:	e001      	b.n	8015c86 <on_request+0x1e>
 8015c82:	6840      	ldr	r0, [r0, #4]
 8015c84:	b3b8      	cbz	r0, 8015cf6 <on_request+0x8e>
 8015c86:	6884      	ldr	r4, [r0, #8]
 8015c88:	8b21      	ldrh	r1, [r4, #24]
 8015c8a:	4291      	cmp	r1, r2
 8015c8c:	d1f9      	bne.n	8015c82 <on_request+0x1a>
 8015c8e:	2248      	movs	r2, #72	@ 0x48
 8015c90:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015c94:	4668      	mov	r0, sp
 8015c96:	f002 fcc8 	bl	801862a <memcpy>
 8015c9a:	f104 0320 	add.w	r3, r4, #32
 8015c9e:	cb0c      	ldmia	r3, {r2, r3}
 8015ca0:	4620      	mov	r0, r4
 8015ca2:	f7f6 fdaf 	bl	800c804 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015ca6:	4680      	mov	r8, r0
 8015ca8:	b328      	cbz	r0, 8015cf6 <on_request+0x8e>
 8015caa:	4638      	mov	r0, r7
 8015cac:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015cb0:	4632      	mov	r2, r6
 8015cb2:	f107 0110 	add.w	r1, r7, #16
 8015cb6:	f7f7 fc07 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8015cba:	b930      	cbnz	r0, 8015cca <on_request+0x62>
 8015cbc:	4810      	ldr	r0, [pc, #64]	@ (8015d00 <on_request+0x98>)
 8015cbe:	4641      	mov	r1, r8
 8015cc0:	b014      	add	sp, #80	@ 0x50
 8015cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cc6:	f000 b877 	b.w	8015db8 <put_memory>
 8015cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015ccc:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015cd0:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015cd4:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015cd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015cdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015ce0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015ce4:	f7f6 fb8c 	bl	800c400 <rmw_uros_epoch_nanos>
 8015ce8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015cec:	2303      	movs	r3, #3
 8015cee:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015cf2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015cf6:	b014      	add	sp, #80	@ 0x50
 8015cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cfc:	2000b1bc 	.word	0x2000b1bc
 8015d00:	2000b1dc 	.word	0x2000b1dc

08015d04 <on_reply>:
 8015d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d08:	4821      	ldr	r0, [pc, #132]	@ (8015d90 <on_reply+0x8c>)
 8015d0a:	b094      	sub	sp, #80	@ 0x50
 8015d0c:	6800      	ldr	r0, [r0, #0]
 8015d0e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015d10:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015d14:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015d16:	b3b8      	cbz	r0, 8015d88 <on_reply+0x84>
 8015d18:	461d      	mov	r5, r3
 8015d1a:	e001      	b.n	8015d20 <on_reply+0x1c>
 8015d1c:	6840      	ldr	r0, [r0, #4]
 8015d1e:	b398      	cbz	r0, 8015d88 <on_reply+0x84>
 8015d20:	6884      	ldr	r4, [r0, #8]
 8015d22:	8b21      	ldrh	r1, [r4, #24]
 8015d24:	4291      	cmp	r1, r2
 8015d26:	d1f9      	bne.n	8015d1c <on_reply+0x18>
 8015d28:	2248      	movs	r2, #72	@ 0x48
 8015d2a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015d2e:	4668      	mov	r0, sp
 8015d30:	f002 fc7b 	bl	801862a <memcpy>
 8015d34:	f104 0320 	add.w	r3, r4, #32
 8015d38:	cb0c      	ldmia	r3, {r2, r3}
 8015d3a:	4620      	mov	r0, r4
 8015d3c:	f7f6 fd62 	bl	800c804 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015d40:	4680      	mov	r8, r0
 8015d42:	b308      	cbz	r0, 8015d88 <on_reply+0x84>
 8015d44:	4638      	mov	r0, r7
 8015d46:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015d4a:	4632      	mov	r2, r6
 8015d4c:	f107 0110 	add.w	r1, r7, #16
 8015d50:	f7f7 fbba 	bl	800d4c8 <ucdr_deserialize_array_uint8_t>
 8015d54:	b930      	cbnz	r0, 8015d64 <on_reply+0x60>
 8015d56:	480f      	ldr	r0, [pc, #60]	@ (8015d94 <on_reply+0x90>)
 8015d58:	4641      	mov	r1, r8
 8015d5a:	b014      	add	sp, #80	@ 0x50
 8015d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d60:	f000 b82a 	b.w	8015db8 <put_memory>
 8015d64:	2200      	movs	r2, #0
 8015d66:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015d6a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015d6e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015d72:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015d76:	f7f6 fb43 	bl	800c400 <rmw_uros_epoch_nanos>
 8015d7a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015d7e:	2304      	movs	r3, #4
 8015d80:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015d84:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015d88:	b014      	add	sp, #80	@ 0x50
 8015d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d8e:	bf00      	nop
 8015d90:	200068cc 	.word	0x200068cc
 8015d94:	2000b1dc 	.word	0x2000b1dc

08015d98 <get_memory>:
 8015d98:	4603      	mov	r3, r0
 8015d9a:	6840      	ldr	r0, [r0, #4]
 8015d9c:	b158      	cbz	r0, 8015db6 <get_memory+0x1e>
 8015d9e:	6842      	ldr	r2, [r0, #4]
 8015da0:	605a      	str	r2, [r3, #4]
 8015da2:	b10a      	cbz	r2, 8015da8 <get_memory+0x10>
 8015da4:	2100      	movs	r1, #0
 8015da6:	6011      	str	r1, [r2, #0]
 8015da8:	681a      	ldr	r2, [r3, #0]
 8015daa:	6042      	str	r2, [r0, #4]
 8015dac:	b102      	cbz	r2, 8015db0 <get_memory+0x18>
 8015dae:	6010      	str	r0, [r2, #0]
 8015db0:	2200      	movs	r2, #0
 8015db2:	6002      	str	r2, [r0, #0]
 8015db4:	6018      	str	r0, [r3, #0]
 8015db6:	4770      	bx	lr

08015db8 <put_memory>:
 8015db8:	680b      	ldr	r3, [r1, #0]
 8015dba:	b10b      	cbz	r3, 8015dc0 <put_memory+0x8>
 8015dbc:	684a      	ldr	r2, [r1, #4]
 8015dbe:	605a      	str	r2, [r3, #4]
 8015dc0:	684a      	ldr	r2, [r1, #4]
 8015dc2:	b102      	cbz	r2, 8015dc6 <put_memory+0xe>
 8015dc4:	6013      	str	r3, [r2, #0]
 8015dc6:	6803      	ldr	r3, [r0, #0]
 8015dc8:	428b      	cmp	r3, r1
 8015dca:	6843      	ldr	r3, [r0, #4]
 8015dcc:	bf08      	it	eq
 8015dce:	6002      	streq	r2, [r0, #0]
 8015dd0:	604b      	str	r3, [r1, #4]
 8015dd2:	b103      	cbz	r3, 8015dd6 <put_memory+0x1e>
 8015dd4:	6019      	str	r1, [r3, #0]
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	600b      	str	r3, [r1, #0]
 8015dda:	6041      	str	r1, [r0, #4]
 8015ddc:	4770      	bx	lr
 8015dde:	bf00      	nop

08015de0 <rmw_destroy_client>:
 8015de0:	b570      	push	{r4, r5, r6, lr}
 8015de2:	b128      	cbz	r0, 8015df0 <rmw_destroy_client+0x10>
 8015de4:	4604      	mov	r4, r0
 8015de6:	6800      	ldr	r0, [r0, #0]
 8015de8:	460d      	mov	r5, r1
 8015dea:	f7f6 fe7f 	bl	800caec <is_uxrce_rmw_identifier_valid>
 8015dee:	b910      	cbnz	r0, 8015df6 <rmw_destroy_client+0x16>
 8015df0:	2401      	movs	r4, #1
 8015df2:	4620      	mov	r0, r4
 8015df4:	bd70      	pop	{r4, r5, r6, pc}
 8015df6:	6863      	ldr	r3, [r4, #4]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d0f9      	beq.n	8015df0 <rmw_destroy_client+0x10>
 8015dfc:	2d00      	cmp	r5, #0
 8015dfe:	d0f7      	beq.n	8015df0 <rmw_destroy_client+0x10>
 8015e00:	6828      	ldr	r0, [r5, #0]
 8015e02:	f7f6 fe73 	bl	800caec <is_uxrce_rmw_identifier_valid>
 8015e06:	2800      	cmp	r0, #0
 8015e08:	d0f2      	beq.n	8015df0 <rmw_destroy_client+0x10>
 8015e0a:	686e      	ldr	r6, [r5, #4]
 8015e0c:	2e00      	cmp	r6, #0
 8015e0e:	d0ef      	beq.n	8015df0 <rmw_destroy_client+0x10>
 8015e10:	6864      	ldr	r4, [r4, #4]
 8015e12:	6932      	ldr	r2, [r6, #16]
 8015e14:	6920      	ldr	r0, [r4, #16]
 8015e16:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015e1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e1e:	6819      	ldr	r1, [r3, #0]
 8015e20:	f7f9 fa84 	bl	800f32c <uxr_buffer_cancel_data>
 8015e24:	4602      	mov	r2, r0
 8015e26:	6920      	ldr	r0, [r4, #16]
 8015e28:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015e2c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015e30:	f7f6 fddc 	bl	800c9ec <run_xrce_session>
 8015e34:	6920      	ldr	r0, [r4, #16]
 8015e36:	6932      	ldr	r2, [r6, #16]
 8015e38:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015e3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e40:	6819      	ldr	r1, [r3, #0]
 8015e42:	f7f9 f827 	bl	800ee94 <uxr_buffer_delete_entity>
 8015e46:	4602      	mov	r2, r0
 8015e48:	6920      	ldr	r0, [r4, #16]
 8015e4a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015e4e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015e52:	f7f6 fdcb 	bl	800c9ec <run_xrce_session>
 8015e56:	2800      	cmp	r0, #0
 8015e58:	4628      	mov	r0, r5
 8015e5a:	bf14      	ite	ne
 8015e5c:	2400      	movne	r4, #0
 8015e5e:	2402      	moveq	r4, #2
 8015e60:	f7f6 fcae 	bl	800c7c0 <rmw_uxrce_fini_client_memory>
 8015e64:	e7c5      	b.n	8015df2 <rmw_destroy_client+0x12>
 8015e66:	bf00      	nop

08015e68 <rmw_get_implementation_identifier>:
 8015e68:	4b01      	ldr	r3, [pc, #4]	@ (8015e70 <rmw_get_implementation_identifier+0x8>)
 8015e6a:	6818      	ldr	r0, [r3, #0]
 8015e6c:	4770      	bx	lr
 8015e6e:	bf00      	nop
 8015e70:	0801a6a8 	.word	0x0801a6a8

08015e74 <create_topic>:
 8015e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e78:	4605      	mov	r5, r0
 8015e7a:	b084      	sub	sp, #16
 8015e7c:	4822      	ldr	r0, [pc, #136]	@ (8015f08 <create_topic+0x94>)
 8015e7e:	460f      	mov	r7, r1
 8015e80:	4616      	mov	r6, r2
 8015e82:	f7ff ff89 	bl	8015d98 <get_memory>
 8015e86:	4604      	mov	r4, r0
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	d039      	beq.n	8015f00 <create_topic+0x8c>
 8015e8c:	692b      	ldr	r3, [r5, #16]
 8015e8e:	6884      	ldr	r4, [r0, #8]
 8015e90:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015f10 <create_topic+0x9c>
 8015e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015e98:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015e9c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015ea0:	1c42      	adds	r2, r0, #1
 8015ea2:	2102      	movs	r1, #2
 8015ea4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015ea8:	f7f9 fa10 	bl	800f2cc <uxr_object_id>
 8015eac:	223c      	movs	r2, #60	@ 0x3c
 8015eae:	6120      	str	r0, [r4, #16]
 8015eb0:	4641      	mov	r1, r8
 8015eb2:	4638      	mov	r0, r7
 8015eb4:	f7f6 fe00 	bl	800cab8 <generate_topic_name>
 8015eb8:	b1f0      	cbz	r0, 8015ef8 <create_topic+0x84>
 8015eba:	4f14      	ldr	r7, [pc, #80]	@ (8015f0c <create_topic+0x98>)
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	2264      	movs	r2, #100	@ 0x64
 8015ec0:	4639      	mov	r1, r7
 8015ec2:	f7f6 fdc9 	bl	800ca58 <generate_type_name>
 8015ec6:	b1b8      	cbz	r0, 8015ef8 <create_topic+0x84>
 8015ec8:	6928      	ldr	r0, [r5, #16]
 8015eca:	2306      	movs	r3, #6
 8015ecc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015ed0:	f8cd 8000 	str.w	r8, [sp]
 8015ed4:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015ed8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015edc:	6811      	ldr	r1, [r2, #0]
 8015ede:	696b      	ldr	r3, [r5, #20]
 8015ee0:	6922      	ldr	r2, [r4, #16]
 8015ee2:	f7f9 f855 	bl	800ef90 <uxr_buffer_create_topic_bin>
 8015ee6:	4602      	mov	r2, r0
 8015ee8:	6928      	ldr	r0, [r5, #16]
 8015eea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015eee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015ef2:	f7f6 fd7b 	bl	800c9ec <run_xrce_session>
 8015ef6:	b918      	cbnz	r0, 8015f00 <create_topic+0x8c>
 8015ef8:	4620      	mov	r0, r4
 8015efa:	f7f6 fc77 	bl	800c7ec <rmw_uxrce_fini_topic_memory>
 8015efe:	2400      	movs	r4, #0
 8015f00:	4620      	mov	r0, r4
 8015f02:	b004      	add	sp, #16
 8015f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f08:	2000b1fc 	.word	0x2000b1fc
 8015f0c:	2000b27c 	.word	0x2000b27c
 8015f10:	2000b240 	.word	0x2000b240

08015f14 <destroy_topic>:
 8015f14:	b538      	push	{r3, r4, r5, lr}
 8015f16:	6985      	ldr	r5, [r0, #24]
 8015f18:	b1d5      	cbz	r5, 8015f50 <destroy_topic+0x3c>
 8015f1a:	4604      	mov	r4, r0
 8015f1c:	6928      	ldr	r0, [r5, #16]
 8015f1e:	6922      	ldr	r2, [r4, #16]
 8015f20:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015f24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f28:	6819      	ldr	r1, [r3, #0]
 8015f2a:	f7f8 ffb3 	bl	800ee94 <uxr_buffer_delete_entity>
 8015f2e:	4602      	mov	r2, r0
 8015f30:	6928      	ldr	r0, [r5, #16]
 8015f32:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015f36:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015f3a:	f7f6 fd57 	bl	800c9ec <run_xrce_session>
 8015f3e:	2800      	cmp	r0, #0
 8015f40:	4620      	mov	r0, r4
 8015f42:	bf14      	ite	ne
 8015f44:	2400      	movne	r4, #0
 8015f46:	2402      	moveq	r4, #2
 8015f48:	f7f6 fc50 	bl	800c7ec <rmw_uxrce_fini_topic_memory>
 8015f4c:	4620      	mov	r0, r4
 8015f4e:	bd38      	pop	{r3, r4, r5, pc}
 8015f50:	2401      	movs	r4, #1
 8015f52:	4620      	mov	r0, r4
 8015f54:	bd38      	pop	{r3, r4, r5, pc}
 8015f56:	bf00      	nop

08015f58 <rmw_send_request>:
 8015f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f5c:	4604      	mov	r4, r0
 8015f5e:	6800      	ldr	r0, [r0, #0]
 8015f60:	b08b      	sub	sp, #44	@ 0x2c
 8015f62:	460e      	mov	r6, r1
 8015f64:	4615      	mov	r5, r2
 8015f66:	b128      	cbz	r0, 8015f74 <rmw_send_request+0x1c>
 8015f68:	4b21      	ldr	r3, [pc, #132]	@ (8015ff0 <rmw_send_request+0x98>)
 8015f6a:	6819      	ldr	r1, [r3, #0]
 8015f6c:	f7ea f958 	bl	8000220 <strcmp>
 8015f70:	2800      	cmp	r0, #0
 8015f72:	d139      	bne.n	8015fe8 <rmw_send_request+0x90>
 8015f74:	6864      	ldr	r4, [r4, #4]
 8015f76:	6963      	ldr	r3, [r4, #20]
 8015f78:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8015f7c:	689b      	ldr	r3, [r3, #8]
 8015f7e:	4798      	blx	r3
 8015f80:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015f84:	4630      	mov	r0, r6
 8015f86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f8a:	4798      	blx	r3
 8015f8c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015f90:	9000      	str	r0, [sp, #0]
 8015f92:	6922      	ldr	r2, [r4, #16]
 8015f94:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8015f96:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015f9a:	ab02      	add	r3, sp, #8
 8015f9c:	f7fb fa82 	bl	80114a4 <uxr_prepare_output_stream>
 8015fa0:	2700      	movs	r7, #0
 8015fa2:	6028      	str	r0, [r5, #0]
 8015fa4:	606f      	str	r7, [r5, #4]
 8015fa6:	b198      	cbz	r0, 8015fd0 <rmw_send_request+0x78>
 8015fa8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015fac:	a902      	add	r1, sp, #8
 8015fae:	4630      	mov	r0, r6
 8015fb0:	4798      	blx	r3
 8015fb2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015fb6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015fba:	2b01      	cmp	r3, #1
 8015fbc:	d00c      	beq.n	8015fd8 <rmw_send_request+0x80>
 8015fbe:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015fc0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015fc4:	f7f9 ff9a 	bl	800fefc <uxr_run_session_until_confirm_delivery>
 8015fc8:	4638      	mov	r0, r7
 8015fca:	b00b      	add	sp, #44	@ 0x2c
 8015fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fd0:	2001      	movs	r0, #1
 8015fd2:	b00b      	add	sp, #44	@ 0x2c
 8015fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fd8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015fdc:	f7f9 fbce 	bl	800f77c <uxr_flash_output_streams>
 8015fe0:	4638      	mov	r0, r7
 8015fe2:	b00b      	add	sp, #44	@ 0x2c
 8015fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fe8:	200c      	movs	r0, #12
 8015fea:	b00b      	add	sp, #44	@ 0x2c
 8015fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ff0:	0801a6a8 	.word	0x0801a6a8

08015ff4 <rmw_take_request>:
 8015ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ff8:	4605      	mov	r5, r0
 8015ffa:	6800      	ldr	r0, [r0, #0]
 8015ffc:	b089      	sub	sp, #36	@ 0x24
 8015ffe:	460c      	mov	r4, r1
 8016000:	4690      	mov	r8, r2
 8016002:	461e      	mov	r6, r3
 8016004:	b128      	cbz	r0, 8016012 <rmw_take_request+0x1e>
 8016006:	4b28      	ldr	r3, [pc, #160]	@ (80160a8 <rmw_take_request+0xb4>)
 8016008:	6819      	ldr	r1, [r3, #0]
 801600a:	f7ea f909 	bl	8000220 <strcmp>
 801600e:	2800      	cmp	r0, #0
 8016010:	d146      	bne.n	80160a0 <rmw_take_request+0xac>
 8016012:	b10e      	cbz	r6, 8016018 <rmw_take_request+0x24>
 8016014:	2300      	movs	r3, #0
 8016016:	7033      	strb	r3, [r6, #0]
 8016018:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801601c:	f7f6 fc68 	bl	800c8f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016020:	4648      	mov	r0, r9
 8016022:	f7f6 fc3f 	bl	800c8a4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016026:	4607      	mov	r7, r0
 8016028:	b3b0      	cbz	r0, 8016098 <rmw_take_request+0xa4>
 801602a:	6885      	ldr	r5, [r0, #8]
 801602c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016030:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8016034:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8016038:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801603c:	7423      	strb	r3, [r4, #16]
 801603e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016042:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8016046:	74e2      	strb	r2, [r4, #19]
 8016048:	f8a4 3011 	strh.w	r3, [r4, #17]
 801604c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016050:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016054:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8016058:	61e1      	str	r1, [r4, #28]
 801605a:	6162      	str	r2, [r4, #20]
 801605c:	61a3      	str	r3, [r4, #24]
 801605e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016062:	689b      	ldr	r3, [r3, #8]
 8016064:	4798      	blx	r3
 8016066:	6844      	ldr	r4, [r0, #4]
 8016068:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801606c:	f105 0110 	add.w	r1, r5, #16
 8016070:	4668      	mov	r0, sp
 8016072:	f7f8 fe47 	bl	800ed04 <ucdr_init_buffer>
 8016076:	68e3      	ldr	r3, [r4, #12]
 8016078:	4641      	mov	r1, r8
 801607a:	4668      	mov	r0, sp
 801607c:	4798      	blx	r3
 801607e:	4639      	mov	r1, r7
 8016080:	4604      	mov	r4, r0
 8016082:	480a      	ldr	r0, [pc, #40]	@ (80160ac <rmw_take_request+0xb8>)
 8016084:	f7ff fe98 	bl	8015db8 <put_memory>
 8016088:	b106      	cbz	r6, 801608c <rmw_take_request+0x98>
 801608a:	7034      	strb	r4, [r6, #0]
 801608c:	f084 0001 	eor.w	r0, r4, #1
 8016090:	b2c0      	uxtb	r0, r0
 8016092:	b009      	add	sp, #36	@ 0x24
 8016094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016098:	2001      	movs	r0, #1
 801609a:	b009      	add	sp, #36	@ 0x24
 801609c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160a0:	200c      	movs	r0, #12
 80160a2:	b009      	add	sp, #36	@ 0x24
 80160a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160a8:	0801a6a8 	.word	0x0801a6a8
 80160ac:	2000b1dc 	.word	0x2000b1dc

080160b0 <rmw_send_response>:
 80160b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160b2:	4605      	mov	r5, r0
 80160b4:	6800      	ldr	r0, [r0, #0]
 80160b6:	b091      	sub	sp, #68	@ 0x44
 80160b8:	460c      	mov	r4, r1
 80160ba:	4616      	mov	r6, r2
 80160bc:	b128      	cbz	r0, 80160ca <rmw_send_response+0x1a>
 80160be:	4b29      	ldr	r3, [pc, #164]	@ (8016164 <rmw_send_response+0xb4>)
 80160c0:	6819      	ldr	r1, [r3, #0]
 80160c2:	f7ea f8ad 	bl	8000220 <strcmp>
 80160c6:	2800      	cmp	r0, #0
 80160c8:	d141      	bne.n	801614e <rmw_send_response+0x9e>
 80160ca:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80160ce:	9306      	str	r3, [sp, #24]
 80160d0:	4623      	mov	r3, r4
 80160d2:	9207      	str	r2, [sp, #28]
 80160d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160d8:	686d      	ldr	r5, [r5, #4]
 80160da:	789b      	ldrb	r3, [r3, #2]
 80160dc:	68a1      	ldr	r1, [r4, #8]
 80160de:	f88d 2017 	strb.w	r2, [sp, #23]
 80160e2:	f88d 3016 	strb.w	r3, [sp, #22]
 80160e6:	68e2      	ldr	r2, [r4, #12]
 80160e8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80160ec:	6860      	ldr	r0, [r4, #4]
 80160ee:	f8ad 3014 	strh.w	r3, [sp, #20]
 80160f2:	ab02      	add	r3, sp, #8
 80160f4:	c307      	stmia	r3!, {r0, r1, r2}
 80160f6:	696b      	ldr	r3, [r5, #20]
 80160f8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80160fa:	68db      	ldr	r3, [r3, #12]
 80160fc:	4798      	blx	r3
 80160fe:	6844      	ldr	r4, [r0, #4]
 8016100:	4630      	mov	r0, r6
 8016102:	6923      	ldr	r3, [r4, #16]
 8016104:	4798      	blx	r3
 8016106:	f100 0318 	add.w	r3, r0, #24
 801610a:	6938      	ldr	r0, [r7, #16]
 801610c:	9300      	str	r3, [sp, #0]
 801610e:	692a      	ldr	r2, [r5, #16]
 8016110:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016112:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016116:	ab08      	add	r3, sp, #32
 8016118:	f7fb f9c4 	bl	80114a4 <uxr_prepare_output_stream>
 801611c:	b910      	cbnz	r0, 8016124 <rmw_send_response+0x74>
 801611e:	2001      	movs	r0, #1
 8016120:	b011      	add	sp, #68	@ 0x44
 8016122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016124:	a902      	add	r1, sp, #8
 8016126:	a808      	add	r0, sp, #32
 8016128:	f7fc fa16 	bl	8012558 <uxr_serialize_SampleIdentity>
 801612c:	68a3      	ldr	r3, [r4, #8]
 801612e:	a908      	add	r1, sp, #32
 8016130:	4630      	mov	r0, r6
 8016132:	4798      	blx	r3
 8016134:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016138:	6938      	ldr	r0, [r7, #16]
 801613a:	2b01      	cmp	r3, #1
 801613c:	d00a      	beq.n	8016154 <rmw_send_response+0xa4>
 801613e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016140:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016144:	f7f9 feda 	bl	800fefc <uxr_run_session_until_confirm_delivery>
 8016148:	2000      	movs	r0, #0
 801614a:	b011      	add	sp, #68	@ 0x44
 801614c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801614e:	200c      	movs	r0, #12
 8016150:	b011      	add	sp, #68	@ 0x44
 8016152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016154:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016158:	f7f9 fb10 	bl	800f77c <uxr_flash_output_streams>
 801615c:	2000      	movs	r0, #0
 801615e:	b011      	add	sp, #68	@ 0x44
 8016160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016162:	bf00      	nop
 8016164:	0801a6a8 	.word	0x0801a6a8

08016168 <rmw_take_response>:
 8016168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801616c:	4604      	mov	r4, r0
 801616e:	6800      	ldr	r0, [r0, #0]
 8016170:	b088      	sub	sp, #32
 8016172:	4688      	mov	r8, r1
 8016174:	4617      	mov	r7, r2
 8016176:	461d      	mov	r5, r3
 8016178:	b120      	cbz	r0, 8016184 <rmw_take_response+0x1c>
 801617a:	4b1e      	ldr	r3, [pc, #120]	@ (80161f4 <rmw_take_response+0x8c>)
 801617c:	6819      	ldr	r1, [r3, #0]
 801617e:	f7ea f84f 	bl	8000220 <strcmp>
 8016182:	bb78      	cbnz	r0, 80161e4 <rmw_take_response+0x7c>
 8016184:	b10d      	cbz	r5, 801618a <rmw_take_response+0x22>
 8016186:	2300      	movs	r3, #0
 8016188:	702b      	strb	r3, [r5, #0]
 801618a:	6864      	ldr	r4, [r4, #4]
 801618c:	f7f6 fbb0 	bl	800c8f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016190:	4620      	mov	r0, r4
 8016192:	f7f6 fb87 	bl	800c8a4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016196:	4606      	mov	r6, r0
 8016198:	b340      	cbz	r0, 80161ec <rmw_take_response+0x84>
 801619a:	6963      	ldr	r3, [r4, #20]
 801619c:	6884      	ldr	r4, [r0, #8]
 801619e:	68db      	ldr	r3, [r3, #12]
 80161a0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80161a4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80161a8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80161ac:	4798      	blx	r3
 80161ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80161b2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80161b6:	f104 0110 	add.w	r1, r4, #16
 80161ba:	4668      	mov	r0, sp
 80161bc:	f7f8 fda2 	bl	800ed04 <ucdr_init_buffer>
 80161c0:	4639      	mov	r1, r7
 80161c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80161c6:	4668      	mov	r0, sp
 80161c8:	4798      	blx	r3
 80161ca:	4631      	mov	r1, r6
 80161cc:	4604      	mov	r4, r0
 80161ce:	480a      	ldr	r0, [pc, #40]	@ (80161f8 <rmw_take_response+0x90>)
 80161d0:	f7ff fdf2 	bl	8015db8 <put_memory>
 80161d4:	b105      	cbz	r5, 80161d8 <rmw_take_response+0x70>
 80161d6:	702c      	strb	r4, [r5, #0]
 80161d8:	f084 0001 	eor.w	r0, r4, #1
 80161dc:	b2c0      	uxtb	r0, r0
 80161de:	b008      	add	sp, #32
 80161e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161e4:	200c      	movs	r0, #12
 80161e6:	b008      	add	sp, #32
 80161e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ec:	2001      	movs	r0, #1
 80161ee:	b008      	add	sp, #32
 80161f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f4:	0801a6a8 	.word	0x0801a6a8
 80161f8:	2000b1dc 	.word	0x2000b1dc

080161fc <rmw_take_with_info>:
 80161fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161fe:	4604      	mov	r4, r0
 8016200:	6800      	ldr	r0, [r0, #0]
 8016202:	b089      	sub	sp, #36	@ 0x24
 8016204:	460f      	mov	r7, r1
 8016206:	4615      	mov	r5, r2
 8016208:	b128      	cbz	r0, 8016216 <rmw_take_with_info+0x1a>
 801620a:	4b24      	ldr	r3, [pc, #144]	@ (801629c <rmw_take_with_info+0xa0>)
 801620c:	6819      	ldr	r1, [r3, #0]
 801620e:	f7ea f807 	bl	8000220 <strcmp>
 8016212:	2800      	cmp	r0, #0
 8016214:	d13e      	bne.n	8016294 <rmw_take_with_info+0x98>
 8016216:	b305      	cbz	r5, 801625a <rmw_take_with_info+0x5e>
 8016218:	6864      	ldr	r4, [r4, #4]
 801621a:	2300      	movs	r3, #0
 801621c:	702b      	strb	r3, [r5, #0]
 801621e:	f7f6 fb67 	bl	800c8f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016222:	4620      	mov	r0, r4
 8016224:	f7f6 fb3e 	bl	800c8a4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016228:	4606      	mov	r6, r0
 801622a:	b1f0      	cbz	r0, 801626a <rmw_take_with_info+0x6e>
 801622c:	6881      	ldr	r1, [r0, #8]
 801622e:	4668      	mov	r0, sp
 8016230:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016234:	3110      	adds	r1, #16
 8016236:	f7f8 fd65 	bl	800ed04 <ucdr_init_buffer>
 801623a:	69a3      	ldr	r3, [r4, #24]
 801623c:	4639      	mov	r1, r7
 801623e:	68db      	ldr	r3, [r3, #12]
 8016240:	4668      	mov	r0, sp
 8016242:	4798      	blx	r3
 8016244:	4631      	mov	r1, r6
 8016246:	4604      	mov	r4, r0
 8016248:	4815      	ldr	r0, [pc, #84]	@ (80162a0 <rmw_take_with_info+0xa4>)
 801624a:	f7ff fdb5 	bl	8015db8 <put_memory>
 801624e:	702c      	strb	r4, [r5, #0]
 8016250:	f084 0001 	eor.w	r0, r4, #1
 8016254:	b2c0      	uxtb	r0, r0
 8016256:	b009      	add	sp, #36	@ 0x24
 8016258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801625a:	6864      	ldr	r4, [r4, #4]
 801625c:	f7f6 fb48 	bl	800c8f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016260:	4620      	mov	r0, r4
 8016262:	f7f6 fb1f 	bl	800c8a4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016266:	4605      	mov	r5, r0
 8016268:	b910      	cbnz	r0, 8016270 <rmw_take_with_info+0x74>
 801626a:	2001      	movs	r0, #1
 801626c:	b009      	add	sp, #36	@ 0x24
 801626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016270:	68a9      	ldr	r1, [r5, #8]
 8016272:	4668      	mov	r0, sp
 8016274:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016278:	3110      	adds	r1, #16
 801627a:	f7f8 fd43 	bl	800ed04 <ucdr_init_buffer>
 801627e:	69a3      	ldr	r3, [r4, #24]
 8016280:	4639      	mov	r1, r7
 8016282:	68db      	ldr	r3, [r3, #12]
 8016284:	4668      	mov	r0, sp
 8016286:	4798      	blx	r3
 8016288:	4629      	mov	r1, r5
 801628a:	4604      	mov	r4, r0
 801628c:	4804      	ldr	r0, [pc, #16]	@ (80162a0 <rmw_take_with_info+0xa4>)
 801628e:	f7ff fd93 	bl	8015db8 <put_memory>
 8016292:	e7dd      	b.n	8016250 <rmw_take_with_info+0x54>
 8016294:	200c      	movs	r0, #12
 8016296:	b009      	add	sp, #36	@ 0x24
 8016298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801629a:	bf00      	nop
 801629c:	0801a6a8 	.word	0x0801a6a8
 80162a0:	2000b1dc 	.word	0x2000b1dc

080162a4 <rmw_wait>:
 80162a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162a8:	b089      	sub	sp, #36	@ 0x24
 80162aa:	4605      	mov	r5, r0
 80162ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80162ae:	460e      	mov	r6, r1
 80162b0:	4698      	mov	r8, r3
 80162b2:	4691      	mov	r9, r2
 80162b4:	2a00      	cmp	r2, #0
 80162b6:	f000 810a 	beq.w	80164ce <rmw_wait+0x22a>
 80162ba:	b16c      	cbz	r4, 80162d8 <rmw_wait+0x34>
 80162bc:	4bae      	ldr	r3, [pc, #696]	@ (8016578 <rmw_wait+0x2d4>)
 80162be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80162c0:	af04      	add	r7, sp, #16
 80162c2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80162c6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80162ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80162ce:	f7ff faaf 	bl	8015830 <rmw_time_equal>
 80162d2:	2800      	cmp	r0, #0
 80162d4:	f000 8127 	beq.w	8016526 <rmw_wait+0x282>
 80162d8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80162dc:	f7f6 fb08 	bl	800c8f0 <rmw_uxrce_clean_expired_static_input_buffer>
 80162e0:	4ba6      	ldr	r3, [pc, #664]	@ (801657c <rmw_wait+0x2d8>)
 80162e2:	681c      	ldr	r4, [r3, #0]
 80162e4:	b14c      	cbz	r4, 80162fa <rmw_wait+0x56>
 80162e6:	4623      	mov	r3, r4
 80162e8:	2100      	movs	r1, #0
 80162ea:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80162ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80162f2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d1f7      	bne.n	80162ea <rmw_wait+0x46>
 80162fa:	f1b9 0f00 	cmp.w	r9, #0
 80162fe:	d011      	beq.n	8016324 <rmw_wait+0x80>
 8016300:	f8d9 1000 	ldr.w	r1, [r9]
 8016304:	b171      	cbz	r1, 8016324 <rmw_wait+0x80>
 8016306:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801630a:	2300      	movs	r3, #0
 801630c:	2001      	movs	r0, #1
 801630e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016312:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016314:	6912      	ldr	r2, [r2, #16]
 8016316:	3301      	adds	r3, #1
 8016318:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801631c:	4299      	cmp	r1, r3
 801631e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016322:	d1f4      	bne.n	801630e <rmw_wait+0x6a>
 8016324:	f1b8 0f00 	cmp.w	r8, #0
 8016328:	d011      	beq.n	801634e <rmw_wait+0xaa>
 801632a:	f8d8 1000 	ldr.w	r1, [r8]
 801632e:	b171      	cbz	r1, 801634e <rmw_wait+0xaa>
 8016330:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016334:	2300      	movs	r3, #0
 8016336:	2001      	movs	r0, #1
 8016338:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801633c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801633e:	6912      	ldr	r2, [r2, #16]
 8016340:	3301      	adds	r3, #1
 8016342:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016346:	4299      	cmp	r1, r3
 8016348:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801634c:	d1f4      	bne.n	8016338 <rmw_wait+0x94>
 801634e:	b185      	cbz	r5, 8016372 <rmw_wait+0xce>
 8016350:	6829      	ldr	r1, [r5, #0]
 8016352:	b171      	cbz	r1, 8016372 <rmw_wait+0xce>
 8016354:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016358:	2300      	movs	r3, #0
 801635a:	2001      	movs	r0, #1
 801635c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016360:	6a12      	ldr	r2, [r2, #32]
 8016362:	6912      	ldr	r2, [r2, #16]
 8016364:	3301      	adds	r3, #1
 8016366:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801636a:	4299      	cmp	r1, r3
 801636c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016370:	d1f4      	bne.n	801635c <rmw_wait+0xb8>
 8016372:	b34c      	cbz	r4, 80163c8 <rmw_wait+0x124>
 8016374:	4622      	mov	r2, r4
 8016376:	2300      	movs	r3, #0
 8016378:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801637c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016380:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016384:	440b      	add	r3, r1
 8016386:	b2db      	uxtb	r3, r3
 8016388:	2a00      	cmp	r2, #0
 801638a:	d1f5      	bne.n	8016378 <rmw_wait+0xd4>
 801638c:	2b00      	cmp	r3, #0
 801638e:	f000 8084 	beq.w	801649a <rmw_wait+0x1f6>
 8016392:	1c7a      	adds	r2, r7, #1
 8016394:	d00d      	beq.n	80163b2 <rmw_wait+0x10e>
 8016396:	ee07 7a90 	vmov	s15, r7
 801639a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801639e:	ee07 3a90 	vmov	s15, r3
 80163a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80163a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80163aa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80163ae:	ee17 7a90 	vmov	r7, s15
 80163b2:	68a0      	ldr	r0, [r4, #8]
 80163b4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80163b8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80163bc:	2b00      	cmp	r3, #0
 80163be:	f040 8090 	bne.w	80164e2 <rmw_wait+0x23e>
 80163c2:	6864      	ldr	r4, [r4, #4]
 80163c4:	2c00      	cmp	r4, #0
 80163c6:	d1f4      	bne.n	80163b2 <rmw_wait+0x10e>
 80163c8:	f1b9 0f00 	cmp.w	r9, #0
 80163cc:	f000 80bc 	beq.w	8016548 <rmw_wait+0x2a4>
 80163d0:	f8d9 7000 	ldr.w	r7, [r9]
 80163d4:	2f00      	cmp	r7, #0
 80163d6:	f000 808e 	beq.w	80164f6 <rmw_wait+0x252>
 80163da:	2400      	movs	r4, #0
 80163dc:	4627      	mov	r7, r4
 80163de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80163e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80163e6:	f7f6 fa5d 	bl	800c8a4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80163ea:	2800      	cmp	r0, #0
 80163ec:	d05f      	beq.n	80164ae <rmw_wait+0x20a>
 80163ee:	f8d9 3000 	ldr.w	r3, [r9]
 80163f2:	3401      	adds	r4, #1
 80163f4:	42a3      	cmp	r3, r4
 80163f6:	f04f 0701 	mov.w	r7, #1
 80163fa:	d8f0      	bhi.n	80163de <rmw_wait+0x13a>
 80163fc:	f1b8 0f00 	cmp.w	r8, #0
 8016400:	d012      	beq.n	8016428 <rmw_wait+0x184>
 8016402:	f8d8 3000 	ldr.w	r3, [r8]
 8016406:	b17b      	cbz	r3, 8016428 <rmw_wait+0x184>
 8016408:	2400      	movs	r4, #0
 801640a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801640e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016412:	f7f6 fa47 	bl	800c8a4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016416:	2800      	cmp	r0, #0
 8016418:	d051      	beq.n	80164be <rmw_wait+0x21a>
 801641a:	f8d8 3000 	ldr.w	r3, [r8]
 801641e:	3401      	adds	r4, #1
 8016420:	42a3      	cmp	r3, r4
 8016422:	f04f 0701 	mov.w	r7, #1
 8016426:	d8f0      	bhi.n	801640a <rmw_wait+0x166>
 8016428:	b1dd      	cbz	r5, 8016462 <rmw_wait+0x1be>
 801642a:	682b      	ldr	r3, [r5, #0]
 801642c:	b1cb      	cbz	r3, 8016462 <rmw_wait+0x1be>
 801642e:	2400      	movs	r4, #0
 8016430:	686b      	ldr	r3, [r5, #4]
 8016432:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016436:	f7f6 fa35 	bl	800c8a4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801643a:	b158      	cbz	r0, 8016454 <rmw_wait+0x1b0>
 801643c:	682b      	ldr	r3, [r5, #0]
 801643e:	3401      	adds	r4, #1
 8016440:	42a3      	cmp	r3, r4
 8016442:	d969      	bls.n	8016518 <rmw_wait+0x274>
 8016444:	686b      	ldr	r3, [r5, #4]
 8016446:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801644a:	2701      	movs	r7, #1
 801644c:	f7f6 fa2a 	bl	800c8a4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016450:	2800      	cmp	r0, #0
 8016452:	d1f3      	bne.n	801643c <rmw_wait+0x198>
 8016454:	e9d5 3200 	ldrd	r3, r2, [r5]
 8016458:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801645c:	3401      	adds	r4, #1
 801645e:	42a3      	cmp	r3, r4
 8016460:	d8e6      	bhi.n	8016430 <rmw_wait+0x18c>
 8016462:	b1a6      	cbz	r6, 801648e <rmw_wait+0x1ea>
 8016464:	6834      	ldr	r4, [r6, #0]
 8016466:	b194      	cbz	r4, 801648e <rmw_wait+0x1ea>
 8016468:	2300      	movs	r3, #0
 801646a:	461d      	mov	r5, r3
 801646c:	e004      	b.n	8016478 <rmw_wait+0x1d4>
 801646e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8016472:	3301      	adds	r3, #1
 8016474:	42a3      	cmp	r3, r4
 8016476:	d00a      	beq.n	801648e <rmw_wait+0x1ea>
 8016478:	6870      	ldr	r0, [r6, #4]
 801647a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801647e:	7c0a      	ldrb	r2, [r1, #16]
 8016480:	2a00      	cmp	r2, #0
 8016482:	d0f4      	beq.n	801646e <rmw_wait+0x1ca>
 8016484:	3301      	adds	r3, #1
 8016486:	42a3      	cmp	r3, r4
 8016488:	740d      	strb	r5, [r1, #16]
 801648a:	4617      	mov	r7, r2
 801648c:	d1f4      	bne.n	8016478 <rmw_wait+0x1d4>
 801648e:	2f00      	cmp	r7, #0
 8016490:	d03e      	beq.n	8016510 <rmw_wait+0x26c>
 8016492:	2000      	movs	r0, #0
 8016494:	b009      	add	sp, #36	@ 0x24
 8016496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801649a:	68a0      	ldr	r0, [r4, #8]
 801649c:	2100      	movs	r1, #0
 801649e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80164a2:	f7f9 fcf1 	bl	800fe88 <uxr_run_session_timeout>
 80164a6:	6864      	ldr	r4, [r4, #4]
 80164a8:	2c00      	cmp	r4, #0
 80164aa:	d1f6      	bne.n	801649a <rmw_wait+0x1f6>
 80164ac:	e78c      	b.n	80163c8 <rmw_wait+0x124>
 80164ae:	e9d9 3200 	ldrd	r3, r2, [r9]
 80164b2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80164b6:	3401      	adds	r4, #1
 80164b8:	42a3      	cmp	r3, r4
 80164ba:	d890      	bhi.n	80163de <rmw_wait+0x13a>
 80164bc:	e79e      	b.n	80163fc <rmw_wait+0x158>
 80164be:	e9d8 3200 	ldrd	r3, r2, [r8]
 80164c2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80164c6:	3401      	adds	r4, #1
 80164c8:	429c      	cmp	r4, r3
 80164ca:	d39e      	bcc.n	801640a <rmw_wait+0x166>
 80164cc:	e7ac      	b.n	8016428 <rmw_wait+0x184>
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	f47f aef3 	bne.w	80162ba <rmw_wait+0x16>
 80164d4:	2800      	cmp	r0, #0
 80164d6:	f47f aef0 	bne.w	80162ba <rmw_wait+0x16>
 80164da:	2900      	cmp	r1, #0
 80164dc:	f47f aeed 	bne.w	80162ba <rmw_wait+0x16>
 80164e0:	e7d7      	b.n	8016492 <rmw_wait+0x1ee>
 80164e2:	4639      	mov	r1, r7
 80164e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80164e8:	f7f9 fce8 	bl	800febc <uxr_run_session_until_data>
 80164ec:	6864      	ldr	r4, [r4, #4]
 80164ee:	2c00      	cmp	r4, #0
 80164f0:	f47f af5f 	bne.w	80163b2 <rmw_wait+0x10e>
 80164f4:	e768      	b.n	80163c8 <rmw_wait+0x124>
 80164f6:	f1b8 0f00 	cmp.w	r8, #0
 80164fa:	d032      	beq.n	8016562 <rmw_wait+0x2be>
 80164fc:	f8d8 3000 	ldr.w	r3, [r8]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d181      	bne.n	8016408 <rmw_wait+0x164>
 8016504:	461f      	mov	r7, r3
 8016506:	2d00      	cmp	r5, #0
 8016508:	d18f      	bne.n	801642a <rmw_wait+0x186>
 801650a:	462f      	mov	r7, r5
 801650c:	2e00      	cmp	r6, #0
 801650e:	d1a9      	bne.n	8016464 <rmw_wait+0x1c0>
 8016510:	2002      	movs	r0, #2
 8016512:	b009      	add	sp, #36	@ 0x24
 8016514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016518:	2e00      	cmp	r6, #0
 801651a:	d0ba      	beq.n	8016492 <rmw_wait+0x1ee>
 801651c:	6834      	ldr	r4, [r6, #0]
 801651e:	2701      	movs	r7, #1
 8016520:	2c00      	cmp	r4, #0
 8016522:	d1a1      	bne.n	8016468 <rmw_wait+0x1c4>
 8016524:	e7b5      	b.n	8016492 <rmw_wait+0x1ee>
 8016526:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801652a:	f7ff f9d5 	bl	80158d8 <rmw_time_total_nsec>
 801652e:	2300      	movs	r3, #0
 8016530:	4a13      	ldr	r2, [pc, #76]	@ (8016580 <rmw_wait+0x2dc>)
 8016532:	f7ea fb99 	bl	8000c68 <__aeabi_uldivmod>
 8016536:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801653a:	f171 0300 	sbcs.w	r3, r1, #0
 801653e:	4607      	mov	r7, r0
 8016540:	bfa8      	it	ge
 8016542:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8016546:	e6c9      	b.n	80162dc <rmw_wait+0x38>
 8016548:	f1b8 0f00 	cmp.w	r8, #0
 801654c:	d009      	beq.n	8016562 <rmw_wait+0x2be>
 801654e:	f8d8 3000 	ldr.w	r3, [r8]
 8016552:	464f      	mov	r7, r9
 8016554:	2b00      	cmp	r3, #0
 8016556:	f47f af57 	bne.w	8016408 <rmw_wait+0x164>
 801655a:	2d00      	cmp	r5, #0
 801655c:	f47f af65 	bne.w	801642a <rmw_wait+0x186>
 8016560:	e7d3      	b.n	801650a <rmw_wait+0x266>
 8016562:	b17d      	cbz	r5, 8016584 <rmw_wait+0x2e0>
 8016564:	682b      	ldr	r3, [r5, #0]
 8016566:	4647      	mov	r7, r8
 8016568:	2b00      	cmp	r3, #0
 801656a:	f47f af60 	bne.w	801642e <rmw_wait+0x18a>
 801656e:	2e00      	cmp	r6, #0
 8016570:	f47f af78 	bne.w	8016464 <rmw_wait+0x1c0>
 8016574:	e7cc      	b.n	8016510 <rmw_wait+0x26c>
 8016576:	bf00      	nop
 8016578:	08019a20 	.word	0x08019a20
 801657c:	2000b1cc 	.word	0x2000b1cc
 8016580:	000f4240 	.word	0x000f4240
 8016584:	2e00      	cmp	r6, #0
 8016586:	d0c3      	beq.n	8016510 <rmw_wait+0x26c>
 8016588:	6834      	ldr	r4, [r6, #0]
 801658a:	462f      	mov	r7, r5
 801658c:	2c00      	cmp	r4, #0
 801658e:	f47f af6b 	bne.w	8016468 <rmw_wait+0x1c4>
 8016592:	e7bd      	b.n	8016510 <rmw_wait+0x26c>

08016594 <rmw_create_wait_set>:
 8016594:	b508      	push	{r3, lr}
 8016596:	4803      	ldr	r0, [pc, #12]	@ (80165a4 <rmw_create_wait_set+0x10>)
 8016598:	f7ff fbfe 	bl	8015d98 <get_memory>
 801659c:	b108      	cbz	r0, 80165a2 <rmw_create_wait_set+0xe>
 801659e:	6880      	ldr	r0, [r0, #8]
 80165a0:	3010      	adds	r0, #16
 80165a2:	bd08      	pop	{r3, pc}
 80165a4:	2000b20c 	.word	0x2000b20c

080165a8 <rmw_destroy_wait_set>:
 80165a8:	b508      	push	{r3, lr}
 80165aa:	4b08      	ldr	r3, [pc, #32]	@ (80165cc <rmw_destroy_wait_set+0x24>)
 80165ac:	6819      	ldr	r1, [r3, #0]
 80165ae:	b911      	cbnz	r1, 80165b6 <rmw_destroy_wait_set+0xe>
 80165b0:	e00a      	b.n	80165c8 <rmw_destroy_wait_set+0x20>
 80165b2:	6849      	ldr	r1, [r1, #4]
 80165b4:	b141      	cbz	r1, 80165c8 <rmw_destroy_wait_set+0x20>
 80165b6:	688b      	ldr	r3, [r1, #8]
 80165b8:	3310      	adds	r3, #16
 80165ba:	4298      	cmp	r0, r3
 80165bc:	d1f9      	bne.n	80165b2 <rmw_destroy_wait_set+0xa>
 80165be:	4803      	ldr	r0, [pc, #12]	@ (80165cc <rmw_destroy_wait_set+0x24>)
 80165c0:	f7ff fbfa 	bl	8015db8 <put_memory>
 80165c4:	2000      	movs	r0, #0
 80165c6:	bd08      	pop	{r3, pc}
 80165c8:	2001      	movs	r0, #1
 80165ca:	bd08      	pop	{r3, pc}
 80165cc:	2000b20c 	.word	0x2000b20c

080165d0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80165d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165d4:	6805      	ldr	r5, [r0, #0]
 80165d6:	4604      	mov	r4, r0
 80165d8:	4628      	mov	r0, r5
 80165da:	460e      	mov	r6, r1
 80165dc:	f7e9 fe20 	bl	8000220 <strcmp>
 80165e0:	b1c8      	cbz	r0, 8016616 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80165e2:	4b11      	ldr	r3, [pc, #68]	@ (8016628 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	429d      	cmp	r5, r3
 80165e8:	d112      	bne.n	8016610 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80165ea:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80165ee:	f8d8 4000 	ldr.w	r4, [r8]
 80165f2:	b16c      	cbz	r4, 8016610 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80165f4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80165f8:	2700      	movs	r7, #0
 80165fa:	3d04      	subs	r5, #4
 80165fc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8016600:	4631      	mov	r1, r6
 8016602:	f7e9 fe0d 	bl	8000220 <strcmp>
 8016606:	00bb      	lsls	r3, r7, #2
 8016608:	b140      	cbz	r0, 801661c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801660a:	3701      	adds	r7, #1
 801660c:	42bc      	cmp	r4, r7
 801660e:	d1f5      	bne.n	80165fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8016610:	2000      	movs	r0, #0
 8016612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016616:	4620      	mov	r0, r4
 8016618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801661c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016624:	58d3      	ldr	r3, [r2, r3]
 8016626:	4718      	bx	r3
 8016628:	20000608 	.word	0x20000608

0801662c <sensor_msgs__msg__Imu__init>:
 801662c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016630:	4605      	mov	r5, r0
 8016632:	b3c0      	cbz	r0, 80166a6 <sensor_msgs__msg__Imu__init+0x7a>
 8016634:	f000 f864 	bl	8016700 <std_msgs__msg__Header__init>
 8016638:	4604      	mov	r4, r0
 801663a:	b310      	cbz	r0, 8016682 <sensor_msgs__msg__Imu__init+0x56>
 801663c:	f105 0618 	add.w	r6, r5, #24
 8016640:	4630      	mov	r0, r6
 8016642:	f000 f895 	bl	8016770 <geometry_msgs__msg__Quaternion__init>
 8016646:	4604      	mov	r4, r0
 8016648:	2800      	cmp	r0, #0
 801664a:	d040      	beq.n	80166ce <sensor_msgs__msg__Imu__init+0xa2>
 801664c:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8016650:	4638      	mov	r0, r7
 8016652:	f000 f8a3 	bl	801679c <geometry_msgs__msg__Vector3__init>
 8016656:	4604      	mov	r4, r0
 8016658:	b348      	cbz	r0, 80166ae <sensor_msgs__msg__Imu__init+0x82>
 801665a:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 801665e:	4640      	mov	r0, r8
 8016660:	f000 f89c 	bl	801679c <geometry_msgs__msg__Vector3__init>
 8016664:	4604      	mov	r4, r0
 8016666:	b9d8      	cbnz	r0, 80166a0 <sensor_msgs__msg__Imu__init+0x74>
 8016668:	4628      	mov	r0, r5
 801666a:	f000 f86d 	bl	8016748 <std_msgs__msg__Header__fini>
 801666e:	4630      	mov	r0, r6
 8016670:	f000 f892 	bl	8016798 <geometry_msgs__msg__Quaternion__fini>
 8016674:	4638      	mov	r0, r7
 8016676:	f000 f895 	bl	80167a4 <geometry_msgs__msg__Vector3__fini>
 801667a:	4640      	mov	r0, r8
 801667c:	f000 f892 	bl	80167a4 <geometry_msgs__msg__Vector3__fini>
 8016680:	e00e      	b.n	80166a0 <sensor_msgs__msg__Imu__init+0x74>
 8016682:	4628      	mov	r0, r5
 8016684:	f000 f860 	bl	8016748 <std_msgs__msg__Header__fini>
 8016688:	f105 0018 	add.w	r0, r5, #24
 801668c:	f000 f884 	bl	8016798 <geometry_msgs__msg__Quaternion__fini>
 8016690:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8016694:	f000 f886 	bl	80167a4 <geometry_msgs__msg__Vector3__fini>
 8016698:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801669c:	f000 f882 	bl	80167a4 <geometry_msgs__msg__Vector3__fini>
 80166a0:	4620      	mov	r0, r4
 80166a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166a6:	4604      	mov	r4, r0
 80166a8:	4620      	mov	r0, r4
 80166aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166ae:	4628      	mov	r0, r5
 80166b0:	f000 f84a 	bl	8016748 <std_msgs__msg__Header__fini>
 80166b4:	4630      	mov	r0, r6
 80166b6:	f000 f86f 	bl	8016798 <geometry_msgs__msg__Quaternion__fini>
 80166ba:	4638      	mov	r0, r7
 80166bc:	f000 f872 	bl	80167a4 <geometry_msgs__msg__Vector3__fini>
 80166c0:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 80166c4:	f000 f86e 	bl	80167a4 <geometry_msgs__msg__Vector3__fini>
 80166c8:	4620      	mov	r0, r4
 80166ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166ce:	4628      	mov	r0, r5
 80166d0:	f000 f83a 	bl	8016748 <std_msgs__msg__Header__fini>
 80166d4:	4630      	mov	r0, r6
 80166d6:	e7d9      	b.n	801668c <sensor_msgs__msg__Imu__init+0x60>

080166d8 <sensor_msgs__msg__Imu__fini>:
 80166d8:	b188      	cbz	r0, 80166fe <sensor_msgs__msg__Imu__fini+0x26>
 80166da:	b510      	push	{r4, lr}
 80166dc:	4604      	mov	r4, r0
 80166de:	f000 f833 	bl	8016748 <std_msgs__msg__Header__fini>
 80166e2:	f104 0018 	add.w	r0, r4, #24
 80166e6:	f000 f857 	bl	8016798 <geometry_msgs__msg__Quaternion__fini>
 80166ea:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80166ee:	f000 f859 	bl	80167a4 <geometry_msgs__msg__Vector3__fini>
 80166f2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80166f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166fa:	f000 b853 	b.w	80167a4 <geometry_msgs__msg__Vector3__fini>
 80166fe:	4770      	bx	lr

08016700 <std_msgs__msg__Header__init>:
 8016700:	b570      	push	{r4, r5, r6, lr}
 8016702:	4605      	mov	r5, r0
 8016704:	b1a8      	cbz	r0, 8016732 <std_msgs__msg__Header__init+0x32>
 8016706:	f000 f82b 	bl	8016760 <builtin_interfaces__msg__Time__init>
 801670a:	4604      	mov	r4, r0
 801670c:	b140      	cbz	r0, 8016720 <std_msgs__msg__Header__init+0x20>
 801670e:	f105 0608 	add.w	r6, r5, #8
 8016712:	4630      	mov	r0, r6
 8016714:	f001 f978 	bl	8017a08 <rosidl_runtime_c__String__init>
 8016718:	4604      	mov	r4, r0
 801671a:	b168      	cbz	r0, 8016738 <std_msgs__msg__Header__init+0x38>
 801671c:	4620      	mov	r0, r4
 801671e:	bd70      	pop	{r4, r5, r6, pc}
 8016720:	4628      	mov	r0, r5
 8016722:	f000 f821 	bl	8016768 <builtin_interfaces__msg__Time__fini>
 8016726:	f105 0008 	add.w	r0, r5, #8
 801672a:	f001 f983 	bl	8017a34 <rosidl_runtime_c__String__fini>
 801672e:	4620      	mov	r0, r4
 8016730:	bd70      	pop	{r4, r5, r6, pc}
 8016732:	4604      	mov	r4, r0
 8016734:	4620      	mov	r0, r4
 8016736:	bd70      	pop	{r4, r5, r6, pc}
 8016738:	4628      	mov	r0, r5
 801673a:	f000 f815 	bl	8016768 <builtin_interfaces__msg__Time__fini>
 801673e:	4630      	mov	r0, r6
 8016740:	f001 f978 	bl	8017a34 <rosidl_runtime_c__String__fini>
 8016744:	e7ea      	b.n	801671c <std_msgs__msg__Header__init+0x1c>
 8016746:	bf00      	nop

08016748 <std_msgs__msg__Header__fini>:
 8016748:	b148      	cbz	r0, 801675e <std_msgs__msg__Header__fini+0x16>
 801674a:	b510      	push	{r4, lr}
 801674c:	4604      	mov	r4, r0
 801674e:	f000 f80b 	bl	8016768 <builtin_interfaces__msg__Time__fini>
 8016752:	f104 0008 	add.w	r0, r4, #8
 8016756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801675a:	f001 b96b 	b.w	8017a34 <rosidl_runtime_c__String__fini>
 801675e:	4770      	bx	lr

08016760 <builtin_interfaces__msg__Time__init>:
 8016760:	3800      	subs	r0, #0
 8016762:	bf18      	it	ne
 8016764:	2001      	movne	r0, #1
 8016766:	4770      	bx	lr

08016768 <builtin_interfaces__msg__Time__fini>:
 8016768:	4770      	bx	lr
 801676a:	bf00      	nop
 801676c:	0000      	movs	r0, r0
	...

08016770 <geometry_msgs__msg__Quaternion__init>:
 8016770:	b160      	cbz	r0, 801678c <geometry_msgs__msg__Quaternion__init+0x1c>
 8016772:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8016790 <geometry_msgs__msg__Quaternion__init+0x20>
 8016776:	2200      	movs	r2, #0
 8016778:	2300      	movs	r3, #0
 801677a:	e9c0 2300 	strd	r2, r3, [r0]
 801677e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016782:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016786:	ed80 7b06 	vstr	d7, [r0, #24]
 801678a:	2001      	movs	r0, #1
 801678c:	4770      	bx	lr
 801678e:	bf00      	nop
 8016790:	00000000 	.word	0x00000000
 8016794:	3ff00000 	.word	0x3ff00000

08016798 <geometry_msgs__msg__Quaternion__fini>:
 8016798:	4770      	bx	lr
 801679a:	bf00      	nop

0801679c <geometry_msgs__msg__Vector3__init>:
 801679c:	3800      	subs	r0, #0
 801679e:	bf18      	it	ne
 80167a0:	2001      	movne	r0, #1
 80167a2:	4770      	bx	lr

080167a4 <geometry_msgs__msg__Vector3__fini>:
 80167a4:	4770      	bx	lr
 80167a6:	bf00      	nop

080167a8 <ucdr_serialize_string>:
 80167a8:	b510      	push	{r4, lr}
 80167aa:	b082      	sub	sp, #8
 80167ac:	4604      	mov	r4, r0
 80167ae:	4608      	mov	r0, r1
 80167b0:	9101      	str	r1, [sp, #4]
 80167b2:	f7e9 fd3f 	bl	8000234 <strlen>
 80167b6:	9901      	ldr	r1, [sp, #4]
 80167b8:	1c42      	adds	r2, r0, #1
 80167ba:	4620      	mov	r0, r4
 80167bc:	b002      	add	sp, #8
 80167be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167c2:	f7f8 bb0f 	b.w	800ede4 <ucdr_serialize_sequence_char>
 80167c6:	bf00      	nop

080167c8 <ucdr_deserialize_string>:
 80167c8:	b500      	push	{lr}
 80167ca:	b083      	sub	sp, #12
 80167cc:	ab01      	add	r3, sp, #4
 80167ce:	f7f8 fb1b 	bl	800ee08 <ucdr_deserialize_sequence_char>
 80167d2:	b003      	add	sp, #12
 80167d4:	f85d fb04 	ldr.w	pc, [sp], #4

080167d8 <uxr_init_input_best_effort_stream>:
 80167d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80167dc:	8003      	strh	r3, [r0, #0]
 80167de:	4770      	bx	lr

080167e0 <uxr_reset_input_best_effort_stream>:
 80167e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80167e4:	8003      	strh	r3, [r0, #0]
 80167e6:	4770      	bx	lr

080167e8 <uxr_receive_best_effort_message>:
 80167e8:	b538      	push	{r3, r4, r5, lr}
 80167ea:	4604      	mov	r4, r0
 80167ec:	8800      	ldrh	r0, [r0, #0]
 80167ee:	460d      	mov	r5, r1
 80167f0:	f000 fd42 	bl	8017278 <uxr_seq_num_cmp>
 80167f4:	4603      	mov	r3, r0
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80167fc:	bfb8      	it	lt
 80167fe:	8025      	strhlt	r5, [r4, #0]
 8016800:	bd38      	pop	{r3, r4, r5, pc}
 8016802:	bf00      	nop

08016804 <on_full_input_buffer>:
 8016804:	b570      	push	{r4, r5, r6, lr}
 8016806:	4605      	mov	r5, r0
 8016808:	460c      	mov	r4, r1
 801680a:	682b      	ldr	r3, [r5, #0]
 801680c:	6809      	ldr	r1, [r1, #0]
 801680e:	8920      	ldrh	r0, [r4, #8]
 8016810:	6862      	ldr	r2, [r4, #4]
 8016812:	fbb2 f2f0 	udiv	r2, r2, r0
 8016816:	eba3 0c01 	sub.w	ip, r3, r1
 801681a:	fbbc fcf2 	udiv	ip, ip, r2
 801681e:	f10c 0c01 	add.w	ip, ip, #1
 8016822:	fa1f f38c 	uxth.w	r3, ip
 8016826:	fbb3 f6f0 	udiv	r6, r3, r0
 801682a:	fb00 3316 	mls	r3, r0, r6, r3
 801682e:	b29b      	uxth	r3, r3
 8016830:	fb02 f303 	mul.w	r3, r2, r3
 8016834:	1d18      	adds	r0, r3, #4
 8016836:	4408      	add	r0, r1
 8016838:	7d26      	ldrb	r6, [r4, #20]
 801683a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801683e:	b116      	cbz	r6, 8016846 <on_full_input_buffer+0x42>
 8016840:	2600      	movs	r6, #0
 8016842:	f840 6c04 	str.w	r6, [r0, #-4]
 8016846:	2a03      	cmp	r2, #3
 8016848:	d801      	bhi.n	801684e <on_full_input_buffer+0x4a>
 801684a:	2001      	movs	r0, #1
 801684c:	bd70      	pop	{r4, r5, r6, pc}
 801684e:	3308      	adds	r3, #8
 8016850:	4419      	add	r1, r3
 8016852:	4628      	mov	r0, r5
 8016854:	692b      	ldr	r3, [r5, #16]
 8016856:	3a04      	subs	r2, #4
 8016858:	f7f8 fa4c 	bl	800ecf4 <ucdr_init_buffer_origin>
 801685c:	4628      	mov	r0, r5
 801685e:	4903      	ldr	r1, [pc, #12]	@ (801686c <on_full_input_buffer+0x68>)
 8016860:	4622      	mov	r2, r4
 8016862:	f7f8 fa23 	bl	800ecac <ucdr_set_on_full_buffer_callback>
 8016866:	2000      	movs	r0, #0
 8016868:	bd70      	pop	{r4, r5, r6, pc}
 801686a:	bf00      	nop
 801686c:	08016805 	.word	0x08016805

08016870 <uxr_init_input_reliable_stream>:
 8016870:	b500      	push	{lr}
 8016872:	e9c0 1200 	strd	r1, r2, [r0]
 8016876:	f04f 0e00 	mov.w	lr, #0
 801687a:	9a01      	ldr	r2, [sp, #4]
 801687c:	8103      	strh	r3, [r0, #8]
 801687e:	6102      	str	r2, [r0, #16]
 8016880:	f880 e014 	strb.w	lr, [r0, #20]
 8016884:	b1d3      	cbz	r3, 80168bc <uxr_init_input_reliable_stream+0x4c>
 8016886:	f8c1 e000 	str.w	lr, [r1]
 801688a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801688e:	f1bc 0f01 	cmp.w	ip, #1
 8016892:	d913      	bls.n	80168bc <uxr_init_input_reliable_stream+0x4c>
 8016894:	2301      	movs	r3, #1
 8016896:	fbb3 f1fc 	udiv	r1, r3, ip
 801689a:	fb0c 3111 	mls	r1, ip, r1, r3
 801689e:	b289      	uxth	r1, r1
 80168a0:	6842      	ldr	r2, [r0, #4]
 80168a2:	fbb2 f2fc 	udiv	r2, r2, ip
 80168a6:	fb01 f202 	mul.w	r2, r1, r2
 80168aa:	6801      	ldr	r1, [r0, #0]
 80168ac:	f841 e002 	str.w	lr, [r1, r2]
 80168b0:	3301      	adds	r3, #1
 80168b2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80168b6:	b29b      	uxth	r3, r3
 80168b8:	459c      	cmp	ip, r3
 80168ba:	d8ec      	bhi.n	8016896 <uxr_init_input_reliable_stream+0x26>
 80168bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80168c0:	60c3      	str	r3, [r0, #12]
 80168c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80168c6:	bf00      	nop

080168c8 <uxr_reset_input_reliable_stream>:
 80168c8:	8901      	ldrh	r1, [r0, #8]
 80168ca:	b1e9      	cbz	r1, 8016908 <uxr_reset_input_reliable_stream+0x40>
 80168cc:	f04f 0c00 	mov.w	ip, #0
 80168d0:	b500      	push	{lr}
 80168d2:	4663      	mov	r3, ip
 80168d4:	46e6      	mov	lr, ip
 80168d6:	fbb3 f2f1 	udiv	r2, r3, r1
 80168da:	fb01 3312 	mls	r3, r1, r2, r3
 80168de:	b29b      	uxth	r3, r3
 80168e0:	6842      	ldr	r2, [r0, #4]
 80168e2:	fbb2 f2f1 	udiv	r2, r2, r1
 80168e6:	fb02 f303 	mul.w	r3, r2, r3
 80168ea:	6802      	ldr	r2, [r0, #0]
 80168ec:	f842 e003 	str.w	lr, [r2, r3]
 80168f0:	f10c 0c01 	add.w	ip, ip, #1
 80168f4:	8901      	ldrh	r1, [r0, #8]
 80168f6:	fa1f f38c 	uxth.w	r3, ip
 80168fa:	4299      	cmp	r1, r3
 80168fc:	d8eb      	bhi.n	80168d6 <uxr_reset_input_reliable_stream+0xe>
 80168fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016902:	60c3      	str	r3, [r0, #12]
 8016904:	f85d fb04 	ldr.w	pc, [sp], #4
 8016908:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801690c:	60c3      	str	r3, [r0, #12]
 801690e:	4770      	bx	lr

08016910 <uxr_receive_reliable_message>:
 8016910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016914:	4604      	mov	r4, r0
 8016916:	460d      	mov	r5, r1
 8016918:	8901      	ldrh	r1, [r0, #8]
 801691a:	8980      	ldrh	r0, [r0, #12]
 801691c:	4690      	mov	r8, r2
 801691e:	461f      	mov	r7, r3
 8016920:	f000 fca2 	bl	8017268 <uxr_seq_num_add>
 8016924:	4629      	mov	r1, r5
 8016926:	4606      	mov	r6, r0
 8016928:	89a0      	ldrh	r0, [r4, #12]
 801692a:	f000 fca5 	bl	8017278 <uxr_seq_num_cmp>
 801692e:	2800      	cmp	r0, #0
 8016930:	db0a      	blt.n	8016948 <uxr_receive_reliable_message+0x38>
 8016932:	2600      	movs	r6, #0
 8016934:	89e0      	ldrh	r0, [r4, #14]
 8016936:	4629      	mov	r1, r5
 8016938:	f000 fc9e 	bl	8017278 <uxr_seq_num_cmp>
 801693c:	2800      	cmp	r0, #0
 801693e:	da00      	bge.n	8016942 <uxr_receive_reliable_message+0x32>
 8016940:	81e5      	strh	r5, [r4, #14]
 8016942:	4630      	mov	r0, r6
 8016944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016948:	4630      	mov	r0, r6
 801694a:	4629      	mov	r1, r5
 801694c:	f000 fc94 	bl	8017278 <uxr_seq_num_cmp>
 8016950:	2800      	cmp	r0, #0
 8016952:	dbee      	blt.n	8016932 <uxr_receive_reliable_message+0x22>
 8016954:	6923      	ldr	r3, [r4, #16]
 8016956:	4640      	mov	r0, r8
 8016958:	4798      	blx	r3
 801695a:	2101      	movs	r1, #1
 801695c:	4681      	mov	r9, r0
 801695e:	89a0      	ldrh	r0, [r4, #12]
 8016960:	f000 fc82 	bl	8017268 <uxr_seq_num_add>
 8016964:	f1b9 0f00 	cmp.w	r9, #0
 8016968:	d101      	bne.n	801696e <uxr_receive_reliable_message+0x5e>
 801696a:	4285      	cmp	r5, r0
 801696c:	d047      	beq.n	80169fe <uxr_receive_reliable_message+0xee>
 801696e:	8922      	ldrh	r2, [r4, #8]
 8016970:	fbb5 f0f2 	udiv	r0, r5, r2
 8016974:	fb02 5010 	mls	r0, r2, r0, r5
 8016978:	b280      	uxth	r0, r0
 801697a:	6863      	ldr	r3, [r4, #4]
 801697c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016980:	fb00 f303 	mul.w	r3, r0, r3
 8016984:	6820      	ldr	r0, [r4, #0]
 8016986:	3304      	adds	r3, #4
 8016988:	4418      	add	r0, r3
 801698a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d1cf      	bne.n	8016932 <uxr_receive_reliable_message+0x22>
 8016992:	4641      	mov	r1, r8
 8016994:	463a      	mov	r2, r7
 8016996:	f001 fe48 	bl	801862a <memcpy>
 801699a:	8921      	ldrh	r1, [r4, #8]
 801699c:	fbb5 f2f1 	udiv	r2, r5, r1
 80169a0:	fb01 5212 	mls	r2, r1, r2, r5
 80169a4:	b292      	uxth	r2, r2
 80169a6:	6863      	ldr	r3, [r4, #4]
 80169a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80169ac:	fb02 f303 	mul.w	r3, r2, r3
 80169b0:	6822      	ldr	r2, [r4, #0]
 80169b2:	50d7      	str	r7, [r2, r3]
 80169b4:	9a08      	ldr	r2, [sp, #32]
 80169b6:	2301      	movs	r3, #1
 80169b8:	7013      	strb	r3, [r2, #0]
 80169ba:	f1b9 0f00 	cmp.w	r9, #0
 80169be:	d0b8      	beq.n	8016932 <uxr_receive_reliable_message+0x22>
 80169c0:	89a6      	ldrh	r6, [r4, #12]
 80169c2:	4630      	mov	r0, r6
 80169c4:	2101      	movs	r1, #1
 80169c6:	f000 fc4f 	bl	8017268 <uxr_seq_num_add>
 80169ca:	8922      	ldrh	r2, [r4, #8]
 80169cc:	6863      	ldr	r3, [r4, #4]
 80169ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80169d2:	4606      	mov	r6, r0
 80169d4:	fbb0 f0f2 	udiv	r0, r0, r2
 80169d8:	fb02 6010 	mls	r0, r2, r0, r6
 80169dc:	b280      	uxth	r0, r0
 80169de:	fb00 f303 	mul.w	r3, r0, r3
 80169e2:	6820      	ldr	r0, [r4, #0]
 80169e4:	3304      	adds	r3, #4
 80169e6:	4418      	add	r0, r3
 80169e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d0a0      	beq.n	8016932 <uxr_receive_reliable_message+0x22>
 80169f0:	6923      	ldr	r3, [r4, #16]
 80169f2:	4798      	blx	r3
 80169f4:	2802      	cmp	r0, #2
 80169f6:	d008      	beq.n	8016a0a <uxr_receive_reliable_message+0xfa>
 80169f8:	2801      	cmp	r0, #1
 80169fa:	d0e2      	beq.n	80169c2 <uxr_receive_reliable_message+0xb2>
 80169fc:	e799      	b.n	8016932 <uxr_receive_reliable_message+0x22>
 80169fe:	9b08      	ldr	r3, [sp, #32]
 8016a00:	81a5      	strh	r5, [r4, #12]
 8016a02:	2601      	movs	r6, #1
 8016a04:	f883 9000 	strb.w	r9, [r3]
 8016a08:	e794      	b.n	8016934 <uxr_receive_reliable_message+0x24>
 8016a0a:	2601      	movs	r6, #1
 8016a0c:	e792      	b.n	8016934 <uxr_receive_reliable_message+0x24>
 8016a0e:	bf00      	nop

08016a10 <uxr_next_input_reliable_buffer_available>:
 8016a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a14:	4604      	mov	r4, r0
 8016a16:	460f      	mov	r7, r1
 8016a18:	8980      	ldrh	r0, [r0, #12]
 8016a1a:	2101      	movs	r1, #1
 8016a1c:	4690      	mov	r8, r2
 8016a1e:	f000 fc23 	bl	8017268 <uxr_seq_num_add>
 8016a22:	8922      	ldrh	r2, [r4, #8]
 8016a24:	fbb0 f6f2 	udiv	r6, r0, r2
 8016a28:	fb02 0616 	mls	r6, r2, r6, r0
 8016a2c:	b2b6      	uxth	r6, r6
 8016a2e:	6863      	ldr	r3, [r4, #4]
 8016a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8016a34:	fb06 f303 	mul.w	r3, r6, r3
 8016a38:	6826      	ldr	r6, [r4, #0]
 8016a3a:	3304      	adds	r3, #4
 8016a3c:	441e      	add	r6, r3
 8016a3e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8016a42:	f1b9 0f00 	cmp.w	r9, #0
 8016a46:	d023      	beq.n	8016a90 <uxr_next_input_reliable_buffer_available+0x80>
 8016a48:	6923      	ldr	r3, [r4, #16]
 8016a4a:	4605      	mov	r5, r0
 8016a4c:	4630      	mov	r0, r6
 8016a4e:	4798      	blx	r3
 8016a50:	4682      	mov	sl, r0
 8016a52:	b300      	cbz	r0, 8016a96 <uxr_next_input_reliable_buffer_available+0x86>
 8016a54:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016a58:	2101      	movs	r1, #1
 8016a5a:	4650      	mov	r0, sl
 8016a5c:	f000 fc04 	bl	8017268 <uxr_seq_num_add>
 8016a60:	8921      	ldrh	r1, [r4, #8]
 8016a62:	fbb0 f2f1 	udiv	r2, r0, r1
 8016a66:	4682      	mov	sl, r0
 8016a68:	fb01 0212 	mls	r2, r1, r2, r0
 8016a6c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016a70:	b292      	uxth	r2, r2
 8016a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8016a76:	fb02 f303 	mul.w	r3, r2, r3
 8016a7a:	3304      	adds	r3, #4
 8016a7c:	4418      	add	r0, r3
 8016a7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016a82:	b12b      	cbz	r3, 8016a90 <uxr_next_input_reliable_buffer_available+0x80>
 8016a84:	6923      	ldr	r3, [r4, #16]
 8016a86:	4798      	blx	r3
 8016a88:	2802      	cmp	r0, #2
 8016a8a:	d01b      	beq.n	8016ac4 <uxr_next_input_reliable_buffer_available+0xb4>
 8016a8c:	2801      	cmp	r0, #1
 8016a8e:	d0e3      	beq.n	8016a58 <uxr_next_input_reliable_buffer_available+0x48>
 8016a90:	2000      	movs	r0, #0
 8016a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a96:	464a      	mov	r2, r9
 8016a98:	4631      	mov	r1, r6
 8016a9a:	4638      	mov	r0, r7
 8016a9c:	f7f8 f932 	bl	800ed04 <ucdr_init_buffer>
 8016aa0:	8921      	ldrh	r1, [r4, #8]
 8016aa2:	fbb5 f2f1 	udiv	r2, r5, r1
 8016aa6:	fb01 5212 	mls	r2, r1, r2, r5
 8016aaa:	b292      	uxth	r2, r2
 8016aac:	6863      	ldr	r3, [r4, #4]
 8016aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8016ab2:	fb02 f303 	mul.w	r3, r2, r3
 8016ab6:	6822      	ldr	r2, [r4, #0]
 8016ab8:	f842 a003 	str.w	sl, [r2, r3]
 8016abc:	2001      	movs	r0, #1
 8016abe:	81a5      	strh	r5, [r4, #12]
 8016ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ac4:	8920      	ldrh	r0, [r4, #8]
 8016ac6:	fbb5 f3f0 	udiv	r3, r5, r0
 8016aca:	fb00 5513 	mls	r5, r0, r3, r5
 8016ace:	b2ad      	uxth	r5, r5
 8016ad0:	6863      	ldr	r3, [r4, #4]
 8016ad2:	fbb3 f3f0 	udiv	r3, r3, r0
 8016ad6:	fb03 f505 	mul.w	r5, r3, r5
 8016ada:	6823      	ldr	r3, [r4, #0]
 8016adc:	2000      	movs	r0, #0
 8016ade:	5158      	str	r0, [r3, r5]
 8016ae0:	eb06 0108 	add.w	r1, r6, r8
 8016ae4:	eba9 0208 	sub.w	r2, r9, r8
 8016ae8:	4638      	mov	r0, r7
 8016aea:	f7f8 f90b 	bl	800ed04 <ucdr_init_buffer>
 8016aee:	4638      	mov	r0, r7
 8016af0:	4903      	ldr	r1, [pc, #12]	@ (8016b00 <uxr_next_input_reliable_buffer_available+0xf0>)
 8016af2:	4622      	mov	r2, r4
 8016af4:	f7f8 f8da 	bl	800ecac <ucdr_set_on_full_buffer_callback>
 8016af8:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016afc:	2001      	movs	r0, #1
 8016afe:	e7c8      	b.n	8016a92 <uxr_next_input_reliable_buffer_available+0x82>
 8016b00:	08016805 	.word	0x08016805

08016b04 <uxr_process_heartbeat>:
 8016b04:	b538      	push	{r3, r4, r5, lr}
 8016b06:	4611      	mov	r1, r2
 8016b08:	4604      	mov	r4, r0
 8016b0a:	89c0      	ldrh	r0, [r0, #14]
 8016b0c:	4615      	mov	r5, r2
 8016b0e:	f000 fbb3 	bl	8017278 <uxr_seq_num_cmp>
 8016b12:	2800      	cmp	r0, #0
 8016b14:	bfb8      	it	lt
 8016b16:	81e5      	strhlt	r5, [r4, #14]
 8016b18:	bd38      	pop	{r3, r4, r5, pc}
 8016b1a:	bf00      	nop

08016b1c <uxr_compute_acknack>:
 8016b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b20:	8903      	ldrh	r3, [r0, #8]
 8016b22:	8985      	ldrh	r5, [r0, #12]
 8016b24:	4604      	mov	r4, r0
 8016b26:	460e      	mov	r6, r1
 8016b28:	b1d3      	cbz	r3, 8016b60 <uxr_compute_acknack+0x44>
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	2701      	movs	r7, #1
 8016b2e:	e003      	b.n	8016b38 <uxr_compute_acknack+0x1c>
 8016b30:	4567      	cmp	r7, ip
 8016b32:	d215      	bcs.n	8016b60 <uxr_compute_acknack+0x44>
 8016b34:	89a0      	ldrh	r0, [r4, #12]
 8016b36:	3701      	adds	r7, #1
 8016b38:	b2b9      	uxth	r1, r7
 8016b3a:	f000 fb95 	bl	8017268 <uxr_seq_num_add>
 8016b3e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016b42:	fbb0 f3fc 	udiv	r3, r0, ip
 8016b46:	fb0c 0313 	mls	r3, ip, r3, r0
 8016b4a:	b29a      	uxth	r2, r3
 8016b4c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016b50:	fbb3 f3fc 	udiv	r3, r3, ip
 8016b54:	fb02 f303 	mul.w	r3, r2, r3
 8016b58:	58cb      	ldr	r3, [r1, r3]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d1e8      	bne.n	8016b30 <uxr_compute_acknack+0x14>
 8016b5e:	4605      	mov	r5, r0
 8016b60:	8035      	strh	r5, [r6, #0]
 8016b62:	2101      	movs	r1, #1
 8016b64:	4628      	mov	r0, r5
 8016b66:	89e7      	ldrh	r7, [r4, #14]
 8016b68:	f000 fb82 	bl	8017270 <uxr_seq_num_sub>
 8016b6c:	4601      	mov	r1, r0
 8016b6e:	4638      	mov	r0, r7
 8016b70:	f000 fb7e 	bl	8017270 <uxr_seq_num_sub>
 8016b74:	4605      	mov	r5, r0
 8016b76:	b318      	cbz	r0, 8016bc0 <uxr_compute_acknack+0xa4>
 8016b78:	f04f 0900 	mov.w	r9, #0
 8016b7c:	464f      	mov	r7, r9
 8016b7e:	f04f 0801 	mov.w	r8, #1
 8016b82:	fa1f f189 	uxth.w	r1, r9
 8016b86:	8830      	ldrh	r0, [r6, #0]
 8016b88:	f000 fb6e 	bl	8017268 <uxr_seq_num_add>
 8016b8c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016b90:	fbb0 f3fc 	udiv	r3, r0, ip
 8016b94:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016b98:	fb03 001c 	mls	r0, r3, ip, r0
 8016b9c:	b283      	uxth	r3, r0
 8016b9e:	fbb2 f2fc 	udiv	r2, r2, ip
 8016ba2:	fb02 f303 	mul.w	r3, r2, r3
 8016ba6:	fa08 f209 	lsl.w	r2, r8, r9
 8016baa:	58cb      	ldr	r3, [r1, r3]
 8016bac:	f109 0901 	add.w	r9, r9, #1
 8016bb0:	b90b      	cbnz	r3, 8016bb6 <uxr_compute_acknack+0x9a>
 8016bb2:	4317      	orrs	r7, r2
 8016bb4:	b2bf      	uxth	r7, r7
 8016bb6:	454d      	cmp	r5, r9
 8016bb8:	d1e3      	bne.n	8016b82 <uxr_compute_acknack+0x66>
 8016bba:	4638      	mov	r0, r7
 8016bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bc0:	4607      	mov	r7, r0
 8016bc2:	4638      	mov	r0, r7
 8016bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016bc8 <uxr_init_output_best_effort_stream>:
 8016bc8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016bcc:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016bd0:	6001      	str	r1, [r0, #0]
 8016bd2:	7303      	strb	r3, [r0, #12]
 8016bd4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016bd8:	4770      	bx	lr
 8016bda:	bf00      	nop

08016bdc <uxr_reset_output_best_effort_stream>:
 8016bdc:	7b02      	ldrb	r2, [r0, #12]
 8016bde:	6042      	str	r2, [r0, #4]
 8016be0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016be4:	81c3      	strh	r3, [r0, #14]
 8016be6:	4770      	bx	lr

08016be8 <uxr_prepare_best_effort_buffer_to_write>:
 8016be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bea:	4604      	mov	r4, r0
 8016bec:	b083      	sub	sp, #12
 8016bee:	6840      	ldr	r0, [r0, #4]
 8016bf0:	460d      	mov	r5, r1
 8016bf2:	4616      	mov	r6, r2
 8016bf4:	f7fa fb96 	bl	8011324 <uxr_submessage_padding>
 8016bf8:	6863      	ldr	r3, [r4, #4]
 8016bfa:	4418      	add	r0, r3
 8016bfc:	68a3      	ldr	r3, [r4, #8]
 8016bfe:	1942      	adds	r2, r0, r5
 8016c00:	4293      	cmp	r3, r2
 8016c02:	bf2c      	ite	cs
 8016c04:	2701      	movcs	r7, #1
 8016c06:	2700      	movcc	r7, #0
 8016c08:	d202      	bcs.n	8016c10 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016c0a:	4638      	mov	r0, r7
 8016c0c:	b003      	add	sp, #12
 8016c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c10:	9000      	str	r0, [sp, #0]
 8016c12:	6821      	ldr	r1, [r4, #0]
 8016c14:	4630      	mov	r0, r6
 8016c16:	2300      	movs	r3, #0
 8016c18:	f7f8 f862 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 8016c1c:	6861      	ldr	r1, [r4, #4]
 8016c1e:	4638      	mov	r0, r7
 8016c20:	4429      	add	r1, r5
 8016c22:	6061      	str	r1, [r4, #4]
 8016c24:	b003      	add	sp, #12
 8016c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016c28 <uxr_prepare_best_effort_buffer_to_send>:
 8016c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c2c:	4604      	mov	r4, r0
 8016c2e:	461d      	mov	r5, r3
 8016c30:	6840      	ldr	r0, [r0, #4]
 8016c32:	7b23      	ldrb	r3, [r4, #12]
 8016c34:	4298      	cmp	r0, r3
 8016c36:	bf8c      	ite	hi
 8016c38:	2601      	movhi	r6, #1
 8016c3a:	2600      	movls	r6, #0
 8016c3c:	d802      	bhi.n	8016c44 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8016c3e:	4630      	mov	r0, r6
 8016c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c44:	4688      	mov	r8, r1
 8016c46:	89e0      	ldrh	r0, [r4, #14]
 8016c48:	2101      	movs	r1, #1
 8016c4a:	4617      	mov	r7, r2
 8016c4c:	f000 fb0c 	bl	8017268 <uxr_seq_num_add>
 8016c50:	6823      	ldr	r3, [r4, #0]
 8016c52:	81e0      	strh	r0, [r4, #14]
 8016c54:	8028      	strh	r0, [r5, #0]
 8016c56:	f8c8 3000 	str.w	r3, [r8]
 8016c5a:	6863      	ldr	r3, [r4, #4]
 8016c5c:	603b      	str	r3, [r7, #0]
 8016c5e:	7b23      	ldrb	r3, [r4, #12]
 8016c60:	6063      	str	r3, [r4, #4]
 8016c62:	4630      	mov	r0, r6
 8016c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016c68 <on_full_output_buffer>:
 8016c68:	b538      	push	{r3, r4, r5, lr}
 8016c6a:	6802      	ldr	r2, [r0, #0]
 8016c6c:	460c      	mov	r4, r1
 8016c6e:	6809      	ldr	r1, [r1, #0]
 8016c70:	8923      	ldrh	r3, [r4, #8]
 8016c72:	eba2 0c01 	sub.w	ip, r2, r1
 8016c76:	6862      	ldr	r2, [r4, #4]
 8016c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8016c7c:	fbbc fcf2 	udiv	ip, ip, r2
 8016c80:	f10c 0c01 	add.w	ip, ip, #1
 8016c84:	fa1f fc8c 	uxth.w	ip, ip
 8016c88:	fbbc fef3 	udiv	lr, ip, r3
 8016c8c:	fb03 c31e 	mls	r3, r3, lr, ip
 8016c90:	b29b      	uxth	r3, r3
 8016c92:	fb02 f303 	mul.w	r3, r2, r3
 8016c96:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016c9a:	58ca      	ldr	r2, [r1, r3]
 8016c9c:	4463      	add	r3, ip
 8016c9e:	eba2 020c 	sub.w	r2, r2, ip
 8016ca2:	3308      	adds	r3, #8
 8016ca4:	4605      	mov	r5, r0
 8016ca6:	4419      	add	r1, r3
 8016ca8:	3a04      	subs	r2, #4
 8016caa:	6903      	ldr	r3, [r0, #16]
 8016cac:	f7f8 f822 	bl	800ecf4 <ucdr_init_buffer_origin>
 8016cb0:	4628      	mov	r0, r5
 8016cb2:	4903      	ldr	r1, [pc, #12]	@ (8016cc0 <on_full_output_buffer+0x58>)
 8016cb4:	4622      	mov	r2, r4
 8016cb6:	f7f7 fff9 	bl	800ecac <ucdr_set_on_full_buffer_callback>
 8016cba:	2000      	movs	r0, #0
 8016cbc:	bd38      	pop	{r3, r4, r5, pc}
 8016cbe:	bf00      	nop
 8016cc0:	08016c69 	.word	0x08016c69

08016cc4 <uxr_init_output_reliable_stream>:
 8016cc4:	b410      	push	{r4}
 8016cc6:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016cca:	8103      	strh	r3, [r0, #8]
 8016ccc:	e9c0 1200 	strd	r1, r2, [r0]
 8016cd0:	f880 c00c 	strb.w	ip, [r0, #12]
 8016cd4:	b1d3      	cbz	r3, 8016d0c <uxr_init_output_reliable_stream+0x48>
 8016cd6:	f8c1 c000 	str.w	ip, [r1]
 8016cda:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016cde:	f1bc 0f01 	cmp.w	ip, #1
 8016ce2:	d913      	bls.n	8016d0c <uxr_init_output_reliable_stream+0x48>
 8016ce4:	2301      	movs	r3, #1
 8016ce6:	fbb3 f1fc 	udiv	r1, r3, ip
 8016cea:	fb0c 3111 	mls	r1, ip, r1, r3
 8016cee:	b289      	uxth	r1, r1
 8016cf0:	6842      	ldr	r2, [r0, #4]
 8016cf2:	6804      	ldr	r4, [r0, #0]
 8016cf4:	fbb2 f2fc 	udiv	r2, r2, ip
 8016cf8:	fb01 f202 	mul.w	r2, r1, r2
 8016cfc:	7b01      	ldrb	r1, [r0, #12]
 8016cfe:	50a1      	str	r1, [r4, r2]
 8016d00:	3301      	adds	r3, #1
 8016d02:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016d06:	b29b      	uxth	r3, r3
 8016d08:	459c      	cmp	ip, r3
 8016d0a:	d8ec      	bhi.n	8016ce6 <uxr_init_output_reliable_stream+0x22>
 8016d0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016d10:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016d14:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016d18:	4905      	ldr	r1, [pc, #20]	@ (8016d30 <uxr_init_output_reliable_stream+0x6c>)
 8016d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d1e:	f8c0 100e 	str.w	r1, [r0, #14]
 8016d22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016d26:	2300      	movs	r3, #0
 8016d28:	8242      	strh	r2, [r0, #18]
 8016d2a:	8403      	strh	r3, [r0, #32]
 8016d2c:	4770      	bx	lr
 8016d2e:	bf00      	nop
 8016d30:	ffff0000 	.word	0xffff0000

08016d34 <uxr_reset_output_reliable_stream>:
 8016d34:	8901      	ldrh	r1, [r0, #8]
 8016d36:	b1b1      	cbz	r1, 8016d66 <uxr_reset_output_reliable_stream+0x32>
 8016d38:	f04f 0c00 	mov.w	ip, #0
 8016d3c:	4663      	mov	r3, ip
 8016d3e:	fbb3 f2f1 	udiv	r2, r3, r1
 8016d42:	fb01 3312 	mls	r3, r1, r2, r3
 8016d46:	b29b      	uxth	r3, r3
 8016d48:	6842      	ldr	r2, [r0, #4]
 8016d4a:	fbb2 f2f1 	udiv	r2, r2, r1
 8016d4e:	6801      	ldr	r1, [r0, #0]
 8016d50:	fb02 f303 	mul.w	r3, r2, r3
 8016d54:	7b02      	ldrb	r2, [r0, #12]
 8016d56:	50ca      	str	r2, [r1, r3]
 8016d58:	f10c 0c01 	add.w	ip, ip, #1
 8016d5c:	8901      	ldrh	r1, [r0, #8]
 8016d5e:	fa1f f38c 	uxth.w	r3, ip
 8016d62:	4299      	cmp	r1, r3
 8016d64:	d8eb      	bhi.n	8016d3e <uxr_reset_output_reliable_stream+0xa>
 8016d66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016d6a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016d6e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016d72:	4904      	ldr	r1, [pc, #16]	@ (8016d84 <uxr_reset_output_reliable_stream+0x50>)
 8016d74:	f8c0 100e 	str.w	r1, [r0, #14]
 8016d78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	8242      	strh	r2, [r0, #18]
 8016d80:	8403      	strh	r3, [r0, #32]
 8016d82:	4770      	bx	lr
 8016d84:	ffff0000 	.word	0xffff0000

08016d88 <uxr_prepare_reliable_buffer_to_write>:
 8016d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d8c:	4604      	mov	r4, r0
 8016d8e:	b091      	sub	sp, #68	@ 0x44
 8016d90:	8900      	ldrh	r0, [r0, #8]
 8016d92:	89e6      	ldrh	r6, [r4, #14]
 8016d94:	6823      	ldr	r3, [r4, #0]
 8016d96:	9204      	str	r2, [sp, #16]
 8016d98:	fbb6 f2f0 	udiv	r2, r6, r0
 8016d9c:	fb00 6212 	mls	r2, r0, r2, r6
 8016da0:	b292      	uxth	r2, r2
 8016da2:	6865      	ldr	r5, [r4, #4]
 8016da4:	fbb5 f5f0 	udiv	r5, r5, r0
 8016da8:	fb05 3202 	mla	r2, r5, r2, r3
 8016dac:	3204      	adds	r2, #4
 8016dae:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8016db2:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016db6:	9203      	str	r2, [sp, #12]
 8016db8:	468b      	mov	fp, r1
 8016dba:	1f2f      	subs	r7, r5, #4
 8016dbc:	2800      	cmp	r0, #0
 8016dbe:	f000 814c 	beq.w	801705a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8016dc2:	f04f 0c00 	mov.w	ip, #0
 8016dc6:	46e2      	mov	sl, ip
 8016dc8:	4661      	mov	r1, ip
 8016dca:	fbb1 f2f0 	udiv	r2, r1, r0
 8016dce:	fb00 1212 	mls	r2, r0, r2, r1
 8016dd2:	b292      	uxth	r2, r2
 8016dd4:	fb05 f202 	mul.w	r2, r5, r2
 8016dd8:	f10c 0c01 	add.w	ip, ip, #1
 8016ddc:	589a      	ldr	r2, [r3, r2]
 8016dde:	454a      	cmp	r2, r9
 8016de0:	bf08      	it	eq
 8016de2:	f10a 0a01 	addeq.w	sl, sl, #1
 8016de6:	fa1f f18c 	uxth.w	r1, ip
 8016dea:	bf08      	it	eq
 8016dec:	fa1f fa8a 	uxtheq.w	sl, sl
 8016df0:	4281      	cmp	r1, r0
 8016df2:	d3ea      	bcc.n	8016dca <uxr_prepare_reliable_buffer_to_write+0x42>
 8016df4:	4640      	mov	r0, r8
 8016df6:	2104      	movs	r1, #4
 8016df8:	f8cd a014 	str.w	sl, [sp, #20]
 8016dfc:	f7f7 ff86 	bl	800ed0c <ucdr_alignment>
 8016e00:	4480      	add	r8, r0
 8016e02:	eb08 020b 	add.w	r2, r8, fp
 8016e06:	42ba      	cmp	r2, r7
 8016e08:	f240 80cd 	bls.w	8016fa6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8016e0c:	7b22      	ldrb	r2, [r4, #12]
 8016e0e:	445a      	add	r2, fp
 8016e10:	42ba      	cmp	r2, r7
 8016e12:	f240 80b5 	bls.w	8016f80 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8016e16:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8016e1a:	33fc      	adds	r3, #252	@ 0xfc
 8016e1c:	b2ba      	uxth	r2, r7
 8016e1e:	4413      	add	r3, r2
 8016e20:	b29b      	uxth	r3, r3
 8016e22:	fb0a f903 	mul.w	r9, sl, r3
 8016e26:	45d9      	cmp	r9, fp
 8016e28:	9305      	str	r3, [sp, #20]
 8016e2a:	9306      	str	r3, [sp, #24]
 8016e2c:	f0c0 80b7 	bcc.w	8016f9e <uxr_prepare_reliable_buffer_to_write+0x216>
 8016e30:	f108 0304 	add.w	r3, r8, #4
 8016e34:	42bb      	cmp	r3, r7
 8016e36:	f080 80db 	bcs.w	8016ff0 <uxr_prepare_reliable_buffer_to_write+0x268>
 8016e3a:	f1a2 0904 	sub.w	r9, r2, #4
 8016e3e:	eba9 0908 	sub.w	r9, r9, r8
 8016e42:	9b05      	ldr	r3, [sp, #20]
 8016e44:	fa1f f989 	uxth.w	r9, r9
 8016e48:	ebab 0b09 	sub.w	fp, fp, r9
 8016e4c:	fbbb f2f3 	udiv	r2, fp, r3
 8016e50:	fb03 b312 	mls	r3, r3, r2, fp
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	f000 80c8 	beq.w	8016fea <uxr_prepare_reliable_buffer_to_write+0x262>
 8016e5a:	3201      	adds	r2, #1
 8016e5c:	b292      	uxth	r2, r2
 8016e5e:	9306      	str	r3, [sp, #24]
 8016e60:	4552      	cmp	r2, sl
 8016e62:	f200 809c 	bhi.w	8016f9e <uxr_prepare_reliable_buffer_to_write+0x216>
 8016e66:	f10d 0b20 	add.w	fp, sp, #32
 8016e6a:	2a00      	cmp	r2, #0
 8016e6c:	d042      	beq.n	8016ef4 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8016e6e:	f8cd 801c 	str.w	r8, [sp, #28]
 8016e72:	f04f 0a00 	mov.w	sl, #0
 8016e76:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016e7a:	9505      	str	r5, [sp, #20]
 8016e7c:	f10d 0b20 	add.w	fp, sp, #32
 8016e80:	4615      	mov	r5, r2
 8016e82:	e000      	b.n	8016e86 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016e84:	46c1      	mov	r9, r8
 8016e86:	8920      	ldrh	r0, [r4, #8]
 8016e88:	fbb6 f2f0 	udiv	r2, r6, r0
 8016e8c:	fb00 6112 	mls	r1, r0, r2, r6
 8016e90:	b28a      	uxth	r2, r1
 8016e92:	6863      	ldr	r3, [r4, #4]
 8016e94:	fbb3 f1f0 	udiv	r1, r3, r0
 8016e98:	6823      	ldr	r3, [r4, #0]
 8016e9a:	fb02 f101 	mul.w	r1, r2, r1
 8016e9e:	3104      	adds	r1, #4
 8016ea0:	4419      	add	r1, r3
 8016ea2:	4658      	mov	r0, fp
 8016ea4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016ea8:	9200      	str	r2, [sp, #0]
 8016eaa:	2300      	movs	r3, #0
 8016eac:	463a      	mov	r2, r7
 8016eae:	f7f7 ff17 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 8016eb2:	464a      	mov	r2, r9
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	210d      	movs	r1, #13
 8016eb8:	4658      	mov	r0, fp
 8016eba:	f7fa f9f3 	bl	80112a4 <uxr_buffer_submessage_header>
 8016ebe:	8921      	ldrh	r1, [r4, #8]
 8016ec0:	fbb6 f2f1 	udiv	r2, r6, r1
 8016ec4:	fb01 6212 	mls	r2, r1, r2, r6
 8016ec8:	b292      	uxth	r2, r2
 8016eca:	6863      	ldr	r3, [r4, #4]
 8016ecc:	fbb3 f3f1 	udiv	r3, r3, r1
 8016ed0:	fb02 f303 	mul.w	r3, r2, r3
 8016ed4:	6822      	ldr	r2, [r4, #0]
 8016ed6:	4630      	mov	r0, r6
 8016ed8:	50d7      	str	r7, [r2, r3]
 8016eda:	2101      	movs	r1, #1
 8016edc:	f000 f9c4 	bl	8017268 <uxr_seq_num_add>
 8016ee0:	f10a 0a01 	add.w	sl, sl, #1
 8016ee4:	fa1f f38a 	uxth.w	r3, sl
 8016ee8:	429d      	cmp	r5, r3
 8016eea:	4606      	mov	r6, r0
 8016eec:	d8ca      	bhi.n	8016e84 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8016eee:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016ef2:	9d05      	ldr	r5, [sp, #20]
 8016ef4:	8920      	ldrh	r0, [r4, #8]
 8016ef6:	fbb6 f3f0 	udiv	r3, r6, r0
 8016efa:	fb00 6313 	mls	r3, r0, r3, r6
 8016efe:	b299      	uxth	r1, r3
 8016f00:	6863      	ldr	r3, [r4, #4]
 8016f02:	fbb3 f3f0 	udiv	r3, r3, r0
 8016f06:	fb01 f303 	mul.w	r3, r1, r3
 8016f0a:	6821      	ldr	r1, [r4, #0]
 8016f0c:	3304      	adds	r3, #4
 8016f0e:	4419      	add	r1, r3
 8016f10:	463a      	mov	r2, r7
 8016f12:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016f16:	9000      	str	r0, [sp, #0]
 8016f18:	2300      	movs	r3, #0
 8016f1a:	4658      	mov	r0, fp
 8016f1c:	f7f7 fee0 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 8016f20:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016f24:	4658      	mov	r0, fp
 8016f26:	fa1f f289 	uxth.w	r2, r9
 8016f2a:	2302      	movs	r3, #2
 8016f2c:	210d      	movs	r1, #13
 8016f2e:	f7fa f9b9 	bl	80112a4 <uxr_buffer_submessage_header>
 8016f32:	9b03      	ldr	r3, [sp, #12]
 8016f34:	8927      	ldrh	r7, [r4, #8]
 8016f36:	7b20      	ldrb	r0, [r4, #12]
 8016f38:	f108 0104 	add.w	r1, r8, #4
 8016f3c:	440b      	add	r3, r1
 8016f3e:	4619      	mov	r1, r3
 8016f40:	fbb6 f3f7 	udiv	r3, r6, r7
 8016f44:	fb07 6313 	mls	r3, r7, r3, r6
 8016f48:	f1a5 0208 	sub.w	r2, r5, #8
 8016f4c:	b29d      	uxth	r5, r3
 8016f4e:	3004      	adds	r0, #4
 8016f50:	6863      	ldr	r3, [r4, #4]
 8016f52:	fbb3 f3f7 	udiv	r3, r3, r7
 8016f56:	fb05 f303 	mul.w	r3, r5, r3
 8016f5a:	6825      	ldr	r5, [r4, #0]
 8016f5c:	4448      	add	r0, r9
 8016f5e:	50e8      	str	r0, [r5, r3]
 8016f60:	9d04      	ldr	r5, [sp, #16]
 8016f62:	eba2 0208 	sub.w	r2, r2, r8
 8016f66:	4628      	mov	r0, r5
 8016f68:	f7f7 fecc 	bl	800ed04 <ucdr_init_buffer>
 8016f6c:	4628      	mov	r0, r5
 8016f6e:	493c      	ldr	r1, [pc, #240]	@ (8017060 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8016f70:	4622      	mov	r2, r4
 8016f72:	f7f7 fe9b 	bl	800ecac <ucdr_set_on_full_buffer_callback>
 8016f76:	2001      	movs	r0, #1
 8016f78:	81e6      	strh	r6, [r4, #14]
 8016f7a:	b011      	add	sp, #68	@ 0x44
 8016f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f80:	2101      	movs	r1, #1
 8016f82:	89e0      	ldrh	r0, [r4, #14]
 8016f84:	f000 f970 	bl	8017268 <uxr_seq_num_add>
 8016f88:	8921      	ldrh	r1, [r4, #8]
 8016f8a:	4605      	mov	r5, r0
 8016f8c:	8a60      	ldrh	r0, [r4, #18]
 8016f8e:	f000 f96b 	bl	8017268 <uxr_seq_num_add>
 8016f92:	4601      	mov	r1, r0
 8016f94:	4628      	mov	r0, r5
 8016f96:	f000 f96f 	bl	8017278 <uxr_seq_num_cmp>
 8016f9a:	2800      	cmp	r0, #0
 8016f9c:	dd42      	ble.n	8017024 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8016f9e:	2000      	movs	r0, #0
 8016fa0:	b011      	add	sp, #68	@ 0x44
 8016fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fa6:	8921      	ldrh	r1, [r4, #8]
 8016fa8:	8a60      	ldrh	r0, [r4, #18]
 8016faa:	9205      	str	r2, [sp, #20]
 8016fac:	f000 f95c 	bl	8017268 <uxr_seq_num_add>
 8016fb0:	4601      	mov	r1, r0
 8016fb2:	4630      	mov	r0, r6
 8016fb4:	f000 f960 	bl	8017278 <uxr_seq_num_cmp>
 8016fb8:	2800      	cmp	r0, #0
 8016fba:	9a05      	ldr	r2, [sp, #20]
 8016fbc:	dcef      	bgt.n	8016f9e <uxr_prepare_reliable_buffer_to_write+0x216>
 8016fbe:	8927      	ldrh	r7, [r4, #8]
 8016fc0:	fbb6 f3f7 	udiv	r3, r6, r7
 8016fc4:	fb07 6313 	mls	r3, r7, r3, r6
 8016fc8:	b29d      	uxth	r5, r3
 8016fca:	6863      	ldr	r3, [r4, #4]
 8016fcc:	6824      	ldr	r4, [r4, #0]
 8016fce:	fbb3 f3f7 	udiv	r3, r3, r7
 8016fd2:	fb05 f303 	mul.w	r3, r5, r3
 8016fd6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016fda:	50e2      	str	r2, [r4, r3]
 8016fdc:	2300      	movs	r3, #0
 8016fde:	f8cd 8000 	str.w	r8, [sp]
 8016fe2:	f7f7 fe7d 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 8016fe6:	2001      	movs	r0, #1
 8016fe8:	e7da      	b.n	8016fa0 <uxr_prepare_reliable_buffer_to_write+0x218>
 8016fea:	b293      	uxth	r3, r2
 8016fec:	461a      	mov	r2, r3
 8016fee:	e737      	b.n	8016e60 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8016ff0:	4630      	mov	r0, r6
 8016ff2:	2101      	movs	r1, #1
 8016ff4:	9207      	str	r2, [sp, #28]
 8016ff6:	f000 f937 	bl	8017268 <uxr_seq_num_add>
 8016ffa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016ffe:	fbb0 f1fc 	udiv	r1, r0, ip
 8017002:	fb0c 0111 	mls	r1, ip, r1, r0
 8017006:	4606      	mov	r6, r0
 8017008:	b288      	uxth	r0, r1
 801700a:	6863      	ldr	r3, [r4, #4]
 801700c:	fbb3 f1fc 	udiv	r1, r3, ip
 8017010:	6823      	ldr	r3, [r4, #0]
 8017012:	9a07      	ldr	r2, [sp, #28]
 8017014:	fb00 f101 	mul.w	r1, r0, r1
 8017018:	3104      	adds	r1, #4
 801701a:	440b      	add	r3, r1
 801701c:	9303      	str	r3, [sp, #12]
 801701e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017022:	e70a      	b.n	8016e3a <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017024:	8921      	ldrh	r1, [r4, #8]
 8017026:	fbb5 f3f1 	udiv	r3, r5, r1
 801702a:	fb01 5313 	mls	r3, r1, r3, r5
 801702e:	b29a      	uxth	r2, r3
 8017030:	6863      	ldr	r3, [r4, #4]
 8017032:	fbb3 f3f1 	udiv	r3, r3, r1
 8017036:	6821      	ldr	r1, [r4, #0]
 8017038:	9804      	ldr	r0, [sp, #16]
 801703a:	fb02 f303 	mul.w	r3, r2, r3
 801703e:	3304      	adds	r3, #4
 8017040:	7b22      	ldrb	r2, [r4, #12]
 8017042:	4419      	add	r1, r3
 8017044:	445a      	add	r2, fp
 8017046:	f841 2c04 	str.w	r2, [r1, #-4]
 801704a:	7b23      	ldrb	r3, [r4, #12]
 801704c:	9300      	str	r3, [sp, #0]
 801704e:	2300      	movs	r3, #0
 8017050:	f7f7 fe46 	bl	800ece0 <ucdr_init_buffer_origin_offset>
 8017054:	81e5      	strh	r5, [r4, #14]
 8017056:	2001      	movs	r0, #1
 8017058:	e7a2      	b.n	8016fa0 <uxr_prepare_reliable_buffer_to_write+0x218>
 801705a:	4682      	mov	sl, r0
 801705c:	e6ca      	b.n	8016df4 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801705e:	bf00      	nop
 8017060:	08016c69 	.word	0x08016c69

08017064 <uxr_prepare_next_reliable_buffer_to_send>:
 8017064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017066:	4604      	mov	r4, r0
 8017068:	460f      	mov	r7, r1
 801706a:	8a00      	ldrh	r0, [r0, #16]
 801706c:	2101      	movs	r1, #1
 801706e:	4616      	mov	r6, r2
 8017070:	461d      	mov	r5, r3
 8017072:	f000 f8f9 	bl	8017268 <uxr_seq_num_add>
 8017076:	8028      	strh	r0, [r5, #0]
 8017078:	8922      	ldrh	r2, [r4, #8]
 801707a:	fbb0 f3f2 	udiv	r3, r0, r2
 801707e:	fb02 0c13 	mls	ip, r2, r3, r0
 8017082:	fa1f fc8c 	uxth.w	ip, ip
 8017086:	6863      	ldr	r3, [r4, #4]
 8017088:	fbb3 f3f2 	udiv	r3, r3, r2
 801708c:	fb0c fc03 	mul.w	ip, ip, r3
 8017090:	6823      	ldr	r3, [r4, #0]
 8017092:	89e1      	ldrh	r1, [r4, #14]
 8017094:	f10c 0c04 	add.w	ip, ip, #4
 8017098:	4463      	add	r3, ip
 801709a:	603b      	str	r3, [r7, #0]
 801709c:	6823      	ldr	r3, [r4, #0]
 801709e:	449c      	add	ip, r3
 80170a0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80170a4:	6033      	str	r3, [r6, #0]
 80170a6:	f000 f8e7 	bl	8017278 <uxr_seq_num_cmp>
 80170aa:	2800      	cmp	r0, #0
 80170ac:	dd01      	ble.n	80170b2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80170ae:	2000      	movs	r0, #0
 80170b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170b2:	7b23      	ldrb	r3, [r4, #12]
 80170b4:	6832      	ldr	r2, [r6, #0]
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d9f9      	bls.n	80170ae <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80170ba:	8a61      	ldrh	r1, [r4, #18]
 80170bc:	8a20      	ldrh	r0, [r4, #16]
 80170be:	f000 f8d7 	bl	8017270 <uxr_seq_num_sub>
 80170c2:	8923      	ldrh	r3, [r4, #8]
 80170c4:	4283      	cmp	r3, r0
 80170c6:	d0f2      	beq.n	80170ae <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80170c8:	8828      	ldrh	r0, [r5, #0]
 80170ca:	89e3      	ldrh	r3, [r4, #14]
 80170cc:	8220      	strh	r0, [r4, #16]
 80170ce:	4298      	cmp	r0, r3
 80170d0:	d001      	beq.n	80170d6 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80170d2:	2001      	movs	r0, #1
 80170d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170d6:	2101      	movs	r1, #1
 80170d8:	f000 f8c6 	bl	8017268 <uxr_seq_num_add>
 80170dc:	81e0      	strh	r0, [r4, #14]
 80170de:	2001      	movs	r0, #1
 80170e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170e2:	bf00      	nop

080170e4 <uxr_update_output_stream_heartbeat_timestamp>:
 80170e4:	b570      	push	{r4, r5, r6, lr}
 80170e6:	8a01      	ldrh	r1, [r0, #16]
 80170e8:	4604      	mov	r4, r0
 80170ea:	8a40      	ldrh	r0, [r0, #18]
 80170ec:	4615      	mov	r5, r2
 80170ee:	461e      	mov	r6, r3
 80170f0:	f000 f8c2 	bl	8017278 <uxr_seq_num_cmp>
 80170f4:	2800      	cmp	r0, #0
 80170f6:	db07      	blt.n	8017108 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80170f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80170fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017100:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8017104:	2000      	movs	r0, #0
 8017106:	bd70      	pop	{r4, r5, r6, pc}
 8017108:	f894 0020 	ldrb.w	r0, [r4, #32]
 801710c:	b940      	cbnz	r0, 8017120 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801710e:	2301      	movs	r3, #1
 8017110:	f884 3020 	strb.w	r3, [r4, #32]
 8017114:	3564      	adds	r5, #100	@ 0x64
 8017116:	f146 0600 	adc.w	r6, r6, #0
 801711a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801711e:	bd70      	pop	{r4, r5, r6, pc}
 8017120:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8017124:	4295      	cmp	r5, r2
 8017126:	eb76 0303 	sbcs.w	r3, r6, r3
 801712a:	bfa5      	ittet	ge
 801712c:	3001      	addge	r0, #1
 801712e:	f884 0020 	strbge.w	r0, [r4, #32]
 8017132:	2000      	movlt	r0, #0
 8017134:	2001      	movge	r0, #1
 8017136:	e7ed      	b.n	8017114 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08017138 <uxr_begin_output_nack_buffer_it>:
 8017138:	8a40      	ldrh	r0, [r0, #18]
 801713a:	4770      	bx	lr

0801713c <uxr_next_reliable_nack_buffer_to_send>:
 801713c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017140:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8017144:	b082      	sub	sp, #8
 8017146:	f1b8 0f00 	cmp.w	r8, #0
 801714a:	d011      	beq.n	8017170 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801714c:	4604      	mov	r4, r0
 801714e:	8818      	ldrh	r0, [r3, #0]
 8017150:	460e      	mov	r6, r1
 8017152:	4617      	mov	r7, r2
 8017154:	461d      	mov	r5, r3
 8017156:	2101      	movs	r1, #1
 8017158:	f000 f886 	bl	8017268 <uxr_seq_num_add>
 801715c:	8028      	strh	r0, [r5, #0]
 801715e:	8a21      	ldrh	r1, [r4, #16]
 8017160:	f000 f88a 	bl	8017278 <uxr_seq_num_cmp>
 8017164:	2800      	cmp	r0, #0
 8017166:	dd07      	ble.n	8017178 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8017168:	f04f 0800 	mov.w	r8, #0
 801716c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8017170:	4640      	mov	r0, r8
 8017172:	b002      	add	sp, #8
 8017174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017178:	8921      	ldrh	r1, [r4, #8]
 801717a:	8828      	ldrh	r0, [r5, #0]
 801717c:	6823      	ldr	r3, [r4, #0]
 801717e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017182:	fb01 0c12 	mls	ip, r1, r2, r0
 8017186:	fa1f f28c 	uxth.w	r2, ip
 801718a:	9301      	str	r3, [sp, #4]
 801718c:	6863      	ldr	r3, [r4, #4]
 801718e:	fbb3 fcf1 	udiv	ip, r3, r1
 8017192:	9b01      	ldr	r3, [sp, #4]
 8017194:	fb02 fc0c 	mul.w	ip, r2, ip
 8017198:	f10c 0c04 	add.w	ip, ip, #4
 801719c:	4463      	add	r3, ip
 801719e:	6033      	str	r3, [r6, #0]
 80171a0:	6823      	ldr	r3, [r4, #0]
 80171a2:	4463      	add	r3, ip
 80171a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80171a8:	603b      	str	r3, [r7, #0]
 80171aa:	7b22      	ldrb	r2, [r4, #12]
 80171ac:	429a      	cmp	r2, r3
 80171ae:	d0d2      	beq.n	8017156 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80171b0:	4640      	mov	r0, r8
 80171b2:	b002      	add	sp, #8
 80171b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080171b8 <uxr_process_acknack>:
 80171b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ba:	4604      	mov	r4, r0
 80171bc:	460e      	mov	r6, r1
 80171be:	4610      	mov	r0, r2
 80171c0:	2101      	movs	r1, #1
 80171c2:	f000 f855 	bl	8017270 <uxr_seq_num_sub>
 80171c6:	8a61      	ldrh	r1, [r4, #18]
 80171c8:	f000 f852 	bl	8017270 <uxr_seq_num_sub>
 80171cc:	b1c0      	cbz	r0, 8017200 <uxr_process_acknack+0x48>
 80171ce:	4605      	mov	r5, r0
 80171d0:	2700      	movs	r7, #0
 80171d2:	2101      	movs	r1, #1
 80171d4:	8a60      	ldrh	r0, [r4, #18]
 80171d6:	f000 f847 	bl	8017268 <uxr_seq_num_add>
 80171da:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80171de:	fbb0 f1fc 	udiv	r1, r0, ip
 80171e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80171e6:	fb0c 0111 	mls	r1, ip, r1, r0
 80171ea:	b289      	uxth	r1, r1
 80171ec:	3701      	adds	r7, #1
 80171ee:	fbb3 f3fc 	udiv	r3, r3, ip
 80171f2:	fb01 f303 	mul.w	r3, r1, r3
 80171f6:	42bd      	cmp	r5, r7
 80171f8:	7b21      	ldrb	r1, [r4, #12]
 80171fa:	8260      	strh	r0, [r4, #18]
 80171fc:	50d1      	str	r1, [r2, r3]
 80171fe:	d1e8      	bne.n	80171d2 <uxr_process_acknack+0x1a>
 8017200:	3e00      	subs	r6, #0
 8017202:	f04f 0300 	mov.w	r3, #0
 8017206:	bf18      	it	ne
 8017208:	2601      	movne	r6, #1
 801720a:	f884 3020 	strb.w	r3, [r4, #32]
 801720e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8017212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017214 <uxr_is_output_up_to_date>:
 8017214:	8a01      	ldrh	r1, [r0, #16]
 8017216:	8a40      	ldrh	r0, [r0, #18]
 8017218:	b508      	push	{r3, lr}
 801721a:	f000 f82d 	bl	8017278 <uxr_seq_num_cmp>
 801721e:	fab0 f080 	clz	r0, r0
 8017222:	0940      	lsrs	r0, r0, #5
 8017224:	bd08      	pop	{r3, pc}
 8017226:	bf00      	nop

08017228 <get_available_free_slots>:
 8017228:	8902      	ldrh	r2, [r0, #8]
 801722a:	b1da      	cbz	r2, 8017264 <get_available_free_slots+0x3c>
 801722c:	b530      	push	{r4, r5, lr}
 801722e:	2100      	movs	r1, #0
 8017230:	6843      	ldr	r3, [r0, #4]
 8017232:	6805      	ldr	r5, [r0, #0]
 8017234:	7b04      	ldrb	r4, [r0, #12]
 8017236:	fbb3 fef2 	udiv	lr, r3, r2
 801723a:	4608      	mov	r0, r1
 801723c:	460b      	mov	r3, r1
 801723e:	fbb3 fcf2 	udiv	ip, r3, r2
 8017242:	fb02 331c 	mls	r3, r2, ip, r3
 8017246:	b29b      	uxth	r3, r3
 8017248:	fb0e f303 	mul.w	r3, lr, r3
 801724c:	3101      	adds	r1, #1
 801724e:	f855 c003 	ldr.w	ip, [r5, r3]
 8017252:	4564      	cmp	r4, ip
 8017254:	bf08      	it	eq
 8017256:	3001      	addeq	r0, #1
 8017258:	b28b      	uxth	r3, r1
 801725a:	bf08      	it	eq
 801725c:	b280      	uxtheq	r0, r0
 801725e:	4293      	cmp	r3, r2
 8017260:	d3ed      	bcc.n	801723e <get_available_free_slots+0x16>
 8017262:	bd30      	pop	{r4, r5, pc}
 8017264:	4610      	mov	r0, r2
 8017266:	4770      	bx	lr

08017268 <uxr_seq_num_add>:
 8017268:	4408      	add	r0, r1
 801726a:	b280      	uxth	r0, r0
 801726c:	4770      	bx	lr
 801726e:	bf00      	nop

08017270 <uxr_seq_num_sub>:
 8017270:	1a40      	subs	r0, r0, r1
 8017272:	b280      	uxth	r0, r0
 8017274:	4770      	bx	lr
 8017276:	bf00      	nop

08017278 <uxr_seq_num_cmp>:
 8017278:	4288      	cmp	r0, r1
 801727a:	d011      	beq.n	80172a0 <uxr_seq_num_cmp+0x28>
 801727c:	d309      	bcc.n	8017292 <uxr_seq_num_cmp+0x1a>
 801727e:	4288      	cmp	r0, r1
 8017280:	d910      	bls.n	80172a4 <uxr_seq_num_cmp+0x2c>
 8017282:	1a40      	subs	r0, r0, r1
 8017284:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8017288:	bfd4      	ite	le
 801728a:	2001      	movle	r0, #1
 801728c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8017290:	4770      	bx	lr
 8017292:	1a0b      	subs	r3, r1, r0
 8017294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017298:	daf1      	bge.n	801727e <uxr_seq_num_cmp+0x6>
 801729a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801729e:	4770      	bx	lr
 80172a0:	2000      	movs	r0, #0
 80172a2:	4770      	bx	lr
 80172a4:	2001      	movs	r0, #1
 80172a6:	4770      	bx	lr

080172a8 <rcl_get_default_domain_id>:
 80172a8:	b530      	push	{r4, r5, lr}
 80172aa:	b083      	sub	sp, #12
 80172ac:	2300      	movs	r3, #0
 80172ae:	9300      	str	r3, [sp, #0]
 80172b0:	b1d0      	cbz	r0, 80172e8 <rcl_get_default_domain_id+0x40>
 80172b2:	4604      	mov	r4, r0
 80172b4:	4669      	mov	r1, sp
 80172b6:	4815      	ldr	r0, [pc, #84]	@ (801730c <rcl_get_default_domain_id+0x64>)
 80172b8:	f7fd fffe 	bl	80152b8 <rcutils_get_env>
 80172bc:	4602      	mov	r2, r0
 80172be:	b110      	cbz	r0, 80172c6 <rcl_get_default_domain_id+0x1e>
 80172c0:	2001      	movs	r0, #1
 80172c2:	b003      	add	sp, #12
 80172c4:	bd30      	pop	{r4, r5, pc}
 80172c6:	9b00      	ldr	r3, [sp, #0]
 80172c8:	b18b      	cbz	r3, 80172ee <rcl_get_default_domain_id+0x46>
 80172ca:	7818      	ldrb	r0, [r3, #0]
 80172cc:	2800      	cmp	r0, #0
 80172ce:	d0f8      	beq.n	80172c2 <rcl_get_default_domain_id+0x1a>
 80172d0:	a901      	add	r1, sp, #4
 80172d2:	4618      	mov	r0, r3
 80172d4:	9201      	str	r2, [sp, #4]
 80172d6:	f000 fe39 	bl	8017f4c <strtoul>
 80172da:	4605      	mov	r5, r0
 80172dc:	b150      	cbz	r0, 80172f4 <rcl_get_default_domain_id+0x4c>
 80172de:	1c43      	adds	r3, r0, #1
 80172e0:	d00d      	beq.n	80172fe <rcl_get_default_domain_id+0x56>
 80172e2:	6025      	str	r5, [r4, #0]
 80172e4:	2000      	movs	r0, #0
 80172e6:	e7ec      	b.n	80172c2 <rcl_get_default_domain_id+0x1a>
 80172e8:	200b      	movs	r0, #11
 80172ea:	b003      	add	sp, #12
 80172ec:	bd30      	pop	{r4, r5, pc}
 80172ee:	4618      	mov	r0, r3
 80172f0:	b003      	add	sp, #12
 80172f2:	bd30      	pop	{r4, r5, pc}
 80172f4:	9b01      	ldr	r3, [sp, #4]
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d0f2      	beq.n	80172e2 <rcl_get_default_domain_id+0x3a>
 80172fc:	e7e0      	b.n	80172c0 <rcl_get_default_domain_id+0x18>
 80172fe:	f001 f95f 	bl	80185c0 <__errno>
 8017302:	6803      	ldr	r3, [r0, #0]
 8017304:	2b22      	cmp	r3, #34	@ 0x22
 8017306:	d1ec      	bne.n	80172e2 <rcl_get_default_domain_id+0x3a>
 8017308:	e7da      	b.n	80172c0 <rcl_get_default_domain_id+0x18>
 801730a:	bf00      	nop
 801730c:	0801a6c4 	.word	0x0801a6c4

08017310 <rcl_expand_topic_name>:
 8017310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017314:	b08b      	sub	sp, #44	@ 0x2c
 8017316:	9306      	str	r3, [sp, #24]
 8017318:	2800      	cmp	r0, #0
 801731a:	f000 80ad 	beq.w	8017478 <rcl_expand_topic_name+0x168>
 801731e:	460e      	mov	r6, r1
 8017320:	2900      	cmp	r1, #0
 8017322:	f000 80a9 	beq.w	8017478 <rcl_expand_topic_name+0x168>
 8017326:	4617      	mov	r7, r2
 8017328:	2a00      	cmp	r2, #0
 801732a:	f000 80a5 	beq.w	8017478 <rcl_expand_topic_name+0x168>
 801732e:	2b00      	cmp	r3, #0
 8017330:	f000 80a2 	beq.w	8017478 <rcl_expand_topic_name+0x168>
 8017334:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017336:	2b00      	cmp	r3, #0
 8017338:	f000 809e 	beq.w	8017478 <rcl_expand_topic_name+0x168>
 801733c:	2200      	movs	r2, #0
 801733e:	a909      	add	r1, sp, #36	@ 0x24
 8017340:	4680      	mov	r8, r0
 8017342:	f000 fa57 	bl	80177f4 <rcl_validate_topic_name>
 8017346:	4604      	mov	r4, r0
 8017348:	2800      	cmp	r0, #0
 801734a:	f040 8096 	bne.w	801747a <rcl_expand_topic_name+0x16a>
 801734e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017350:	2b00      	cmp	r3, #0
 8017352:	f040 809a 	bne.w	801748a <rcl_expand_topic_name+0x17a>
 8017356:	4602      	mov	r2, r0
 8017358:	a909      	add	r1, sp, #36	@ 0x24
 801735a:	4630      	mov	r0, r6
 801735c:	f7fe fbd6 	bl	8015b0c <rmw_validate_node_name>
 8017360:	2800      	cmp	r0, #0
 8017362:	f040 808e 	bne.w	8017482 <rcl_expand_topic_name+0x172>
 8017366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017368:	2a00      	cmp	r2, #0
 801736a:	f040 8093 	bne.w	8017494 <rcl_expand_topic_name+0x184>
 801736e:	a909      	add	r1, sp, #36	@ 0x24
 8017370:	4638      	mov	r0, r7
 8017372:	f7fe fbad 	bl	8015ad0 <rmw_validate_namespace>
 8017376:	2800      	cmp	r0, #0
 8017378:	f040 8083 	bne.w	8017482 <rcl_expand_topic_name+0x172>
 801737c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801737e:	2c00      	cmp	r4, #0
 8017380:	f040 80ed 	bne.w	801755e <rcl_expand_topic_name+0x24e>
 8017384:	217b      	movs	r1, #123	@ 0x7b
 8017386:	4640      	mov	r0, r8
 8017388:	f001 f88e 	bl	80184a8 <strchr>
 801738c:	f898 3000 	ldrb.w	r3, [r8]
 8017390:	2b2f      	cmp	r3, #47	@ 0x2f
 8017392:	4605      	mov	r5, r0
 8017394:	f000 809e 	beq.w	80174d4 <rcl_expand_topic_name+0x1c4>
 8017398:	2b7e      	cmp	r3, #126	@ 0x7e
 801739a:	f040 80a2 	bne.w	80174e2 <rcl_expand_topic_name+0x1d2>
 801739e:	4638      	mov	r0, r7
 80173a0:	f7e8 ff48 	bl	8000234 <strlen>
 80173a4:	4a82      	ldr	r2, [pc, #520]	@ (80175b0 <rcl_expand_topic_name+0x2a0>)
 80173a6:	4b83      	ldr	r3, [pc, #524]	@ (80175b4 <rcl_expand_topic_name+0x2a4>)
 80173a8:	2801      	cmp	r0, #1
 80173aa:	bf18      	it	ne
 80173ac:	4613      	movne	r3, r2
 80173ae:	9302      	str	r3, [sp, #8]
 80173b0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80173b2:	9300      	str	r3, [sp, #0]
 80173b4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80173b8:	f108 0301 	add.w	r3, r8, #1
 80173bc:	9305      	str	r3, [sp, #20]
 80173be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80173c2:	9301      	str	r3, [sp, #4]
 80173c4:	ab14      	add	r3, sp, #80	@ 0x50
 80173c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80173c8:	f7fd ff9e 	bl	8015308 <rcutils_format_string_limit>
 80173cc:	4682      	mov	sl, r0
 80173ce:	2800      	cmp	r0, #0
 80173d0:	f000 80c7 	beq.w	8017562 <rcl_expand_topic_name+0x252>
 80173d4:	2d00      	cmp	r5, #0
 80173d6:	f000 80a2 	beq.w	801751e <rcl_expand_topic_name+0x20e>
 80173da:	217b      	movs	r1, #123	@ 0x7b
 80173dc:	f001 f864 	bl	80184a8 <strchr>
 80173e0:	46d1      	mov	r9, sl
 80173e2:	4605      	mov	r5, r0
 80173e4:	9407      	str	r4, [sp, #28]
 80173e6:	46d3      	mov	fp, sl
 80173e8:	464c      	mov	r4, r9
 80173ea:	2d00      	cmp	r5, #0
 80173ec:	f000 80be 	beq.w	801756c <rcl_expand_topic_name+0x25c>
 80173f0:	217d      	movs	r1, #125	@ 0x7d
 80173f2:	4620      	mov	r0, r4
 80173f4:	f001 f858 	bl	80184a8 <strchr>
 80173f8:	eba0 0905 	sub.w	r9, r0, r5
 80173fc:	f109 0a01 	add.w	sl, r9, #1
 8017400:	486d      	ldr	r0, [pc, #436]	@ (80175b8 <rcl_expand_topic_name+0x2a8>)
 8017402:	4652      	mov	r2, sl
 8017404:	4629      	mov	r1, r5
 8017406:	f001 f85c 	bl	80184c2 <strncmp>
 801740a:	2800      	cmp	r0, #0
 801740c:	d067      	beq.n	80174de <rcl_expand_topic_name+0x1ce>
 801740e:	486b      	ldr	r0, [pc, #428]	@ (80175bc <rcl_expand_topic_name+0x2ac>)
 8017410:	4652      	mov	r2, sl
 8017412:	4629      	mov	r1, r5
 8017414:	f001 f855 	bl	80184c2 <strncmp>
 8017418:	b130      	cbz	r0, 8017428 <rcl_expand_topic_name+0x118>
 801741a:	4869      	ldr	r0, [pc, #420]	@ (80175c0 <rcl_expand_topic_name+0x2b0>)
 801741c:	4652      	mov	r2, sl
 801741e:	4629      	mov	r1, r5
 8017420:	f001 f84f 	bl	80184c2 <strncmp>
 8017424:	2800      	cmp	r0, #0
 8017426:	d137      	bne.n	8017498 <rcl_expand_topic_name+0x188>
 8017428:	46b9      	mov	r9, r7
 801742a:	ab16      	add	r3, sp, #88	@ 0x58
 801742c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017430:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017434:	ab14      	add	r3, sp, #80	@ 0x50
 8017436:	4628      	mov	r0, r5
 8017438:	cb0c      	ldmia	r3, {r2, r3}
 801743a:	4651      	mov	r1, sl
 801743c:	f7fe f8a0 	bl	8015580 <rcutils_strndup>
 8017440:	4605      	mov	r5, r0
 8017442:	2800      	cmp	r0, #0
 8017444:	f000 809c 	beq.w	8017580 <rcl_expand_topic_name+0x270>
 8017448:	464a      	mov	r2, r9
 801744a:	4620      	mov	r0, r4
 801744c:	ab14      	add	r3, sp, #80	@ 0x50
 801744e:	4629      	mov	r1, r5
 8017450:	f7fd ff94 	bl	801537c <rcutils_repl_str>
 8017454:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017456:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017458:	4604      	mov	r4, r0
 801745a:	4628      	mov	r0, r5
 801745c:	4798      	blx	r3
 801745e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017460:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017462:	4658      	mov	r0, fp
 8017464:	4798      	blx	r3
 8017466:	2c00      	cmp	r4, #0
 8017468:	d07b      	beq.n	8017562 <rcl_expand_topic_name+0x252>
 801746a:	217b      	movs	r1, #123	@ 0x7b
 801746c:	4620      	mov	r0, r4
 801746e:	f001 f81b 	bl	80184a8 <strchr>
 8017472:	46a3      	mov	fp, r4
 8017474:	4605      	mov	r5, r0
 8017476:	e7b8      	b.n	80173ea <rcl_expand_topic_name+0xda>
 8017478:	240b      	movs	r4, #11
 801747a:	4620      	mov	r0, r4
 801747c:	b00b      	add	sp, #44	@ 0x2c
 801747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017482:	f7fb f947 	bl	8012714 <rcl_convert_rmw_ret_to_rcl_ret>
 8017486:	4604      	mov	r4, r0
 8017488:	e7f7      	b.n	801747a <rcl_expand_topic_name+0x16a>
 801748a:	2467      	movs	r4, #103	@ 0x67
 801748c:	4620      	mov	r0, r4
 801748e:	b00b      	add	sp, #44	@ 0x2c
 8017490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017494:	24c9      	movs	r4, #201	@ 0xc9
 8017496:	e7f0      	b.n	801747a <rcl_expand_topic_name+0x16a>
 8017498:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801749c:	9806      	ldr	r0, [sp, #24]
 801749e:	1c69      	adds	r1, r5, #1
 80174a0:	f7fe f988 	bl	80157b4 <rcutils_string_map_getn>
 80174a4:	4681      	mov	r9, r0
 80174a6:	2800      	cmp	r0, #0
 80174a8:	d1bf      	bne.n	801742a <rcl_expand_topic_name+0x11a>
 80174aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80174ac:	aa16      	add	r2, sp, #88	@ 0x58
 80174ae:	6018      	str	r0, [r3, #0]
 80174b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80174b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80174b6:	ab14      	add	r3, sp, #80	@ 0x50
 80174b8:	cb0c      	ldmia	r3, {r2, r3}
 80174ba:	4651      	mov	r1, sl
 80174bc:	4628      	mov	r0, r5
 80174be:	f7fe f85f 	bl	8015580 <rcutils_strndup>
 80174c2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80174c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80174c6:	4798      	blx	r3
 80174c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80174ca:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80174cc:	4658      	mov	r0, fp
 80174ce:	2469      	movs	r4, #105	@ 0x69
 80174d0:	4798      	blx	r3
 80174d2:	e7d2      	b.n	801747a <rcl_expand_topic_name+0x16a>
 80174d4:	2800      	cmp	r0, #0
 80174d6:	d05b      	beq.n	8017590 <rcl_expand_topic_name+0x280>
 80174d8:	46c1      	mov	r9, r8
 80174da:	46a2      	mov	sl, r4
 80174dc:	e782      	b.n	80173e4 <rcl_expand_topic_name+0xd4>
 80174de:	46b1      	mov	r9, r6
 80174e0:	e7a3      	b.n	801742a <rcl_expand_topic_name+0x11a>
 80174e2:	2800      	cmp	r0, #0
 80174e4:	d1f8      	bne.n	80174d8 <rcl_expand_topic_name+0x1c8>
 80174e6:	4638      	mov	r0, r7
 80174e8:	f7e8 fea4 	bl	8000234 <strlen>
 80174ec:	4a35      	ldr	r2, [pc, #212]	@ (80175c4 <rcl_expand_topic_name+0x2b4>)
 80174ee:	4b36      	ldr	r3, [pc, #216]	@ (80175c8 <rcl_expand_topic_name+0x2b8>)
 80174f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80174f4:	2801      	cmp	r0, #1
 80174f6:	bf18      	it	ne
 80174f8:	4613      	movne	r3, r2
 80174fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80174fe:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017502:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017504:	9703      	str	r7, [sp, #12]
 8017506:	9200      	str	r2, [sp, #0]
 8017508:	ab14      	add	r3, sp, #80	@ 0x50
 801750a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801750c:	f7fd fefc 	bl	8015308 <rcutils_format_string_limit>
 8017510:	4682      	mov	sl, r0
 8017512:	4653      	mov	r3, sl
 8017514:	b32b      	cbz	r3, 8017562 <rcl_expand_topic_name+0x252>
 8017516:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017518:	f8c3 a000 	str.w	sl, [r3]
 801751c:	e7ad      	b.n	801747a <rcl_expand_topic_name+0x16a>
 801751e:	f89a 3000 	ldrb.w	r3, [sl]
 8017522:	2b2f      	cmp	r3, #47	@ 0x2f
 8017524:	d0f7      	beq.n	8017516 <rcl_expand_topic_name+0x206>
 8017526:	4638      	mov	r0, r7
 8017528:	f7e8 fe84 	bl	8000234 <strlen>
 801752c:	4a25      	ldr	r2, [pc, #148]	@ (80175c4 <rcl_expand_topic_name+0x2b4>)
 801752e:	4b26      	ldr	r3, [pc, #152]	@ (80175c8 <rcl_expand_topic_name+0x2b8>)
 8017530:	f8cd a010 	str.w	sl, [sp, #16]
 8017534:	2801      	cmp	r0, #1
 8017536:	bf18      	it	ne
 8017538:	4613      	movne	r3, r2
 801753a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801753e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017542:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017544:	9703      	str	r7, [sp, #12]
 8017546:	9200      	str	r2, [sp, #0]
 8017548:	ab14      	add	r3, sp, #80	@ 0x50
 801754a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801754c:	f7fd fedc 	bl	8015308 <rcutils_format_string_limit>
 8017550:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017552:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017554:	4605      	mov	r5, r0
 8017556:	4650      	mov	r0, sl
 8017558:	4798      	blx	r3
 801755a:	46aa      	mov	sl, r5
 801755c:	e7d9      	b.n	8017512 <rcl_expand_topic_name+0x202>
 801755e:	24ca      	movs	r4, #202	@ 0xca
 8017560:	e78b      	b.n	801747a <rcl_expand_topic_name+0x16a>
 8017562:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017564:	2300      	movs	r3, #0
 8017566:	6013      	str	r3, [r2, #0]
 8017568:	240a      	movs	r4, #10
 801756a:	e786      	b.n	801747a <rcl_expand_topic_name+0x16a>
 801756c:	465b      	mov	r3, fp
 801756e:	9c07      	ldr	r4, [sp, #28]
 8017570:	46da      	mov	sl, fp
 8017572:	2b00      	cmp	r3, #0
 8017574:	d1d3      	bne.n	801751e <rcl_expand_topic_name+0x20e>
 8017576:	f898 3000 	ldrb.w	r3, [r8]
 801757a:	2b2f      	cmp	r3, #47	@ 0x2f
 801757c:	d0cb      	beq.n	8017516 <rcl_expand_topic_name+0x206>
 801757e:	e7b2      	b.n	80174e6 <rcl_expand_topic_name+0x1d6>
 8017580:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8017584:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017586:	6015      	str	r5, [r2, #0]
 8017588:	4658      	mov	r0, fp
 801758a:	4798      	blx	r3
 801758c:	240a      	movs	r4, #10
 801758e:	e774      	b.n	801747a <rcl_expand_topic_name+0x16a>
 8017590:	ab17      	add	r3, sp, #92	@ 0x5c
 8017592:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017596:	e88d 0003 	stmia.w	sp, {r0, r1}
 801759a:	ab14      	add	r3, sp, #80	@ 0x50
 801759c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801759e:	4640      	mov	r0, r8
 80175a0:	f7fd ffcc 	bl	801553c <rcutils_strdup>
 80175a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80175a6:	2800      	cmp	r0, #0
 80175a8:	6018      	str	r0, [r3, #0]
 80175aa:	bf08      	it	eq
 80175ac:	240a      	moveq	r4, #10
 80175ae:	e764      	b.n	801747a <rcl_expand_topic_name+0x16a>
 80175b0:	0801a6d4 	.word	0x0801a6d4
 80175b4:	08019c14 	.word	0x08019c14
 80175b8:	0801a6dc 	.word	0x0801a6dc
 80175bc:	0801a6e4 	.word	0x0801a6e4
 80175c0:	0801a6ec 	.word	0x0801a6ec
 80175c4:	08019bdc 	.word	0x08019bdc
 80175c8:	08019c24 	.word	0x08019c24

080175cc <rcl_get_default_topic_name_substitutions>:
 80175cc:	2800      	cmp	r0, #0
 80175ce:	bf0c      	ite	eq
 80175d0:	200b      	moveq	r0, #11
 80175d2:	2000      	movne	r0, #0
 80175d4:	4770      	bx	lr
 80175d6:	bf00      	nop

080175d8 <rcl_get_zero_initialized_guard_condition>:
 80175d8:	4a03      	ldr	r2, [pc, #12]	@ (80175e8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80175da:	4603      	mov	r3, r0
 80175dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80175e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80175e4:	4618      	mov	r0, r3
 80175e6:	4770      	bx	lr
 80175e8:	0801a6f8 	.word	0x0801a6f8

080175ec <rcl_guard_condition_init>:
 80175ec:	b082      	sub	sp, #8
 80175ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175f0:	b087      	sub	sp, #28
 80175f2:	ac0c      	add	r4, sp, #48	@ 0x30
 80175f4:	e884 000c 	stmia.w	r4, {r2, r3}
 80175f8:	46a6      	mov	lr, r4
 80175fa:	460d      	mov	r5, r1
 80175fc:	4604      	mov	r4, r0
 80175fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017602:	f10d 0c04 	add.w	ip, sp, #4
 8017606:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801760a:	f8de 3000 	ldr.w	r3, [lr]
 801760e:	f8cc 3000 	str.w	r3, [ip]
 8017612:	a801      	add	r0, sp, #4
 8017614:	f7f4 f852 	bl	800b6bc <rcutils_allocator_is_valid>
 8017618:	b338      	cbz	r0, 801766a <rcl_guard_condition_init+0x7e>
 801761a:	b334      	cbz	r4, 801766a <rcl_guard_condition_init+0x7e>
 801761c:	6866      	ldr	r6, [r4, #4]
 801761e:	b9ee      	cbnz	r6, 801765c <rcl_guard_condition_init+0x70>
 8017620:	b31d      	cbz	r5, 801766a <rcl_guard_condition_init+0x7e>
 8017622:	4628      	mov	r0, r5
 8017624:	f7fb f894 	bl	8012750 <rcl_context_is_valid>
 8017628:	b308      	cbz	r0, 801766e <rcl_guard_condition_init+0x82>
 801762a:	9b01      	ldr	r3, [sp, #4]
 801762c:	9905      	ldr	r1, [sp, #20]
 801762e:	201c      	movs	r0, #28
 8017630:	4798      	blx	r3
 8017632:	4607      	mov	r7, r0
 8017634:	6060      	str	r0, [r4, #4]
 8017636:	b310      	cbz	r0, 801767e <rcl_guard_condition_init+0x92>
 8017638:	6828      	ldr	r0, [r5, #0]
 801763a:	3028      	adds	r0, #40	@ 0x28
 801763c:	f000 f9ac 	bl	8017998 <rmw_create_guard_condition>
 8017640:	6038      	str	r0, [r7, #0]
 8017642:	6860      	ldr	r0, [r4, #4]
 8017644:	6805      	ldr	r5, [r0, #0]
 8017646:	b1a5      	cbz	r5, 8017672 <rcl_guard_condition_init+0x86>
 8017648:	2301      	movs	r3, #1
 801764a:	ac01      	add	r4, sp, #4
 801764c:	7103      	strb	r3, [r0, #4]
 801764e:	f100 0708 	add.w	r7, r0, #8
 8017652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017654:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017656:	6823      	ldr	r3, [r4, #0]
 8017658:	603b      	str	r3, [r7, #0]
 801765a:	e000      	b.n	801765e <rcl_guard_condition_init+0x72>
 801765c:	2664      	movs	r6, #100	@ 0x64
 801765e:	4630      	mov	r0, r6
 8017660:	b007      	add	sp, #28
 8017662:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017666:	b002      	add	sp, #8
 8017668:	4770      	bx	lr
 801766a:	260b      	movs	r6, #11
 801766c:	e7f7      	b.n	801765e <rcl_guard_condition_init+0x72>
 801766e:	2665      	movs	r6, #101	@ 0x65
 8017670:	e7f5      	b.n	801765e <rcl_guard_condition_init+0x72>
 8017672:	9b02      	ldr	r3, [sp, #8]
 8017674:	9905      	ldr	r1, [sp, #20]
 8017676:	4798      	blx	r3
 8017678:	2601      	movs	r6, #1
 801767a:	6065      	str	r5, [r4, #4]
 801767c:	e7ef      	b.n	801765e <rcl_guard_condition_init+0x72>
 801767e:	260a      	movs	r6, #10
 8017680:	e7ed      	b.n	801765e <rcl_guard_condition_init+0x72>
 8017682:	bf00      	nop

08017684 <rcl_guard_condition_init_from_rmw>:
 8017684:	b082      	sub	sp, #8
 8017686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801768a:	b086      	sub	sp, #24
 801768c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017690:	4604      	mov	r4, r0
 8017692:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017696:	460e      	mov	r6, r1
 8017698:	4617      	mov	r7, r2
 801769a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801769e:	f10d 0e04 	add.w	lr, sp, #4
 80176a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80176a6:	f8dc 3000 	ldr.w	r3, [ip]
 80176aa:	f8ce 3000 	str.w	r3, [lr]
 80176ae:	a801      	add	r0, sp, #4
 80176b0:	f7f4 f804 	bl	800b6bc <rcutils_allocator_is_valid>
 80176b4:	b350      	cbz	r0, 801770c <rcl_guard_condition_init_from_rmw+0x88>
 80176b6:	b34c      	cbz	r4, 801770c <rcl_guard_condition_init_from_rmw+0x88>
 80176b8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80176bc:	f1b8 0f00 	cmp.w	r8, #0
 80176c0:	d11e      	bne.n	8017700 <rcl_guard_condition_init_from_rmw+0x7c>
 80176c2:	b31f      	cbz	r7, 801770c <rcl_guard_condition_init_from_rmw+0x88>
 80176c4:	4638      	mov	r0, r7
 80176c6:	f7fb f843 	bl	8012750 <rcl_context_is_valid>
 80176ca:	b328      	cbz	r0, 8017718 <rcl_guard_condition_init_from_rmw+0x94>
 80176cc:	9b01      	ldr	r3, [sp, #4]
 80176ce:	9905      	ldr	r1, [sp, #20]
 80176d0:	201c      	movs	r0, #28
 80176d2:	4798      	blx	r3
 80176d4:	4605      	mov	r5, r0
 80176d6:	6060      	str	r0, [r4, #4]
 80176d8:	b358      	cbz	r0, 8017732 <rcl_guard_condition_init_from_rmw+0xae>
 80176da:	b1fe      	cbz	r6, 801771c <rcl_guard_condition_init_from_rmw+0x98>
 80176dc:	6006      	str	r6, [r0, #0]
 80176de:	f880 8004 	strb.w	r8, [r0, #4]
 80176e2:	ac01      	add	r4, sp, #4
 80176e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80176e6:	f105 0c08 	add.w	ip, r5, #8
 80176ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80176ee:	6823      	ldr	r3, [r4, #0]
 80176f0:	f8cc 3000 	str.w	r3, [ip]
 80176f4:	2000      	movs	r0, #0
 80176f6:	b006      	add	sp, #24
 80176f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176fc:	b002      	add	sp, #8
 80176fe:	4770      	bx	lr
 8017700:	2064      	movs	r0, #100	@ 0x64
 8017702:	b006      	add	sp, #24
 8017704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017708:	b002      	add	sp, #8
 801770a:	4770      	bx	lr
 801770c:	200b      	movs	r0, #11
 801770e:	b006      	add	sp, #24
 8017710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017714:	b002      	add	sp, #8
 8017716:	4770      	bx	lr
 8017718:	2065      	movs	r0, #101	@ 0x65
 801771a:	e7f2      	b.n	8017702 <rcl_guard_condition_init_from_rmw+0x7e>
 801771c:	6838      	ldr	r0, [r7, #0]
 801771e:	3028      	adds	r0, #40	@ 0x28
 8017720:	f000 f93a 	bl	8017998 <rmw_create_guard_condition>
 8017724:	6028      	str	r0, [r5, #0]
 8017726:	6865      	ldr	r5, [r4, #4]
 8017728:	682e      	ldr	r6, [r5, #0]
 801772a:	b126      	cbz	r6, 8017736 <rcl_guard_condition_init_from_rmw+0xb2>
 801772c:	2301      	movs	r3, #1
 801772e:	712b      	strb	r3, [r5, #4]
 8017730:	e7d7      	b.n	80176e2 <rcl_guard_condition_init_from_rmw+0x5e>
 8017732:	200a      	movs	r0, #10
 8017734:	e7e5      	b.n	8017702 <rcl_guard_condition_init_from_rmw+0x7e>
 8017736:	4628      	mov	r0, r5
 8017738:	9b02      	ldr	r3, [sp, #8]
 801773a:	9905      	ldr	r1, [sp, #20]
 801773c:	4798      	blx	r3
 801773e:	6066      	str	r6, [r4, #4]
 8017740:	2001      	movs	r0, #1
 8017742:	e7de      	b.n	8017702 <rcl_guard_condition_init_from_rmw+0x7e>

08017744 <rcl_guard_condition_fini>:
 8017744:	b570      	push	{r4, r5, r6, lr}
 8017746:	b082      	sub	sp, #8
 8017748:	b1f0      	cbz	r0, 8017788 <rcl_guard_condition_fini+0x44>
 801774a:	6843      	ldr	r3, [r0, #4]
 801774c:	4604      	mov	r4, r0
 801774e:	b163      	cbz	r3, 801776a <rcl_guard_condition_fini+0x26>
 8017750:	6818      	ldr	r0, [r3, #0]
 8017752:	68de      	ldr	r6, [r3, #12]
 8017754:	6999      	ldr	r1, [r3, #24]
 8017756:	b160      	cbz	r0, 8017772 <rcl_guard_condition_fini+0x2e>
 8017758:	791d      	ldrb	r5, [r3, #4]
 801775a:	b965      	cbnz	r5, 8017776 <rcl_guard_condition_fini+0x32>
 801775c:	4618      	mov	r0, r3
 801775e:	47b0      	blx	r6
 8017760:	2300      	movs	r3, #0
 8017762:	4628      	mov	r0, r5
 8017764:	6063      	str	r3, [r4, #4]
 8017766:	b002      	add	sp, #8
 8017768:	bd70      	pop	{r4, r5, r6, pc}
 801776a:	461d      	mov	r5, r3
 801776c:	4628      	mov	r0, r5
 801776e:	b002      	add	sp, #8
 8017770:	bd70      	pop	{r4, r5, r6, pc}
 8017772:	4605      	mov	r5, r0
 8017774:	e7f2      	b.n	801775c <rcl_guard_condition_fini+0x18>
 8017776:	9101      	str	r1, [sp, #4]
 8017778:	f000 f922 	bl	80179c0 <rmw_destroy_guard_condition>
 801777c:	1e05      	subs	r5, r0, #0
 801777e:	6863      	ldr	r3, [r4, #4]
 8017780:	9901      	ldr	r1, [sp, #4]
 8017782:	bf18      	it	ne
 8017784:	2501      	movne	r5, #1
 8017786:	e7e9      	b.n	801775c <rcl_guard_condition_fini+0x18>
 8017788:	250b      	movs	r5, #11
 801778a:	4628      	mov	r0, r5
 801778c:	b002      	add	sp, #8
 801778e:	bd70      	pop	{r4, r5, r6, pc}

08017790 <rcl_guard_condition_get_default_options>:
 8017790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017792:	b087      	sub	sp, #28
 8017794:	4606      	mov	r6, r0
 8017796:	4668      	mov	r0, sp
 8017798:	f7f3 ff82 	bl	800b6a0 <rcutils_get_default_allocator>
 801779c:	4b09      	ldr	r3, [pc, #36]	@ (80177c4 <rcl_guard_condition_get_default_options+0x34>)
 801779e:	46ee      	mov	lr, sp
 80177a0:	469c      	mov	ip, r3
 80177a2:	461d      	mov	r5, r3
 80177a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80177a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80177ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80177ae:	4634      	mov	r4, r6
 80177b0:	f8de 7000 	ldr.w	r7, [lr]
 80177b4:	f8cc 7000 	str.w	r7, [ip]
 80177b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80177ba:	4630      	mov	r0, r6
 80177bc:	6027      	str	r7, [r4, #0]
 80177be:	b007      	add	sp, #28
 80177c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177c2:	bf00      	nop
 80177c4:	2000b2e0 	.word	0x2000b2e0

080177c8 <rcl_trigger_guard_condition>:
 80177c8:	b148      	cbz	r0, 80177de <rcl_trigger_guard_condition+0x16>
 80177ca:	b508      	push	{r3, lr}
 80177cc:	6843      	ldr	r3, [r0, #4]
 80177ce:	b143      	cbz	r3, 80177e2 <rcl_trigger_guard_condition+0x1a>
 80177d0:	6818      	ldr	r0, [r3, #0]
 80177d2:	f000 f909 	bl	80179e8 <rmw_trigger_guard_condition>
 80177d6:	3800      	subs	r0, #0
 80177d8:	bf18      	it	ne
 80177da:	2001      	movne	r0, #1
 80177dc:	bd08      	pop	{r3, pc}
 80177de:	200b      	movs	r0, #11
 80177e0:	4770      	bx	lr
 80177e2:	200b      	movs	r0, #11
 80177e4:	bd08      	pop	{r3, pc}
 80177e6:	bf00      	nop

080177e8 <rcl_guard_condition_get_rmw_handle>:
 80177e8:	b110      	cbz	r0, 80177f0 <rcl_guard_condition_get_rmw_handle+0x8>
 80177ea:	6840      	ldr	r0, [r0, #4]
 80177ec:	b100      	cbz	r0, 80177f0 <rcl_guard_condition_get_rmw_handle+0x8>
 80177ee:	6800      	ldr	r0, [r0, #0]
 80177f0:	4770      	bx	lr
 80177f2:	bf00      	nop

080177f4 <rcl_validate_topic_name>:
 80177f4:	2800      	cmp	r0, #0
 80177f6:	d07a      	beq.n	80178ee <rcl_validate_topic_name+0xfa>
 80177f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177fc:	460e      	mov	r6, r1
 80177fe:	2900      	cmp	r1, #0
 8017800:	d07c      	beq.n	80178fc <rcl_validate_topic_name+0x108>
 8017802:	4617      	mov	r7, r2
 8017804:	4605      	mov	r5, r0
 8017806:	f7e8 fd15 	bl	8000234 <strlen>
 801780a:	b1b0      	cbz	r0, 801783a <rcl_validate_topic_name+0x46>
 801780c:	f895 9000 	ldrb.w	r9, [r5]
 8017810:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017994 <rcl_validate_topic_name+0x1a0>
 8017814:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8017818:	f013 0304 	ands.w	r3, r3, #4
 801781c:	d169      	bne.n	80178f2 <rcl_validate_topic_name+0xfe>
 801781e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8017822:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017826:	2a2f      	cmp	r2, #47	@ 0x2f
 8017828:	d10e      	bne.n	8017848 <rcl_validate_topic_name+0x54>
 801782a:	2202      	movs	r2, #2
 801782c:	6032      	str	r2, [r6, #0]
 801782e:	b36f      	cbz	r7, 801788c <rcl_validate_topic_name+0x98>
 8017830:	f8c7 8000 	str.w	r8, [r7]
 8017834:	4618      	mov	r0, r3
 8017836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801783a:	2301      	movs	r3, #1
 801783c:	6033      	str	r3, [r6, #0]
 801783e:	b32f      	cbz	r7, 801788c <rcl_validate_topic_name+0x98>
 8017840:	2000      	movs	r0, #0
 8017842:	6038      	str	r0, [r7, #0]
 8017844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017848:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801784c:	461c      	mov	r4, r3
 801784e:	4619      	mov	r1, r3
 8017850:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017854:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017858:	f1be 0f09 	cmp.w	lr, #9
 801785c:	d919      	bls.n	8017892 <rcl_validate_topic_name+0x9e>
 801785e:	f022 0e20 	bic.w	lr, r2, #32
 8017862:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017866:	f1be 0f19 	cmp.w	lr, #25
 801786a:	d912      	bls.n	8017892 <rcl_validate_topic_name+0x9e>
 801786c:	2a5f      	cmp	r2, #95	@ 0x5f
 801786e:	d019      	beq.n	80178a4 <rcl_validate_topic_name+0xb0>
 8017870:	2a2f      	cmp	r2, #47	@ 0x2f
 8017872:	d051      	beq.n	8017918 <rcl_validate_topic_name+0x124>
 8017874:	2a7e      	cmp	r2, #126	@ 0x7e
 8017876:	d048      	beq.n	801790a <rcl_validate_topic_name+0x116>
 8017878:	2a7b      	cmp	r2, #123	@ 0x7b
 801787a:	d054      	beq.n	8017926 <rcl_validate_topic_name+0x132>
 801787c:	2a7d      	cmp	r2, #125	@ 0x7d
 801787e:	d161      	bne.n	8017944 <rcl_validate_topic_name+0x150>
 8017880:	2c00      	cmp	r4, #0
 8017882:	d155      	bne.n	8017930 <rcl_validate_topic_name+0x13c>
 8017884:	2305      	movs	r3, #5
 8017886:	6033      	str	r3, [r6, #0]
 8017888:	b107      	cbz	r7, 801788c <rcl_validate_topic_name+0x98>
 801788a:	6039      	str	r1, [r7, #0]
 801788c:	2000      	movs	r0, #0
 801788e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017892:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017896:	0752      	lsls	r2, r2, #29
 8017898:	d504      	bpl.n	80178a4 <rcl_validate_topic_name+0xb0>
 801789a:	b11c      	cbz	r4, 80178a4 <rcl_validate_topic_name+0xb0>
 801789c:	b111      	cbz	r1, 80178a4 <rcl_validate_topic_name+0xb0>
 801789e:	1e4a      	subs	r2, r1, #1
 80178a0:	429a      	cmp	r2, r3
 80178a2:	d02d      	beq.n	8017900 <rcl_validate_topic_name+0x10c>
 80178a4:	3101      	adds	r1, #1
 80178a6:	4288      	cmp	r0, r1
 80178a8:	d1d2      	bne.n	8017850 <rcl_validate_topic_name+0x5c>
 80178aa:	2c00      	cmp	r4, #0
 80178ac:	d145      	bne.n	801793a <rcl_validate_topic_name+0x146>
 80178ae:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80178b2:	d04f      	beq.n	8017954 <rcl_validate_topic_name+0x160>
 80178b4:	4620      	mov	r0, r4
 80178b6:	2301      	movs	r3, #1
 80178b8:	e006      	b.n	80178c8 <rcl_validate_topic_name+0xd4>
 80178ba:	428b      	cmp	r3, r1
 80178bc:	f105 0501 	add.w	r5, r5, #1
 80178c0:	f103 0201 	add.w	r2, r3, #1
 80178c4:	d236      	bcs.n	8017934 <rcl_validate_topic_name+0x140>
 80178c6:	4613      	mov	r3, r2
 80178c8:	4580      	cmp	r8, r0
 80178ca:	f100 0001 	add.w	r0, r0, #1
 80178ce:	d0f4      	beq.n	80178ba <rcl_validate_topic_name+0xc6>
 80178d0:	782a      	ldrb	r2, [r5, #0]
 80178d2:	2a2f      	cmp	r2, #47	@ 0x2f
 80178d4:	d1f1      	bne.n	80178ba <rcl_validate_topic_name+0xc6>
 80178d6:	786a      	ldrb	r2, [r5, #1]
 80178d8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80178dc:	0754      	lsls	r4, r2, #29
 80178de:	d5ec      	bpl.n	80178ba <rcl_validate_topic_name+0xc6>
 80178e0:	2204      	movs	r2, #4
 80178e2:	6032      	str	r2, [r6, #0]
 80178e4:	2f00      	cmp	r7, #0
 80178e6:	d0d1      	beq.n	801788c <rcl_validate_topic_name+0x98>
 80178e8:	603b      	str	r3, [r7, #0]
 80178ea:	2000      	movs	r0, #0
 80178ec:	e7aa      	b.n	8017844 <rcl_validate_topic_name+0x50>
 80178ee:	200b      	movs	r0, #11
 80178f0:	4770      	bx	lr
 80178f2:	2304      	movs	r3, #4
 80178f4:	6033      	str	r3, [r6, #0]
 80178f6:	2f00      	cmp	r7, #0
 80178f8:	d1a2      	bne.n	8017840 <rcl_validate_topic_name+0x4c>
 80178fa:	e7c7      	b.n	801788c <rcl_validate_topic_name+0x98>
 80178fc:	200b      	movs	r0, #11
 80178fe:	e7a1      	b.n	8017844 <rcl_validate_topic_name+0x50>
 8017900:	2309      	movs	r3, #9
 8017902:	6033      	str	r3, [r6, #0]
 8017904:	2f00      	cmp	r7, #0
 8017906:	d1c0      	bne.n	801788a <rcl_validate_topic_name+0x96>
 8017908:	e7c0      	b.n	801788c <rcl_validate_topic_name+0x98>
 801790a:	2900      	cmp	r1, #0
 801790c:	d0ca      	beq.n	80178a4 <rcl_validate_topic_name+0xb0>
 801790e:	2306      	movs	r3, #6
 8017910:	6033      	str	r3, [r6, #0]
 8017912:	2f00      	cmp	r7, #0
 8017914:	d1b9      	bne.n	801788a <rcl_validate_topic_name+0x96>
 8017916:	e7b9      	b.n	801788c <rcl_validate_topic_name+0x98>
 8017918:	2c00      	cmp	r4, #0
 801791a:	d0c3      	beq.n	80178a4 <rcl_validate_topic_name+0xb0>
 801791c:	2308      	movs	r3, #8
 801791e:	6033      	str	r3, [r6, #0]
 8017920:	2f00      	cmp	r7, #0
 8017922:	d1b2      	bne.n	801788a <rcl_validate_topic_name+0x96>
 8017924:	e7b2      	b.n	801788c <rcl_validate_topic_name+0x98>
 8017926:	2c00      	cmp	r4, #0
 8017928:	d1f8      	bne.n	801791c <rcl_validate_topic_name+0x128>
 801792a:	460b      	mov	r3, r1
 801792c:	2401      	movs	r4, #1
 801792e:	e7b9      	b.n	80178a4 <rcl_validate_topic_name+0xb0>
 8017930:	2400      	movs	r4, #0
 8017932:	e7b7      	b.n	80178a4 <rcl_validate_topic_name+0xb0>
 8017934:	2000      	movs	r0, #0
 8017936:	6030      	str	r0, [r6, #0]
 8017938:	e784      	b.n	8017844 <rcl_validate_topic_name+0x50>
 801793a:	2205      	movs	r2, #5
 801793c:	6032      	str	r2, [r6, #0]
 801793e:	2f00      	cmp	r7, #0
 8017940:	d1d2      	bne.n	80178e8 <rcl_validate_topic_name+0xf4>
 8017942:	e7a3      	b.n	801788c <rcl_validate_topic_name+0x98>
 8017944:	2c00      	cmp	r4, #0
 8017946:	bf14      	ite	ne
 8017948:	2308      	movne	r3, #8
 801794a:	2303      	moveq	r3, #3
 801794c:	6033      	str	r3, [r6, #0]
 801794e:	2f00      	cmp	r7, #0
 8017950:	d19b      	bne.n	801788a <rcl_validate_topic_name+0x96>
 8017952:	e79b      	b.n	801788c <rcl_validate_topic_name+0x98>
 8017954:	2301      	movs	r3, #1
 8017956:	e00a      	b.n	801796e <rcl_validate_topic_name+0x17a>
 8017958:	2c01      	cmp	r4, #1
 801795a:	d013      	beq.n	8017984 <rcl_validate_topic_name+0x190>
 801795c:	4299      	cmp	r1, r3
 801795e:	f104 0401 	add.w	r4, r4, #1
 8017962:	f105 0501 	add.w	r5, r5, #1
 8017966:	f103 0201 	add.w	r2, r3, #1
 801796a:	d9e3      	bls.n	8017934 <rcl_validate_topic_name+0x140>
 801796c:	4613      	mov	r3, r2
 801796e:	45a0      	cmp	r8, r4
 8017970:	d0f4      	beq.n	801795c <rcl_validate_topic_name+0x168>
 8017972:	782a      	ldrb	r2, [r5, #0]
 8017974:	2a2f      	cmp	r2, #47	@ 0x2f
 8017976:	d1ef      	bne.n	8017958 <rcl_validate_topic_name+0x164>
 8017978:	786a      	ldrb	r2, [r5, #1]
 801797a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801797e:	0752      	lsls	r2, r2, #29
 8017980:	d5ec      	bpl.n	801795c <rcl_validate_topic_name+0x168>
 8017982:	e7ad      	b.n	80178e0 <rcl_validate_topic_name+0xec>
 8017984:	2307      	movs	r3, #7
 8017986:	6033      	str	r3, [r6, #0]
 8017988:	2f00      	cmp	r7, #0
 801798a:	f43f af7f 	beq.w	801788c <rcl_validate_topic_name+0x98>
 801798e:	603c      	str	r4, [r7, #0]
 8017990:	2000      	movs	r0, #0
 8017992:	e757      	b.n	8017844 <rcl_validate_topic_name+0x50>
 8017994:	0801a862 	.word	0x0801a862

08017998 <rmw_create_guard_condition>:
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	4605      	mov	r5, r0
 801799c:	4807      	ldr	r0, [pc, #28]	@ (80179bc <rmw_create_guard_condition+0x24>)
 801799e:	f7fe f9fb 	bl	8015d98 <get_memory>
 80179a2:	b148      	cbz	r0, 80179b8 <rmw_create_guard_condition+0x20>
 80179a4:	6884      	ldr	r4, [r0, #8]
 80179a6:	2300      	movs	r3, #0
 80179a8:	7423      	strb	r3, [r4, #16]
 80179aa:	61e5      	str	r5, [r4, #28]
 80179ac:	f7fe fa5c 	bl	8015e68 <rmw_get_implementation_identifier>
 80179b0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80179b4:	f104 0014 	add.w	r0, r4, #20
 80179b8:	bd38      	pop	{r3, r4, r5, pc}
 80179ba:	bf00      	nop
 80179bc:	2000b17c 	.word	0x2000b17c

080179c0 <rmw_destroy_guard_condition>:
 80179c0:	b508      	push	{r3, lr}
 80179c2:	4b08      	ldr	r3, [pc, #32]	@ (80179e4 <rmw_destroy_guard_condition+0x24>)
 80179c4:	6819      	ldr	r1, [r3, #0]
 80179c6:	b911      	cbnz	r1, 80179ce <rmw_destroy_guard_condition+0xe>
 80179c8:	e00a      	b.n	80179e0 <rmw_destroy_guard_condition+0x20>
 80179ca:	6849      	ldr	r1, [r1, #4]
 80179cc:	b141      	cbz	r1, 80179e0 <rmw_destroy_guard_condition+0x20>
 80179ce:	688b      	ldr	r3, [r1, #8]
 80179d0:	3314      	adds	r3, #20
 80179d2:	4298      	cmp	r0, r3
 80179d4:	d1f9      	bne.n	80179ca <rmw_destroy_guard_condition+0xa>
 80179d6:	4803      	ldr	r0, [pc, #12]	@ (80179e4 <rmw_destroy_guard_condition+0x24>)
 80179d8:	f7fe f9ee 	bl	8015db8 <put_memory>
 80179dc:	2000      	movs	r0, #0
 80179de:	bd08      	pop	{r3, pc}
 80179e0:	2001      	movs	r0, #1
 80179e2:	bd08      	pop	{r3, pc}
 80179e4:	2000b17c 	.word	0x2000b17c

080179e8 <rmw_trigger_guard_condition>:
 80179e8:	b160      	cbz	r0, 8017a04 <rmw_trigger_guard_condition+0x1c>
 80179ea:	b510      	push	{r4, lr}
 80179ec:	4604      	mov	r4, r0
 80179ee:	6800      	ldr	r0, [r0, #0]
 80179f0:	f7f5 f87c 	bl	800caec <is_uxrce_rmw_identifier_valid>
 80179f4:	b908      	cbnz	r0, 80179fa <rmw_trigger_guard_condition+0x12>
 80179f6:	2001      	movs	r0, #1
 80179f8:	bd10      	pop	{r4, pc}
 80179fa:	6863      	ldr	r3, [r4, #4]
 80179fc:	2201      	movs	r2, #1
 80179fe:	741a      	strb	r2, [r3, #16]
 8017a00:	2000      	movs	r0, #0
 8017a02:	bd10      	pop	{r4, pc}
 8017a04:	2001      	movs	r0, #1
 8017a06:	4770      	bx	lr

08017a08 <rosidl_runtime_c__String__init>:
 8017a08:	b510      	push	{r4, lr}
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	b086      	sub	sp, #24
 8017a0e:	b170      	cbz	r0, 8017a2e <rosidl_runtime_c__String__init+0x26>
 8017a10:	a801      	add	r0, sp, #4
 8017a12:	f7f3 fe45 	bl	800b6a0 <rcutils_get_default_allocator>
 8017a16:	9b01      	ldr	r3, [sp, #4]
 8017a18:	9905      	ldr	r1, [sp, #20]
 8017a1a:	2001      	movs	r0, #1
 8017a1c:	4798      	blx	r3
 8017a1e:	6020      	str	r0, [r4, #0]
 8017a20:	b128      	cbz	r0, 8017a2e <rosidl_runtime_c__String__init+0x26>
 8017a22:	2100      	movs	r1, #0
 8017a24:	2201      	movs	r2, #1
 8017a26:	7001      	strb	r1, [r0, #0]
 8017a28:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8017a2c:	4610      	mov	r0, r2
 8017a2e:	b006      	add	sp, #24
 8017a30:	bd10      	pop	{r4, pc}
 8017a32:	bf00      	nop

08017a34 <rosidl_runtime_c__String__fini>:
 8017a34:	b320      	cbz	r0, 8017a80 <rosidl_runtime_c__String__fini+0x4c>
 8017a36:	b510      	push	{r4, lr}
 8017a38:	6803      	ldr	r3, [r0, #0]
 8017a3a:	b086      	sub	sp, #24
 8017a3c:	4604      	mov	r4, r0
 8017a3e:	b173      	cbz	r3, 8017a5e <rosidl_runtime_c__String__fini+0x2a>
 8017a40:	6883      	ldr	r3, [r0, #8]
 8017a42:	b1f3      	cbz	r3, 8017a82 <rosidl_runtime_c__String__fini+0x4e>
 8017a44:	a801      	add	r0, sp, #4
 8017a46:	f7f3 fe2b 	bl	800b6a0 <rcutils_get_default_allocator>
 8017a4a:	9b02      	ldr	r3, [sp, #8]
 8017a4c:	9905      	ldr	r1, [sp, #20]
 8017a4e:	6820      	ldr	r0, [r4, #0]
 8017a50:	4798      	blx	r3
 8017a52:	2300      	movs	r3, #0
 8017a54:	e9c4 3300 	strd	r3, r3, [r4]
 8017a58:	60a3      	str	r3, [r4, #8]
 8017a5a:	b006      	add	sp, #24
 8017a5c:	bd10      	pop	{r4, pc}
 8017a5e:	6843      	ldr	r3, [r0, #4]
 8017a60:	b9db      	cbnz	r3, 8017a9a <rosidl_runtime_c__String__fini+0x66>
 8017a62:	6883      	ldr	r3, [r0, #8]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d0f8      	beq.n	8017a5a <rosidl_runtime_c__String__fini+0x26>
 8017a68:	4b12      	ldr	r3, [pc, #72]	@ (8017ab4 <rosidl_runtime_c__String__fini+0x80>)
 8017a6a:	4813      	ldr	r0, [pc, #76]	@ (8017ab8 <rosidl_runtime_c__String__fini+0x84>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	2251      	movs	r2, #81	@ 0x51
 8017a70:	68db      	ldr	r3, [r3, #12]
 8017a72:	2101      	movs	r1, #1
 8017a74:	f000 fb82 	bl	801817c <fwrite>
 8017a78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a7c:	f000 f83e 	bl	8017afc <exit>
 8017a80:	4770      	bx	lr
 8017a82:	4b0c      	ldr	r3, [pc, #48]	@ (8017ab4 <rosidl_runtime_c__String__fini+0x80>)
 8017a84:	480d      	ldr	r0, [pc, #52]	@ (8017abc <rosidl_runtime_c__String__fini+0x88>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	224c      	movs	r2, #76	@ 0x4c
 8017a8a:	68db      	ldr	r3, [r3, #12]
 8017a8c:	2101      	movs	r1, #1
 8017a8e:	f000 fb75 	bl	801817c <fwrite>
 8017a92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a96:	f000 f831 	bl	8017afc <exit>
 8017a9a:	4b06      	ldr	r3, [pc, #24]	@ (8017ab4 <rosidl_runtime_c__String__fini+0x80>)
 8017a9c:	4808      	ldr	r0, [pc, #32]	@ (8017ac0 <rosidl_runtime_c__String__fini+0x8c>)
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	224e      	movs	r2, #78	@ 0x4e
 8017aa2:	68db      	ldr	r3, [r3, #12]
 8017aa4:	2101      	movs	r1, #1
 8017aa6:	f000 fb69 	bl	801817c <fwrite>
 8017aaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017aae:	f000 f825 	bl	8017afc <exit>
 8017ab2:	bf00      	nop
 8017ab4:	2000061c 	.word	0x2000061c
 8017ab8:	0801a7a0 	.word	0x0801a7a0
 8017abc:	0801a700 	.word	0x0801a700
 8017ac0:	0801a750 	.word	0x0801a750

08017ac4 <calloc>:
 8017ac4:	4b02      	ldr	r3, [pc, #8]	@ (8017ad0 <calloc+0xc>)
 8017ac6:	460a      	mov	r2, r1
 8017ac8:	4601      	mov	r1, r0
 8017aca:	6818      	ldr	r0, [r3, #0]
 8017acc:	f000 b802 	b.w	8017ad4 <_calloc_r>
 8017ad0:	2000061c 	.word	0x2000061c

08017ad4 <_calloc_r>:
 8017ad4:	b570      	push	{r4, r5, r6, lr}
 8017ad6:	fba1 5402 	umull	r5, r4, r1, r2
 8017ada:	b93c      	cbnz	r4, 8017aec <_calloc_r+0x18>
 8017adc:	4629      	mov	r1, r5
 8017ade:	f000 f899 	bl	8017c14 <_malloc_r>
 8017ae2:	4606      	mov	r6, r0
 8017ae4:	b928      	cbnz	r0, 8017af2 <_calloc_r+0x1e>
 8017ae6:	2600      	movs	r6, #0
 8017ae8:	4630      	mov	r0, r6
 8017aea:	bd70      	pop	{r4, r5, r6, pc}
 8017aec:	220c      	movs	r2, #12
 8017aee:	6002      	str	r2, [r0, #0]
 8017af0:	e7f9      	b.n	8017ae6 <_calloc_r+0x12>
 8017af2:	462a      	mov	r2, r5
 8017af4:	4621      	mov	r1, r4
 8017af6:	f000 fccf 	bl	8018498 <memset>
 8017afa:	e7f5      	b.n	8017ae8 <_calloc_r+0x14>

08017afc <exit>:
 8017afc:	b508      	push	{r3, lr}
 8017afe:	4b06      	ldr	r3, [pc, #24]	@ (8017b18 <exit+0x1c>)
 8017b00:	4604      	mov	r4, r0
 8017b02:	b113      	cbz	r3, 8017b0a <exit+0xe>
 8017b04:	2100      	movs	r1, #0
 8017b06:	f3af 8000 	nop.w
 8017b0a:	4b04      	ldr	r3, [pc, #16]	@ (8017b1c <exit+0x20>)
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	b103      	cbz	r3, 8017b12 <exit+0x16>
 8017b10:	4798      	blx	r3
 8017b12:	4620      	mov	r0, r4
 8017b14:	f7ea faca 	bl	80020ac <_exit>
 8017b18:	00000000 	.word	0x00000000
 8017b1c:	2000b434 	.word	0x2000b434

08017b20 <getenv>:
 8017b20:	b507      	push	{r0, r1, r2, lr}
 8017b22:	4b04      	ldr	r3, [pc, #16]	@ (8017b34 <getenv+0x14>)
 8017b24:	4601      	mov	r1, r0
 8017b26:	aa01      	add	r2, sp, #4
 8017b28:	6818      	ldr	r0, [r3, #0]
 8017b2a:	f000 f805 	bl	8017b38 <_findenv_r>
 8017b2e:	b003      	add	sp, #12
 8017b30:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b34:	2000061c 	.word	0x2000061c

08017b38 <_findenv_r>:
 8017b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b3c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017bac <_findenv_r+0x74>
 8017b40:	4606      	mov	r6, r0
 8017b42:	4689      	mov	r9, r1
 8017b44:	4617      	mov	r7, r2
 8017b46:	f000 fd9d 	bl	8018684 <__env_lock>
 8017b4a:	f8da 4000 	ldr.w	r4, [sl]
 8017b4e:	b134      	cbz	r4, 8017b5e <_findenv_r+0x26>
 8017b50:	464b      	mov	r3, r9
 8017b52:	4698      	mov	r8, r3
 8017b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b58:	b13a      	cbz	r2, 8017b6a <_findenv_r+0x32>
 8017b5a:	2a3d      	cmp	r2, #61	@ 0x3d
 8017b5c:	d1f9      	bne.n	8017b52 <_findenv_r+0x1a>
 8017b5e:	4630      	mov	r0, r6
 8017b60:	f000 fd96 	bl	8018690 <__env_unlock>
 8017b64:	2000      	movs	r0, #0
 8017b66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b6a:	eba8 0809 	sub.w	r8, r8, r9
 8017b6e:	46a3      	mov	fp, r4
 8017b70:	f854 0b04 	ldr.w	r0, [r4], #4
 8017b74:	2800      	cmp	r0, #0
 8017b76:	d0f2      	beq.n	8017b5e <_findenv_r+0x26>
 8017b78:	4642      	mov	r2, r8
 8017b7a:	4649      	mov	r1, r9
 8017b7c:	f000 fca1 	bl	80184c2 <strncmp>
 8017b80:	2800      	cmp	r0, #0
 8017b82:	d1f4      	bne.n	8017b6e <_findenv_r+0x36>
 8017b84:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017b88:	eb03 0508 	add.w	r5, r3, r8
 8017b8c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017b90:	2b3d      	cmp	r3, #61	@ 0x3d
 8017b92:	d1ec      	bne.n	8017b6e <_findenv_r+0x36>
 8017b94:	f8da 3000 	ldr.w	r3, [sl]
 8017b98:	ebab 0303 	sub.w	r3, fp, r3
 8017b9c:	109b      	asrs	r3, r3, #2
 8017b9e:	4630      	mov	r0, r6
 8017ba0:	603b      	str	r3, [r7, #0]
 8017ba2:	f000 fd75 	bl	8018690 <__env_unlock>
 8017ba6:	1c68      	adds	r0, r5, #1
 8017ba8:	e7dd      	b.n	8017b66 <_findenv_r+0x2e>
 8017baa:	bf00      	nop
 8017bac:	20000000 	.word	0x20000000

08017bb0 <malloc>:
 8017bb0:	4b02      	ldr	r3, [pc, #8]	@ (8017bbc <malloc+0xc>)
 8017bb2:	4601      	mov	r1, r0
 8017bb4:	6818      	ldr	r0, [r3, #0]
 8017bb6:	f000 b82d 	b.w	8017c14 <_malloc_r>
 8017bba:	bf00      	nop
 8017bbc:	2000061c 	.word	0x2000061c

08017bc0 <free>:
 8017bc0:	4b02      	ldr	r3, [pc, #8]	@ (8017bcc <free+0xc>)
 8017bc2:	4601      	mov	r1, r0
 8017bc4:	6818      	ldr	r0, [r3, #0]
 8017bc6:	f000 bd69 	b.w	801869c <_free_r>
 8017bca:	bf00      	nop
 8017bcc:	2000061c 	.word	0x2000061c

08017bd0 <sbrk_aligned>:
 8017bd0:	b570      	push	{r4, r5, r6, lr}
 8017bd2:	4e0f      	ldr	r6, [pc, #60]	@ (8017c10 <sbrk_aligned+0x40>)
 8017bd4:	460c      	mov	r4, r1
 8017bd6:	6831      	ldr	r1, [r6, #0]
 8017bd8:	4605      	mov	r5, r0
 8017bda:	b911      	cbnz	r1, 8017be2 <sbrk_aligned+0x12>
 8017bdc:	f000 fcce 	bl	801857c <_sbrk_r>
 8017be0:	6030      	str	r0, [r6, #0]
 8017be2:	4621      	mov	r1, r4
 8017be4:	4628      	mov	r0, r5
 8017be6:	f000 fcc9 	bl	801857c <_sbrk_r>
 8017bea:	1c43      	adds	r3, r0, #1
 8017bec:	d103      	bne.n	8017bf6 <sbrk_aligned+0x26>
 8017bee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017bf2:	4620      	mov	r0, r4
 8017bf4:	bd70      	pop	{r4, r5, r6, pc}
 8017bf6:	1cc4      	adds	r4, r0, #3
 8017bf8:	f024 0403 	bic.w	r4, r4, #3
 8017bfc:	42a0      	cmp	r0, r4
 8017bfe:	d0f8      	beq.n	8017bf2 <sbrk_aligned+0x22>
 8017c00:	1a21      	subs	r1, r4, r0
 8017c02:	4628      	mov	r0, r5
 8017c04:	f000 fcba 	bl	801857c <_sbrk_r>
 8017c08:	3001      	adds	r0, #1
 8017c0a:	d1f2      	bne.n	8017bf2 <sbrk_aligned+0x22>
 8017c0c:	e7ef      	b.n	8017bee <sbrk_aligned+0x1e>
 8017c0e:	bf00      	nop
 8017c10:	2000b2f4 	.word	0x2000b2f4

08017c14 <_malloc_r>:
 8017c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c18:	1ccd      	adds	r5, r1, #3
 8017c1a:	f025 0503 	bic.w	r5, r5, #3
 8017c1e:	3508      	adds	r5, #8
 8017c20:	2d0c      	cmp	r5, #12
 8017c22:	bf38      	it	cc
 8017c24:	250c      	movcc	r5, #12
 8017c26:	2d00      	cmp	r5, #0
 8017c28:	4606      	mov	r6, r0
 8017c2a:	db01      	blt.n	8017c30 <_malloc_r+0x1c>
 8017c2c:	42a9      	cmp	r1, r5
 8017c2e:	d904      	bls.n	8017c3a <_malloc_r+0x26>
 8017c30:	230c      	movs	r3, #12
 8017c32:	6033      	str	r3, [r6, #0]
 8017c34:	2000      	movs	r0, #0
 8017c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017d10 <_malloc_r+0xfc>
 8017c3e:	f000 f869 	bl	8017d14 <__malloc_lock>
 8017c42:	f8d8 3000 	ldr.w	r3, [r8]
 8017c46:	461c      	mov	r4, r3
 8017c48:	bb44      	cbnz	r4, 8017c9c <_malloc_r+0x88>
 8017c4a:	4629      	mov	r1, r5
 8017c4c:	4630      	mov	r0, r6
 8017c4e:	f7ff ffbf 	bl	8017bd0 <sbrk_aligned>
 8017c52:	1c43      	adds	r3, r0, #1
 8017c54:	4604      	mov	r4, r0
 8017c56:	d158      	bne.n	8017d0a <_malloc_r+0xf6>
 8017c58:	f8d8 4000 	ldr.w	r4, [r8]
 8017c5c:	4627      	mov	r7, r4
 8017c5e:	2f00      	cmp	r7, #0
 8017c60:	d143      	bne.n	8017cea <_malloc_r+0xd6>
 8017c62:	2c00      	cmp	r4, #0
 8017c64:	d04b      	beq.n	8017cfe <_malloc_r+0xea>
 8017c66:	6823      	ldr	r3, [r4, #0]
 8017c68:	4639      	mov	r1, r7
 8017c6a:	4630      	mov	r0, r6
 8017c6c:	eb04 0903 	add.w	r9, r4, r3
 8017c70:	f000 fc84 	bl	801857c <_sbrk_r>
 8017c74:	4581      	cmp	r9, r0
 8017c76:	d142      	bne.n	8017cfe <_malloc_r+0xea>
 8017c78:	6821      	ldr	r1, [r4, #0]
 8017c7a:	1a6d      	subs	r5, r5, r1
 8017c7c:	4629      	mov	r1, r5
 8017c7e:	4630      	mov	r0, r6
 8017c80:	f7ff ffa6 	bl	8017bd0 <sbrk_aligned>
 8017c84:	3001      	adds	r0, #1
 8017c86:	d03a      	beq.n	8017cfe <_malloc_r+0xea>
 8017c88:	6823      	ldr	r3, [r4, #0]
 8017c8a:	442b      	add	r3, r5
 8017c8c:	6023      	str	r3, [r4, #0]
 8017c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8017c92:	685a      	ldr	r2, [r3, #4]
 8017c94:	bb62      	cbnz	r2, 8017cf0 <_malloc_r+0xdc>
 8017c96:	f8c8 7000 	str.w	r7, [r8]
 8017c9a:	e00f      	b.n	8017cbc <_malloc_r+0xa8>
 8017c9c:	6822      	ldr	r2, [r4, #0]
 8017c9e:	1b52      	subs	r2, r2, r5
 8017ca0:	d420      	bmi.n	8017ce4 <_malloc_r+0xd0>
 8017ca2:	2a0b      	cmp	r2, #11
 8017ca4:	d917      	bls.n	8017cd6 <_malloc_r+0xc2>
 8017ca6:	1961      	adds	r1, r4, r5
 8017ca8:	42a3      	cmp	r3, r4
 8017caa:	6025      	str	r5, [r4, #0]
 8017cac:	bf18      	it	ne
 8017cae:	6059      	strne	r1, [r3, #4]
 8017cb0:	6863      	ldr	r3, [r4, #4]
 8017cb2:	bf08      	it	eq
 8017cb4:	f8c8 1000 	streq.w	r1, [r8]
 8017cb8:	5162      	str	r2, [r4, r5]
 8017cba:	604b      	str	r3, [r1, #4]
 8017cbc:	4630      	mov	r0, r6
 8017cbe:	f000 f82f 	bl	8017d20 <__malloc_unlock>
 8017cc2:	f104 000b 	add.w	r0, r4, #11
 8017cc6:	1d23      	adds	r3, r4, #4
 8017cc8:	f020 0007 	bic.w	r0, r0, #7
 8017ccc:	1ac2      	subs	r2, r0, r3
 8017cce:	bf1c      	itt	ne
 8017cd0:	1a1b      	subne	r3, r3, r0
 8017cd2:	50a3      	strne	r3, [r4, r2]
 8017cd4:	e7af      	b.n	8017c36 <_malloc_r+0x22>
 8017cd6:	6862      	ldr	r2, [r4, #4]
 8017cd8:	42a3      	cmp	r3, r4
 8017cda:	bf0c      	ite	eq
 8017cdc:	f8c8 2000 	streq.w	r2, [r8]
 8017ce0:	605a      	strne	r2, [r3, #4]
 8017ce2:	e7eb      	b.n	8017cbc <_malloc_r+0xa8>
 8017ce4:	4623      	mov	r3, r4
 8017ce6:	6864      	ldr	r4, [r4, #4]
 8017ce8:	e7ae      	b.n	8017c48 <_malloc_r+0x34>
 8017cea:	463c      	mov	r4, r7
 8017cec:	687f      	ldr	r7, [r7, #4]
 8017cee:	e7b6      	b.n	8017c5e <_malloc_r+0x4a>
 8017cf0:	461a      	mov	r2, r3
 8017cf2:	685b      	ldr	r3, [r3, #4]
 8017cf4:	42a3      	cmp	r3, r4
 8017cf6:	d1fb      	bne.n	8017cf0 <_malloc_r+0xdc>
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	6053      	str	r3, [r2, #4]
 8017cfc:	e7de      	b.n	8017cbc <_malloc_r+0xa8>
 8017cfe:	230c      	movs	r3, #12
 8017d00:	6033      	str	r3, [r6, #0]
 8017d02:	4630      	mov	r0, r6
 8017d04:	f000 f80c 	bl	8017d20 <__malloc_unlock>
 8017d08:	e794      	b.n	8017c34 <_malloc_r+0x20>
 8017d0a:	6005      	str	r5, [r0, #0]
 8017d0c:	e7d6      	b.n	8017cbc <_malloc_r+0xa8>
 8017d0e:	bf00      	nop
 8017d10:	2000b2f8 	.word	0x2000b2f8

08017d14 <__malloc_lock>:
 8017d14:	4801      	ldr	r0, [pc, #4]	@ (8017d1c <__malloc_lock+0x8>)
 8017d16:	f000 bc7e 	b.w	8018616 <__retarget_lock_acquire_recursive>
 8017d1a:	bf00      	nop
 8017d1c:	2000b43d 	.word	0x2000b43d

08017d20 <__malloc_unlock>:
 8017d20:	4801      	ldr	r0, [pc, #4]	@ (8017d28 <__malloc_unlock+0x8>)
 8017d22:	f000 bc79 	b.w	8018618 <__retarget_lock_release_recursive>
 8017d26:	bf00      	nop
 8017d28:	2000b43d 	.word	0x2000b43d

08017d2c <srand>:
 8017d2c:	b538      	push	{r3, r4, r5, lr}
 8017d2e:	4b10      	ldr	r3, [pc, #64]	@ (8017d70 <srand+0x44>)
 8017d30:	681d      	ldr	r5, [r3, #0]
 8017d32:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017d34:	4604      	mov	r4, r0
 8017d36:	b9b3      	cbnz	r3, 8017d66 <srand+0x3a>
 8017d38:	2018      	movs	r0, #24
 8017d3a:	f7ff ff39 	bl	8017bb0 <malloc>
 8017d3e:	4602      	mov	r2, r0
 8017d40:	6328      	str	r0, [r5, #48]	@ 0x30
 8017d42:	b920      	cbnz	r0, 8017d4e <srand+0x22>
 8017d44:	4b0b      	ldr	r3, [pc, #44]	@ (8017d74 <srand+0x48>)
 8017d46:	480c      	ldr	r0, [pc, #48]	@ (8017d78 <srand+0x4c>)
 8017d48:	2146      	movs	r1, #70	@ 0x46
 8017d4a:	f000 fc7d 	bl	8018648 <__assert_func>
 8017d4e:	490b      	ldr	r1, [pc, #44]	@ (8017d7c <srand+0x50>)
 8017d50:	4b0b      	ldr	r3, [pc, #44]	@ (8017d80 <srand+0x54>)
 8017d52:	e9c0 1300 	strd	r1, r3, [r0]
 8017d56:	4b0b      	ldr	r3, [pc, #44]	@ (8017d84 <srand+0x58>)
 8017d58:	6083      	str	r3, [r0, #8]
 8017d5a:	230b      	movs	r3, #11
 8017d5c:	8183      	strh	r3, [r0, #12]
 8017d5e:	2100      	movs	r1, #0
 8017d60:	2001      	movs	r0, #1
 8017d62:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017d66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017d68:	2200      	movs	r2, #0
 8017d6a:	611c      	str	r4, [r3, #16]
 8017d6c:	615a      	str	r2, [r3, #20]
 8017d6e:	bd38      	pop	{r3, r4, r5, pc}
 8017d70:	2000061c 	.word	0x2000061c
 8017d74:	0801a7f2 	.word	0x0801a7f2
 8017d78:	0801a809 	.word	0x0801a809
 8017d7c:	abcd330e 	.word	0xabcd330e
 8017d80:	e66d1234 	.word	0xe66d1234
 8017d84:	0005deec 	.word	0x0005deec

08017d88 <rand>:
 8017d88:	4b16      	ldr	r3, [pc, #88]	@ (8017de4 <rand+0x5c>)
 8017d8a:	b510      	push	{r4, lr}
 8017d8c:	681c      	ldr	r4, [r3, #0]
 8017d8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017d90:	b9b3      	cbnz	r3, 8017dc0 <rand+0x38>
 8017d92:	2018      	movs	r0, #24
 8017d94:	f7ff ff0c 	bl	8017bb0 <malloc>
 8017d98:	4602      	mov	r2, r0
 8017d9a:	6320      	str	r0, [r4, #48]	@ 0x30
 8017d9c:	b920      	cbnz	r0, 8017da8 <rand+0x20>
 8017d9e:	4b12      	ldr	r3, [pc, #72]	@ (8017de8 <rand+0x60>)
 8017da0:	4812      	ldr	r0, [pc, #72]	@ (8017dec <rand+0x64>)
 8017da2:	2152      	movs	r1, #82	@ 0x52
 8017da4:	f000 fc50 	bl	8018648 <__assert_func>
 8017da8:	4911      	ldr	r1, [pc, #68]	@ (8017df0 <rand+0x68>)
 8017daa:	4b12      	ldr	r3, [pc, #72]	@ (8017df4 <rand+0x6c>)
 8017dac:	e9c0 1300 	strd	r1, r3, [r0]
 8017db0:	4b11      	ldr	r3, [pc, #68]	@ (8017df8 <rand+0x70>)
 8017db2:	6083      	str	r3, [r0, #8]
 8017db4:	230b      	movs	r3, #11
 8017db6:	8183      	strh	r3, [r0, #12]
 8017db8:	2100      	movs	r1, #0
 8017dba:	2001      	movs	r0, #1
 8017dbc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017dc0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017dc2:	480e      	ldr	r0, [pc, #56]	@ (8017dfc <rand+0x74>)
 8017dc4:	690b      	ldr	r3, [r1, #16]
 8017dc6:	694c      	ldr	r4, [r1, #20]
 8017dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8017e00 <rand+0x78>)
 8017dca:	4358      	muls	r0, r3
 8017dcc:	fb02 0004 	mla	r0, r2, r4, r0
 8017dd0:	fba3 3202 	umull	r3, r2, r3, r2
 8017dd4:	3301      	adds	r3, #1
 8017dd6:	eb40 0002 	adc.w	r0, r0, r2
 8017dda:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017dde:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017de2:	bd10      	pop	{r4, pc}
 8017de4:	2000061c 	.word	0x2000061c
 8017de8:	0801a7f2 	.word	0x0801a7f2
 8017dec:	0801a809 	.word	0x0801a809
 8017df0:	abcd330e 	.word	0xabcd330e
 8017df4:	e66d1234 	.word	0xe66d1234
 8017df8:	0005deec 	.word	0x0005deec
 8017dfc:	5851f42d 	.word	0x5851f42d
 8017e00:	4c957f2d 	.word	0x4c957f2d

08017e04 <realloc>:
 8017e04:	4b02      	ldr	r3, [pc, #8]	@ (8017e10 <realloc+0xc>)
 8017e06:	460a      	mov	r2, r1
 8017e08:	4601      	mov	r1, r0
 8017e0a:	6818      	ldr	r0, [r3, #0]
 8017e0c:	f000 b802 	b.w	8017e14 <_realloc_r>
 8017e10:	2000061c 	.word	0x2000061c

08017e14 <_realloc_r>:
 8017e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e18:	4680      	mov	r8, r0
 8017e1a:	4615      	mov	r5, r2
 8017e1c:	460c      	mov	r4, r1
 8017e1e:	b921      	cbnz	r1, 8017e2a <_realloc_r+0x16>
 8017e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e24:	4611      	mov	r1, r2
 8017e26:	f7ff bef5 	b.w	8017c14 <_malloc_r>
 8017e2a:	b92a      	cbnz	r2, 8017e38 <_realloc_r+0x24>
 8017e2c:	f000 fc36 	bl	801869c <_free_r>
 8017e30:	2400      	movs	r4, #0
 8017e32:	4620      	mov	r0, r4
 8017e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e38:	f000 fc7a 	bl	8018730 <_malloc_usable_size_r>
 8017e3c:	4285      	cmp	r5, r0
 8017e3e:	4606      	mov	r6, r0
 8017e40:	d802      	bhi.n	8017e48 <_realloc_r+0x34>
 8017e42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017e46:	d8f4      	bhi.n	8017e32 <_realloc_r+0x1e>
 8017e48:	4629      	mov	r1, r5
 8017e4a:	4640      	mov	r0, r8
 8017e4c:	f7ff fee2 	bl	8017c14 <_malloc_r>
 8017e50:	4607      	mov	r7, r0
 8017e52:	2800      	cmp	r0, #0
 8017e54:	d0ec      	beq.n	8017e30 <_realloc_r+0x1c>
 8017e56:	42b5      	cmp	r5, r6
 8017e58:	462a      	mov	r2, r5
 8017e5a:	4621      	mov	r1, r4
 8017e5c:	bf28      	it	cs
 8017e5e:	4632      	movcs	r2, r6
 8017e60:	f000 fbe3 	bl	801862a <memcpy>
 8017e64:	4621      	mov	r1, r4
 8017e66:	4640      	mov	r0, r8
 8017e68:	f000 fc18 	bl	801869c <_free_r>
 8017e6c:	463c      	mov	r4, r7
 8017e6e:	e7e0      	b.n	8017e32 <_realloc_r+0x1e>

08017e70 <_strtoul_l.constprop.0>:
 8017e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e74:	4e34      	ldr	r6, [pc, #208]	@ (8017f48 <_strtoul_l.constprop.0+0xd8>)
 8017e76:	4686      	mov	lr, r0
 8017e78:	460d      	mov	r5, r1
 8017e7a:	4628      	mov	r0, r5
 8017e7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017e80:	5d37      	ldrb	r7, [r6, r4]
 8017e82:	f017 0708 	ands.w	r7, r7, #8
 8017e86:	d1f8      	bne.n	8017e7a <_strtoul_l.constprop.0+0xa>
 8017e88:	2c2d      	cmp	r4, #45	@ 0x2d
 8017e8a:	d12f      	bne.n	8017eec <_strtoul_l.constprop.0+0x7c>
 8017e8c:	782c      	ldrb	r4, [r5, #0]
 8017e8e:	2701      	movs	r7, #1
 8017e90:	1c85      	adds	r5, r0, #2
 8017e92:	f033 0010 	bics.w	r0, r3, #16
 8017e96:	d109      	bne.n	8017eac <_strtoul_l.constprop.0+0x3c>
 8017e98:	2c30      	cmp	r4, #48	@ 0x30
 8017e9a:	d12c      	bne.n	8017ef6 <_strtoul_l.constprop.0+0x86>
 8017e9c:	7828      	ldrb	r0, [r5, #0]
 8017e9e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017ea2:	2858      	cmp	r0, #88	@ 0x58
 8017ea4:	d127      	bne.n	8017ef6 <_strtoul_l.constprop.0+0x86>
 8017ea6:	786c      	ldrb	r4, [r5, #1]
 8017ea8:	2310      	movs	r3, #16
 8017eaa:	3502      	adds	r5, #2
 8017eac:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017eb0:	2600      	movs	r6, #0
 8017eb2:	fbb8 f8f3 	udiv	r8, r8, r3
 8017eb6:	fb03 f908 	mul.w	r9, r3, r8
 8017eba:	ea6f 0909 	mvn.w	r9, r9
 8017ebe:	4630      	mov	r0, r6
 8017ec0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017ec4:	f1bc 0f09 	cmp.w	ip, #9
 8017ec8:	d81c      	bhi.n	8017f04 <_strtoul_l.constprop.0+0x94>
 8017eca:	4664      	mov	r4, ip
 8017ecc:	42a3      	cmp	r3, r4
 8017ece:	dd2a      	ble.n	8017f26 <_strtoul_l.constprop.0+0xb6>
 8017ed0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017ed4:	d007      	beq.n	8017ee6 <_strtoul_l.constprop.0+0x76>
 8017ed6:	4580      	cmp	r8, r0
 8017ed8:	d322      	bcc.n	8017f20 <_strtoul_l.constprop.0+0xb0>
 8017eda:	d101      	bne.n	8017ee0 <_strtoul_l.constprop.0+0x70>
 8017edc:	45a1      	cmp	r9, r4
 8017ede:	db1f      	blt.n	8017f20 <_strtoul_l.constprop.0+0xb0>
 8017ee0:	fb00 4003 	mla	r0, r0, r3, r4
 8017ee4:	2601      	movs	r6, #1
 8017ee6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017eea:	e7e9      	b.n	8017ec0 <_strtoul_l.constprop.0+0x50>
 8017eec:	2c2b      	cmp	r4, #43	@ 0x2b
 8017eee:	bf04      	itt	eq
 8017ef0:	782c      	ldrbeq	r4, [r5, #0]
 8017ef2:	1c85      	addeq	r5, r0, #2
 8017ef4:	e7cd      	b.n	8017e92 <_strtoul_l.constprop.0+0x22>
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d1d8      	bne.n	8017eac <_strtoul_l.constprop.0+0x3c>
 8017efa:	2c30      	cmp	r4, #48	@ 0x30
 8017efc:	bf0c      	ite	eq
 8017efe:	2308      	moveq	r3, #8
 8017f00:	230a      	movne	r3, #10
 8017f02:	e7d3      	b.n	8017eac <_strtoul_l.constprop.0+0x3c>
 8017f04:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017f08:	f1bc 0f19 	cmp.w	ip, #25
 8017f0c:	d801      	bhi.n	8017f12 <_strtoul_l.constprop.0+0xa2>
 8017f0e:	3c37      	subs	r4, #55	@ 0x37
 8017f10:	e7dc      	b.n	8017ecc <_strtoul_l.constprop.0+0x5c>
 8017f12:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017f16:	f1bc 0f19 	cmp.w	ip, #25
 8017f1a:	d804      	bhi.n	8017f26 <_strtoul_l.constprop.0+0xb6>
 8017f1c:	3c57      	subs	r4, #87	@ 0x57
 8017f1e:	e7d5      	b.n	8017ecc <_strtoul_l.constprop.0+0x5c>
 8017f20:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017f24:	e7df      	b.n	8017ee6 <_strtoul_l.constprop.0+0x76>
 8017f26:	1c73      	adds	r3, r6, #1
 8017f28:	d106      	bne.n	8017f38 <_strtoul_l.constprop.0+0xc8>
 8017f2a:	2322      	movs	r3, #34	@ 0x22
 8017f2c:	f8ce 3000 	str.w	r3, [lr]
 8017f30:	4630      	mov	r0, r6
 8017f32:	b932      	cbnz	r2, 8017f42 <_strtoul_l.constprop.0+0xd2>
 8017f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f38:	b107      	cbz	r7, 8017f3c <_strtoul_l.constprop.0+0xcc>
 8017f3a:	4240      	negs	r0, r0
 8017f3c:	2a00      	cmp	r2, #0
 8017f3e:	d0f9      	beq.n	8017f34 <_strtoul_l.constprop.0+0xc4>
 8017f40:	b106      	cbz	r6, 8017f44 <_strtoul_l.constprop.0+0xd4>
 8017f42:	1e69      	subs	r1, r5, #1
 8017f44:	6011      	str	r1, [r2, #0]
 8017f46:	e7f5      	b.n	8017f34 <_strtoul_l.constprop.0+0xc4>
 8017f48:	0801a862 	.word	0x0801a862

08017f4c <strtoul>:
 8017f4c:	4613      	mov	r3, r2
 8017f4e:	460a      	mov	r2, r1
 8017f50:	4601      	mov	r1, r0
 8017f52:	4802      	ldr	r0, [pc, #8]	@ (8017f5c <strtoul+0x10>)
 8017f54:	6800      	ldr	r0, [r0, #0]
 8017f56:	f7ff bf8b 	b.w	8017e70 <_strtoul_l.constprop.0>
 8017f5a:	bf00      	nop
 8017f5c:	2000061c 	.word	0x2000061c

08017f60 <std>:
 8017f60:	2300      	movs	r3, #0
 8017f62:	b510      	push	{r4, lr}
 8017f64:	4604      	mov	r4, r0
 8017f66:	e9c0 3300 	strd	r3, r3, [r0]
 8017f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017f6e:	6083      	str	r3, [r0, #8]
 8017f70:	8181      	strh	r1, [r0, #12]
 8017f72:	6643      	str	r3, [r0, #100]	@ 0x64
 8017f74:	81c2      	strh	r2, [r0, #14]
 8017f76:	6183      	str	r3, [r0, #24]
 8017f78:	4619      	mov	r1, r3
 8017f7a:	2208      	movs	r2, #8
 8017f7c:	305c      	adds	r0, #92	@ 0x5c
 8017f7e:	f000 fa8b 	bl	8018498 <memset>
 8017f82:	4b0d      	ldr	r3, [pc, #52]	@ (8017fb8 <std+0x58>)
 8017f84:	6263      	str	r3, [r4, #36]	@ 0x24
 8017f86:	4b0d      	ldr	r3, [pc, #52]	@ (8017fbc <std+0x5c>)
 8017f88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8017fc0 <std+0x60>)
 8017f8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8017fc4 <std+0x64>)
 8017f90:	6323      	str	r3, [r4, #48]	@ 0x30
 8017f92:	4b0d      	ldr	r3, [pc, #52]	@ (8017fc8 <std+0x68>)
 8017f94:	6224      	str	r4, [r4, #32]
 8017f96:	429c      	cmp	r4, r3
 8017f98:	d006      	beq.n	8017fa8 <std+0x48>
 8017f9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017f9e:	4294      	cmp	r4, r2
 8017fa0:	d002      	beq.n	8017fa8 <std+0x48>
 8017fa2:	33d0      	adds	r3, #208	@ 0xd0
 8017fa4:	429c      	cmp	r4, r3
 8017fa6:	d105      	bne.n	8017fb4 <std+0x54>
 8017fa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fb0:	f000 bb30 	b.w	8018614 <__retarget_lock_init_recursive>
 8017fb4:	bd10      	pop	{r4, pc}
 8017fb6:	bf00      	nop
 8017fb8:	08018225 	.word	0x08018225
 8017fbc:	08018247 	.word	0x08018247
 8017fc0:	0801827f 	.word	0x0801827f
 8017fc4:	080182a3 	.word	0x080182a3
 8017fc8:	2000b2fc 	.word	0x2000b2fc

08017fcc <stdio_exit_handler>:
 8017fcc:	4a02      	ldr	r2, [pc, #8]	@ (8017fd8 <stdio_exit_handler+0xc>)
 8017fce:	4903      	ldr	r1, [pc, #12]	@ (8017fdc <stdio_exit_handler+0x10>)
 8017fd0:	4803      	ldr	r0, [pc, #12]	@ (8017fe0 <stdio_exit_handler+0x14>)
 8017fd2:	f000 b869 	b.w	80180a8 <_fwalk_sglue>
 8017fd6:	bf00      	nop
 8017fd8:	20000610 	.word	0x20000610
 8017fdc:	08019099 	.word	0x08019099
 8017fe0:	20000620 	.word	0x20000620

08017fe4 <cleanup_stdio>:
 8017fe4:	6841      	ldr	r1, [r0, #4]
 8017fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8018018 <cleanup_stdio+0x34>)
 8017fe8:	4299      	cmp	r1, r3
 8017fea:	b510      	push	{r4, lr}
 8017fec:	4604      	mov	r4, r0
 8017fee:	d001      	beq.n	8017ff4 <cleanup_stdio+0x10>
 8017ff0:	f001 f852 	bl	8019098 <_fflush_r>
 8017ff4:	68a1      	ldr	r1, [r4, #8]
 8017ff6:	4b09      	ldr	r3, [pc, #36]	@ (801801c <cleanup_stdio+0x38>)
 8017ff8:	4299      	cmp	r1, r3
 8017ffa:	d002      	beq.n	8018002 <cleanup_stdio+0x1e>
 8017ffc:	4620      	mov	r0, r4
 8017ffe:	f001 f84b 	bl	8019098 <_fflush_r>
 8018002:	68e1      	ldr	r1, [r4, #12]
 8018004:	4b06      	ldr	r3, [pc, #24]	@ (8018020 <cleanup_stdio+0x3c>)
 8018006:	4299      	cmp	r1, r3
 8018008:	d004      	beq.n	8018014 <cleanup_stdio+0x30>
 801800a:	4620      	mov	r0, r4
 801800c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018010:	f001 b842 	b.w	8019098 <_fflush_r>
 8018014:	bd10      	pop	{r4, pc}
 8018016:	bf00      	nop
 8018018:	2000b2fc 	.word	0x2000b2fc
 801801c:	2000b364 	.word	0x2000b364
 8018020:	2000b3cc 	.word	0x2000b3cc

08018024 <global_stdio_init.part.0>:
 8018024:	b510      	push	{r4, lr}
 8018026:	4b0b      	ldr	r3, [pc, #44]	@ (8018054 <global_stdio_init.part.0+0x30>)
 8018028:	4c0b      	ldr	r4, [pc, #44]	@ (8018058 <global_stdio_init.part.0+0x34>)
 801802a:	4a0c      	ldr	r2, [pc, #48]	@ (801805c <global_stdio_init.part.0+0x38>)
 801802c:	601a      	str	r2, [r3, #0]
 801802e:	4620      	mov	r0, r4
 8018030:	2200      	movs	r2, #0
 8018032:	2104      	movs	r1, #4
 8018034:	f7ff ff94 	bl	8017f60 <std>
 8018038:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801803c:	2201      	movs	r2, #1
 801803e:	2109      	movs	r1, #9
 8018040:	f7ff ff8e 	bl	8017f60 <std>
 8018044:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018048:	2202      	movs	r2, #2
 801804a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801804e:	2112      	movs	r1, #18
 8018050:	f7ff bf86 	b.w	8017f60 <std>
 8018054:	2000b434 	.word	0x2000b434
 8018058:	2000b2fc 	.word	0x2000b2fc
 801805c:	08017fcd 	.word	0x08017fcd

08018060 <__sfp_lock_acquire>:
 8018060:	4801      	ldr	r0, [pc, #4]	@ (8018068 <__sfp_lock_acquire+0x8>)
 8018062:	f000 bad8 	b.w	8018616 <__retarget_lock_acquire_recursive>
 8018066:	bf00      	nop
 8018068:	2000b43e 	.word	0x2000b43e

0801806c <__sfp_lock_release>:
 801806c:	4801      	ldr	r0, [pc, #4]	@ (8018074 <__sfp_lock_release+0x8>)
 801806e:	f000 bad3 	b.w	8018618 <__retarget_lock_release_recursive>
 8018072:	bf00      	nop
 8018074:	2000b43e 	.word	0x2000b43e

08018078 <__sinit>:
 8018078:	b510      	push	{r4, lr}
 801807a:	4604      	mov	r4, r0
 801807c:	f7ff fff0 	bl	8018060 <__sfp_lock_acquire>
 8018080:	6a23      	ldr	r3, [r4, #32]
 8018082:	b11b      	cbz	r3, 801808c <__sinit+0x14>
 8018084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018088:	f7ff bff0 	b.w	801806c <__sfp_lock_release>
 801808c:	4b04      	ldr	r3, [pc, #16]	@ (80180a0 <__sinit+0x28>)
 801808e:	6223      	str	r3, [r4, #32]
 8018090:	4b04      	ldr	r3, [pc, #16]	@ (80180a4 <__sinit+0x2c>)
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d1f5      	bne.n	8018084 <__sinit+0xc>
 8018098:	f7ff ffc4 	bl	8018024 <global_stdio_init.part.0>
 801809c:	e7f2      	b.n	8018084 <__sinit+0xc>
 801809e:	bf00      	nop
 80180a0:	08017fe5 	.word	0x08017fe5
 80180a4:	2000b434 	.word	0x2000b434

080180a8 <_fwalk_sglue>:
 80180a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180ac:	4607      	mov	r7, r0
 80180ae:	4688      	mov	r8, r1
 80180b0:	4614      	mov	r4, r2
 80180b2:	2600      	movs	r6, #0
 80180b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80180b8:	f1b9 0901 	subs.w	r9, r9, #1
 80180bc:	d505      	bpl.n	80180ca <_fwalk_sglue+0x22>
 80180be:	6824      	ldr	r4, [r4, #0]
 80180c0:	2c00      	cmp	r4, #0
 80180c2:	d1f7      	bne.n	80180b4 <_fwalk_sglue+0xc>
 80180c4:	4630      	mov	r0, r6
 80180c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180ca:	89ab      	ldrh	r3, [r5, #12]
 80180cc:	2b01      	cmp	r3, #1
 80180ce:	d907      	bls.n	80180e0 <_fwalk_sglue+0x38>
 80180d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80180d4:	3301      	adds	r3, #1
 80180d6:	d003      	beq.n	80180e0 <_fwalk_sglue+0x38>
 80180d8:	4629      	mov	r1, r5
 80180da:	4638      	mov	r0, r7
 80180dc:	47c0      	blx	r8
 80180de:	4306      	orrs	r6, r0
 80180e0:	3568      	adds	r5, #104	@ 0x68
 80180e2:	e7e9      	b.n	80180b8 <_fwalk_sglue+0x10>

080180e4 <_fwrite_r>:
 80180e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180e8:	9c08      	ldr	r4, [sp, #32]
 80180ea:	468a      	mov	sl, r1
 80180ec:	4690      	mov	r8, r2
 80180ee:	fb02 f903 	mul.w	r9, r2, r3
 80180f2:	4606      	mov	r6, r0
 80180f4:	b118      	cbz	r0, 80180fe <_fwrite_r+0x1a>
 80180f6:	6a03      	ldr	r3, [r0, #32]
 80180f8:	b90b      	cbnz	r3, 80180fe <_fwrite_r+0x1a>
 80180fa:	f7ff ffbd 	bl	8018078 <__sinit>
 80180fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018100:	07dd      	lsls	r5, r3, #31
 8018102:	d405      	bmi.n	8018110 <_fwrite_r+0x2c>
 8018104:	89a3      	ldrh	r3, [r4, #12]
 8018106:	0598      	lsls	r0, r3, #22
 8018108:	d402      	bmi.n	8018110 <_fwrite_r+0x2c>
 801810a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801810c:	f000 fa83 	bl	8018616 <__retarget_lock_acquire_recursive>
 8018110:	89a3      	ldrh	r3, [r4, #12]
 8018112:	0719      	lsls	r1, r3, #28
 8018114:	d516      	bpl.n	8018144 <_fwrite_r+0x60>
 8018116:	6923      	ldr	r3, [r4, #16]
 8018118:	b1a3      	cbz	r3, 8018144 <_fwrite_r+0x60>
 801811a:	2500      	movs	r5, #0
 801811c:	454d      	cmp	r5, r9
 801811e:	d01f      	beq.n	8018160 <_fwrite_r+0x7c>
 8018120:	68a7      	ldr	r7, [r4, #8]
 8018122:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8018126:	3f01      	subs	r7, #1
 8018128:	2f00      	cmp	r7, #0
 801812a:	60a7      	str	r7, [r4, #8]
 801812c:	da04      	bge.n	8018138 <_fwrite_r+0x54>
 801812e:	69a3      	ldr	r3, [r4, #24]
 8018130:	429f      	cmp	r7, r3
 8018132:	db0f      	blt.n	8018154 <_fwrite_r+0x70>
 8018134:	290a      	cmp	r1, #10
 8018136:	d00d      	beq.n	8018154 <_fwrite_r+0x70>
 8018138:	6823      	ldr	r3, [r4, #0]
 801813a:	1c5a      	adds	r2, r3, #1
 801813c:	6022      	str	r2, [r4, #0]
 801813e:	7019      	strb	r1, [r3, #0]
 8018140:	3501      	adds	r5, #1
 8018142:	e7eb      	b.n	801811c <_fwrite_r+0x38>
 8018144:	4621      	mov	r1, r4
 8018146:	4630      	mov	r0, r6
 8018148:	f000 f926 	bl	8018398 <__swsetup_r>
 801814c:	2800      	cmp	r0, #0
 801814e:	d0e4      	beq.n	801811a <_fwrite_r+0x36>
 8018150:	2500      	movs	r5, #0
 8018152:	e005      	b.n	8018160 <_fwrite_r+0x7c>
 8018154:	4622      	mov	r2, r4
 8018156:	4630      	mov	r0, r6
 8018158:	f000 f8e0 	bl	801831c <__swbuf_r>
 801815c:	3001      	adds	r0, #1
 801815e:	d1ef      	bne.n	8018140 <_fwrite_r+0x5c>
 8018160:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018162:	07da      	lsls	r2, r3, #31
 8018164:	d405      	bmi.n	8018172 <_fwrite_r+0x8e>
 8018166:	89a3      	ldrh	r3, [r4, #12]
 8018168:	059b      	lsls	r3, r3, #22
 801816a:	d402      	bmi.n	8018172 <_fwrite_r+0x8e>
 801816c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801816e:	f000 fa53 	bl	8018618 <__retarget_lock_release_recursive>
 8018172:	fbb5 f0f8 	udiv	r0, r5, r8
 8018176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801817c <fwrite>:
 801817c:	b507      	push	{r0, r1, r2, lr}
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	4613      	mov	r3, r2
 8018182:	460a      	mov	r2, r1
 8018184:	4601      	mov	r1, r0
 8018186:	4803      	ldr	r0, [pc, #12]	@ (8018194 <fwrite+0x18>)
 8018188:	6800      	ldr	r0, [r0, #0]
 801818a:	f7ff ffab 	bl	80180e4 <_fwrite_r>
 801818e:	b003      	add	sp, #12
 8018190:	f85d fb04 	ldr.w	pc, [sp], #4
 8018194:	2000061c 	.word	0x2000061c

08018198 <iprintf>:
 8018198:	b40f      	push	{r0, r1, r2, r3}
 801819a:	b507      	push	{r0, r1, r2, lr}
 801819c:	4906      	ldr	r1, [pc, #24]	@ (80181b8 <iprintf+0x20>)
 801819e:	ab04      	add	r3, sp, #16
 80181a0:	6808      	ldr	r0, [r1, #0]
 80181a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80181a6:	6881      	ldr	r1, [r0, #8]
 80181a8:	9301      	str	r3, [sp, #4]
 80181aa:	f000 fc4b 	bl	8018a44 <_vfiprintf_r>
 80181ae:	b003      	add	sp, #12
 80181b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80181b4:	b004      	add	sp, #16
 80181b6:	4770      	bx	lr
 80181b8:	2000061c 	.word	0x2000061c

080181bc <sniprintf>:
 80181bc:	b40c      	push	{r2, r3}
 80181be:	b530      	push	{r4, r5, lr}
 80181c0:	4b17      	ldr	r3, [pc, #92]	@ (8018220 <sniprintf+0x64>)
 80181c2:	1e0c      	subs	r4, r1, #0
 80181c4:	681d      	ldr	r5, [r3, #0]
 80181c6:	b09d      	sub	sp, #116	@ 0x74
 80181c8:	da08      	bge.n	80181dc <sniprintf+0x20>
 80181ca:	238b      	movs	r3, #139	@ 0x8b
 80181cc:	602b      	str	r3, [r5, #0]
 80181ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80181d2:	b01d      	add	sp, #116	@ 0x74
 80181d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181d8:	b002      	add	sp, #8
 80181da:	4770      	bx	lr
 80181dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80181e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80181e4:	bf14      	ite	ne
 80181e6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80181ea:	4623      	moveq	r3, r4
 80181ec:	9304      	str	r3, [sp, #16]
 80181ee:	9307      	str	r3, [sp, #28]
 80181f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80181f4:	9002      	str	r0, [sp, #8]
 80181f6:	9006      	str	r0, [sp, #24]
 80181f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80181fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80181fe:	ab21      	add	r3, sp, #132	@ 0x84
 8018200:	a902      	add	r1, sp, #8
 8018202:	4628      	mov	r0, r5
 8018204:	9301      	str	r3, [sp, #4]
 8018206:	f000 faf7 	bl	80187f8 <_svfiprintf_r>
 801820a:	1c43      	adds	r3, r0, #1
 801820c:	bfbc      	itt	lt
 801820e:	238b      	movlt	r3, #139	@ 0x8b
 8018210:	602b      	strlt	r3, [r5, #0]
 8018212:	2c00      	cmp	r4, #0
 8018214:	d0dd      	beq.n	80181d2 <sniprintf+0x16>
 8018216:	9b02      	ldr	r3, [sp, #8]
 8018218:	2200      	movs	r2, #0
 801821a:	701a      	strb	r2, [r3, #0]
 801821c:	e7d9      	b.n	80181d2 <sniprintf+0x16>
 801821e:	bf00      	nop
 8018220:	2000061c 	.word	0x2000061c

08018224 <__sread>:
 8018224:	b510      	push	{r4, lr}
 8018226:	460c      	mov	r4, r1
 8018228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801822c:	f000 f994 	bl	8018558 <_read_r>
 8018230:	2800      	cmp	r0, #0
 8018232:	bfab      	itete	ge
 8018234:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018236:	89a3      	ldrhlt	r3, [r4, #12]
 8018238:	181b      	addge	r3, r3, r0
 801823a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801823e:	bfac      	ite	ge
 8018240:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018242:	81a3      	strhlt	r3, [r4, #12]
 8018244:	bd10      	pop	{r4, pc}

08018246 <__swrite>:
 8018246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801824a:	461f      	mov	r7, r3
 801824c:	898b      	ldrh	r3, [r1, #12]
 801824e:	05db      	lsls	r3, r3, #23
 8018250:	4605      	mov	r5, r0
 8018252:	460c      	mov	r4, r1
 8018254:	4616      	mov	r6, r2
 8018256:	d505      	bpl.n	8018264 <__swrite+0x1e>
 8018258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801825c:	2302      	movs	r3, #2
 801825e:	2200      	movs	r2, #0
 8018260:	f000 f968 	bl	8018534 <_lseek_r>
 8018264:	89a3      	ldrh	r3, [r4, #12]
 8018266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801826a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801826e:	81a3      	strh	r3, [r4, #12]
 8018270:	4632      	mov	r2, r6
 8018272:	463b      	mov	r3, r7
 8018274:	4628      	mov	r0, r5
 8018276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801827a:	f000 b98f 	b.w	801859c <_write_r>

0801827e <__sseek>:
 801827e:	b510      	push	{r4, lr}
 8018280:	460c      	mov	r4, r1
 8018282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018286:	f000 f955 	bl	8018534 <_lseek_r>
 801828a:	1c43      	adds	r3, r0, #1
 801828c:	89a3      	ldrh	r3, [r4, #12]
 801828e:	bf15      	itete	ne
 8018290:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018292:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018296:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801829a:	81a3      	strheq	r3, [r4, #12]
 801829c:	bf18      	it	ne
 801829e:	81a3      	strhne	r3, [r4, #12]
 80182a0:	bd10      	pop	{r4, pc}

080182a2 <__sclose>:
 80182a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182a6:	f000 b935 	b.w	8018514 <_close_r>

080182aa <_vsniprintf_r>:
 80182aa:	b530      	push	{r4, r5, lr}
 80182ac:	4614      	mov	r4, r2
 80182ae:	2c00      	cmp	r4, #0
 80182b0:	b09b      	sub	sp, #108	@ 0x6c
 80182b2:	4605      	mov	r5, r0
 80182b4:	461a      	mov	r2, r3
 80182b6:	da05      	bge.n	80182c4 <_vsniprintf_r+0x1a>
 80182b8:	238b      	movs	r3, #139	@ 0x8b
 80182ba:	6003      	str	r3, [r0, #0]
 80182bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80182c0:	b01b      	add	sp, #108	@ 0x6c
 80182c2:	bd30      	pop	{r4, r5, pc}
 80182c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80182c8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80182cc:	bf14      	ite	ne
 80182ce:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80182d2:	4623      	moveq	r3, r4
 80182d4:	9302      	str	r3, [sp, #8]
 80182d6:	9305      	str	r3, [sp, #20]
 80182d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80182dc:	9100      	str	r1, [sp, #0]
 80182de:	9104      	str	r1, [sp, #16]
 80182e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80182e4:	4669      	mov	r1, sp
 80182e6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80182e8:	f000 fa86 	bl	80187f8 <_svfiprintf_r>
 80182ec:	1c43      	adds	r3, r0, #1
 80182ee:	bfbc      	itt	lt
 80182f0:	238b      	movlt	r3, #139	@ 0x8b
 80182f2:	602b      	strlt	r3, [r5, #0]
 80182f4:	2c00      	cmp	r4, #0
 80182f6:	d0e3      	beq.n	80182c0 <_vsniprintf_r+0x16>
 80182f8:	9b00      	ldr	r3, [sp, #0]
 80182fa:	2200      	movs	r2, #0
 80182fc:	701a      	strb	r2, [r3, #0]
 80182fe:	e7df      	b.n	80182c0 <_vsniprintf_r+0x16>

08018300 <vsniprintf>:
 8018300:	b507      	push	{r0, r1, r2, lr}
 8018302:	9300      	str	r3, [sp, #0]
 8018304:	4613      	mov	r3, r2
 8018306:	460a      	mov	r2, r1
 8018308:	4601      	mov	r1, r0
 801830a:	4803      	ldr	r0, [pc, #12]	@ (8018318 <vsniprintf+0x18>)
 801830c:	6800      	ldr	r0, [r0, #0]
 801830e:	f7ff ffcc 	bl	80182aa <_vsniprintf_r>
 8018312:	b003      	add	sp, #12
 8018314:	f85d fb04 	ldr.w	pc, [sp], #4
 8018318:	2000061c 	.word	0x2000061c

0801831c <__swbuf_r>:
 801831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801831e:	460e      	mov	r6, r1
 8018320:	4614      	mov	r4, r2
 8018322:	4605      	mov	r5, r0
 8018324:	b118      	cbz	r0, 801832e <__swbuf_r+0x12>
 8018326:	6a03      	ldr	r3, [r0, #32]
 8018328:	b90b      	cbnz	r3, 801832e <__swbuf_r+0x12>
 801832a:	f7ff fea5 	bl	8018078 <__sinit>
 801832e:	69a3      	ldr	r3, [r4, #24]
 8018330:	60a3      	str	r3, [r4, #8]
 8018332:	89a3      	ldrh	r3, [r4, #12]
 8018334:	071a      	lsls	r2, r3, #28
 8018336:	d501      	bpl.n	801833c <__swbuf_r+0x20>
 8018338:	6923      	ldr	r3, [r4, #16]
 801833a:	b943      	cbnz	r3, 801834e <__swbuf_r+0x32>
 801833c:	4621      	mov	r1, r4
 801833e:	4628      	mov	r0, r5
 8018340:	f000 f82a 	bl	8018398 <__swsetup_r>
 8018344:	b118      	cbz	r0, 801834e <__swbuf_r+0x32>
 8018346:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801834a:	4638      	mov	r0, r7
 801834c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801834e:	6823      	ldr	r3, [r4, #0]
 8018350:	6922      	ldr	r2, [r4, #16]
 8018352:	1a98      	subs	r0, r3, r2
 8018354:	6963      	ldr	r3, [r4, #20]
 8018356:	b2f6      	uxtb	r6, r6
 8018358:	4283      	cmp	r3, r0
 801835a:	4637      	mov	r7, r6
 801835c:	dc05      	bgt.n	801836a <__swbuf_r+0x4e>
 801835e:	4621      	mov	r1, r4
 8018360:	4628      	mov	r0, r5
 8018362:	f000 fe99 	bl	8019098 <_fflush_r>
 8018366:	2800      	cmp	r0, #0
 8018368:	d1ed      	bne.n	8018346 <__swbuf_r+0x2a>
 801836a:	68a3      	ldr	r3, [r4, #8]
 801836c:	3b01      	subs	r3, #1
 801836e:	60a3      	str	r3, [r4, #8]
 8018370:	6823      	ldr	r3, [r4, #0]
 8018372:	1c5a      	adds	r2, r3, #1
 8018374:	6022      	str	r2, [r4, #0]
 8018376:	701e      	strb	r6, [r3, #0]
 8018378:	6962      	ldr	r2, [r4, #20]
 801837a:	1c43      	adds	r3, r0, #1
 801837c:	429a      	cmp	r2, r3
 801837e:	d004      	beq.n	801838a <__swbuf_r+0x6e>
 8018380:	89a3      	ldrh	r3, [r4, #12]
 8018382:	07db      	lsls	r3, r3, #31
 8018384:	d5e1      	bpl.n	801834a <__swbuf_r+0x2e>
 8018386:	2e0a      	cmp	r6, #10
 8018388:	d1df      	bne.n	801834a <__swbuf_r+0x2e>
 801838a:	4621      	mov	r1, r4
 801838c:	4628      	mov	r0, r5
 801838e:	f000 fe83 	bl	8019098 <_fflush_r>
 8018392:	2800      	cmp	r0, #0
 8018394:	d0d9      	beq.n	801834a <__swbuf_r+0x2e>
 8018396:	e7d6      	b.n	8018346 <__swbuf_r+0x2a>

08018398 <__swsetup_r>:
 8018398:	b538      	push	{r3, r4, r5, lr}
 801839a:	4b29      	ldr	r3, [pc, #164]	@ (8018440 <__swsetup_r+0xa8>)
 801839c:	4605      	mov	r5, r0
 801839e:	6818      	ldr	r0, [r3, #0]
 80183a0:	460c      	mov	r4, r1
 80183a2:	b118      	cbz	r0, 80183ac <__swsetup_r+0x14>
 80183a4:	6a03      	ldr	r3, [r0, #32]
 80183a6:	b90b      	cbnz	r3, 80183ac <__swsetup_r+0x14>
 80183a8:	f7ff fe66 	bl	8018078 <__sinit>
 80183ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183b0:	0719      	lsls	r1, r3, #28
 80183b2:	d422      	bmi.n	80183fa <__swsetup_r+0x62>
 80183b4:	06da      	lsls	r2, r3, #27
 80183b6:	d407      	bmi.n	80183c8 <__swsetup_r+0x30>
 80183b8:	2209      	movs	r2, #9
 80183ba:	602a      	str	r2, [r5, #0]
 80183bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80183c0:	81a3      	strh	r3, [r4, #12]
 80183c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80183c6:	e033      	b.n	8018430 <__swsetup_r+0x98>
 80183c8:	0758      	lsls	r0, r3, #29
 80183ca:	d512      	bpl.n	80183f2 <__swsetup_r+0x5a>
 80183cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80183ce:	b141      	cbz	r1, 80183e2 <__swsetup_r+0x4a>
 80183d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80183d4:	4299      	cmp	r1, r3
 80183d6:	d002      	beq.n	80183de <__swsetup_r+0x46>
 80183d8:	4628      	mov	r0, r5
 80183da:	f000 f95f 	bl	801869c <_free_r>
 80183de:	2300      	movs	r3, #0
 80183e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80183e2:	89a3      	ldrh	r3, [r4, #12]
 80183e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80183e8:	81a3      	strh	r3, [r4, #12]
 80183ea:	2300      	movs	r3, #0
 80183ec:	6063      	str	r3, [r4, #4]
 80183ee:	6923      	ldr	r3, [r4, #16]
 80183f0:	6023      	str	r3, [r4, #0]
 80183f2:	89a3      	ldrh	r3, [r4, #12]
 80183f4:	f043 0308 	orr.w	r3, r3, #8
 80183f8:	81a3      	strh	r3, [r4, #12]
 80183fa:	6923      	ldr	r3, [r4, #16]
 80183fc:	b94b      	cbnz	r3, 8018412 <__swsetup_r+0x7a>
 80183fe:	89a3      	ldrh	r3, [r4, #12]
 8018400:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018408:	d003      	beq.n	8018412 <__swsetup_r+0x7a>
 801840a:	4621      	mov	r1, r4
 801840c:	4628      	mov	r0, r5
 801840e:	f000 fea3 	bl	8019158 <__smakebuf_r>
 8018412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018416:	f013 0201 	ands.w	r2, r3, #1
 801841a:	d00a      	beq.n	8018432 <__swsetup_r+0x9a>
 801841c:	2200      	movs	r2, #0
 801841e:	60a2      	str	r2, [r4, #8]
 8018420:	6962      	ldr	r2, [r4, #20]
 8018422:	4252      	negs	r2, r2
 8018424:	61a2      	str	r2, [r4, #24]
 8018426:	6922      	ldr	r2, [r4, #16]
 8018428:	b942      	cbnz	r2, 801843c <__swsetup_r+0xa4>
 801842a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801842e:	d1c5      	bne.n	80183bc <__swsetup_r+0x24>
 8018430:	bd38      	pop	{r3, r4, r5, pc}
 8018432:	0799      	lsls	r1, r3, #30
 8018434:	bf58      	it	pl
 8018436:	6962      	ldrpl	r2, [r4, #20]
 8018438:	60a2      	str	r2, [r4, #8]
 801843a:	e7f4      	b.n	8018426 <__swsetup_r+0x8e>
 801843c:	2000      	movs	r0, #0
 801843e:	e7f7      	b.n	8018430 <__swsetup_r+0x98>
 8018440:	2000061c 	.word	0x2000061c

08018444 <memcmp>:
 8018444:	b510      	push	{r4, lr}
 8018446:	3901      	subs	r1, #1
 8018448:	4402      	add	r2, r0
 801844a:	4290      	cmp	r0, r2
 801844c:	d101      	bne.n	8018452 <memcmp+0xe>
 801844e:	2000      	movs	r0, #0
 8018450:	e005      	b.n	801845e <memcmp+0x1a>
 8018452:	7803      	ldrb	r3, [r0, #0]
 8018454:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018458:	42a3      	cmp	r3, r4
 801845a:	d001      	beq.n	8018460 <memcmp+0x1c>
 801845c:	1b18      	subs	r0, r3, r4
 801845e:	bd10      	pop	{r4, pc}
 8018460:	3001      	adds	r0, #1
 8018462:	e7f2      	b.n	801844a <memcmp+0x6>

08018464 <memmove>:
 8018464:	4288      	cmp	r0, r1
 8018466:	b510      	push	{r4, lr}
 8018468:	eb01 0402 	add.w	r4, r1, r2
 801846c:	d902      	bls.n	8018474 <memmove+0x10>
 801846e:	4284      	cmp	r4, r0
 8018470:	4623      	mov	r3, r4
 8018472:	d807      	bhi.n	8018484 <memmove+0x20>
 8018474:	1e43      	subs	r3, r0, #1
 8018476:	42a1      	cmp	r1, r4
 8018478:	d008      	beq.n	801848c <memmove+0x28>
 801847a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801847e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018482:	e7f8      	b.n	8018476 <memmove+0x12>
 8018484:	4402      	add	r2, r0
 8018486:	4601      	mov	r1, r0
 8018488:	428a      	cmp	r2, r1
 801848a:	d100      	bne.n	801848e <memmove+0x2a>
 801848c:	bd10      	pop	{r4, pc}
 801848e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018496:	e7f7      	b.n	8018488 <memmove+0x24>

08018498 <memset>:
 8018498:	4402      	add	r2, r0
 801849a:	4603      	mov	r3, r0
 801849c:	4293      	cmp	r3, r2
 801849e:	d100      	bne.n	80184a2 <memset+0xa>
 80184a0:	4770      	bx	lr
 80184a2:	f803 1b01 	strb.w	r1, [r3], #1
 80184a6:	e7f9      	b.n	801849c <memset+0x4>

080184a8 <strchr>:
 80184a8:	b2c9      	uxtb	r1, r1
 80184aa:	4603      	mov	r3, r0
 80184ac:	4618      	mov	r0, r3
 80184ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184b2:	b112      	cbz	r2, 80184ba <strchr+0x12>
 80184b4:	428a      	cmp	r2, r1
 80184b6:	d1f9      	bne.n	80184ac <strchr+0x4>
 80184b8:	4770      	bx	lr
 80184ba:	2900      	cmp	r1, #0
 80184bc:	bf18      	it	ne
 80184be:	2000      	movne	r0, #0
 80184c0:	4770      	bx	lr

080184c2 <strncmp>:
 80184c2:	b510      	push	{r4, lr}
 80184c4:	b16a      	cbz	r2, 80184e2 <strncmp+0x20>
 80184c6:	3901      	subs	r1, #1
 80184c8:	1884      	adds	r4, r0, r2
 80184ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80184ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80184d2:	429a      	cmp	r2, r3
 80184d4:	d103      	bne.n	80184de <strncmp+0x1c>
 80184d6:	42a0      	cmp	r0, r4
 80184d8:	d001      	beq.n	80184de <strncmp+0x1c>
 80184da:	2a00      	cmp	r2, #0
 80184dc:	d1f5      	bne.n	80184ca <strncmp+0x8>
 80184de:	1ad0      	subs	r0, r2, r3
 80184e0:	bd10      	pop	{r4, pc}
 80184e2:	4610      	mov	r0, r2
 80184e4:	e7fc      	b.n	80184e0 <strncmp+0x1e>

080184e6 <strstr>:
 80184e6:	780a      	ldrb	r2, [r1, #0]
 80184e8:	b570      	push	{r4, r5, r6, lr}
 80184ea:	b96a      	cbnz	r2, 8018508 <strstr+0x22>
 80184ec:	bd70      	pop	{r4, r5, r6, pc}
 80184ee:	429a      	cmp	r2, r3
 80184f0:	d109      	bne.n	8018506 <strstr+0x20>
 80184f2:	460c      	mov	r4, r1
 80184f4:	4605      	mov	r5, r0
 80184f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d0f6      	beq.n	80184ec <strstr+0x6>
 80184fe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018502:	429e      	cmp	r6, r3
 8018504:	d0f7      	beq.n	80184f6 <strstr+0x10>
 8018506:	3001      	adds	r0, #1
 8018508:	7803      	ldrb	r3, [r0, #0]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d1ef      	bne.n	80184ee <strstr+0x8>
 801850e:	4618      	mov	r0, r3
 8018510:	e7ec      	b.n	80184ec <strstr+0x6>
	...

08018514 <_close_r>:
 8018514:	b538      	push	{r3, r4, r5, lr}
 8018516:	4d06      	ldr	r5, [pc, #24]	@ (8018530 <_close_r+0x1c>)
 8018518:	2300      	movs	r3, #0
 801851a:	4604      	mov	r4, r0
 801851c:	4608      	mov	r0, r1
 801851e:	602b      	str	r3, [r5, #0]
 8018520:	f7e9 fe08 	bl	8002134 <_close>
 8018524:	1c43      	adds	r3, r0, #1
 8018526:	d102      	bne.n	801852e <_close_r+0x1a>
 8018528:	682b      	ldr	r3, [r5, #0]
 801852a:	b103      	cbz	r3, 801852e <_close_r+0x1a>
 801852c:	6023      	str	r3, [r4, #0]
 801852e:	bd38      	pop	{r3, r4, r5, pc}
 8018530:	2000b438 	.word	0x2000b438

08018534 <_lseek_r>:
 8018534:	b538      	push	{r3, r4, r5, lr}
 8018536:	4d07      	ldr	r5, [pc, #28]	@ (8018554 <_lseek_r+0x20>)
 8018538:	4604      	mov	r4, r0
 801853a:	4608      	mov	r0, r1
 801853c:	4611      	mov	r1, r2
 801853e:	2200      	movs	r2, #0
 8018540:	602a      	str	r2, [r5, #0]
 8018542:	461a      	mov	r2, r3
 8018544:	f7e9 fe1d 	bl	8002182 <_lseek>
 8018548:	1c43      	adds	r3, r0, #1
 801854a:	d102      	bne.n	8018552 <_lseek_r+0x1e>
 801854c:	682b      	ldr	r3, [r5, #0]
 801854e:	b103      	cbz	r3, 8018552 <_lseek_r+0x1e>
 8018550:	6023      	str	r3, [r4, #0]
 8018552:	bd38      	pop	{r3, r4, r5, pc}
 8018554:	2000b438 	.word	0x2000b438

08018558 <_read_r>:
 8018558:	b538      	push	{r3, r4, r5, lr}
 801855a:	4d07      	ldr	r5, [pc, #28]	@ (8018578 <_read_r+0x20>)
 801855c:	4604      	mov	r4, r0
 801855e:	4608      	mov	r0, r1
 8018560:	4611      	mov	r1, r2
 8018562:	2200      	movs	r2, #0
 8018564:	602a      	str	r2, [r5, #0]
 8018566:	461a      	mov	r2, r3
 8018568:	f7e9 fdab 	bl	80020c2 <_read>
 801856c:	1c43      	adds	r3, r0, #1
 801856e:	d102      	bne.n	8018576 <_read_r+0x1e>
 8018570:	682b      	ldr	r3, [r5, #0]
 8018572:	b103      	cbz	r3, 8018576 <_read_r+0x1e>
 8018574:	6023      	str	r3, [r4, #0]
 8018576:	bd38      	pop	{r3, r4, r5, pc}
 8018578:	2000b438 	.word	0x2000b438

0801857c <_sbrk_r>:
 801857c:	b538      	push	{r3, r4, r5, lr}
 801857e:	4d06      	ldr	r5, [pc, #24]	@ (8018598 <_sbrk_r+0x1c>)
 8018580:	2300      	movs	r3, #0
 8018582:	4604      	mov	r4, r0
 8018584:	4608      	mov	r0, r1
 8018586:	602b      	str	r3, [r5, #0]
 8018588:	f7e9 fe08 	bl	800219c <_sbrk>
 801858c:	1c43      	adds	r3, r0, #1
 801858e:	d102      	bne.n	8018596 <_sbrk_r+0x1a>
 8018590:	682b      	ldr	r3, [r5, #0]
 8018592:	b103      	cbz	r3, 8018596 <_sbrk_r+0x1a>
 8018594:	6023      	str	r3, [r4, #0]
 8018596:	bd38      	pop	{r3, r4, r5, pc}
 8018598:	2000b438 	.word	0x2000b438

0801859c <_write_r>:
 801859c:	b538      	push	{r3, r4, r5, lr}
 801859e:	4d07      	ldr	r5, [pc, #28]	@ (80185bc <_write_r+0x20>)
 80185a0:	4604      	mov	r4, r0
 80185a2:	4608      	mov	r0, r1
 80185a4:	4611      	mov	r1, r2
 80185a6:	2200      	movs	r2, #0
 80185a8:	602a      	str	r2, [r5, #0]
 80185aa:	461a      	mov	r2, r3
 80185ac:	f7e9 fda6 	bl	80020fc <_write>
 80185b0:	1c43      	adds	r3, r0, #1
 80185b2:	d102      	bne.n	80185ba <_write_r+0x1e>
 80185b4:	682b      	ldr	r3, [r5, #0]
 80185b6:	b103      	cbz	r3, 80185ba <_write_r+0x1e>
 80185b8:	6023      	str	r3, [r4, #0]
 80185ba:	bd38      	pop	{r3, r4, r5, pc}
 80185bc:	2000b438 	.word	0x2000b438

080185c0 <__errno>:
 80185c0:	4b01      	ldr	r3, [pc, #4]	@ (80185c8 <__errno+0x8>)
 80185c2:	6818      	ldr	r0, [r3, #0]
 80185c4:	4770      	bx	lr
 80185c6:	bf00      	nop
 80185c8:	2000061c 	.word	0x2000061c

080185cc <__libc_init_array>:
 80185cc:	b570      	push	{r4, r5, r6, lr}
 80185ce:	4d0d      	ldr	r5, [pc, #52]	@ (8018604 <__libc_init_array+0x38>)
 80185d0:	4c0d      	ldr	r4, [pc, #52]	@ (8018608 <__libc_init_array+0x3c>)
 80185d2:	1b64      	subs	r4, r4, r5
 80185d4:	10a4      	asrs	r4, r4, #2
 80185d6:	2600      	movs	r6, #0
 80185d8:	42a6      	cmp	r6, r4
 80185da:	d109      	bne.n	80185f0 <__libc_init_array+0x24>
 80185dc:	4d0b      	ldr	r5, [pc, #44]	@ (801860c <__libc_init_array+0x40>)
 80185de:	4c0c      	ldr	r4, [pc, #48]	@ (8018610 <__libc_init_array+0x44>)
 80185e0:	f001 f9d4 	bl	801998c <_init>
 80185e4:	1b64      	subs	r4, r4, r5
 80185e6:	10a4      	asrs	r4, r4, #2
 80185e8:	2600      	movs	r6, #0
 80185ea:	42a6      	cmp	r6, r4
 80185ec:	d105      	bne.n	80185fa <__libc_init_array+0x2e>
 80185ee:	bd70      	pop	{r4, r5, r6, pc}
 80185f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80185f4:	4798      	blx	r3
 80185f6:	3601      	adds	r6, #1
 80185f8:	e7ee      	b.n	80185d8 <__libc_init_array+0xc>
 80185fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80185fe:	4798      	blx	r3
 8018600:	3601      	adds	r6, #1
 8018602:	e7f2      	b.n	80185ea <__libc_init_array+0x1e>
 8018604:	0801aa50 	.word	0x0801aa50
 8018608:	0801aa50 	.word	0x0801aa50
 801860c:	0801aa50 	.word	0x0801aa50
 8018610:	0801aa58 	.word	0x0801aa58

08018614 <__retarget_lock_init_recursive>:
 8018614:	4770      	bx	lr

08018616 <__retarget_lock_acquire_recursive>:
 8018616:	4770      	bx	lr

08018618 <__retarget_lock_release_recursive>:
 8018618:	4770      	bx	lr

0801861a <strcpy>:
 801861a:	4603      	mov	r3, r0
 801861c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018620:	f803 2b01 	strb.w	r2, [r3], #1
 8018624:	2a00      	cmp	r2, #0
 8018626:	d1f9      	bne.n	801861c <strcpy+0x2>
 8018628:	4770      	bx	lr

0801862a <memcpy>:
 801862a:	440a      	add	r2, r1
 801862c:	4291      	cmp	r1, r2
 801862e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018632:	d100      	bne.n	8018636 <memcpy+0xc>
 8018634:	4770      	bx	lr
 8018636:	b510      	push	{r4, lr}
 8018638:	f811 4b01 	ldrb.w	r4, [r1], #1
 801863c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018640:	4291      	cmp	r1, r2
 8018642:	d1f9      	bne.n	8018638 <memcpy+0xe>
 8018644:	bd10      	pop	{r4, pc}
	...

08018648 <__assert_func>:
 8018648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801864a:	4614      	mov	r4, r2
 801864c:	461a      	mov	r2, r3
 801864e:	4b09      	ldr	r3, [pc, #36]	@ (8018674 <__assert_func+0x2c>)
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	4605      	mov	r5, r0
 8018654:	68d8      	ldr	r0, [r3, #12]
 8018656:	b954      	cbnz	r4, 801866e <__assert_func+0x26>
 8018658:	4b07      	ldr	r3, [pc, #28]	@ (8018678 <__assert_func+0x30>)
 801865a:	461c      	mov	r4, r3
 801865c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018660:	9100      	str	r1, [sp, #0]
 8018662:	462b      	mov	r3, r5
 8018664:	4905      	ldr	r1, [pc, #20]	@ (801867c <__assert_func+0x34>)
 8018666:	f000 fd3f 	bl	80190e8 <fiprintf>
 801866a:	f000 fdd3 	bl	8019214 <abort>
 801866e:	4b04      	ldr	r3, [pc, #16]	@ (8018680 <__assert_func+0x38>)
 8018670:	e7f4      	b.n	801865c <__assert_func+0x14>
 8018672:	bf00      	nop
 8018674:	2000061c 	.word	0x2000061c
 8018678:	0801a99d 	.word	0x0801a99d
 801867c:	0801a96f 	.word	0x0801a96f
 8018680:	0801a962 	.word	0x0801a962

08018684 <__env_lock>:
 8018684:	4801      	ldr	r0, [pc, #4]	@ (801868c <__env_lock+0x8>)
 8018686:	f7ff bfc6 	b.w	8018616 <__retarget_lock_acquire_recursive>
 801868a:	bf00      	nop
 801868c:	2000b43c 	.word	0x2000b43c

08018690 <__env_unlock>:
 8018690:	4801      	ldr	r0, [pc, #4]	@ (8018698 <__env_unlock+0x8>)
 8018692:	f7ff bfc1 	b.w	8018618 <__retarget_lock_release_recursive>
 8018696:	bf00      	nop
 8018698:	2000b43c 	.word	0x2000b43c

0801869c <_free_r>:
 801869c:	b538      	push	{r3, r4, r5, lr}
 801869e:	4605      	mov	r5, r0
 80186a0:	2900      	cmp	r1, #0
 80186a2:	d041      	beq.n	8018728 <_free_r+0x8c>
 80186a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80186a8:	1f0c      	subs	r4, r1, #4
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	bfb8      	it	lt
 80186ae:	18e4      	addlt	r4, r4, r3
 80186b0:	f7ff fb30 	bl	8017d14 <__malloc_lock>
 80186b4:	4a1d      	ldr	r2, [pc, #116]	@ (801872c <_free_r+0x90>)
 80186b6:	6813      	ldr	r3, [r2, #0]
 80186b8:	b933      	cbnz	r3, 80186c8 <_free_r+0x2c>
 80186ba:	6063      	str	r3, [r4, #4]
 80186bc:	6014      	str	r4, [r2, #0]
 80186be:	4628      	mov	r0, r5
 80186c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186c4:	f7ff bb2c 	b.w	8017d20 <__malloc_unlock>
 80186c8:	42a3      	cmp	r3, r4
 80186ca:	d908      	bls.n	80186de <_free_r+0x42>
 80186cc:	6820      	ldr	r0, [r4, #0]
 80186ce:	1821      	adds	r1, r4, r0
 80186d0:	428b      	cmp	r3, r1
 80186d2:	bf01      	itttt	eq
 80186d4:	6819      	ldreq	r1, [r3, #0]
 80186d6:	685b      	ldreq	r3, [r3, #4]
 80186d8:	1809      	addeq	r1, r1, r0
 80186da:	6021      	streq	r1, [r4, #0]
 80186dc:	e7ed      	b.n	80186ba <_free_r+0x1e>
 80186de:	461a      	mov	r2, r3
 80186e0:	685b      	ldr	r3, [r3, #4]
 80186e2:	b10b      	cbz	r3, 80186e8 <_free_r+0x4c>
 80186e4:	42a3      	cmp	r3, r4
 80186e6:	d9fa      	bls.n	80186de <_free_r+0x42>
 80186e8:	6811      	ldr	r1, [r2, #0]
 80186ea:	1850      	adds	r0, r2, r1
 80186ec:	42a0      	cmp	r0, r4
 80186ee:	d10b      	bne.n	8018708 <_free_r+0x6c>
 80186f0:	6820      	ldr	r0, [r4, #0]
 80186f2:	4401      	add	r1, r0
 80186f4:	1850      	adds	r0, r2, r1
 80186f6:	4283      	cmp	r3, r0
 80186f8:	6011      	str	r1, [r2, #0]
 80186fa:	d1e0      	bne.n	80186be <_free_r+0x22>
 80186fc:	6818      	ldr	r0, [r3, #0]
 80186fe:	685b      	ldr	r3, [r3, #4]
 8018700:	6053      	str	r3, [r2, #4]
 8018702:	4408      	add	r0, r1
 8018704:	6010      	str	r0, [r2, #0]
 8018706:	e7da      	b.n	80186be <_free_r+0x22>
 8018708:	d902      	bls.n	8018710 <_free_r+0x74>
 801870a:	230c      	movs	r3, #12
 801870c:	602b      	str	r3, [r5, #0]
 801870e:	e7d6      	b.n	80186be <_free_r+0x22>
 8018710:	6820      	ldr	r0, [r4, #0]
 8018712:	1821      	adds	r1, r4, r0
 8018714:	428b      	cmp	r3, r1
 8018716:	bf04      	itt	eq
 8018718:	6819      	ldreq	r1, [r3, #0]
 801871a:	685b      	ldreq	r3, [r3, #4]
 801871c:	6063      	str	r3, [r4, #4]
 801871e:	bf04      	itt	eq
 8018720:	1809      	addeq	r1, r1, r0
 8018722:	6021      	streq	r1, [r4, #0]
 8018724:	6054      	str	r4, [r2, #4]
 8018726:	e7ca      	b.n	80186be <_free_r+0x22>
 8018728:	bd38      	pop	{r3, r4, r5, pc}
 801872a:	bf00      	nop
 801872c:	2000b2f8 	.word	0x2000b2f8

08018730 <_malloc_usable_size_r>:
 8018730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018734:	1f18      	subs	r0, r3, #4
 8018736:	2b00      	cmp	r3, #0
 8018738:	bfbc      	itt	lt
 801873a:	580b      	ldrlt	r3, [r1, r0]
 801873c:	18c0      	addlt	r0, r0, r3
 801873e:	4770      	bx	lr

08018740 <__ssputs_r>:
 8018740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018744:	688e      	ldr	r6, [r1, #8]
 8018746:	461f      	mov	r7, r3
 8018748:	42be      	cmp	r6, r7
 801874a:	680b      	ldr	r3, [r1, #0]
 801874c:	4682      	mov	sl, r0
 801874e:	460c      	mov	r4, r1
 8018750:	4690      	mov	r8, r2
 8018752:	d82d      	bhi.n	80187b0 <__ssputs_r+0x70>
 8018754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018758:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801875c:	d026      	beq.n	80187ac <__ssputs_r+0x6c>
 801875e:	6965      	ldr	r5, [r4, #20]
 8018760:	6909      	ldr	r1, [r1, #16]
 8018762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018766:	eba3 0901 	sub.w	r9, r3, r1
 801876a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801876e:	1c7b      	adds	r3, r7, #1
 8018770:	444b      	add	r3, r9
 8018772:	106d      	asrs	r5, r5, #1
 8018774:	429d      	cmp	r5, r3
 8018776:	bf38      	it	cc
 8018778:	461d      	movcc	r5, r3
 801877a:	0553      	lsls	r3, r2, #21
 801877c:	d527      	bpl.n	80187ce <__ssputs_r+0x8e>
 801877e:	4629      	mov	r1, r5
 8018780:	f7ff fa48 	bl	8017c14 <_malloc_r>
 8018784:	4606      	mov	r6, r0
 8018786:	b360      	cbz	r0, 80187e2 <__ssputs_r+0xa2>
 8018788:	6921      	ldr	r1, [r4, #16]
 801878a:	464a      	mov	r2, r9
 801878c:	f7ff ff4d 	bl	801862a <memcpy>
 8018790:	89a3      	ldrh	r3, [r4, #12]
 8018792:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801879a:	81a3      	strh	r3, [r4, #12]
 801879c:	6126      	str	r6, [r4, #16]
 801879e:	6165      	str	r5, [r4, #20]
 80187a0:	444e      	add	r6, r9
 80187a2:	eba5 0509 	sub.w	r5, r5, r9
 80187a6:	6026      	str	r6, [r4, #0]
 80187a8:	60a5      	str	r5, [r4, #8]
 80187aa:	463e      	mov	r6, r7
 80187ac:	42be      	cmp	r6, r7
 80187ae:	d900      	bls.n	80187b2 <__ssputs_r+0x72>
 80187b0:	463e      	mov	r6, r7
 80187b2:	6820      	ldr	r0, [r4, #0]
 80187b4:	4632      	mov	r2, r6
 80187b6:	4641      	mov	r1, r8
 80187b8:	f7ff fe54 	bl	8018464 <memmove>
 80187bc:	68a3      	ldr	r3, [r4, #8]
 80187be:	1b9b      	subs	r3, r3, r6
 80187c0:	60a3      	str	r3, [r4, #8]
 80187c2:	6823      	ldr	r3, [r4, #0]
 80187c4:	4433      	add	r3, r6
 80187c6:	6023      	str	r3, [r4, #0]
 80187c8:	2000      	movs	r0, #0
 80187ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187ce:	462a      	mov	r2, r5
 80187d0:	f7ff fb20 	bl	8017e14 <_realloc_r>
 80187d4:	4606      	mov	r6, r0
 80187d6:	2800      	cmp	r0, #0
 80187d8:	d1e0      	bne.n	801879c <__ssputs_r+0x5c>
 80187da:	6921      	ldr	r1, [r4, #16]
 80187dc:	4650      	mov	r0, sl
 80187de:	f7ff ff5d 	bl	801869c <_free_r>
 80187e2:	230c      	movs	r3, #12
 80187e4:	f8ca 3000 	str.w	r3, [sl]
 80187e8:	89a3      	ldrh	r3, [r4, #12]
 80187ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80187ee:	81a3      	strh	r3, [r4, #12]
 80187f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80187f4:	e7e9      	b.n	80187ca <__ssputs_r+0x8a>
	...

080187f8 <_svfiprintf_r>:
 80187f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187fc:	4698      	mov	r8, r3
 80187fe:	898b      	ldrh	r3, [r1, #12]
 8018800:	061b      	lsls	r3, r3, #24
 8018802:	b09d      	sub	sp, #116	@ 0x74
 8018804:	4607      	mov	r7, r0
 8018806:	460d      	mov	r5, r1
 8018808:	4614      	mov	r4, r2
 801880a:	d510      	bpl.n	801882e <_svfiprintf_r+0x36>
 801880c:	690b      	ldr	r3, [r1, #16]
 801880e:	b973      	cbnz	r3, 801882e <_svfiprintf_r+0x36>
 8018810:	2140      	movs	r1, #64	@ 0x40
 8018812:	f7ff f9ff 	bl	8017c14 <_malloc_r>
 8018816:	6028      	str	r0, [r5, #0]
 8018818:	6128      	str	r0, [r5, #16]
 801881a:	b930      	cbnz	r0, 801882a <_svfiprintf_r+0x32>
 801881c:	230c      	movs	r3, #12
 801881e:	603b      	str	r3, [r7, #0]
 8018820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018824:	b01d      	add	sp, #116	@ 0x74
 8018826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801882a:	2340      	movs	r3, #64	@ 0x40
 801882c:	616b      	str	r3, [r5, #20]
 801882e:	2300      	movs	r3, #0
 8018830:	9309      	str	r3, [sp, #36]	@ 0x24
 8018832:	2320      	movs	r3, #32
 8018834:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018838:	f8cd 800c 	str.w	r8, [sp, #12]
 801883c:	2330      	movs	r3, #48	@ 0x30
 801883e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80189dc <_svfiprintf_r+0x1e4>
 8018842:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018846:	f04f 0901 	mov.w	r9, #1
 801884a:	4623      	mov	r3, r4
 801884c:	469a      	mov	sl, r3
 801884e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018852:	b10a      	cbz	r2, 8018858 <_svfiprintf_r+0x60>
 8018854:	2a25      	cmp	r2, #37	@ 0x25
 8018856:	d1f9      	bne.n	801884c <_svfiprintf_r+0x54>
 8018858:	ebba 0b04 	subs.w	fp, sl, r4
 801885c:	d00b      	beq.n	8018876 <_svfiprintf_r+0x7e>
 801885e:	465b      	mov	r3, fp
 8018860:	4622      	mov	r2, r4
 8018862:	4629      	mov	r1, r5
 8018864:	4638      	mov	r0, r7
 8018866:	f7ff ff6b 	bl	8018740 <__ssputs_r>
 801886a:	3001      	adds	r0, #1
 801886c:	f000 80a7 	beq.w	80189be <_svfiprintf_r+0x1c6>
 8018870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018872:	445a      	add	r2, fp
 8018874:	9209      	str	r2, [sp, #36]	@ 0x24
 8018876:	f89a 3000 	ldrb.w	r3, [sl]
 801887a:	2b00      	cmp	r3, #0
 801887c:	f000 809f 	beq.w	80189be <_svfiprintf_r+0x1c6>
 8018880:	2300      	movs	r3, #0
 8018882:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801888a:	f10a 0a01 	add.w	sl, sl, #1
 801888e:	9304      	str	r3, [sp, #16]
 8018890:	9307      	str	r3, [sp, #28]
 8018892:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018896:	931a      	str	r3, [sp, #104]	@ 0x68
 8018898:	4654      	mov	r4, sl
 801889a:	2205      	movs	r2, #5
 801889c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188a0:	484e      	ldr	r0, [pc, #312]	@ (80189dc <_svfiprintf_r+0x1e4>)
 80188a2:	f7e7 fcd5 	bl	8000250 <memchr>
 80188a6:	9a04      	ldr	r2, [sp, #16]
 80188a8:	b9d8      	cbnz	r0, 80188e2 <_svfiprintf_r+0xea>
 80188aa:	06d0      	lsls	r0, r2, #27
 80188ac:	bf44      	itt	mi
 80188ae:	2320      	movmi	r3, #32
 80188b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80188b4:	0711      	lsls	r1, r2, #28
 80188b6:	bf44      	itt	mi
 80188b8:	232b      	movmi	r3, #43	@ 0x2b
 80188ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80188be:	f89a 3000 	ldrb.w	r3, [sl]
 80188c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80188c4:	d015      	beq.n	80188f2 <_svfiprintf_r+0xfa>
 80188c6:	9a07      	ldr	r2, [sp, #28]
 80188c8:	4654      	mov	r4, sl
 80188ca:	2000      	movs	r0, #0
 80188cc:	f04f 0c0a 	mov.w	ip, #10
 80188d0:	4621      	mov	r1, r4
 80188d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80188d6:	3b30      	subs	r3, #48	@ 0x30
 80188d8:	2b09      	cmp	r3, #9
 80188da:	d94b      	bls.n	8018974 <_svfiprintf_r+0x17c>
 80188dc:	b1b0      	cbz	r0, 801890c <_svfiprintf_r+0x114>
 80188de:	9207      	str	r2, [sp, #28]
 80188e0:	e014      	b.n	801890c <_svfiprintf_r+0x114>
 80188e2:	eba0 0308 	sub.w	r3, r0, r8
 80188e6:	fa09 f303 	lsl.w	r3, r9, r3
 80188ea:	4313      	orrs	r3, r2
 80188ec:	9304      	str	r3, [sp, #16]
 80188ee:	46a2      	mov	sl, r4
 80188f0:	e7d2      	b.n	8018898 <_svfiprintf_r+0xa0>
 80188f2:	9b03      	ldr	r3, [sp, #12]
 80188f4:	1d19      	adds	r1, r3, #4
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	9103      	str	r1, [sp, #12]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	bfbb      	ittet	lt
 80188fe:	425b      	neglt	r3, r3
 8018900:	f042 0202 	orrlt.w	r2, r2, #2
 8018904:	9307      	strge	r3, [sp, #28]
 8018906:	9307      	strlt	r3, [sp, #28]
 8018908:	bfb8      	it	lt
 801890a:	9204      	strlt	r2, [sp, #16]
 801890c:	7823      	ldrb	r3, [r4, #0]
 801890e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018910:	d10a      	bne.n	8018928 <_svfiprintf_r+0x130>
 8018912:	7863      	ldrb	r3, [r4, #1]
 8018914:	2b2a      	cmp	r3, #42	@ 0x2a
 8018916:	d132      	bne.n	801897e <_svfiprintf_r+0x186>
 8018918:	9b03      	ldr	r3, [sp, #12]
 801891a:	1d1a      	adds	r2, r3, #4
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	9203      	str	r2, [sp, #12]
 8018920:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018924:	3402      	adds	r4, #2
 8018926:	9305      	str	r3, [sp, #20]
 8018928:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80189ec <_svfiprintf_r+0x1f4>
 801892c:	7821      	ldrb	r1, [r4, #0]
 801892e:	2203      	movs	r2, #3
 8018930:	4650      	mov	r0, sl
 8018932:	f7e7 fc8d 	bl	8000250 <memchr>
 8018936:	b138      	cbz	r0, 8018948 <_svfiprintf_r+0x150>
 8018938:	9b04      	ldr	r3, [sp, #16]
 801893a:	eba0 000a 	sub.w	r0, r0, sl
 801893e:	2240      	movs	r2, #64	@ 0x40
 8018940:	4082      	lsls	r2, r0
 8018942:	4313      	orrs	r3, r2
 8018944:	3401      	adds	r4, #1
 8018946:	9304      	str	r3, [sp, #16]
 8018948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801894c:	4824      	ldr	r0, [pc, #144]	@ (80189e0 <_svfiprintf_r+0x1e8>)
 801894e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018952:	2206      	movs	r2, #6
 8018954:	f7e7 fc7c 	bl	8000250 <memchr>
 8018958:	2800      	cmp	r0, #0
 801895a:	d036      	beq.n	80189ca <_svfiprintf_r+0x1d2>
 801895c:	4b21      	ldr	r3, [pc, #132]	@ (80189e4 <_svfiprintf_r+0x1ec>)
 801895e:	bb1b      	cbnz	r3, 80189a8 <_svfiprintf_r+0x1b0>
 8018960:	9b03      	ldr	r3, [sp, #12]
 8018962:	3307      	adds	r3, #7
 8018964:	f023 0307 	bic.w	r3, r3, #7
 8018968:	3308      	adds	r3, #8
 801896a:	9303      	str	r3, [sp, #12]
 801896c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801896e:	4433      	add	r3, r6
 8018970:	9309      	str	r3, [sp, #36]	@ 0x24
 8018972:	e76a      	b.n	801884a <_svfiprintf_r+0x52>
 8018974:	fb0c 3202 	mla	r2, ip, r2, r3
 8018978:	460c      	mov	r4, r1
 801897a:	2001      	movs	r0, #1
 801897c:	e7a8      	b.n	80188d0 <_svfiprintf_r+0xd8>
 801897e:	2300      	movs	r3, #0
 8018980:	3401      	adds	r4, #1
 8018982:	9305      	str	r3, [sp, #20]
 8018984:	4619      	mov	r1, r3
 8018986:	f04f 0c0a 	mov.w	ip, #10
 801898a:	4620      	mov	r0, r4
 801898c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018990:	3a30      	subs	r2, #48	@ 0x30
 8018992:	2a09      	cmp	r2, #9
 8018994:	d903      	bls.n	801899e <_svfiprintf_r+0x1a6>
 8018996:	2b00      	cmp	r3, #0
 8018998:	d0c6      	beq.n	8018928 <_svfiprintf_r+0x130>
 801899a:	9105      	str	r1, [sp, #20]
 801899c:	e7c4      	b.n	8018928 <_svfiprintf_r+0x130>
 801899e:	fb0c 2101 	mla	r1, ip, r1, r2
 80189a2:	4604      	mov	r4, r0
 80189a4:	2301      	movs	r3, #1
 80189a6:	e7f0      	b.n	801898a <_svfiprintf_r+0x192>
 80189a8:	ab03      	add	r3, sp, #12
 80189aa:	9300      	str	r3, [sp, #0]
 80189ac:	462a      	mov	r2, r5
 80189ae:	4b0e      	ldr	r3, [pc, #56]	@ (80189e8 <_svfiprintf_r+0x1f0>)
 80189b0:	a904      	add	r1, sp, #16
 80189b2:	4638      	mov	r0, r7
 80189b4:	f3af 8000 	nop.w
 80189b8:	1c42      	adds	r2, r0, #1
 80189ba:	4606      	mov	r6, r0
 80189bc:	d1d6      	bne.n	801896c <_svfiprintf_r+0x174>
 80189be:	89ab      	ldrh	r3, [r5, #12]
 80189c0:	065b      	lsls	r3, r3, #25
 80189c2:	f53f af2d 	bmi.w	8018820 <_svfiprintf_r+0x28>
 80189c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80189c8:	e72c      	b.n	8018824 <_svfiprintf_r+0x2c>
 80189ca:	ab03      	add	r3, sp, #12
 80189cc:	9300      	str	r3, [sp, #0]
 80189ce:	462a      	mov	r2, r5
 80189d0:	4b05      	ldr	r3, [pc, #20]	@ (80189e8 <_svfiprintf_r+0x1f0>)
 80189d2:	a904      	add	r1, sp, #16
 80189d4:	4638      	mov	r0, r7
 80189d6:	f000 f9bb 	bl	8018d50 <_printf_i>
 80189da:	e7ed      	b.n	80189b8 <_svfiprintf_r+0x1c0>
 80189dc:	0801a99e 	.word	0x0801a99e
 80189e0:	0801a9a8 	.word	0x0801a9a8
 80189e4:	00000000 	.word	0x00000000
 80189e8:	08018741 	.word	0x08018741
 80189ec:	0801a9a4 	.word	0x0801a9a4

080189f0 <__sfputc_r>:
 80189f0:	6893      	ldr	r3, [r2, #8]
 80189f2:	3b01      	subs	r3, #1
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	b410      	push	{r4}
 80189f8:	6093      	str	r3, [r2, #8]
 80189fa:	da08      	bge.n	8018a0e <__sfputc_r+0x1e>
 80189fc:	6994      	ldr	r4, [r2, #24]
 80189fe:	42a3      	cmp	r3, r4
 8018a00:	db01      	blt.n	8018a06 <__sfputc_r+0x16>
 8018a02:	290a      	cmp	r1, #10
 8018a04:	d103      	bne.n	8018a0e <__sfputc_r+0x1e>
 8018a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a0a:	f7ff bc87 	b.w	801831c <__swbuf_r>
 8018a0e:	6813      	ldr	r3, [r2, #0]
 8018a10:	1c58      	adds	r0, r3, #1
 8018a12:	6010      	str	r0, [r2, #0]
 8018a14:	7019      	strb	r1, [r3, #0]
 8018a16:	4608      	mov	r0, r1
 8018a18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a1c:	4770      	bx	lr

08018a1e <__sfputs_r>:
 8018a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a20:	4606      	mov	r6, r0
 8018a22:	460f      	mov	r7, r1
 8018a24:	4614      	mov	r4, r2
 8018a26:	18d5      	adds	r5, r2, r3
 8018a28:	42ac      	cmp	r4, r5
 8018a2a:	d101      	bne.n	8018a30 <__sfputs_r+0x12>
 8018a2c:	2000      	movs	r0, #0
 8018a2e:	e007      	b.n	8018a40 <__sfputs_r+0x22>
 8018a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a34:	463a      	mov	r2, r7
 8018a36:	4630      	mov	r0, r6
 8018a38:	f7ff ffda 	bl	80189f0 <__sfputc_r>
 8018a3c:	1c43      	adds	r3, r0, #1
 8018a3e:	d1f3      	bne.n	8018a28 <__sfputs_r+0xa>
 8018a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018a44 <_vfiprintf_r>:
 8018a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a48:	460d      	mov	r5, r1
 8018a4a:	b09d      	sub	sp, #116	@ 0x74
 8018a4c:	4614      	mov	r4, r2
 8018a4e:	4698      	mov	r8, r3
 8018a50:	4606      	mov	r6, r0
 8018a52:	b118      	cbz	r0, 8018a5c <_vfiprintf_r+0x18>
 8018a54:	6a03      	ldr	r3, [r0, #32]
 8018a56:	b90b      	cbnz	r3, 8018a5c <_vfiprintf_r+0x18>
 8018a58:	f7ff fb0e 	bl	8018078 <__sinit>
 8018a5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018a5e:	07d9      	lsls	r1, r3, #31
 8018a60:	d405      	bmi.n	8018a6e <_vfiprintf_r+0x2a>
 8018a62:	89ab      	ldrh	r3, [r5, #12]
 8018a64:	059a      	lsls	r2, r3, #22
 8018a66:	d402      	bmi.n	8018a6e <_vfiprintf_r+0x2a>
 8018a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018a6a:	f7ff fdd4 	bl	8018616 <__retarget_lock_acquire_recursive>
 8018a6e:	89ab      	ldrh	r3, [r5, #12]
 8018a70:	071b      	lsls	r3, r3, #28
 8018a72:	d501      	bpl.n	8018a78 <_vfiprintf_r+0x34>
 8018a74:	692b      	ldr	r3, [r5, #16]
 8018a76:	b99b      	cbnz	r3, 8018aa0 <_vfiprintf_r+0x5c>
 8018a78:	4629      	mov	r1, r5
 8018a7a:	4630      	mov	r0, r6
 8018a7c:	f7ff fc8c 	bl	8018398 <__swsetup_r>
 8018a80:	b170      	cbz	r0, 8018aa0 <_vfiprintf_r+0x5c>
 8018a82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018a84:	07dc      	lsls	r4, r3, #31
 8018a86:	d504      	bpl.n	8018a92 <_vfiprintf_r+0x4e>
 8018a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a8c:	b01d      	add	sp, #116	@ 0x74
 8018a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a92:	89ab      	ldrh	r3, [r5, #12]
 8018a94:	0598      	lsls	r0, r3, #22
 8018a96:	d4f7      	bmi.n	8018a88 <_vfiprintf_r+0x44>
 8018a98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018a9a:	f7ff fdbd 	bl	8018618 <__retarget_lock_release_recursive>
 8018a9e:	e7f3      	b.n	8018a88 <_vfiprintf_r+0x44>
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018aa4:	2320      	movs	r3, #32
 8018aa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8018aae:	2330      	movs	r3, #48	@ 0x30
 8018ab0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018c60 <_vfiprintf_r+0x21c>
 8018ab4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018ab8:	f04f 0901 	mov.w	r9, #1
 8018abc:	4623      	mov	r3, r4
 8018abe:	469a      	mov	sl, r3
 8018ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ac4:	b10a      	cbz	r2, 8018aca <_vfiprintf_r+0x86>
 8018ac6:	2a25      	cmp	r2, #37	@ 0x25
 8018ac8:	d1f9      	bne.n	8018abe <_vfiprintf_r+0x7a>
 8018aca:	ebba 0b04 	subs.w	fp, sl, r4
 8018ace:	d00b      	beq.n	8018ae8 <_vfiprintf_r+0xa4>
 8018ad0:	465b      	mov	r3, fp
 8018ad2:	4622      	mov	r2, r4
 8018ad4:	4629      	mov	r1, r5
 8018ad6:	4630      	mov	r0, r6
 8018ad8:	f7ff ffa1 	bl	8018a1e <__sfputs_r>
 8018adc:	3001      	adds	r0, #1
 8018ade:	f000 80a7 	beq.w	8018c30 <_vfiprintf_r+0x1ec>
 8018ae2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018ae4:	445a      	add	r2, fp
 8018ae6:	9209      	str	r2, [sp, #36]	@ 0x24
 8018ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	f000 809f 	beq.w	8018c30 <_vfiprintf_r+0x1ec>
 8018af2:	2300      	movs	r3, #0
 8018af4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018afc:	f10a 0a01 	add.w	sl, sl, #1
 8018b00:	9304      	str	r3, [sp, #16]
 8018b02:	9307      	str	r3, [sp, #28]
 8018b04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018b08:	931a      	str	r3, [sp, #104]	@ 0x68
 8018b0a:	4654      	mov	r4, sl
 8018b0c:	2205      	movs	r2, #5
 8018b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b12:	4853      	ldr	r0, [pc, #332]	@ (8018c60 <_vfiprintf_r+0x21c>)
 8018b14:	f7e7 fb9c 	bl	8000250 <memchr>
 8018b18:	9a04      	ldr	r2, [sp, #16]
 8018b1a:	b9d8      	cbnz	r0, 8018b54 <_vfiprintf_r+0x110>
 8018b1c:	06d1      	lsls	r1, r2, #27
 8018b1e:	bf44      	itt	mi
 8018b20:	2320      	movmi	r3, #32
 8018b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018b26:	0713      	lsls	r3, r2, #28
 8018b28:	bf44      	itt	mi
 8018b2a:	232b      	movmi	r3, #43	@ 0x2b
 8018b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018b30:	f89a 3000 	ldrb.w	r3, [sl]
 8018b34:	2b2a      	cmp	r3, #42	@ 0x2a
 8018b36:	d015      	beq.n	8018b64 <_vfiprintf_r+0x120>
 8018b38:	9a07      	ldr	r2, [sp, #28]
 8018b3a:	4654      	mov	r4, sl
 8018b3c:	2000      	movs	r0, #0
 8018b3e:	f04f 0c0a 	mov.w	ip, #10
 8018b42:	4621      	mov	r1, r4
 8018b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b48:	3b30      	subs	r3, #48	@ 0x30
 8018b4a:	2b09      	cmp	r3, #9
 8018b4c:	d94b      	bls.n	8018be6 <_vfiprintf_r+0x1a2>
 8018b4e:	b1b0      	cbz	r0, 8018b7e <_vfiprintf_r+0x13a>
 8018b50:	9207      	str	r2, [sp, #28]
 8018b52:	e014      	b.n	8018b7e <_vfiprintf_r+0x13a>
 8018b54:	eba0 0308 	sub.w	r3, r0, r8
 8018b58:	fa09 f303 	lsl.w	r3, r9, r3
 8018b5c:	4313      	orrs	r3, r2
 8018b5e:	9304      	str	r3, [sp, #16]
 8018b60:	46a2      	mov	sl, r4
 8018b62:	e7d2      	b.n	8018b0a <_vfiprintf_r+0xc6>
 8018b64:	9b03      	ldr	r3, [sp, #12]
 8018b66:	1d19      	adds	r1, r3, #4
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	9103      	str	r1, [sp, #12]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	bfbb      	ittet	lt
 8018b70:	425b      	neglt	r3, r3
 8018b72:	f042 0202 	orrlt.w	r2, r2, #2
 8018b76:	9307      	strge	r3, [sp, #28]
 8018b78:	9307      	strlt	r3, [sp, #28]
 8018b7a:	bfb8      	it	lt
 8018b7c:	9204      	strlt	r2, [sp, #16]
 8018b7e:	7823      	ldrb	r3, [r4, #0]
 8018b80:	2b2e      	cmp	r3, #46	@ 0x2e
 8018b82:	d10a      	bne.n	8018b9a <_vfiprintf_r+0x156>
 8018b84:	7863      	ldrb	r3, [r4, #1]
 8018b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8018b88:	d132      	bne.n	8018bf0 <_vfiprintf_r+0x1ac>
 8018b8a:	9b03      	ldr	r3, [sp, #12]
 8018b8c:	1d1a      	adds	r2, r3, #4
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	9203      	str	r2, [sp, #12]
 8018b92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018b96:	3402      	adds	r4, #2
 8018b98:	9305      	str	r3, [sp, #20]
 8018b9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018c70 <_vfiprintf_r+0x22c>
 8018b9e:	7821      	ldrb	r1, [r4, #0]
 8018ba0:	2203      	movs	r2, #3
 8018ba2:	4650      	mov	r0, sl
 8018ba4:	f7e7 fb54 	bl	8000250 <memchr>
 8018ba8:	b138      	cbz	r0, 8018bba <_vfiprintf_r+0x176>
 8018baa:	9b04      	ldr	r3, [sp, #16]
 8018bac:	eba0 000a 	sub.w	r0, r0, sl
 8018bb0:	2240      	movs	r2, #64	@ 0x40
 8018bb2:	4082      	lsls	r2, r0
 8018bb4:	4313      	orrs	r3, r2
 8018bb6:	3401      	adds	r4, #1
 8018bb8:	9304      	str	r3, [sp, #16]
 8018bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bbe:	4829      	ldr	r0, [pc, #164]	@ (8018c64 <_vfiprintf_r+0x220>)
 8018bc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018bc4:	2206      	movs	r2, #6
 8018bc6:	f7e7 fb43 	bl	8000250 <memchr>
 8018bca:	2800      	cmp	r0, #0
 8018bcc:	d03f      	beq.n	8018c4e <_vfiprintf_r+0x20a>
 8018bce:	4b26      	ldr	r3, [pc, #152]	@ (8018c68 <_vfiprintf_r+0x224>)
 8018bd0:	bb1b      	cbnz	r3, 8018c1a <_vfiprintf_r+0x1d6>
 8018bd2:	9b03      	ldr	r3, [sp, #12]
 8018bd4:	3307      	adds	r3, #7
 8018bd6:	f023 0307 	bic.w	r3, r3, #7
 8018bda:	3308      	adds	r3, #8
 8018bdc:	9303      	str	r3, [sp, #12]
 8018bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018be0:	443b      	add	r3, r7
 8018be2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018be4:	e76a      	b.n	8018abc <_vfiprintf_r+0x78>
 8018be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8018bea:	460c      	mov	r4, r1
 8018bec:	2001      	movs	r0, #1
 8018bee:	e7a8      	b.n	8018b42 <_vfiprintf_r+0xfe>
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	3401      	adds	r4, #1
 8018bf4:	9305      	str	r3, [sp, #20]
 8018bf6:	4619      	mov	r1, r3
 8018bf8:	f04f 0c0a 	mov.w	ip, #10
 8018bfc:	4620      	mov	r0, r4
 8018bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c02:	3a30      	subs	r2, #48	@ 0x30
 8018c04:	2a09      	cmp	r2, #9
 8018c06:	d903      	bls.n	8018c10 <_vfiprintf_r+0x1cc>
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d0c6      	beq.n	8018b9a <_vfiprintf_r+0x156>
 8018c0c:	9105      	str	r1, [sp, #20]
 8018c0e:	e7c4      	b.n	8018b9a <_vfiprintf_r+0x156>
 8018c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c14:	4604      	mov	r4, r0
 8018c16:	2301      	movs	r3, #1
 8018c18:	e7f0      	b.n	8018bfc <_vfiprintf_r+0x1b8>
 8018c1a:	ab03      	add	r3, sp, #12
 8018c1c:	9300      	str	r3, [sp, #0]
 8018c1e:	462a      	mov	r2, r5
 8018c20:	4b12      	ldr	r3, [pc, #72]	@ (8018c6c <_vfiprintf_r+0x228>)
 8018c22:	a904      	add	r1, sp, #16
 8018c24:	4630      	mov	r0, r6
 8018c26:	f3af 8000 	nop.w
 8018c2a:	4607      	mov	r7, r0
 8018c2c:	1c78      	adds	r0, r7, #1
 8018c2e:	d1d6      	bne.n	8018bde <_vfiprintf_r+0x19a>
 8018c30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018c32:	07d9      	lsls	r1, r3, #31
 8018c34:	d405      	bmi.n	8018c42 <_vfiprintf_r+0x1fe>
 8018c36:	89ab      	ldrh	r3, [r5, #12]
 8018c38:	059a      	lsls	r2, r3, #22
 8018c3a:	d402      	bmi.n	8018c42 <_vfiprintf_r+0x1fe>
 8018c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018c3e:	f7ff fceb 	bl	8018618 <__retarget_lock_release_recursive>
 8018c42:	89ab      	ldrh	r3, [r5, #12]
 8018c44:	065b      	lsls	r3, r3, #25
 8018c46:	f53f af1f 	bmi.w	8018a88 <_vfiprintf_r+0x44>
 8018c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018c4c:	e71e      	b.n	8018a8c <_vfiprintf_r+0x48>
 8018c4e:	ab03      	add	r3, sp, #12
 8018c50:	9300      	str	r3, [sp, #0]
 8018c52:	462a      	mov	r2, r5
 8018c54:	4b05      	ldr	r3, [pc, #20]	@ (8018c6c <_vfiprintf_r+0x228>)
 8018c56:	a904      	add	r1, sp, #16
 8018c58:	4630      	mov	r0, r6
 8018c5a:	f000 f879 	bl	8018d50 <_printf_i>
 8018c5e:	e7e4      	b.n	8018c2a <_vfiprintf_r+0x1e6>
 8018c60:	0801a99e 	.word	0x0801a99e
 8018c64:	0801a9a8 	.word	0x0801a9a8
 8018c68:	00000000 	.word	0x00000000
 8018c6c:	08018a1f 	.word	0x08018a1f
 8018c70:	0801a9a4 	.word	0x0801a9a4

08018c74 <_printf_common>:
 8018c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c78:	4616      	mov	r6, r2
 8018c7a:	4698      	mov	r8, r3
 8018c7c:	688a      	ldr	r2, [r1, #8]
 8018c7e:	690b      	ldr	r3, [r1, #16]
 8018c80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018c84:	4293      	cmp	r3, r2
 8018c86:	bfb8      	it	lt
 8018c88:	4613      	movlt	r3, r2
 8018c8a:	6033      	str	r3, [r6, #0]
 8018c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018c90:	4607      	mov	r7, r0
 8018c92:	460c      	mov	r4, r1
 8018c94:	b10a      	cbz	r2, 8018c9a <_printf_common+0x26>
 8018c96:	3301      	adds	r3, #1
 8018c98:	6033      	str	r3, [r6, #0]
 8018c9a:	6823      	ldr	r3, [r4, #0]
 8018c9c:	0699      	lsls	r1, r3, #26
 8018c9e:	bf42      	ittt	mi
 8018ca0:	6833      	ldrmi	r3, [r6, #0]
 8018ca2:	3302      	addmi	r3, #2
 8018ca4:	6033      	strmi	r3, [r6, #0]
 8018ca6:	6825      	ldr	r5, [r4, #0]
 8018ca8:	f015 0506 	ands.w	r5, r5, #6
 8018cac:	d106      	bne.n	8018cbc <_printf_common+0x48>
 8018cae:	f104 0a19 	add.w	sl, r4, #25
 8018cb2:	68e3      	ldr	r3, [r4, #12]
 8018cb4:	6832      	ldr	r2, [r6, #0]
 8018cb6:	1a9b      	subs	r3, r3, r2
 8018cb8:	42ab      	cmp	r3, r5
 8018cba:	dc26      	bgt.n	8018d0a <_printf_common+0x96>
 8018cbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018cc0:	6822      	ldr	r2, [r4, #0]
 8018cc2:	3b00      	subs	r3, #0
 8018cc4:	bf18      	it	ne
 8018cc6:	2301      	movne	r3, #1
 8018cc8:	0692      	lsls	r2, r2, #26
 8018cca:	d42b      	bmi.n	8018d24 <_printf_common+0xb0>
 8018ccc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018cd0:	4641      	mov	r1, r8
 8018cd2:	4638      	mov	r0, r7
 8018cd4:	47c8      	blx	r9
 8018cd6:	3001      	adds	r0, #1
 8018cd8:	d01e      	beq.n	8018d18 <_printf_common+0xa4>
 8018cda:	6823      	ldr	r3, [r4, #0]
 8018cdc:	6922      	ldr	r2, [r4, #16]
 8018cde:	f003 0306 	and.w	r3, r3, #6
 8018ce2:	2b04      	cmp	r3, #4
 8018ce4:	bf02      	ittt	eq
 8018ce6:	68e5      	ldreq	r5, [r4, #12]
 8018ce8:	6833      	ldreq	r3, [r6, #0]
 8018cea:	1aed      	subeq	r5, r5, r3
 8018cec:	68a3      	ldr	r3, [r4, #8]
 8018cee:	bf0c      	ite	eq
 8018cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018cf4:	2500      	movne	r5, #0
 8018cf6:	4293      	cmp	r3, r2
 8018cf8:	bfc4      	itt	gt
 8018cfa:	1a9b      	subgt	r3, r3, r2
 8018cfc:	18ed      	addgt	r5, r5, r3
 8018cfe:	2600      	movs	r6, #0
 8018d00:	341a      	adds	r4, #26
 8018d02:	42b5      	cmp	r5, r6
 8018d04:	d11a      	bne.n	8018d3c <_printf_common+0xc8>
 8018d06:	2000      	movs	r0, #0
 8018d08:	e008      	b.n	8018d1c <_printf_common+0xa8>
 8018d0a:	2301      	movs	r3, #1
 8018d0c:	4652      	mov	r2, sl
 8018d0e:	4641      	mov	r1, r8
 8018d10:	4638      	mov	r0, r7
 8018d12:	47c8      	blx	r9
 8018d14:	3001      	adds	r0, #1
 8018d16:	d103      	bne.n	8018d20 <_printf_common+0xac>
 8018d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d20:	3501      	adds	r5, #1
 8018d22:	e7c6      	b.n	8018cb2 <_printf_common+0x3e>
 8018d24:	18e1      	adds	r1, r4, r3
 8018d26:	1c5a      	adds	r2, r3, #1
 8018d28:	2030      	movs	r0, #48	@ 0x30
 8018d2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018d2e:	4422      	add	r2, r4
 8018d30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018d34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018d38:	3302      	adds	r3, #2
 8018d3a:	e7c7      	b.n	8018ccc <_printf_common+0x58>
 8018d3c:	2301      	movs	r3, #1
 8018d3e:	4622      	mov	r2, r4
 8018d40:	4641      	mov	r1, r8
 8018d42:	4638      	mov	r0, r7
 8018d44:	47c8      	blx	r9
 8018d46:	3001      	adds	r0, #1
 8018d48:	d0e6      	beq.n	8018d18 <_printf_common+0xa4>
 8018d4a:	3601      	adds	r6, #1
 8018d4c:	e7d9      	b.n	8018d02 <_printf_common+0x8e>
	...

08018d50 <_printf_i>:
 8018d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018d54:	7e0f      	ldrb	r7, [r1, #24]
 8018d56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018d58:	2f78      	cmp	r7, #120	@ 0x78
 8018d5a:	4691      	mov	r9, r2
 8018d5c:	4680      	mov	r8, r0
 8018d5e:	460c      	mov	r4, r1
 8018d60:	469a      	mov	sl, r3
 8018d62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018d66:	d807      	bhi.n	8018d78 <_printf_i+0x28>
 8018d68:	2f62      	cmp	r7, #98	@ 0x62
 8018d6a:	d80a      	bhi.n	8018d82 <_printf_i+0x32>
 8018d6c:	2f00      	cmp	r7, #0
 8018d6e:	f000 80d2 	beq.w	8018f16 <_printf_i+0x1c6>
 8018d72:	2f58      	cmp	r7, #88	@ 0x58
 8018d74:	f000 80b9 	beq.w	8018eea <_printf_i+0x19a>
 8018d78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018d7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018d80:	e03a      	b.n	8018df8 <_printf_i+0xa8>
 8018d82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018d86:	2b15      	cmp	r3, #21
 8018d88:	d8f6      	bhi.n	8018d78 <_printf_i+0x28>
 8018d8a:	a101      	add	r1, pc, #4	@ (adr r1, 8018d90 <_printf_i+0x40>)
 8018d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018d90:	08018de9 	.word	0x08018de9
 8018d94:	08018dfd 	.word	0x08018dfd
 8018d98:	08018d79 	.word	0x08018d79
 8018d9c:	08018d79 	.word	0x08018d79
 8018da0:	08018d79 	.word	0x08018d79
 8018da4:	08018d79 	.word	0x08018d79
 8018da8:	08018dfd 	.word	0x08018dfd
 8018dac:	08018d79 	.word	0x08018d79
 8018db0:	08018d79 	.word	0x08018d79
 8018db4:	08018d79 	.word	0x08018d79
 8018db8:	08018d79 	.word	0x08018d79
 8018dbc:	08018efd 	.word	0x08018efd
 8018dc0:	08018e27 	.word	0x08018e27
 8018dc4:	08018eb7 	.word	0x08018eb7
 8018dc8:	08018d79 	.word	0x08018d79
 8018dcc:	08018d79 	.word	0x08018d79
 8018dd0:	08018f1f 	.word	0x08018f1f
 8018dd4:	08018d79 	.word	0x08018d79
 8018dd8:	08018e27 	.word	0x08018e27
 8018ddc:	08018d79 	.word	0x08018d79
 8018de0:	08018d79 	.word	0x08018d79
 8018de4:	08018ebf 	.word	0x08018ebf
 8018de8:	6833      	ldr	r3, [r6, #0]
 8018dea:	1d1a      	adds	r2, r3, #4
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	6032      	str	r2, [r6, #0]
 8018df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018df4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018df8:	2301      	movs	r3, #1
 8018dfa:	e09d      	b.n	8018f38 <_printf_i+0x1e8>
 8018dfc:	6833      	ldr	r3, [r6, #0]
 8018dfe:	6820      	ldr	r0, [r4, #0]
 8018e00:	1d19      	adds	r1, r3, #4
 8018e02:	6031      	str	r1, [r6, #0]
 8018e04:	0606      	lsls	r6, r0, #24
 8018e06:	d501      	bpl.n	8018e0c <_printf_i+0xbc>
 8018e08:	681d      	ldr	r5, [r3, #0]
 8018e0a:	e003      	b.n	8018e14 <_printf_i+0xc4>
 8018e0c:	0645      	lsls	r5, r0, #25
 8018e0e:	d5fb      	bpl.n	8018e08 <_printf_i+0xb8>
 8018e10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018e14:	2d00      	cmp	r5, #0
 8018e16:	da03      	bge.n	8018e20 <_printf_i+0xd0>
 8018e18:	232d      	movs	r3, #45	@ 0x2d
 8018e1a:	426d      	negs	r5, r5
 8018e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018e20:	4859      	ldr	r0, [pc, #356]	@ (8018f88 <_printf_i+0x238>)
 8018e22:	230a      	movs	r3, #10
 8018e24:	e011      	b.n	8018e4a <_printf_i+0xfa>
 8018e26:	6821      	ldr	r1, [r4, #0]
 8018e28:	6833      	ldr	r3, [r6, #0]
 8018e2a:	0608      	lsls	r0, r1, #24
 8018e2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018e30:	d402      	bmi.n	8018e38 <_printf_i+0xe8>
 8018e32:	0649      	lsls	r1, r1, #25
 8018e34:	bf48      	it	mi
 8018e36:	b2ad      	uxthmi	r5, r5
 8018e38:	2f6f      	cmp	r7, #111	@ 0x6f
 8018e3a:	4853      	ldr	r0, [pc, #332]	@ (8018f88 <_printf_i+0x238>)
 8018e3c:	6033      	str	r3, [r6, #0]
 8018e3e:	bf14      	ite	ne
 8018e40:	230a      	movne	r3, #10
 8018e42:	2308      	moveq	r3, #8
 8018e44:	2100      	movs	r1, #0
 8018e46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018e4a:	6866      	ldr	r6, [r4, #4]
 8018e4c:	60a6      	str	r6, [r4, #8]
 8018e4e:	2e00      	cmp	r6, #0
 8018e50:	bfa2      	ittt	ge
 8018e52:	6821      	ldrge	r1, [r4, #0]
 8018e54:	f021 0104 	bicge.w	r1, r1, #4
 8018e58:	6021      	strge	r1, [r4, #0]
 8018e5a:	b90d      	cbnz	r5, 8018e60 <_printf_i+0x110>
 8018e5c:	2e00      	cmp	r6, #0
 8018e5e:	d04b      	beq.n	8018ef8 <_printf_i+0x1a8>
 8018e60:	4616      	mov	r6, r2
 8018e62:	fbb5 f1f3 	udiv	r1, r5, r3
 8018e66:	fb03 5711 	mls	r7, r3, r1, r5
 8018e6a:	5dc7      	ldrb	r7, [r0, r7]
 8018e6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018e70:	462f      	mov	r7, r5
 8018e72:	42bb      	cmp	r3, r7
 8018e74:	460d      	mov	r5, r1
 8018e76:	d9f4      	bls.n	8018e62 <_printf_i+0x112>
 8018e78:	2b08      	cmp	r3, #8
 8018e7a:	d10b      	bne.n	8018e94 <_printf_i+0x144>
 8018e7c:	6823      	ldr	r3, [r4, #0]
 8018e7e:	07df      	lsls	r7, r3, #31
 8018e80:	d508      	bpl.n	8018e94 <_printf_i+0x144>
 8018e82:	6923      	ldr	r3, [r4, #16]
 8018e84:	6861      	ldr	r1, [r4, #4]
 8018e86:	4299      	cmp	r1, r3
 8018e88:	bfde      	ittt	le
 8018e8a:	2330      	movle	r3, #48	@ 0x30
 8018e8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018e90:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018e94:	1b92      	subs	r2, r2, r6
 8018e96:	6122      	str	r2, [r4, #16]
 8018e98:	f8cd a000 	str.w	sl, [sp]
 8018e9c:	464b      	mov	r3, r9
 8018e9e:	aa03      	add	r2, sp, #12
 8018ea0:	4621      	mov	r1, r4
 8018ea2:	4640      	mov	r0, r8
 8018ea4:	f7ff fee6 	bl	8018c74 <_printf_common>
 8018ea8:	3001      	adds	r0, #1
 8018eaa:	d14a      	bne.n	8018f42 <_printf_i+0x1f2>
 8018eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018eb0:	b004      	add	sp, #16
 8018eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018eb6:	6823      	ldr	r3, [r4, #0]
 8018eb8:	f043 0320 	orr.w	r3, r3, #32
 8018ebc:	6023      	str	r3, [r4, #0]
 8018ebe:	4833      	ldr	r0, [pc, #204]	@ (8018f8c <_printf_i+0x23c>)
 8018ec0:	2778      	movs	r7, #120	@ 0x78
 8018ec2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018ec6:	6823      	ldr	r3, [r4, #0]
 8018ec8:	6831      	ldr	r1, [r6, #0]
 8018eca:	061f      	lsls	r7, r3, #24
 8018ecc:	f851 5b04 	ldr.w	r5, [r1], #4
 8018ed0:	d402      	bmi.n	8018ed8 <_printf_i+0x188>
 8018ed2:	065f      	lsls	r7, r3, #25
 8018ed4:	bf48      	it	mi
 8018ed6:	b2ad      	uxthmi	r5, r5
 8018ed8:	6031      	str	r1, [r6, #0]
 8018eda:	07d9      	lsls	r1, r3, #31
 8018edc:	bf44      	itt	mi
 8018ede:	f043 0320 	orrmi.w	r3, r3, #32
 8018ee2:	6023      	strmi	r3, [r4, #0]
 8018ee4:	b11d      	cbz	r5, 8018eee <_printf_i+0x19e>
 8018ee6:	2310      	movs	r3, #16
 8018ee8:	e7ac      	b.n	8018e44 <_printf_i+0xf4>
 8018eea:	4827      	ldr	r0, [pc, #156]	@ (8018f88 <_printf_i+0x238>)
 8018eec:	e7e9      	b.n	8018ec2 <_printf_i+0x172>
 8018eee:	6823      	ldr	r3, [r4, #0]
 8018ef0:	f023 0320 	bic.w	r3, r3, #32
 8018ef4:	6023      	str	r3, [r4, #0]
 8018ef6:	e7f6      	b.n	8018ee6 <_printf_i+0x196>
 8018ef8:	4616      	mov	r6, r2
 8018efa:	e7bd      	b.n	8018e78 <_printf_i+0x128>
 8018efc:	6833      	ldr	r3, [r6, #0]
 8018efe:	6825      	ldr	r5, [r4, #0]
 8018f00:	6961      	ldr	r1, [r4, #20]
 8018f02:	1d18      	adds	r0, r3, #4
 8018f04:	6030      	str	r0, [r6, #0]
 8018f06:	062e      	lsls	r6, r5, #24
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	d501      	bpl.n	8018f10 <_printf_i+0x1c0>
 8018f0c:	6019      	str	r1, [r3, #0]
 8018f0e:	e002      	b.n	8018f16 <_printf_i+0x1c6>
 8018f10:	0668      	lsls	r0, r5, #25
 8018f12:	d5fb      	bpl.n	8018f0c <_printf_i+0x1bc>
 8018f14:	8019      	strh	r1, [r3, #0]
 8018f16:	2300      	movs	r3, #0
 8018f18:	6123      	str	r3, [r4, #16]
 8018f1a:	4616      	mov	r6, r2
 8018f1c:	e7bc      	b.n	8018e98 <_printf_i+0x148>
 8018f1e:	6833      	ldr	r3, [r6, #0]
 8018f20:	1d1a      	adds	r2, r3, #4
 8018f22:	6032      	str	r2, [r6, #0]
 8018f24:	681e      	ldr	r6, [r3, #0]
 8018f26:	6862      	ldr	r2, [r4, #4]
 8018f28:	2100      	movs	r1, #0
 8018f2a:	4630      	mov	r0, r6
 8018f2c:	f7e7 f990 	bl	8000250 <memchr>
 8018f30:	b108      	cbz	r0, 8018f36 <_printf_i+0x1e6>
 8018f32:	1b80      	subs	r0, r0, r6
 8018f34:	6060      	str	r0, [r4, #4]
 8018f36:	6863      	ldr	r3, [r4, #4]
 8018f38:	6123      	str	r3, [r4, #16]
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018f40:	e7aa      	b.n	8018e98 <_printf_i+0x148>
 8018f42:	6923      	ldr	r3, [r4, #16]
 8018f44:	4632      	mov	r2, r6
 8018f46:	4649      	mov	r1, r9
 8018f48:	4640      	mov	r0, r8
 8018f4a:	47d0      	blx	sl
 8018f4c:	3001      	adds	r0, #1
 8018f4e:	d0ad      	beq.n	8018eac <_printf_i+0x15c>
 8018f50:	6823      	ldr	r3, [r4, #0]
 8018f52:	079b      	lsls	r3, r3, #30
 8018f54:	d413      	bmi.n	8018f7e <_printf_i+0x22e>
 8018f56:	68e0      	ldr	r0, [r4, #12]
 8018f58:	9b03      	ldr	r3, [sp, #12]
 8018f5a:	4298      	cmp	r0, r3
 8018f5c:	bfb8      	it	lt
 8018f5e:	4618      	movlt	r0, r3
 8018f60:	e7a6      	b.n	8018eb0 <_printf_i+0x160>
 8018f62:	2301      	movs	r3, #1
 8018f64:	4632      	mov	r2, r6
 8018f66:	4649      	mov	r1, r9
 8018f68:	4640      	mov	r0, r8
 8018f6a:	47d0      	blx	sl
 8018f6c:	3001      	adds	r0, #1
 8018f6e:	d09d      	beq.n	8018eac <_printf_i+0x15c>
 8018f70:	3501      	adds	r5, #1
 8018f72:	68e3      	ldr	r3, [r4, #12]
 8018f74:	9903      	ldr	r1, [sp, #12]
 8018f76:	1a5b      	subs	r3, r3, r1
 8018f78:	42ab      	cmp	r3, r5
 8018f7a:	dcf2      	bgt.n	8018f62 <_printf_i+0x212>
 8018f7c:	e7eb      	b.n	8018f56 <_printf_i+0x206>
 8018f7e:	2500      	movs	r5, #0
 8018f80:	f104 0619 	add.w	r6, r4, #25
 8018f84:	e7f5      	b.n	8018f72 <_printf_i+0x222>
 8018f86:	bf00      	nop
 8018f88:	0801a9af 	.word	0x0801a9af
 8018f8c:	0801a9c0 	.word	0x0801a9c0

08018f90 <__sflush_r>:
 8018f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f98:	0716      	lsls	r6, r2, #28
 8018f9a:	4605      	mov	r5, r0
 8018f9c:	460c      	mov	r4, r1
 8018f9e:	d454      	bmi.n	801904a <__sflush_r+0xba>
 8018fa0:	684b      	ldr	r3, [r1, #4]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	dc02      	bgt.n	8018fac <__sflush_r+0x1c>
 8018fa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	dd48      	ble.n	801903e <__sflush_r+0xae>
 8018fac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018fae:	2e00      	cmp	r6, #0
 8018fb0:	d045      	beq.n	801903e <__sflush_r+0xae>
 8018fb2:	2300      	movs	r3, #0
 8018fb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018fb8:	682f      	ldr	r7, [r5, #0]
 8018fba:	6a21      	ldr	r1, [r4, #32]
 8018fbc:	602b      	str	r3, [r5, #0]
 8018fbe:	d030      	beq.n	8019022 <__sflush_r+0x92>
 8018fc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018fc2:	89a3      	ldrh	r3, [r4, #12]
 8018fc4:	0759      	lsls	r1, r3, #29
 8018fc6:	d505      	bpl.n	8018fd4 <__sflush_r+0x44>
 8018fc8:	6863      	ldr	r3, [r4, #4]
 8018fca:	1ad2      	subs	r2, r2, r3
 8018fcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018fce:	b10b      	cbz	r3, 8018fd4 <__sflush_r+0x44>
 8018fd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018fd2:	1ad2      	subs	r2, r2, r3
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018fd8:	6a21      	ldr	r1, [r4, #32]
 8018fda:	4628      	mov	r0, r5
 8018fdc:	47b0      	blx	r6
 8018fde:	1c43      	adds	r3, r0, #1
 8018fe0:	89a3      	ldrh	r3, [r4, #12]
 8018fe2:	d106      	bne.n	8018ff2 <__sflush_r+0x62>
 8018fe4:	6829      	ldr	r1, [r5, #0]
 8018fe6:	291d      	cmp	r1, #29
 8018fe8:	d82b      	bhi.n	8019042 <__sflush_r+0xb2>
 8018fea:	4a2a      	ldr	r2, [pc, #168]	@ (8019094 <__sflush_r+0x104>)
 8018fec:	410a      	asrs	r2, r1
 8018fee:	07d6      	lsls	r6, r2, #31
 8018ff0:	d427      	bmi.n	8019042 <__sflush_r+0xb2>
 8018ff2:	2200      	movs	r2, #0
 8018ff4:	6062      	str	r2, [r4, #4]
 8018ff6:	04d9      	lsls	r1, r3, #19
 8018ff8:	6922      	ldr	r2, [r4, #16]
 8018ffa:	6022      	str	r2, [r4, #0]
 8018ffc:	d504      	bpl.n	8019008 <__sflush_r+0x78>
 8018ffe:	1c42      	adds	r2, r0, #1
 8019000:	d101      	bne.n	8019006 <__sflush_r+0x76>
 8019002:	682b      	ldr	r3, [r5, #0]
 8019004:	b903      	cbnz	r3, 8019008 <__sflush_r+0x78>
 8019006:	6560      	str	r0, [r4, #84]	@ 0x54
 8019008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801900a:	602f      	str	r7, [r5, #0]
 801900c:	b1b9      	cbz	r1, 801903e <__sflush_r+0xae>
 801900e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019012:	4299      	cmp	r1, r3
 8019014:	d002      	beq.n	801901c <__sflush_r+0x8c>
 8019016:	4628      	mov	r0, r5
 8019018:	f7ff fb40 	bl	801869c <_free_r>
 801901c:	2300      	movs	r3, #0
 801901e:	6363      	str	r3, [r4, #52]	@ 0x34
 8019020:	e00d      	b.n	801903e <__sflush_r+0xae>
 8019022:	2301      	movs	r3, #1
 8019024:	4628      	mov	r0, r5
 8019026:	47b0      	blx	r6
 8019028:	4602      	mov	r2, r0
 801902a:	1c50      	adds	r0, r2, #1
 801902c:	d1c9      	bne.n	8018fc2 <__sflush_r+0x32>
 801902e:	682b      	ldr	r3, [r5, #0]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d0c6      	beq.n	8018fc2 <__sflush_r+0x32>
 8019034:	2b1d      	cmp	r3, #29
 8019036:	d001      	beq.n	801903c <__sflush_r+0xac>
 8019038:	2b16      	cmp	r3, #22
 801903a:	d11e      	bne.n	801907a <__sflush_r+0xea>
 801903c:	602f      	str	r7, [r5, #0]
 801903e:	2000      	movs	r0, #0
 8019040:	e022      	b.n	8019088 <__sflush_r+0xf8>
 8019042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019046:	b21b      	sxth	r3, r3
 8019048:	e01b      	b.n	8019082 <__sflush_r+0xf2>
 801904a:	690f      	ldr	r7, [r1, #16]
 801904c:	2f00      	cmp	r7, #0
 801904e:	d0f6      	beq.n	801903e <__sflush_r+0xae>
 8019050:	0793      	lsls	r3, r2, #30
 8019052:	680e      	ldr	r6, [r1, #0]
 8019054:	bf08      	it	eq
 8019056:	694b      	ldreq	r3, [r1, #20]
 8019058:	600f      	str	r7, [r1, #0]
 801905a:	bf18      	it	ne
 801905c:	2300      	movne	r3, #0
 801905e:	eba6 0807 	sub.w	r8, r6, r7
 8019062:	608b      	str	r3, [r1, #8]
 8019064:	f1b8 0f00 	cmp.w	r8, #0
 8019068:	dde9      	ble.n	801903e <__sflush_r+0xae>
 801906a:	6a21      	ldr	r1, [r4, #32]
 801906c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801906e:	4643      	mov	r3, r8
 8019070:	463a      	mov	r2, r7
 8019072:	4628      	mov	r0, r5
 8019074:	47b0      	blx	r6
 8019076:	2800      	cmp	r0, #0
 8019078:	dc08      	bgt.n	801908c <__sflush_r+0xfc>
 801907a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801907e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019082:	81a3      	strh	r3, [r4, #12]
 8019084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801908c:	4407      	add	r7, r0
 801908e:	eba8 0800 	sub.w	r8, r8, r0
 8019092:	e7e7      	b.n	8019064 <__sflush_r+0xd4>
 8019094:	dfbffffe 	.word	0xdfbffffe

08019098 <_fflush_r>:
 8019098:	b538      	push	{r3, r4, r5, lr}
 801909a:	690b      	ldr	r3, [r1, #16]
 801909c:	4605      	mov	r5, r0
 801909e:	460c      	mov	r4, r1
 80190a0:	b913      	cbnz	r3, 80190a8 <_fflush_r+0x10>
 80190a2:	2500      	movs	r5, #0
 80190a4:	4628      	mov	r0, r5
 80190a6:	bd38      	pop	{r3, r4, r5, pc}
 80190a8:	b118      	cbz	r0, 80190b2 <_fflush_r+0x1a>
 80190aa:	6a03      	ldr	r3, [r0, #32]
 80190ac:	b90b      	cbnz	r3, 80190b2 <_fflush_r+0x1a>
 80190ae:	f7fe ffe3 	bl	8018078 <__sinit>
 80190b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d0f3      	beq.n	80190a2 <_fflush_r+0xa>
 80190ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80190bc:	07d0      	lsls	r0, r2, #31
 80190be:	d404      	bmi.n	80190ca <_fflush_r+0x32>
 80190c0:	0599      	lsls	r1, r3, #22
 80190c2:	d402      	bmi.n	80190ca <_fflush_r+0x32>
 80190c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80190c6:	f7ff faa6 	bl	8018616 <__retarget_lock_acquire_recursive>
 80190ca:	4628      	mov	r0, r5
 80190cc:	4621      	mov	r1, r4
 80190ce:	f7ff ff5f 	bl	8018f90 <__sflush_r>
 80190d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80190d4:	07da      	lsls	r2, r3, #31
 80190d6:	4605      	mov	r5, r0
 80190d8:	d4e4      	bmi.n	80190a4 <_fflush_r+0xc>
 80190da:	89a3      	ldrh	r3, [r4, #12]
 80190dc:	059b      	lsls	r3, r3, #22
 80190de:	d4e1      	bmi.n	80190a4 <_fflush_r+0xc>
 80190e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80190e2:	f7ff fa99 	bl	8018618 <__retarget_lock_release_recursive>
 80190e6:	e7dd      	b.n	80190a4 <_fflush_r+0xc>

080190e8 <fiprintf>:
 80190e8:	b40e      	push	{r1, r2, r3}
 80190ea:	b503      	push	{r0, r1, lr}
 80190ec:	4601      	mov	r1, r0
 80190ee:	ab03      	add	r3, sp, #12
 80190f0:	4805      	ldr	r0, [pc, #20]	@ (8019108 <fiprintf+0x20>)
 80190f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80190f6:	6800      	ldr	r0, [r0, #0]
 80190f8:	9301      	str	r3, [sp, #4]
 80190fa:	f7ff fca3 	bl	8018a44 <_vfiprintf_r>
 80190fe:	b002      	add	sp, #8
 8019100:	f85d eb04 	ldr.w	lr, [sp], #4
 8019104:	b003      	add	sp, #12
 8019106:	4770      	bx	lr
 8019108:	2000061c 	.word	0x2000061c

0801910c <__swhatbuf_r>:
 801910c:	b570      	push	{r4, r5, r6, lr}
 801910e:	460c      	mov	r4, r1
 8019110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019114:	2900      	cmp	r1, #0
 8019116:	b096      	sub	sp, #88	@ 0x58
 8019118:	4615      	mov	r5, r2
 801911a:	461e      	mov	r6, r3
 801911c:	da0d      	bge.n	801913a <__swhatbuf_r+0x2e>
 801911e:	89a3      	ldrh	r3, [r4, #12]
 8019120:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019124:	f04f 0100 	mov.w	r1, #0
 8019128:	bf14      	ite	ne
 801912a:	2340      	movne	r3, #64	@ 0x40
 801912c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019130:	2000      	movs	r0, #0
 8019132:	6031      	str	r1, [r6, #0]
 8019134:	602b      	str	r3, [r5, #0]
 8019136:	b016      	add	sp, #88	@ 0x58
 8019138:	bd70      	pop	{r4, r5, r6, pc}
 801913a:	466a      	mov	r2, sp
 801913c:	f000 f848 	bl	80191d0 <_fstat_r>
 8019140:	2800      	cmp	r0, #0
 8019142:	dbec      	blt.n	801911e <__swhatbuf_r+0x12>
 8019144:	9901      	ldr	r1, [sp, #4]
 8019146:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801914a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801914e:	4259      	negs	r1, r3
 8019150:	4159      	adcs	r1, r3
 8019152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019156:	e7eb      	b.n	8019130 <__swhatbuf_r+0x24>

08019158 <__smakebuf_r>:
 8019158:	898b      	ldrh	r3, [r1, #12]
 801915a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801915c:	079d      	lsls	r5, r3, #30
 801915e:	4606      	mov	r6, r0
 8019160:	460c      	mov	r4, r1
 8019162:	d507      	bpl.n	8019174 <__smakebuf_r+0x1c>
 8019164:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019168:	6023      	str	r3, [r4, #0]
 801916a:	6123      	str	r3, [r4, #16]
 801916c:	2301      	movs	r3, #1
 801916e:	6163      	str	r3, [r4, #20]
 8019170:	b003      	add	sp, #12
 8019172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019174:	ab01      	add	r3, sp, #4
 8019176:	466a      	mov	r2, sp
 8019178:	f7ff ffc8 	bl	801910c <__swhatbuf_r>
 801917c:	9f00      	ldr	r7, [sp, #0]
 801917e:	4605      	mov	r5, r0
 8019180:	4639      	mov	r1, r7
 8019182:	4630      	mov	r0, r6
 8019184:	f7fe fd46 	bl	8017c14 <_malloc_r>
 8019188:	b948      	cbnz	r0, 801919e <__smakebuf_r+0x46>
 801918a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801918e:	059a      	lsls	r2, r3, #22
 8019190:	d4ee      	bmi.n	8019170 <__smakebuf_r+0x18>
 8019192:	f023 0303 	bic.w	r3, r3, #3
 8019196:	f043 0302 	orr.w	r3, r3, #2
 801919a:	81a3      	strh	r3, [r4, #12]
 801919c:	e7e2      	b.n	8019164 <__smakebuf_r+0xc>
 801919e:	89a3      	ldrh	r3, [r4, #12]
 80191a0:	6020      	str	r0, [r4, #0]
 80191a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80191a6:	81a3      	strh	r3, [r4, #12]
 80191a8:	9b01      	ldr	r3, [sp, #4]
 80191aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80191ae:	b15b      	cbz	r3, 80191c8 <__smakebuf_r+0x70>
 80191b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191b4:	4630      	mov	r0, r6
 80191b6:	f000 f81d 	bl	80191f4 <_isatty_r>
 80191ba:	b128      	cbz	r0, 80191c8 <__smakebuf_r+0x70>
 80191bc:	89a3      	ldrh	r3, [r4, #12]
 80191be:	f023 0303 	bic.w	r3, r3, #3
 80191c2:	f043 0301 	orr.w	r3, r3, #1
 80191c6:	81a3      	strh	r3, [r4, #12]
 80191c8:	89a3      	ldrh	r3, [r4, #12]
 80191ca:	431d      	orrs	r5, r3
 80191cc:	81a5      	strh	r5, [r4, #12]
 80191ce:	e7cf      	b.n	8019170 <__smakebuf_r+0x18>

080191d0 <_fstat_r>:
 80191d0:	b538      	push	{r3, r4, r5, lr}
 80191d2:	4d07      	ldr	r5, [pc, #28]	@ (80191f0 <_fstat_r+0x20>)
 80191d4:	2300      	movs	r3, #0
 80191d6:	4604      	mov	r4, r0
 80191d8:	4608      	mov	r0, r1
 80191da:	4611      	mov	r1, r2
 80191dc:	602b      	str	r3, [r5, #0]
 80191de:	f7e8 ffb5 	bl	800214c <_fstat>
 80191e2:	1c43      	adds	r3, r0, #1
 80191e4:	d102      	bne.n	80191ec <_fstat_r+0x1c>
 80191e6:	682b      	ldr	r3, [r5, #0]
 80191e8:	b103      	cbz	r3, 80191ec <_fstat_r+0x1c>
 80191ea:	6023      	str	r3, [r4, #0]
 80191ec:	bd38      	pop	{r3, r4, r5, pc}
 80191ee:	bf00      	nop
 80191f0:	2000b438 	.word	0x2000b438

080191f4 <_isatty_r>:
 80191f4:	b538      	push	{r3, r4, r5, lr}
 80191f6:	4d06      	ldr	r5, [pc, #24]	@ (8019210 <_isatty_r+0x1c>)
 80191f8:	2300      	movs	r3, #0
 80191fa:	4604      	mov	r4, r0
 80191fc:	4608      	mov	r0, r1
 80191fe:	602b      	str	r3, [r5, #0]
 8019200:	f7e8 ffb4 	bl	800216c <_isatty>
 8019204:	1c43      	adds	r3, r0, #1
 8019206:	d102      	bne.n	801920e <_isatty_r+0x1a>
 8019208:	682b      	ldr	r3, [r5, #0]
 801920a:	b103      	cbz	r3, 801920e <_isatty_r+0x1a>
 801920c:	6023      	str	r3, [r4, #0]
 801920e:	bd38      	pop	{r3, r4, r5, pc}
 8019210:	2000b438 	.word	0x2000b438

08019214 <abort>:
 8019214:	b508      	push	{r3, lr}
 8019216:	2006      	movs	r0, #6
 8019218:	f000 f82c 	bl	8019274 <raise>
 801921c:	2001      	movs	r0, #1
 801921e:	f7e8 ff45 	bl	80020ac <_exit>

08019222 <_raise_r>:
 8019222:	291f      	cmp	r1, #31
 8019224:	b538      	push	{r3, r4, r5, lr}
 8019226:	4605      	mov	r5, r0
 8019228:	460c      	mov	r4, r1
 801922a:	d904      	bls.n	8019236 <_raise_r+0x14>
 801922c:	2316      	movs	r3, #22
 801922e:	6003      	str	r3, [r0, #0]
 8019230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019234:	bd38      	pop	{r3, r4, r5, pc}
 8019236:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019238:	b112      	cbz	r2, 8019240 <_raise_r+0x1e>
 801923a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801923e:	b94b      	cbnz	r3, 8019254 <_raise_r+0x32>
 8019240:	4628      	mov	r0, r5
 8019242:	f000 f831 	bl	80192a8 <_getpid_r>
 8019246:	4622      	mov	r2, r4
 8019248:	4601      	mov	r1, r0
 801924a:	4628      	mov	r0, r5
 801924c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019250:	f000 b818 	b.w	8019284 <_kill_r>
 8019254:	2b01      	cmp	r3, #1
 8019256:	d00a      	beq.n	801926e <_raise_r+0x4c>
 8019258:	1c59      	adds	r1, r3, #1
 801925a:	d103      	bne.n	8019264 <_raise_r+0x42>
 801925c:	2316      	movs	r3, #22
 801925e:	6003      	str	r3, [r0, #0]
 8019260:	2001      	movs	r0, #1
 8019262:	e7e7      	b.n	8019234 <_raise_r+0x12>
 8019264:	2100      	movs	r1, #0
 8019266:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801926a:	4620      	mov	r0, r4
 801926c:	4798      	blx	r3
 801926e:	2000      	movs	r0, #0
 8019270:	e7e0      	b.n	8019234 <_raise_r+0x12>
	...

08019274 <raise>:
 8019274:	4b02      	ldr	r3, [pc, #8]	@ (8019280 <raise+0xc>)
 8019276:	4601      	mov	r1, r0
 8019278:	6818      	ldr	r0, [r3, #0]
 801927a:	f7ff bfd2 	b.w	8019222 <_raise_r>
 801927e:	bf00      	nop
 8019280:	2000061c 	.word	0x2000061c

08019284 <_kill_r>:
 8019284:	b538      	push	{r3, r4, r5, lr}
 8019286:	4d07      	ldr	r5, [pc, #28]	@ (80192a4 <_kill_r+0x20>)
 8019288:	2300      	movs	r3, #0
 801928a:	4604      	mov	r4, r0
 801928c:	4608      	mov	r0, r1
 801928e:	4611      	mov	r1, r2
 8019290:	602b      	str	r3, [r5, #0]
 8019292:	f7e8 fefb 	bl	800208c <_kill>
 8019296:	1c43      	adds	r3, r0, #1
 8019298:	d102      	bne.n	80192a0 <_kill_r+0x1c>
 801929a:	682b      	ldr	r3, [r5, #0]
 801929c:	b103      	cbz	r3, 80192a0 <_kill_r+0x1c>
 801929e:	6023      	str	r3, [r4, #0]
 80192a0:	bd38      	pop	{r3, r4, r5, pc}
 80192a2:	bf00      	nop
 80192a4:	2000b438 	.word	0x2000b438

080192a8 <_getpid_r>:
 80192a8:	f7e8 bee8 	b.w	800207c <_getpid>

080192ac <atan2>:
 80192ac:	f000 baa8 	b.w	8019800 <__ieee754_atan2>

080192b0 <sqrt>:
 80192b0:	b538      	push	{r3, r4, r5, lr}
 80192b2:	ed2d 8b02 	vpush	{d8}
 80192b6:	ec55 4b10 	vmov	r4, r5, d0
 80192ba:	f000 f9c5 	bl	8019648 <__ieee754_sqrt>
 80192be:	4622      	mov	r2, r4
 80192c0:	462b      	mov	r3, r5
 80192c2:	4620      	mov	r0, r4
 80192c4:	4629      	mov	r1, r5
 80192c6:	eeb0 8a40 	vmov.f32	s16, s0
 80192ca:	eef0 8a60 	vmov.f32	s17, s1
 80192ce:	f7e7 fc65 	bl	8000b9c <__aeabi_dcmpun>
 80192d2:	b990      	cbnz	r0, 80192fa <sqrt+0x4a>
 80192d4:	2200      	movs	r2, #0
 80192d6:	2300      	movs	r3, #0
 80192d8:	4620      	mov	r0, r4
 80192da:	4629      	mov	r1, r5
 80192dc:	f7e7 fc36 	bl	8000b4c <__aeabi_dcmplt>
 80192e0:	b158      	cbz	r0, 80192fa <sqrt+0x4a>
 80192e2:	f7ff f96d 	bl	80185c0 <__errno>
 80192e6:	2321      	movs	r3, #33	@ 0x21
 80192e8:	6003      	str	r3, [r0, #0]
 80192ea:	2200      	movs	r2, #0
 80192ec:	2300      	movs	r3, #0
 80192ee:	4610      	mov	r0, r2
 80192f0:	4619      	mov	r1, r3
 80192f2:	f7e7 fae3 	bl	80008bc <__aeabi_ddiv>
 80192f6:	ec41 0b18 	vmov	d8, r0, r1
 80192fa:	eeb0 0a48 	vmov.f32	s0, s16
 80192fe:	eef0 0a68 	vmov.f32	s1, s17
 8019302:	ecbd 8b02 	vpop	{d8}
 8019306:	bd38      	pop	{r3, r4, r5, pc}

08019308 <atan>:
 8019308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801930c:	ec55 4b10 	vmov	r4, r5, d0
 8019310:	4bbf      	ldr	r3, [pc, #764]	@ (8019610 <atan+0x308>)
 8019312:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8019316:	429e      	cmp	r6, r3
 8019318:	46ab      	mov	fp, r5
 801931a:	d918      	bls.n	801934e <atan+0x46>
 801931c:	4bbd      	ldr	r3, [pc, #756]	@ (8019614 <atan+0x30c>)
 801931e:	429e      	cmp	r6, r3
 8019320:	d801      	bhi.n	8019326 <atan+0x1e>
 8019322:	d109      	bne.n	8019338 <atan+0x30>
 8019324:	b144      	cbz	r4, 8019338 <atan+0x30>
 8019326:	4622      	mov	r2, r4
 8019328:	462b      	mov	r3, r5
 801932a:	4620      	mov	r0, r4
 801932c:	4629      	mov	r1, r5
 801932e:	f7e6 ffe5 	bl	80002fc <__adddf3>
 8019332:	4604      	mov	r4, r0
 8019334:	460d      	mov	r5, r1
 8019336:	e006      	b.n	8019346 <atan+0x3e>
 8019338:	f1bb 0f00 	cmp.w	fp, #0
 801933c:	f340 812b 	ble.w	8019596 <atan+0x28e>
 8019340:	a597      	add	r5, pc, #604	@ (adr r5, 80195a0 <atan+0x298>)
 8019342:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019346:	ec45 4b10 	vmov	d0, r4, r5
 801934a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801934e:	4bb2      	ldr	r3, [pc, #712]	@ (8019618 <atan+0x310>)
 8019350:	429e      	cmp	r6, r3
 8019352:	d813      	bhi.n	801937c <atan+0x74>
 8019354:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8019358:	429e      	cmp	r6, r3
 801935a:	d80c      	bhi.n	8019376 <atan+0x6e>
 801935c:	a392      	add	r3, pc, #584	@ (adr r3, 80195a8 <atan+0x2a0>)
 801935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019362:	4620      	mov	r0, r4
 8019364:	4629      	mov	r1, r5
 8019366:	f7e6 ffc9 	bl	80002fc <__adddf3>
 801936a:	4bac      	ldr	r3, [pc, #688]	@ (801961c <atan+0x314>)
 801936c:	2200      	movs	r2, #0
 801936e:	f7e7 fc0b 	bl	8000b88 <__aeabi_dcmpgt>
 8019372:	2800      	cmp	r0, #0
 8019374:	d1e7      	bne.n	8019346 <atan+0x3e>
 8019376:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801937a:	e029      	b.n	80193d0 <atan+0xc8>
 801937c:	f000 f95c 	bl	8019638 <fabs>
 8019380:	4ba7      	ldr	r3, [pc, #668]	@ (8019620 <atan+0x318>)
 8019382:	429e      	cmp	r6, r3
 8019384:	ec55 4b10 	vmov	r4, r5, d0
 8019388:	f200 80bc 	bhi.w	8019504 <atan+0x1fc>
 801938c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8019390:	429e      	cmp	r6, r3
 8019392:	f200 809e 	bhi.w	80194d2 <atan+0x1ca>
 8019396:	4622      	mov	r2, r4
 8019398:	462b      	mov	r3, r5
 801939a:	4620      	mov	r0, r4
 801939c:	4629      	mov	r1, r5
 801939e:	f7e6 ffad 	bl	80002fc <__adddf3>
 80193a2:	4b9e      	ldr	r3, [pc, #632]	@ (801961c <atan+0x314>)
 80193a4:	2200      	movs	r2, #0
 80193a6:	f7e6 ffa7 	bl	80002f8 <__aeabi_dsub>
 80193aa:	2200      	movs	r2, #0
 80193ac:	4606      	mov	r6, r0
 80193ae:	460f      	mov	r7, r1
 80193b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80193b4:	4620      	mov	r0, r4
 80193b6:	4629      	mov	r1, r5
 80193b8:	f7e6 ffa0 	bl	80002fc <__adddf3>
 80193bc:	4602      	mov	r2, r0
 80193be:	460b      	mov	r3, r1
 80193c0:	4630      	mov	r0, r6
 80193c2:	4639      	mov	r1, r7
 80193c4:	f7e7 fa7a 	bl	80008bc <__aeabi_ddiv>
 80193c8:	f04f 0a00 	mov.w	sl, #0
 80193cc:	4604      	mov	r4, r0
 80193ce:	460d      	mov	r5, r1
 80193d0:	4622      	mov	r2, r4
 80193d2:	462b      	mov	r3, r5
 80193d4:	4620      	mov	r0, r4
 80193d6:	4629      	mov	r1, r5
 80193d8:	f7e7 f946 	bl	8000668 <__aeabi_dmul>
 80193dc:	4602      	mov	r2, r0
 80193de:	460b      	mov	r3, r1
 80193e0:	4680      	mov	r8, r0
 80193e2:	4689      	mov	r9, r1
 80193e4:	f7e7 f940 	bl	8000668 <__aeabi_dmul>
 80193e8:	a371      	add	r3, pc, #452	@ (adr r3, 80195b0 <atan+0x2a8>)
 80193ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193ee:	4606      	mov	r6, r0
 80193f0:	460f      	mov	r7, r1
 80193f2:	f7e7 f939 	bl	8000668 <__aeabi_dmul>
 80193f6:	a370      	add	r3, pc, #448	@ (adr r3, 80195b8 <atan+0x2b0>)
 80193f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193fc:	f7e6 ff7e 	bl	80002fc <__adddf3>
 8019400:	4632      	mov	r2, r6
 8019402:	463b      	mov	r3, r7
 8019404:	f7e7 f930 	bl	8000668 <__aeabi_dmul>
 8019408:	a36d      	add	r3, pc, #436	@ (adr r3, 80195c0 <atan+0x2b8>)
 801940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801940e:	f7e6 ff75 	bl	80002fc <__adddf3>
 8019412:	4632      	mov	r2, r6
 8019414:	463b      	mov	r3, r7
 8019416:	f7e7 f927 	bl	8000668 <__aeabi_dmul>
 801941a:	a36b      	add	r3, pc, #428	@ (adr r3, 80195c8 <atan+0x2c0>)
 801941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019420:	f7e6 ff6c 	bl	80002fc <__adddf3>
 8019424:	4632      	mov	r2, r6
 8019426:	463b      	mov	r3, r7
 8019428:	f7e7 f91e 	bl	8000668 <__aeabi_dmul>
 801942c:	a368      	add	r3, pc, #416	@ (adr r3, 80195d0 <atan+0x2c8>)
 801942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019432:	f7e6 ff63 	bl	80002fc <__adddf3>
 8019436:	4632      	mov	r2, r6
 8019438:	463b      	mov	r3, r7
 801943a:	f7e7 f915 	bl	8000668 <__aeabi_dmul>
 801943e:	a366      	add	r3, pc, #408	@ (adr r3, 80195d8 <atan+0x2d0>)
 8019440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019444:	f7e6 ff5a 	bl	80002fc <__adddf3>
 8019448:	4642      	mov	r2, r8
 801944a:	464b      	mov	r3, r9
 801944c:	f7e7 f90c 	bl	8000668 <__aeabi_dmul>
 8019450:	a363      	add	r3, pc, #396	@ (adr r3, 80195e0 <atan+0x2d8>)
 8019452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019456:	4680      	mov	r8, r0
 8019458:	4689      	mov	r9, r1
 801945a:	4630      	mov	r0, r6
 801945c:	4639      	mov	r1, r7
 801945e:	f7e7 f903 	bl	8000668 <__aeabi_dmul>
 8019462:	a361      	add	r3, pc, #388	@ (adr r3, 80195e8 <atan+0x2e0>)
 8019464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019468:	f7e6 ff46 	bl	80002f8 <__aeabi_dsub>
 801946c:	4632      	mov	r2, r6
 801946e:	463b      	mov	r3, r7
 8019470:	f7e7 f8fa 	bl	8000668 <__aeabi_dmul>
 8019474:	a35e      	add	r3, pc, #376	@ (adr r3, 80195f0 <atan+0x2e8>)
 8019476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801947a:	f7e6 ff3d 	bl	80002f8 <__aeabi_dsub>
 801947e:	4632      	mov	r2, r6
 8019480:	463b      	mov	r3, r7
 8019482:	f7e7 f8f1 	bl	8000668 <__aeabi_dmul>
 8019486:	a35c      	add	r3, pc, #368	@ (adr r3, 80195f8 <atan+0x2f0>)
 8019488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801948c:	f7e6 ff34 	bl	80002f8 <__aeabi_dsub>
 8019490:	4632      	mov	r2, r6
 8019492:	463b      	mov	r3, r7
 8019494:	f7e7 f8e8 	bl	8000668 <__aeabi_dmul>
 8019498:	a359      	add	r3, pc, #356	@ (adr r3, 8019600 <atan+0x2f8>)
 801949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801949e:	f7e6 ff2b 	bl	80002f8 <__aeabi_dsub>
 80194a2:	4632      	mov	r2, r6
 80194a4:	463b      	mov	r3, r7
 80194a6:	f7e7 f8df 	bl	8000668 <__aeabi_dmul>
 80194aa:	4602      	mov	r2, r0
 80194ac:	460b      	mov	r3, r1
 80194ae:	4640      	mov	r0, r8
 80194b0:	4649      	mov	r1, r9
 80194b2:	f7e6 ff23 	bl	80002fc <__adddf3>
 80194b6:	4622      	mov	r2, r4
 80194b8:	462b      	mov	r3, r5
 80194ba:	f7e7 f8d5 	bl	8000668 <__aeabi_dmul>
 80194be:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 80194c2:	4602      	mov	r2, r0
 80194c4:	460b      	mov	r3, r1
 80194c6:	d148      	bne.n	801955a <atan+0x252>
 80194c8:	4620      	mov	r0, r4
 80194ca:	4629      	mov	r1, r5
 80194cc:	f7e6 ff14 	bl	80002f8 <__aeabi_dsub>
 80194d0:	e72f      	b.n	8019332 <atan+0x2a>
 80194d2:	4b52      	ldr	r3, [pc, #328]	@ (801961c <atan+0x314>)
 80194d4:	2200      	movs	r2, #0
 80194d6:	4620      	mov	r0, r4
 80194d8:	4629      	mov	r1, r5
 80194da:	f7e6 ff0d 	bl	80002f8 <__aeabi_dsub>
 80194de:	4b4f      	ldr	r3, [pc, #316]	@ (801961c <atan+0x314>)
 80194e0:	4606      	mov	r6, r0
 80194e2:	460f      	mov	r7, r1
 80194e4:	2200      	movs	r2, #0
 80194e6:	4620      	mov	r0, r4
 80194e8:	4629      	mov	r1, r5
 80194ea:	f7e6 ff07 	bl	80002fc <__adddf3>
 80194ee:	4602      	mov	r2, r0
 80194f0:	460b      	mov	r3, r1
 80194f2:	4630      	mov	r0, r6
 80194f4:	4639      	mov	r1, r7
 80194f6:	f7e7 f9e1 	bl	80008bc <__aeabi_ddiv>
 80194fa:	f04f 0a01 	mov.w	sl, #1
 80194fe:	4604      	mov	r4, r0
 8019500:	460d      	mov	r5, r1
 8019502:	e765      	b.n	80193d0 <atan+0xc8>
 8019504:	4b47      	ldr	r3, [pc, #284]	@ (8019624 <atan+0x31c>)
 8019506:	429e      	cmp	r6, r3
 8019508:	d21c      	bcs.n	8019544 <atan+0x23c>
 801950a:	4b47      	ldr	r3, [pc, #284]	@ (8019628 <atan+0x320>)
 801950c:	2200      	movs	r2, #0
 801950e:	4620      	mov	r0, r4
 8019510:	4629      	mov	r1, r5
 8019512:	f7e6 fef1 	bl	80002f8 <__aeabi_dsub>
 8019516:	4b44      	ldr	r3, [pc, #272]	@ (8019628 <atan+0x320>)
 8019518:	4606      	mov	r6, r0
 801951a:	460f      	mov	r7, r1
 801951c:	2200      	movs	r2, #0
 801951e:	4620      	mov	r0, r4
 8019520:	4629      	mov	r1, r5
 8019522:	f7e7 f8a1 	bl	8000668 <__aeabi_dmul>
 8019526:	4b3d      	ldr	r3, [pc, #244]	@ (801961c <atan+0x314>)
 8019528:	2200      	movs	r2, #0
 801952a:	f7e6 fee7 	bl	80002fc <__adddf3>
 801952e:	4602      	mov	r2, r0
 8019530:	460b      	mov	r3, r1
 8019532:	4630      	mov	r0, r6
 8019534:	4639      	mov	r1, r7
 8019536:	f7e7 f9c1 	bl	80008bc <__aeabi_ddiv>
 801953a:	f04f 0a02 	mov.w	sl, #2
 801953e:	4604      	mov	r4, r0
 8019540:	460d      	mov	r5, r1
 8019542:	e745      	b.n	80193d0 <atan+0xc8>
 8019544:	4622      	mov	r2, r4
 8019546:	462b      	mov	r3, r5
 8019548:	4938      	ldr	r1, [pc, #224]	@ (801962c <atan+0x324>)
 801954a:	2000      	movs	r0, #0
 801954c:	f7e7 f9b6 	bl	80008bc <__aeabi_ddiv>
 8019550:	f04f 0a03 	mov.w	sl, #3
 8019554:	4604      	mov	r4, r0
 8019556:	460d      	mov	r5, r1
 8019558:	e73a      	b.n	80193d0 <atan+0xc8>
 801955a:	4b35      	ldr	r3, [pc, #212]	@ (8019630 <atan+0x328>)
 801955c:	4e35      	ldr	r6, [pc, #212]	@ (8019634 <atan+0x32c>)
 801955e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019566:	f7e6 fec7 	bl	80002f8 <__aeabi_dsub>
 801956a:	4622      	mov	r2, r4
 801956c:	462b      	mov	r3, r5
 801956e:	f7e6 fec3 	bl	80002f8 <__aeabi_dsub>
 8019572:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8019576:	4602      	mov	r2, r0
 8019578:	460b      	mov	r3, r1
 801957a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801957e:	f7e6 febb 	bl	80002f8 <__aeabi_dsub>
 8019582:	f1bb 0f00 	cmp.w	fp, #0
 8019586:	4604      	mov	r4, r0
 8019588:	460d      	mov	r5, r1
 801958a:	f6bf aedc 	bge.w	8019346 <atan+0x3e>
 801958e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019592:	461d      	mov	r5, r3
 8019594:	e6d7      	b.n	8019346 <atan+0x3e>
 8019596:	a51c      	add	r5, pc, #112	@ (adr r5, 8019608 <atan+0x300>)
 8019598:	e9d5 4500 	ldrd	r4, r5, [r5]
 801959c:	e6d3      	b.n	8019346 <atan+0x3e>
 801959e:	bf00      	nop
 80195a0:	54442d18 	.word	0x54442d18
 80195a4:	3ff921fb 	.word	0x3ff921fb
 80195a8:	8800759c 	.word	0x8800759c
 80195ac:	7e37e43c 	.word	0x7e37e43c
 80195b0:	e322da11 	.word	0xe322da11
 80195b4:	3f90ad3a 	.word	0x3f90ad3a
 80195b8:	24760deb 	.word	0x24760deb
 80195bc:	3fa97b4b 	.word	0x3fa97b4b
 80195c0:	a0d03d51 	.word	0xa0d03d51
 80195c4:	3fb10d66 	.word	0x3fb10d66
 80195c8:	c54c206e 	.word	0xc54c206e
 80195cc:	3fb745cd 	.word	0x3fb745cd
 80195d0:	920083ff 	.word	0x920083ff
 80195d4:	3fc24924 	.word	0x3fc24924
 80195d8:	5555550d 	.word	0x5555550d
 80195dc:	3fd55555 	.word	0x3fd55555
 80195e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80195e4:	bfa2b444 	.word	0xbfa2b444
 80195e8:	52defd9a 	.word	0x52defd9a
 80195ec:	3fadde2d 	.word	0x3fadde2d
 80195f0:	af749a6d 	.word	0xaf749a6d
 80195f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80195f8:	fe231671 	.word	0xfe231671
 80195fc:	3fbc71c6 	.word	0x3fbc71c6
 8019600:	9998ebc4 	.word	0x9998ebc4
 8019604:	3fc99999 	.word	0x3fc99999
 8019608:	54442d18 	.word	0x54442d18
 801960c:	bff921fb 	.word	0xbff921fb
 8019610:	440fffff 	.word	0x440fffff
 8019614:	7ff00000 	.word	0x7ff00000
 8019618:	3fdbffff 	.word	0x3fdbffff
 801961c:	3ff00000 	.word	0x3ff00000
 8019620:	3ff2ffff 	.word	0x3ff2ffff
 8019624:	40038000 	.word	0x40038000
 8019628:	3ff80000 	.word	0x3ff80000
 801962c:	bff00000 	.word	0xbff00000
 8019630:	0801a9d8 	.word	0x0801a9d8
 8019634:	0801a9f8 	.word	0x0801a9f8

08019638 <fabs>:
 8019638:	ec51 0b10 	vmov	r0, r1, d0
 801963c:	4602      	mov	r2, r0
 801963e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019642:	ec43 2b10 	vmov	d0, r2, r3
 8019646:	4770      	bx	lr

08019648 <__ieee754_sqrt>:
 8019648:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801964c:	4a68      	ldr	r2, [pc, #416]	@ (80197f0 <__ieee754_sqrt+0x1a8>)
 801964e:	ec55 4b10 	vmov	r4, r5, d0
 8019652:	43aa      	bics	r2, r5
 8019654:	462b      	mov	r3, r5
 8019656:	4621      	mov	r1, r4
 8019658:	d110      	bne.n	801967c <__ieee754_sqrt+0x34>
 801965a:	4622      	mov	r2, r4
 801965c:	4620      	mov	r0, r4
 801965e:	4629      	mov	r1, r5
 8019660:	f7e7 f802 	bl	8000668 <__aeabi_dmul>
 8019664:	4602      	mov	r2, r0
 8019666:	460b      	mov	r3, r1
 8019668:	4620      	mov	r0, r4
 801966a:	4629      	mov	r1, r5
 801966c:	f7e6 fe46 	bl	80002fc <__adddf3>
 8019670:	4604      	mov	r4, r0
 8019672:	460d      	mov	r5, r1
 8019674:	ec45 4b10 	vmov	d0, r4, r5
 8019678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801967c:	2d00      	cmp	r5, #0
 801967e:	dc0e      	bgt.n	801969e <__ieee754_sqrt+0x56>
 8019680:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8019684:	4322      	orrs	r2, r4
 8019686:	d0f5      	beq.n	8019674 <__ieee754_sqrt+0x2c>
 8019688:	b19d      	cbz	r5, 80196b2 <__ieee754_sqrt+0x6a>
 801968a:	4622      	mov	r2, r4
 801968c:	4620      	mov	r0, r4
 801968e:	4629      	mov	r1, r5
 8019690:	f7e6 fe32 	bl	80002f8 <__aeabi_dsub>
 8019694:	4602      	mov	r2, r0
 8019696:	460b      	mov	r3, r1
 8019698:	f7e7 f910 	bl	80008bc <__aeabi_ddiv>
 801969c:	e7e8      	b.n	8019670 <__ieee754_sqrt+0x28>
 801969e:	152a      	asrs	r2, r5, #20
 80196a0:	d115      	bne.n	80196ce <__ieee754_sqrt+0x86>
 80196a2:	2000      	movs	r0, #0
 80196a4:	e009      	b.n	80196ba <__ieee754_sqrt+0x72>
 80196a6:	0acb      	lsrs	r3, r1, #11
 80196a8:	3a15      	subs	r2, #21
 80196aa:	0549      	lsls	r1, r1, #21
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d0fa      	beq.n	80196a6 <__ieee754_sqrt+0x5e>
 80196b0:	e7f7      	b.n	80196a2 <__ieee754_sqrt+0x5a>
 80196b2:	462a      	mov	r2, r5
 80196b4:	e7fa      	b.n	80196ac <__ieee754_sqrt+0x64>
 80196b6:	005b      	lsls	r3, r3, #1
 80196b8:	3001      	adds	r0, #1
 80196ba:	02dc      	lsls	r4, r3, #11
 80196bc:	d5fb      	bpl.n	80196b6 <__ieee754_sqrt+0x6e>
 80196be:	1e44      	subs	r4, r0, #1
 80196c0:	1b12      	subs	r2, r2, r4
 80196c2:	f1c0 0420 	rsb	r4, r0, #32
 80196c6:	fa21 f404 	lsr.w	r4, r1, r4
 80196ca:	4323      	orrs	r3, r4
 80196cc:	4081      	lsls	r1, r0
 80196ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80196d2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80196d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80196da:	07d2      	lsls	r2, r2, #31
 80196dc:	bf5c      	itt	pl
 80196de:	005b      	lslpl	r3, r3, #1
 80196e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80196e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80196e8:	bf58      	it	pl
 80196ea:	0049      	lslpl	r1, r1, #1
 80196ec:	2600      	movs	r6, #0
 80196ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80196f2:	106d      	asrs	r5, r5, #1
 80196f4:	0049      	lsls	r1, r1, #1
 80196f6:	2016      	movs	r0, #22
 80196f8:	4632      	mov	r2, r6
 80196fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80196fe:	1917      	adds	r7, r2, r4
 8019700:	429f      	cmp	r7, r3
 8019702:	bfde      	ittt	le
 8019704:	193a      	addle	r2, r7, r4
 8019706:	1bdb      	suble	r3, r3, r7
 8019708:	1936      	addle	r6, r6, r4
 801970a:	0fcf      	lsrs	r7, r1, #31
 801970c:	3801      	subs	r0, #1
 801970e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019712:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019716:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801971a:	d1f0      	bne.n	80196fe <__ieee754_sqrt+0xb6>
 801971c:	4604      	mov	r4, r0
 801971e:	2720      	movs	r7, #32
 8019720:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8019724:	429a      	cmp	r2, r3
 8019726:	eb00 0e0c 	add.w	lr, r0, ip
 801972a:	db02      	blt.n	8019732 <__ieee754_sqrt+0xea>
 801972c:	d113      	bne.n	8019756 <__ieee754_sqrt+0x10e>
 801972e:	458e      	cmp	lr, r1
 8019730:	d811      	bhi.n	8019756 <__ieee754_sqrt+0x10e>
 8019732:	f1be 0f00 	cmp.w	lr, #0
 8019736:	eb0e 000c 	add.w	r0, lr, ip
 801973a:	da42      	bge.n	80197c2 <__ieee754_sqrt+0x17a>
 801973c:	2800      	cmp	r0, #0
 801973e:	db40      	blt.n	80197c2 <__ieee754_sqrt+0x17a>
 8019740:	f102 0801 	add.w	r8, r2, #1
 8019744:	1a9b      	subs	r3, r3, r2
 8019746:	458e      	cmp	lr, r1
 8019748:	bf88      	it	hi
 801974a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801974e:	eba1 010e 	sub.w	r1, r1, lr
 8019752:	4464      	add	r4, ip
 8019754:	4642      	mov	r2, r8
 8019756:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801975a:	3f01      	subs	r7, #1
 801975c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8019760:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019764:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8019768:	d1dc      	bne.n	8019724 <__ieee754_sqrt+0xdc>
 801976a:	4319      	orrs	r1, r3
 801976c:	d01b      	beq.n	80197a6 <__ieee754_sqrt+0x15e>
 801976e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80197f4 <__ieee754_sqrt+0x1ac>
 8019772:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80197f8 <__ieee754_sqrt+0x1b0>
 8019776:	e9da 0100 	ldrd	r0, r1, [sl]
 801977a:	e9db 2300 	ldrd	r2, r3, [fp]
 801977e:	f7e6 fdbb 	bl	80002f8 <__aeabi_dsub>
 8019782:	e9da 8900 	ldrd	r8, r9, [sl]
 8019786:	4602      	mov	r2, r0
 8019788:	460b      	mov	r3, r1
 801978a:	4640      	mov	r0, r8
 801978c:	4649      	mov	r1, r9
 801978e:	f7e7 f9e7 	bl	8000b60 <__aeabi_dcmple>
 8019792:	b140      	cbz	r0, 80197a6 <__ieee754_sqrt+0x15e>
 8019794:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8019798:	e9da 0100 	ldrd	r0, r1, [sl]
 801979c:	e9db 2300 	ldrd	r2, r3, [fp]
 80197a0:	d111      	bne.n	80197c6 <__ieee754_sqrt+0x17e>
 80197a2:	3601      	adds	r6, #1
 80197a4:	463c      	mov	r4, r7
 80197a6:	1072      	asrs	r2, r6, #1
 80197a8:	0863      	lsrs	r3, r4, #1
 80197aa:	07f1      	lsls	r1, r6, #31
 80197ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80197b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80197b4:	bf48      	it	mi
 80197b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80197ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80197be:	4618      	mov	r0, r3
 80197c0:	e756      	b.n	8019670 <__ieee754_sqrt+0x28>
 80197c2:	4690      	mov	r8, r2
 80197c4:	e7be      	b.n	8019744 <__ieee754_sqrt+0xfc>
 80197c6:	f7e6 fd99 	bl	80002fc <__adddf3>
 80197ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80197ce:	4602      	mov	r2, r0
 80197d0:	460b      	mov	r3, r1
 80197d2:	4640      	mov	r0, r8
 80197d4:	4649      	mov	r1, r9
 80197d6:	f7e7 f9b9 	bl	8000b4c <__aeabi_dcmplt>
 80197da:	b120      	cbz	r0, 80197e6 <__ieee754_sqrt+0x19e>
 80197dc:	1ca0      	adds	r0, r4, #2
 80197de:	bf08      	it	eq
 80197e0:	3601      	addeq	r6, #1
 80197e2:	3402      	adds	r4, #2
 80197e4:	e7df      	b.n	80197a6 <__ieee754_sqrt+0x15e>
 80197e6:	1c63      	adds	r3, r4, #1
 80197e8:	f023 0401 	bic.w	r4, r3, #1
 80197ec:	e7db      	b.n	80197a6 <__ieee754_sqrt+0x15e>
 80197ee:	bf00      	nop
 80197f0:	7ff00000 	.word	0x7ff00000
 80197f4:	20000678 	.word	0x20000678
 80197f8:	20000670 	.word	0x20000670
 80197fc:	00000000 	.word	0x00000000

08019800 <__ieee754_atan2>:
 8019800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019804:	ec57 6b11 	vmov	r6, r7, d1
 8019808:	4273      	negs	r3, r6
 801980a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8019988 <__ieee754_atan2+0x188>
 801980e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8019812:	4333      	orrs	r3, r6
 8019814:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019818:	4543      	cmp	r3, r8
 801981a:	ec51 0b10 	vmov	r0, r1, d0
 801981e:	4635      	mov	r5, r6
 8019820:	d809      	bhi.n	8019836 <__ieee754_atan2+0x36>
 8019822:	4244      	negs	r4, r0
 8019824:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019828:	4304      	orrs	r4, r0
 801982a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801982e:	4544      	cmp	r4, r8
 8019830:	468e      	mov	lr, r1
 8019832:	4681      	mov	r9, r0
 8019834:	d907      	bls.n	8019846 <__ieee754_atan2+0x46>
 8019836:	4632      	mov	r2, r6
 8019838:	463b      	mov	r3, r7
 801983a:	f7e6 fd5f 	bl	80002fc <__adddf3>
 801983e:	ec41 0b10 	vmov	d0, r0, r1
 8019842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019846:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801984a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801984e:	4334      	orrs	r4, r6
 8019850:	d103      	bne.n	801985a <__ieee754_atan2+0x5a>
 8019852:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019856:	f7ff bd57 	b.w	8019308 <atan>
 801985a:	17bc      	asrs	r4, r7, #30
 801985c:	f004 0402 	and.w	r4, r4, #2
 8019860:	ea53 0909 	orrs.w	r9, r3, r9
 8019864:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019868:	d107      	bne.n	801987a <__ieee754_atan2+0x7a>
 801986a:	2c02      	cmp	r4, #2
 801986c:	d05f      	beq.n	801992e <__ieee754_atan2+0x12e>
 801986e:	2c03      	cmp	r4, #3
 8019870:	d1e5      	bne.n	801983e <__ieee754_atan2+0x3e>
 8019872:	a141      	add	r1, pc, #260	@ (adr r1, 8019978 <__ieee754_atan2+0x178>)
 8019874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019878:	e7e1      	b.n	801983e <__ieee754_atan2+0x3e>
 801987a:	4315      	orrs	r5, r2
 801987c:	d106      	bne.n	801988c <__ieee754_atan2+0x8c>
 801987e:	f1be 0f00 	cmp.w	lr, #0
 8019882:	da5f      	bge.n	8019944 <__ieee754_atan2+0x144>
 8019884:	a13e      	add	r1, pc, #248	@ (adr r1, 8019980 <__ieee754_atan2+0x180>)
 8019886:	e9d1 0100 	ldrd	r0, r1, [r1]
 801988a:	e7d8      	b.n	801983e <__ieee754_atan2+0x3e>
 801988c:	4542      	cmp	r2, r8
 801988e:	d10f      	bne.n	80198b0 <__ieee754_atan2+0xb0>
 8019890:	4293      	cmp	r3, r2
 8019892:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8019896:	d107      	bne.n	80198a8 <__ieee754_atan2+0xa8>
 8019898:	2c02      	cmp	r4, #2
 801989a:	d84c      	bhi.n	8019936 <__ieee754_atan2+0x136>
 801989c:	4b34      	ldr	r3, [pc, #208]	@ (8019970 <__ieee754_atan2+0x170>)
 801989e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80198a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80198a6:	e7ca      	b.n	801983e <__ieee754_atan2+0x3e>
 80198a8:	2c02      	cmp	r4, #2
 80198aa:	d848      	bhi.n	801993e <__ieee754_atan2+0x13e>
 80198ac:	4b31      	ldr	r3, [pc, #196]	@ (8019974 <__ieee754_atan2+0x174>)
 80198ae:	e7f6      	b.n	801989e <__ieee754_atan2+0x9e>
 80198b0:	4543      	cmp	r3, r8
 80198b2:	d0e4      	beq.n	801987e <__ieee754_atan2+0x7e>
 80198b4:	1a9b      	subs	r3, r3, r2
 80198b6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80198ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80198be:	da1e      	bge.n	80198fe <__ieee754_atan2+0xfe>
 80198c0:	2f00      	cmp	r7, #0
 80198c2:	da01      	bge.n	80198c8 <__ieee754_atan2+0xc8>
 80198c4:	323c      	adds	r2, #60	@ 0x3c
 80198c6:	db1e      	blt.n	8019906 <__ieee754_atan2+0x106>
 80198c8:	4632      	mov	r2, r6
 80198ca:	463b      	mov	r3, r7
 80198cc:	f7e6 fff6 	bl	80008bc <__aeabi_ddiv>
 80198d0:	ec41 0b10 	vmov	d0, r0, r1
 80198d4:	f7ff feb0 	bl	8019638 <fabs>
 80198d8:	f7ff fd16 	bl	8019308 <atan>
 80198dc:	ec51 0b10 	vmov	r0, r1, d0
 80198e0:	2c01      	cmp	r4, #1
 80198e2:	d013      	beq.n	801990c <__ieee754_atan2+0x10c>
 80198e4:	2c02      	cmp	r4, #2
 80198e6:	d015      	beq.n	8019914 <__ieee754_atan2+0x114>
 80198e8:	2c00      	cmp	r4, #0
 80198ea:	d0a8      	beq.n	801983e <__ieee754_atan2+0x3e>
 80198ec:	a318      	add	r3, pc, #96	@ (adr r3, 8019950 <__ieee754_atan2+0x150>)
 80198ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198f2:	f7e6 fd01 	bl	80002f8 <__aeabi_dsub>
 80198f6:	a318      	add	r3, pc, #96	@ (adr r3, 8019958 <__ieee754_atan2+0x158>)
 80198f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198fc:	e014      	b.n	8019928 <__ieee754_atan2+0x128>
 80198fe:	a118      	add	r1, pc, #96	@ (adr r1, 8019960 <__ieee754_atan2+0x160>)
 8019900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019904:	e7ec      	b.n	80198e0 <__ieee754_atan2+0xe0>
 8019906:	2000      	movs	r0, #0
 8019908:	2100      	movs	r1, #0
 801990a:	e7e9      	b.n	80198e0 <__ieee754_atan2+0xe0>
 801990c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019910:	4619      	mov	r1, r3
 8019912:	e794      	b.n	801983e <__ieee754_atan2+0x3e>
 8019914:	a30e      	add	r3, pc, #56	@ (adr r3, 8019950 <__ieee754_atan2+0x150>)
 8019916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801991a:	f7e6 fced 	bl	80002f8 <__aeabi_dsub>
 801991e:	4602      	mov	r2, r0
 8019920:	460b      	mov	r3, r1
 8019922:	a10d      	add	r1, pc, #52	@ (adr r1, 8019958 <__ieee754_atan2+0x158>)
 8019924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019928:	f7e6 fce6 	bl	80002f8 <__aeabi_dsub>
 801992c:	e787      	b.n	801983e <__ieee754_atan2+0x3e>
 801992e:	a10a      	add	r1, pc, #40	@ (adr r1, 8019958 <__ieee754_atan2+0x158>)
 8019930:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019934:	e783      	b.n	801983e <__ieee754_atan2+0x3e>
 8019936:	a10c      	add	r1, pc, #48	@ (adr r1, 8019968 <__ieee754_atan2+0x168>)
 8019938:	e9d1 0100 	ldrd	r0, r1, [r1]
 801993c:	e77f      	b.n	801983e <__ieee754_atan2+0x3e>
 801993e:	2000      	movs	r0, #0
 8019940:	2100      	movs	r1, #0
 8019942:	e77c      	b.n	801983e <__ieee754_atan2+0x3e>
 8019944:	a106      	add	r1, pc, #24	@ (adr r1, 8019960 <__ieee754_atan2+0x160>)
 8019946:	e9d1 0100 	ldrd	r0, r1, [r1]
 801994a:	e778      	b.n	801983e <__ieee754_atan2+0x3e>
 801994c:	f3af 8000 	nop.w
 8019950:	33145c07 	.word	0x33145c07
 8019954:	3ca1a626 	.word	0x3ca1a626
 8019958:	54442d18 	.word	0x54442d18
 801995c:	400921fb 	.word	0x400921fb
 8019960:	54442d18 	.word	0x54442d18
 8019964:	3ff921fb 	.word	0x3ff921fb
 8019968:	54442d18 	.word	0x54442d18
 801996c:	3fe921fb 	.word	0x3fe921fb
 8019970:	0801aa30 	.word	0x0801aa30
 8019974:	0801aa18 	.word	0x0801aa18
 8019978:	54442d18 	.word	0x54442d18
 801997c:	c00921fb 	.word	0xc00921fb
 8019980:	54442d18 	.word	0x54442d18
 8019984:	bff921fb 	.word	0xbff921fb
 8019988:	7ff00000 	.word	0x7ff00000

0801998c <_init>:
 801998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801998e:	bf00      	nop
 8019990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019992:	bc08      	pop	{r3}
 8019994:	469e      	mov	lr, r3
 8019996:	4770      	bx	lr

08019998 <_fini>:
 8019998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801999a:	bf00      	nop
 801999c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801999e:	bc08      	pop	{r3}
 80199a0:	469e      	mov	lr, r3
 80199a2:	4770      	bx	lr
